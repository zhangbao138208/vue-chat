// WARNING! This file contains some subset of JS that is not supported by type inference.
// You can try checking 'Transpile to ES5' checkbox if you want the types to be inferred
'use strict';
!function (root, factory) {
  if ("object" == typeof exports && "object" == typeof module) {
    module.exports = factory(require("../util/base64.min"), require("../util/longUtil"), require("../../config.js"), require("../client/connectionStatus"), require("../client/errorCode"), require("../client/messageConfig"), require("../client/userSettingScope"), require("../client/wfcEvent"), require("../messages/markUnreadMessageContent"), require("../messages/mediaMessageContent"), require("../messages/message"), require("../messages/messageContentType"), require("../messages/messageStatus"),
      require("../messages/notification/recallMessageNotification"), require("../messages/persistFlag"), require("../model/NullChannelInfo"), require("../model/channelInfo"), require("../model/chatRoomInfo"), require("../model/chatRoomMemberInfo"), require("../model/conversation"), require("../model/conversationInfo"), require("../model/conversationType"), require("../model/fileRecord"), require("../model/friend"), require("../model/friendRequest"), require("../model/groupInfo"), require("../model/groupMember"),
      require("../model/groupMemberType"), require("../model/internal/friendInfo"), require("../model/nullGroupInfo"), require("../model/nullUserInfo"), require("../model/readEntry"), require("../model/unreadCount"), require("../model/userInfo"), require("../model/userSettingEntry"), require("../util/base64.min"));
  } else {
    if ("function" == typeof define && define.amd) {
      define(["../../wfc/util/base64.min", "../util/longUtil", "../../config.js", "../client/connectionStatus", "../client/errorCode", "../client/messageConfig", "../client/userSettingScope", "../client/wfcEvent", "../messages/markUnreadMessageContent", "../messages/mediaMessageContent", "../messages/message", "../messages/messageContentType", "../messages/messageStatus", "../messages/notification/recallMessageNotification", "../messages/persistFlag", "../model/NullChannelInfo", "../model/channelInfo",
        "../model/chatRoomInfo", "../model/chatRoomMemberInfo", "../model/conversation", "../model/conversationInfo", "../model/conversationType", "../model/fileRecord", "../model/friend", "../model/friendRequest", "../model/groupInfo", "../model/groupMember", "../model/groupMemberType", "../model/internal/friendInfo", "../model/nullGroupInfo", "../model/nullUserInfo", "../model/readEntry", "../model/unreadCount", "../model/userInfo", "../model/userSettingEntry", "../util/base64.min"], factory);
    } else {
      var jobInfoUpdate = "object" == typeof exports ? factory(require("../util/base64.min"), require("../util/longUtil"), require("../../config.js"), require("../client/connectionStatus"), require("../client/errorCode"), require("../client/messageConfig"), require("../client/userSettingScope"), require("../client/wfcEvent"), require("../messages/markUnreadMessageContent"), require("../messages/mediaMessageContent"), require("../messages/message"), require("../messages/messageContentType"),
        require("../messages/messageStatus"), require("../messages/notification/recallMessageNotification"), require("../messages/persistFlag"), require("../model/NullChannelInfo"), require("../model/channelInfo"), require("../model/chatRoomInfo"), require("../model/chatRoomMemberInfo"), require("../model/conversation"), require("../model/conversationInfo"), require("../model/conversationType"), require("../model/fileRecord"), require("../model/friend"), require("../model/friendRequest"), require("../model/groupInfo"),
        require("../model/groupMember"), require("../model/groupMemberType"), require("../model/internal/friendInfo"), require("../model/nullGroupInfo"), require("../model/nullUserInfo"), require("../model/readEntry"), require("../model/unreadCount"), require("../model/userInfo"), require("../model/userSettingEntry"), require("../util/base64.min")) : factory(root["../../wfc/util/base64.min"], root["../util/longUtil"], root["../../config.js"], root["../client/connectionStatus"], root["../client/errorCode"],
          root["../client/messageConfig"], root["../client/userSettingScope"], root["../client/wfcEvent"], root["../messages/markUnreadMessageContent"], root["../messages/mediaMessageContent"], root["../messages/message"], root["../messages/messageContentType"], root["../messages/messageStatus"], root["../messages/notification/recallMessageNotification"], root["../messages/persistFlag"], root["../model/NullChannelInfo"], root["../model/channelInfo"], root["../model/chatRoomInfo"], root["../model/chatRoomMemberInfo"],
          root["../model/conversation"], root["../model/conversationInfo"], root["../model/conversationType"], root["../model/fileRecord"], root["../model/friend"], root["../model/friendRequest"], root["../model/groupInfo"], root["../model/groupMember"], root["../model/groupMemberType"], root["../model/internal/friendInfo"], root["../model/nullGroupInfo"], root["../model/nullUserInfo"], root["../model/readEntry"], root["../model/unreadCount"], root["../model/userInfo"], root["../model/userSettingEntry"],
          root["../util/base64.min"]);
      var i;
      for (i in jobInfoUpdate) {
        ("object" == typeof exports ? exports : root)[i] = jobInfoUpdate[i];
      }
    }
  }
}(window, function (__WEBPACK_EXTERNAL_MODULE__wfc_util_base64_min__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__util_longUtil__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__config_js__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__client_connectionStatus__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__client_errorCode__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__client_messageConfig__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__client_userSettingScope__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__client_wfcEvent__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__messages_markUnreadMessageContent__$jscomp$0,
  __WEBPACK_EXTERNAL_MODULE__messages_mediaMessageContent__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__messages_message__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__messages_messageContentType__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__messages_messageStatus__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__messages_notification_recallMessageNotification__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__messages_persistFlag__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_NullChannelInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_channelInfo__$jscomp$0,
  __WEBPACK_EXTERNAL_MODULE__model_chatRoomInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_chatRoomMemberInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_conversation__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_conversationInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_conversationType__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_fileRecord__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_friend__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_friendRequest__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_groupInfo__$jscomp$0,
  __WEBPACK_EXTERNAL_MODULE__model_groupMember__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_groupMemberType__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_internal_friendInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_nullGroupInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_nullUserInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_readEntry__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_unreadCount__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_userInfo__$jscomp$0, __WEBPACK_EXTERNAL_MODULE__model_userSettingEntry__$jscomp$0,
  __WEBPACK_EXTERNAL_MODULE__util_base64_min__$jscomp$0) {
  return function (e) {
    function t(i) {
      if (n[i]) {
        return n[i].exports;
      }
      var module = n[i] = {
        i: i,
        l: false,
        exports: {}
      };
      return e[i].call(module.exports, module, module.exports, t), module.l = true, module.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.d = function (i, name, n) {
      if (!t.o(i, name)) {
        Object.defineProperty(i, name, {
          enumerable: true,
          get: n
        });
      }
    }, t.r = function (value) {
      if ("undefined" != typeof Symbol && Symbol.toStringTag) {
        Object.defineProperty(value, Symbol.toStringTag, {
          value: "Module"
        });
      }
      Object.defineProperty(value, "__esModule", {
        value: true
      });
    }, t.t = function (value, name) {
      if (1 & name && (value = t(value)), 8 & name) {
        return value;
      }
      if (4 & name && "object" == typeof value && value && value.__esModule) {
        return value;
      }
      var d = Object.create(null);
      if (t.r(d), Object.defineProperty(d, "default", {
        enumerable: true,
        value: value
      }), 2 & name && "string" != typeof value) {
        var s;
        for (s in value) {
          t.d(d, s, function (subel) {
            return value[subel];
          }.bind(null, s));
        }
      }
      return d;
    }, t.n = function (obj) {
      var n = obj && obj.__esModule ? function () {
        return obj.default;
      } : function () {
        return obj;
      };
      return t.d(n, "a", n), n;
    }, t.o = function (value, name) {
      return Object.prototype.hasOwnProperty.call(value, name);
    }, t.p = "", t(t.s = "./wfc/internal/wfcImpl.js");
  }({
    "../../config.js": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__config_js__$jscomp$0;
    },
    "../../wfc/util/base64.min": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__wfc_util_base64_min__$jscomp$0;
    },
    "../client/connectionStatus": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__client_connectionStatus__$jscomp$0;
    },
    "../client/errorCode": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__client_errorCode__$jscomp$0;
    },
    "../client/messageConfig": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__client_messageConfig__$jscomp$0;
    },
    "../client/userSettingScope": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__client_userSettingScope__$jscomp$0;
    },
    "../client/wfcEvent": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__client_wfcEvent__$jscomp$0;
    },
    "../messages/markUnreadMessageContent": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_markUnreadMessageContent__$jscomp$0;
    },
    "../messages/mediaMessageContent": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_mediaMessageContent__$jscomp$0;
    },
    "../messages/message": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_message__$jscomp$0;
    },
    "../messages/messageContentType": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_messageContentType__$jscomp$0;
    },
    "../messages/messageStatus": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_messageStatus__$jscomp$0;
    },
    "../messages/notification/recallMessageNotification": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_notification_recallMessageNotification__$jscomp$0;
    },
    "../messages/persistFlag": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__messages_persistFlag__$jscomp$0;
    },
    "../model/NullChannelInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_NullChannelInfo__$jscomp$0;
    },
    "../model/channelInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_channelInfo__$jscomp$0;
    },
    "../model/chatRoomInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_chatRoomInfo__$jscomp$0;
    },
    "../model/chatRoomMemberInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_chatRoomMemberInfo__$jscomp$0;
    },
    "../model/conversation": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_conversation__$jscomp$0;
    },
    "../model/conversationInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_conversationInfo__$jscomp$0;
    },
    "../model/conversationType": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_conversationType__$jscomp$0;
    },
    "../model/fileRecord": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_fileRecord__$jscomp$0;
    },
    "../model/friend": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_friend__$jscomp$0;
    },
    "../model/friendRequest": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_friendRequest__$jscomp$0;
    },
    "../model/groupInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_groupInfo__$jscomp$0;
    },
    "../model/groupMember": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_groupMember__$jscomp$0;
    },
    "../model/groupMemberType": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_groupMemberType__$jscomp$0;
    },
    "../model/internal/friendInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_internal_friendInfo__$jscomp$0;
    },
    "../model/nullGroupInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_nullGroupInfo__$jscomp$0;
    },
    "../model/nullUserInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_nullUserInfo__$jscomp$0;
    },
    "../model/readEntry": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_readEntry__$jscomp$0;
    },
    "../model/unreadCount": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_unreadCount__$jscomp$0;
    },
    "../model/userInfo": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_userInfo__$jscomp$0;
    },
    "../model/userSettingEntry": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__model_userSettingEntry__$jscomp$0;
    },
    "../util/base64.min": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__util_base64_min__$jscomp$0;
    },
    "../util/longUtil": function (mixin, doPost) {
      mixin.exports = __WEBPACK_EXTERNAL_MODULE__util_longUtil__$jscomp$0;
    },
    "./lib/client.js": function (module, layer, $) {
      (function (global, process) {
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
        function write(client, packet, callback) {
          client.emit("packetsend", packet);
          if (!_this.writeToStream(packet, client.stream, client.options) && callback) {
            client.stream.once("drain", callback);
          } else {
            if (callback) {
              callback();
            }
          }
        }
        function exec(args) {
          if (args) {
            (0, _deepAssign2.default)(args).forEach(function (i) {
              if ("function" == typeof args[i]) {
                args[i](new Error("Connection closed"));
                delete args[i];
              }
            });
          }
        }
        function log(client, data, callback, log) {
          client.outgoingStore.put(data, function (jsonNote) {
            if (jsonNote) {
              return callback && callback(jsonNote);
            }
            log();
            write(client, data, callback);
          });
        }
        function fn() {
        }
        function Client(value, name) {
          var prop;
          var that = this;
          if (!(this instanceof Client)) {
            return new Client(value, name);
          }
          for (prop in this.options = name || {}, opts) {
            if (void 0 === this.options[prop]) {
              this.options[prop] = opts[prop];
            } else {
              this.options[prop] = name[prop];
            }
          }
          this.options.clientId = "string" == typeof name.clientId ? name.clientId : "mqttjs_" + Math.random().toString(16).substr(2, 8);
          this.options.customHandleAcks = 5 === name.protocolVersion && name.customHandleAcks ? name.customHandleAcks : function () {
            arguments[3](0);
          };
          this.streamBuilder = value;
          this.outgoingStore = name.outgoingStore || new Request;
          this.incomingStore = name.incomingStore || new Request;
          this.queueQoSZero = void 0 === name.queueQoSZero || name.queueQoSZero;
          this._resubscribeTopics = {};
          this.messageIdToTopic = {};
          this.pingTimer = null;
          this.connected = false;
          this.disconnecting = false;
          this.queue = [];
          this.connackTimer = null;
          this.reconnectTimer = null;
          this._storeProcessing = false;
          this._packetIdsDuringStoreProcessing = {};
          this.nextId = Math.max(1, Math.floor(65535 * Math.random()));
          this.outgoing = {};
          this._firstConnection = true;
          this.on("close", function () {
            this.connected = false;
            clearTimeout(this.connackTimer);
          });
          this.on("connect", function () {
            var queue = this.queue;
            !function deliver() {
              var packet;
              var data = queue.shift();
              if (data) {
                packet = data.packet;
                that._sendPacket(packet, function (event) {
                  if (data.cb) {
                    data.cb(event);
                  }
                  deliver();
                });
              }
            }();
          });
          this.on("close", function () {
            if (null !== that.pingTimer) {
              that.pingTimer.clear();
              that.pingTimer = null;
            }
          });
          events.EventEmitter.call(this);
          this._setupStream();
        }
        var _noframeworkWaypoints2 = _interopRequireDefault($("./node_modules/babel-runtime/helpers/typeof.js"));
        var _custom2 = _interopRequireDefault($("./node_modules/babel-runtime/core-js/object/create.js"));
        var _deepAssign2 = _interopRequireDefault($("./node_modules/babel-runtime/core-js/object/keys.js"));
        var events = $("./node_modules/node-libs-browser/node_modules/events/events.js");
        var Request = $("./lib/store.js");
        var _this = $("./mqtt-packet/mqtt.js");
        var Writable = $("./node_modules/readable-stream/readable-browser.js").Writable;
        var __extends = $("./node_modules/inherits/inherits_browser.js");
        var gotoNewOfflinePage = $("./node_modules/reinterval/index.js");
        var btSelect = $("./lib/validations.js");
        var parse = $("./node_modules/xtend/immutable.js");
        var setImmediate = global.setImmediate || function (value) {
          process.nextTick(value);
        };
        var opts = {
          keepalive: 60,
          reschedulePings: true,
          protocolId: "MQTT",
          protocolVersion: 4,
          reconnectPeriod: 1E3,
          connectTimeout: 3E4,
          clean: true,
          resubscribe: true
        };
        var a = {
          0: "",
          1: "Unacceptable protocol version",
          2: "Identifier rejected",
          3: "Server unavailable",
          4: "Bad username or password",
          5: "Not authorized",
          16: "No matching subscribers",
          17: "No subscription existed",
          128: "Unspecified error",
          129: "Malformed Packet",
          130: "Protocol Error",
          131: "Implementation specific error",
          132: "Unsupported Protocol Version",
          133: "Client Identifier not valid",
          134: "Bad User Name or Password",
          135: "Not authorized",
          136: "Server unavailable",
          137: "Server busy",
          138: "Banned",
          139: "Server shutting down",
          140: "Bad authentication method",
          141: "Keep Alive timeout",
          142: "Session taken over",
          143: "Topic Filter invalid",
          144: "Topic Name invalid",
          145: "Packet identifier in use",
          146: "Packet Identifier not found",
          147: "Receive Maximum exceeded",
          148: "Topic Alias invalid",
          149: "Packet too large",
          150: "Message rate too high",
          151: "Quota exceeded",
          152: "Administrative action",
          153: "Payload format invalid",
          154: "Retain not supported",
          155: "QoS not supported",
          156: "Use another server",
          157: "Server moved",
          158: "Shared Subscriptions not supported",
          159: "Connection rate exceeded",
          160: "Maximum connect time",
          161: "Subscription Identifiers not supported",
          162: "Wildcard Subscriptions not supported"
        };
        __extends(Client, events.EventEmitter);
        Client.prototype._setupStream = function () {
          function process() {
            if (u.length) {
              process.nextTick(emit);
            } else {
              var allStatementsAreSelectOnly = autoReview;
              autoReview = null;
              allStatementsAreSelectOnly();
            }
          }
          function emit() {
            var packet = u.shift();
            if (packet) {
              that._handlePacket(packet, process);
            } else {
              var _deviceDotEmit = autoReview;
              autoReview = null;
              if (_deviceDotEmit) {
                _deviceDotEmit();
              }
            }
          }
          var data;
          var that = this;
          var ws = new Writable;
          var client = _this.parser(this.options);
          var autoReview = null;
          var u = [];
          if (this._clearReconnect(), this.stream = this.streamBuilder(this), client.on("packet", function (e) {
            u.push(e);
          }), ws._write = function (type, str, data) {
            autoReview = data;
            client.parse(type);
            emit();
          }, this.stream.pipe(ws), this.stream.on("error", fn), this.stream.on("close", function () {
            that.emit("close");
          }), (data = (0, _custom2.default)(this.options)).cmd = "connect", write(this, data), client.on("error", this.emit.bind(this, "error")), this.options.properties) {
            if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {
              return this.emit("error", new Error("Packet has no Authentication Method")), this;
            }
            if (this.options.properties.authenticationMethod && this.options.authPacket && "object" === (0, _noframeworkWaypoints2.default)(this.options.authPacket)) {
              write(this, parse({
                cmd: "auth",
                reasonCode: 0
              }, this.options.authPacket));
            }
          }
          this.stream.setMaxListeners(1E3);
          clearTimeout(this.connackTimer);
          this.connackTimer = setTimeout(function () {
            that._cleanUp(true);
          }, this.options.connectTimeout);
        };
        Client.prototype._handlePacket = function (packet, done) {
          var opts = this.options;
          if (5 === opts.protocolVersion && opts.properties && opts.properties.maximumPacketSize && opts.properties.maximumPacketSize < packet.length) {
            return this.emit("error", new Error("exceeding packets size " + packet.cmd)), this.end({
              reasonCode: 149,
              properties: {
                reasonString: "Maximum packet size was exceeded"
              }
            }), this;
          }
          switch (this.emit("packetreceive", packet), packet.cmd) {
            case "publish":
              try {
                this._handlePublish(packet, done);
              } catch (logValues) {
                console.error(logValues);
              }
              break;
            case "puback":
            case "pubrec":
            case "pubcomp":
            case "suback":
            case "unsuback":
              try {
                this._handleAck(packet);
              } catch (e) {
                console.log(e);
              }
              done();
              break;
            case "pubrel":
              this._handlePubrel(packet, done);
              break;
            case "connack":
              this._handleConnack(packet);
              done();
              break;
            case "pingresp":
              this._handlePingresp(packet);
              done();
              break;
            case "disconnect":
              this._handleDisconnect(packet);
              done();
          }
        };
        Client.prototype._checkDisconnecting = function (callback) {
          return this.disconnecting && (callback ? callback(new Error("client disconnecting")) : this.emit("error", new Error("client disconnecting"))), this.disconnecting;
        };
        Client.prototype.publish = function (t, data, opts, callback) {
          var packet;
          var d = this.options;
          if ("function" == typeof opts) {
            callback = opts;
            opts = null;
          }
          if (opts = parse({
            qos: 0,
            retain: false,
            dup: false
          }, opts), this._checkDisconnecting(callback)) {
            return this;
          }
          switch (packet = {
            cmd: "publish",
            topic: t,
            payload: data,
            qos: opts.qos,
            retain: opts.retain,
            messageId: this._nextId(),
            dup: opts.dup
          }, 5 === d.protocolVersion && (packet.properties = opts.properties, (!d.properties && packet.properties && packet.properties.topicAlias || opts.properties && d.properties && (opts.properties.topicAlias && d.properties.topicAliasMaximum && opts.properties.topicAlias > d.properties.topicAliasMaximum || !d.properties.topicAliasMaximum && opts.properties.topicAlias)) && delete packet.properties.topicAlias), opts.qos) {
            case 1:
            case 2:
              this.outgoing[packet.messageId] = callback || fn;
              if (this._storeProcessing) {
                this._packetIdsDuringStoreProcessing[packet.messageId] = false;
                this._storePacket(packet, void 0, opts.cbStorePut);
              } else {
                this._sendPacket(packet, void 0, opts.cbStorePut);
              }
              break;
            default:
              if (this._storeProcessing) {
                this._storePacket(packet, callback, opts.cbStorePut);
              } else {
                this._sendPacket(packet, callback, opts.cbStorePut);
              }
          }
          return this;
        };
        Client.prototype.subscribe = function () {
          var packet;
          var vargs = new Array(arguments.length);
          var i = 0;
          for (; i < arguments.length; i++) {
            vargs[i] = arguments[i];
          }
          var msg;
          var subs = [];
          var obj = vargs.shift();
          var obj_copy = obj.resubscribe;
          var callback = vargs.pop() || fn;
          var args = vargs.pop();
          var that = this;
          var version = this.options.protocolVersion;
          if (delete obj.resubscribe, "string" == typeof obj && (obj = [obj]), "function" != typeof callback && (args = callback, callback = fn), null !== (msg = btSelect.validateTopics(obj))) {
            return setImmediate(callback, new Error("Invalid topic " + msg)), this;
          }
          if (this._checkDisconnecting(callback)) {
            return this;
          }
          var a = {
            qos: 0
          };
          if (5 === version && (a.nl = false, a.rap = false, a.rh = 0), args = parse(a, args), Array.isArray(obj) ? obj.forEach(function (topic) {
            if (!that._resubscribeTopics.hasOwnProperty(topic) || that._resubscribeTopics[topic].qos < args.qos || obj_copy) {
              var data = {
                topic: topic,
                qos: args.qos
              };
              if (5 === version) {
                data.nl = args.nl;
                data.rap = args.rap;
                data.rh = args.rh;
                data.properties = args.properties;
              }
              subs.push(data);
            }
          }) : (0, _deepAssign2.default)(obj).forEach(function (topic) {
            if (!that._resubscribeTopics.hasOwnProperty(topic) || that._resubscribeTopics[topic].qos < obj[topic].qos || obj_copy) {
              var data = {
                topic: topic,
                qos: obj[topic].qos
              };
              if (5 === version) {
                data.nl = obj[topic].nl;
                data.rap = obj[topic].rap;
                data.rh = obj[topic].rh;
                data.properties = args.properties;
              }
              subs.push(data);
            }
          }), packet = {
            cmd: "subscribe",
            subscriptions: subs,
            qos: 1,
            retain: false,
            dup: false,
            messageId: this._nextId()
          }, args.properties && (packet.properties = args.properties), subs.length) {
            if (this.options.resubscribe) {
              var self = [];
              subs.forEach(function (sub) {
                if (that.options.reconnectPeriod > 0) {
                  var node = {
                    qos: sub.qos
                  };
                  if (5 === version) {
                    node.nl = sub.nl || false;
                    node.rap = sub.rap || false;
                    node.rh = sub.rh || 0;
                    node.properties = sub.properties;
                  }
                  that._resubscribeTopics[sub.topic] = node;
                  self.push(sub.topic);
                }
              });
              that.messageIdToTopic[packet.messageId] = self;
            }
            return this.outgoing[packet.messageId] = function (identifierPositions, settings) {
              if (!identifierPositions) {
                var granted = settings.granted;
                var i = 0;
                for (; i < granted.length; i = i + 1) {
                  subs[i].qos = granted[i];
                }
              }
              callback(identifierPositions, subs);
            }, this._sendPacket(packet), this;
          }
          callback(null, []);
        };
        Client.prototype.unsubscribe = function () {
          var packet = {
            cmd: "unsubscribe",
            qos: 1,
            messageId: this._nextId()
          };
          var that = this;
          var vargs = new Array(arguments.length);
          var i = 0;
          for (; i < arguments.length; i++) {
            vargs[i] = arguments[i];
          }
          var value = vargs.shift();
          var callback = vargs.pop() || fn;
          var obj = vargs.pop();
          return "string" == typeof value && (value = [value]), "function" != typeof callback && (obj = callback, callback = fn), this._checkDisconnecting(callback) ? this : ("string" == typeof value ? packet.unsubscriptions = [value] : "object" === (void 0 === value ? "undefined" : (0, _noframeworkWaypoints2.default)(value)) && value.length && (packet.unsubscriptions = value), this.options.resubscribe && packet.unsubscriptions.forEach(function (topic) {
            delete that._resubscribeTopics[topic];
          }), "object" === (void 0 === obj ? "undefined" : (0, _noframeworkWaypoints2.default)(obj)) && obj.properties && (packet.properties = obj.properties), this.outgoing[packet.messageId] = callback, this._sendPacket(packet), this);
        };
        Client.prototype.end = function () {
          function closeStores() {
            that.disconnected = true;
            that.incomingStore.close(function () {
              that.outgoingStore.close(function () {
                if (cb) {
                  cb.apply(null, arguments);
                }
                that.emit("end");
              });
            });
            if (that._deferredReconnect) {
              that._deferredReconnect();
            }
          }
          function finish() {
            that._cleanUp(path, setImmediate.bind(null, closeStores), value);
          }
          var that = this;
          var path = arguments[0];
          var value = arguments[1];
          var cb = arguments[2];
          return null != path && "boolean" == typeof path || (cb = value || fn, value = path, path = false, "object" !== (void 0 === value ? "undefined" : (0, _noframeworkWaypoints2.default)(value)) && (cb = value, value = null, "function" != typeof cb && (cb = fn))), "object" !== (void 0 === value ? "undefined" : (0, _noframeworkWaypoints2.default)(value)) && (cb = value, value = null), cb = cb || fn, this.disconnecting ? this : (this._clearReconnect(), this.disconnecting = true, !path && (0, _deepAssign2.default)(this.outgoing).length >
            0 ? this.once("outgoingEmpty", setTimeout.bind(null, finish, 10)) : finish(), this);
        };
        Client.prototype.removeOutgoingMessage = function (mid) {
          var cb = this.outgoing[mid];
          return delete this.outgoing[mid], this.outgoingStore.del({
            messageId: mid
          }, function () {
            cb(new Error("Message removed"));
          }), this;
        };
        Client.prototype.reconnect = function (client) {
          var that = this;
          var reconnect = function () {
            if (client) {
              that.options.incomingStore = client.incomingStore;
              that.options.outgoingStore = client.outgoingStore;
            } else {
              that.options.incomingStore = null;
              that.options.outgoingStore = null;
            }
            that.incomingStore = that.options.incomingStore || new Request;
            that.outgoingStore = that.options.outgoingStore || new Request;
            that.disconnecting = false;
            that.disconnected = false;
            that._deferredReconnect = null;
            that._reconnect();
          };
          return this.disconnecting && !this.disconnected ? this._deferredReconnect = reconnect : reconnect(), this;
        };
        Client.prototype._reconnect = function () {
          this.emit("reconnect");
          this._setupStream();
        };
        Client.prototype._setupReconnect = function () {
          var that = this;
          if (!that.disconnecting && !that.reconnectTimer && that.options.reconnectPeriod > 0) {
            if (!this.reconnecting) {
              this.emit("offline");
              this.reconnecting = true;
            }
            that.reconnectTimer = setInterval(function () {
              that._reconnect();
            }, that.options.reconnectPeriod);
          }
        };
        Client.prototype._clearReconnect = function () {
          if (this.reconnectTimer) {
            clearInterval(this.reconnectTimer);
            this.reconnectTimer = null;
          }
        };
        Client.prototype._cleanUp = function (grunt, done) {
          var data = arguments[2];
          if (done && this.stream.on("close", done), grunt) {
            if (0 === this.options.reconnectPeriod && this.options.clean) {
              exec(this.outgoing);
            }
            this.stream.destroy();
          } else {
            var packet = parse({
              cmd: "disconnect"
            }, data);
            this._sendPacket(packet, setImmediate.bind(null, this.stream.end.bind(this.stream)));
          }
          if (!this.disconnecting) {
            this._clearReconnect();
            this._setupReconnect();
          }
          if (null !== this.pingTimer) {
            this.pingTimer.clear();
            this.pingTimer = null;
          }
          if (done && !this.connected) {
            this.stream.removeListener("close", done);
            done();
          }
        };
        Client.prototype._sendPacket = function (packet, cb, data) {
          if (data = data || fn, this.connected) {
            switch (this._shiftPingInterval(), packet.cmd) {
              case "publish":
                break;
              case "pubrel":
                return void log(this, packet, cb, data);
              default:
                return void write(this, packet, cb);
            }
            switch (packet.qos) {
              case 2:
              case 1:
                log(this, packet, cb, data);
                break;
              case 0:
              default:
                write(this, packet, cb);
            }
          } else {
            this._storePacket(packet, cb, data);
          }
        };
        Client.prototype._storePacket = function (packet, cb, type) {
          type = type || fn;
          if (0 === (packet.qos || 0) && this.queueQoSZero || "publish" !== packet.cmd) {
            this.queue.push({
              packet: packet,
              cb: cb
            });
          } else {
            if (packet.qos > 0) {
              cb = this.outgoing[packet.messageId];
              this.outgoingStore.put(packet, function (er) {
                if (er) {
                  return cb && cb(er);
                }
                type();
              });
            } else {
              if (cb) {
                cb(new Error("No connection to broker"));
              }
            }
          }
        };
        Client.prototype._setupPingTimer = function () {
          var client = this;
          if (!this.pingTimer && this.options.keepalive) {
            this.pingResp = true;
            this.pingTimer = gotoNewOfflinePage(function () {
              client._checkPing();
            }, 1E3 * this.options.keepalive);
          }
        };
        Client.prototype._shiftPingInterval = function () {
          if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {
            this.pingTimer.reschedule(1E3 * this.options.keepalive);
          }
        };
        Client.prototype._checkPing = function () {
          if (this.pingResp) {
            this.pingResp = false;
            this._sendPacket({
              cmd: "pingreq"
            });
          } else {
            this._cleanUp(true);
          }
        };
        Client.prototype._handlePingresp = function () {
          this.pingResp = true;
          this.emit("pingresp", (new Date).getTime());
        };
        Client.prototype._handleConnack = function (err) {
          var opts = this.options;
          var code = 5 === opts.protocolVersion ? err.reasonCode : err.returnCode;
          if (clearTimeout(this.connackTimer), err.properties && (err.properties.topicAliasMaximum && (opts.properties || (opts.properties = {}), opts.properties.topicAliasMaximum = err.properties.topicAliasMaximum), err.properties.serverKeepAlive && opts.keepalive && (opts.keepalive = err.properties.serverKeepAlive, this._shiftPingInterval()), err.properties.maximumPacketSize && (opts.properties || (opts.properties = {}), opts.properties.maximumPacketSize = err.properties.maximumPacketSize)), 0 ===
            code) {
            this.reconnecting = false;
            this._onConnect(err);
          } else {
            if (code > 0) {
              var err = new Error("Connection refused: " + a[code]);
              err.code = code;
              this.emit("error", err);
            }
          }
        };
        Client.prototype._handlePublish = function (packet, callback) {
          callback = void 0 !== callback ? callback : fn;
          var value = packet.topic.toString();
          var items = packet.payload;
          var qos = packet.qos;
          var mid = packet.messageId;
          var that = this;
          var console = this.options;
          var u = [0, 16, 128, 131, 135, 144, 145, 151, 153];
          switch (qos) {
            case 2:
              console.customHandleAcks(value, items, packet, function (e, value) {
                return e instanceof Error || (value = e, e = null), e ? that.emit("error", e) : -1 === u.indexOf(value) ? that.emit("error", new Error("Wrong reason code for pubrec")) : void (value ? that._sendPacket({
                  cmd: "pubrec",
                  messageId: mid,
                  reasonCode: value
                }, callback) : that.incomingStore.put(packet, function () {
                  that._sendPacket({
                    cmd: "pubrec",
                    messageId: mid
                  }, callback);
                }));
              });
              break;
            case 1:
              console.customHandleAcks(value, items, packet, function (b, a) {
                return b instanceof Error || (a = b, b = null), b ? that.emit("error", b) : -1 === u.indexOf(a) ? that.emit("error", new Error("Wrong reason code for puback")) : (a || that.emit("message", value, items, packet), void that.handleMessage(packet, function (jsonNote) {
                  if (jsonNote) {
                    return callback && callback(jsonNote);
                  }
                  that._sendPacket({
                    cmd: "puback",
                    messageId: mid,
                    reasonCode: a
                  }, callback);
                }));
              });
              break;
            case 0:
              this.emit("message", value, items, packet);
              this.handleMessage(packet, callback);
          }
        };
        Client.prototype.handleMessage = function (data, callback) {
          callback();
        };
        Client.prototype._handleAck = function (packet) {
          var loadErr;
          var mid = packet.messageId;
          var type = packet.cmd;
          var response = null;
          var cb = this.outgoing[mid];
          var that = this;
          if (cb) {
            switch (type) {
              case "pubcomp":
              case "puback":
                var value = packet.reasonCode;
                if (value && value > 0 && 16 !== value && 10 !== value) {
                  (loadErr = new Error("Publish error: " + a[value])).code = value;
                  cb(loadErr, packet);
                } else {
                  if (value && 10 === value) {
                    cb(null, packet);
                  }
                }
                delete this.outgoing[mid];
                this.outgoingStore.del(packet, cb);
                break;
              case "pubrec":
                response = {
                  cmd: "pubrel",
                  qos: 2,
                  messageId: mid
                };
                var index = packet.reasonCode;
                if (index && index > 0 && 16 !== index) {
                  (loadErr = new Error("Publish error: " + a[index])).code = index;
                  cb(loadErr, packet);
                } else {
                  this._sendPacket(response);
                }
                break;
              case "suback":
                delete this.outgoing[mid];
                var i = 0;
                for (; i < packet.granted.length; i++) {
                  if (0 != (128 & packet.granted[i])) {
                    var computed = this.messageIdToTopic[mid];
                    if (computed) {
                      computed.forEach(function (topic) {
                        delete that._resubscribeTopics[topic];
                      });
                    }
                  }
                }
                cb(null, packet);
                break;
              case "unsuback":
                delete this.outgoing[mid];
                cb(null);
                break;
              default:
                that.emit("error", new Error("unrecognized packet type"));
            }
            if (this.disconnecting && 0 === (0, _deepAssign2.default)(this.outgoing).length) {
              this.emit("outgoingEmpty");
            }
          }
        };
        Client.prototype._handlePubrel = function (data, callback) {
          callback = void 0 !== callback ? callback : fn;
          var messageId = data.messageId;
          var self = this;
          var packet = {
            cmd: "pubcomp",
            messageId: messageId
          };
          self.incomingStore.get(data, function (canCreateDiscussions, result) {
            if (canCreateDiscussions) {
              self._sendPacket(packet, callback);
            } else {
              self.emit("message", result.topic, result.payload, result);
              self.handleMessage(result, function (identifierPositions) {
                if (identifierPositions) {
                  return callback(identifierPositions);
                }
                self.incomingStore.del(result, fn);
                self._sendPacket(packet, callback);
              });
            }
          });
        };
        Client.prototype._handleDisconnect = function (callback) {
          this.emit("disconnect", callback);
        };
        Client.prototype._nextId = function () {
          var id = this.nextId++;
          return 65536 === this.nextId && (this.nextId = 1), id;
        };
        Client.prototype.getLastMessageId = function () {
          return 1 === this.nextId ? 65535 : this.nextId - 1;
        };
        Client.prototype._resubscribe = function (callback) {
          var sourceParmas = (0, _deepAssign2.default)(this._resubscribeTopics);
          if (!this._firstConnection && (this.options.clean || 5 === this.options.protocolVersion && !callback.sessionPresent) && sourceParmas.length > 0) {
            if (this.options.resubscribe) {
              if (5 === this.options.protocolVersion) {
                var i = 0;
                for (; i < sourceParmas.length; i++) {
                  var params = {};
                  params[sourceParmas[i]] = this._resubscribeTopics[sourceParmas[i]];
                  params.resubscribe = true;
                  this.subscribe(params, {
                    properties: params[sourceParmas[i]].properties
                  });
                }
              } else {
                this._resubscribeTopics.resubscribe = true;
                this.subscribe(this._resubscribeTopics);
              }
            } else {
              this._resubscribeTopics = {};
            }
          }
          this._firstConnection = false;
        };
        Client.prototype._onConnect = function (url) {
          if (this.disconnected) {
            this.emit("connect", url);
          } else {
            var self = this;
            this._setupPingTimer();
            this._resubscribe(url);
            this.connected = true;
            (function create() {
              function resize() {
                self._storeProcessing = false;
                self._packetIdsDuringStoreProcessing = {};
              }
              function i() {
                socket.destroy();
                socket = null;
                resize();
              }
              var socket = self.outgoingStore.createStream();
              self.once("close", i);
              socket.on("error", function (e) {
                resize();
                self.removeListener("close", i);
                self.emit("error", e);
              });
              socket.on("end", function () {
                var n = true;
                var vmId;
                for (vmId in self._packetIdsDuringStoreProcessing) {
                  if (!self._packetIdsDuringStoreProcessing[vmId]) {
                    n = false;
                    break;
                  }
                }
                if (n) {
                  resize();
                  self.removeListener("close", i);
                  self.emit("connect", url);
                } else {
                  create();
                }
              });
              (function connect() {
                if (socket) {
                  self._storeProcessing = true;
                  var updateSiteUsage;
                  var packet = socket.read(1);
                  if (packet) {
                    if (self._packetIdsDuringStoreProcessing[packet.messageId]) {
                      connect();
                    } else {
                      if (self.disconnecting || self.reconnectTimer) {
                        if (socket.destroy) {
                          socket.destroy();
                        }
                      } else {
                        updateSiteUsage = self.outgoing[packet.messageId];
                        self.outgoing[packet.messageId] = function (siteData, size) {
                          if (updateSiteUsage) {
                            updateSiteUsage(siteData, size);
                          }
                          connect();
                        };
                        self._packetIdsDuringStoreProcessing[packet.messageId] = true;
                        self._sendPacket(packet);
                      }
                    }
                  } else {
                    socket.once("readable", connect);
                  }
                }
              })();
            })();
          }
        };
        module.exports = Client;
      }).call(this, $("./node_modules/webpack/buildin/global.js"), $("./node_modules/process/browser.js"));
    },
    "./lib/connect/ali.js": function (mixin, doPost, __webpack_require__) {
      (function (hash) {
        var wx;
        var upper;
        var result;
        var Readable = __webpack_require__("./node_modules/readable-stream/readable-browser.js").Transform;
        var core = __webpack_require__("./node_modules/duplexify/index.js");
        var base64 = __webpack_require__("./node_modules/base64-js/index.js");
        var l = false;
        mixin.exports = function (obj, name) {
          if (name.hostname = name.hostname || name.host, !name.hostname) {
            throw new Error("Could not determine host. Specify host manually.");
          }
          var getDefaultProtocols = "MQIsdp" === name.protocolId && 3 === name.protocolVersion ? "mqttv3.1" : "mqtt";
          !function (opts) {
            if (!opts.hostname) {
              opts.hostname = "localhost";
            }
            if (!opts.path) {
              opts.path = "/";
            }
            if (!opts.wsOptions) {
              opts.wsOptions = {};
            }
          }(name);
          var item = function (opts, client) {
            var protocol = "alis" === opts.protocol ? "wss" : "ws";
            var url = protocol + "://" + opts.hostname + opts.path;
            return opts.port && 80 !== opts.port && 443 !== opts.port && (url = protocol + "://" + opts.hostname + ":" + opts.port + opts.path), "function" == typeof opts.transformWsUrl && (url = opts.transformWsUrl(url, opts, client)), url;
          }(name, obj);
          return (wx = name.my).connectSocket({
            url: item,
            protocols: getDefaultProtocols
          }), upper = function () {
            var stream = new Readable;
            return stream._write = function (data, type, fn) {
              wx.sendSocketMessage({
                data: data.buffer,
                success: function () {
                  fn();
                },
                fail: function () {
                  fn(new Error);
                }
              });
            }, stream._flush = function (cb) {
              wx.closeSocket({
                success: function () {
                  cb();
                }
              });
            }, stream;
          }(), result = core.obj(), l || (l = true, wx.onSocketOpen(function () {
            result.setReadable(upper);
            result.setWritable(upper);
            result.emit("connect");
          }), wx.onSocketMessage(function (ev) {
            if ("string" == typeof ev.data) {
              var r = base64.toByteArray(ev.data);
              var i = hash.from(r);
              upper.push(i);
            } else {
              var r = new FileReader;
              r.addEventListener("load", function () {
                var key = r.result;
                key = key instanceof ArrayBuffer ? hash.from(key) : hash.from(key, "utf8");
                upper.push(key);
              });
              r.readAsArrayBuffer(ev.data);
            }
          }), wx.onSocketClose(function () {
            result.end();
            result.destroy();
          }), wx.onSocketError(function (e) {
            result.destroy(e);
          })), result;
        };
      }).call(this, __webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer);
    },
    "./lib/connect/index.js": function (window, id, require) {
      (function (newCorpusInfo, Buffer) {
        function request(value, name, content, done, method) {
          !function (name, header, seconds, error, config) {
            var route = void 0;
            var osmID = config && config.backupHost && 2 === config.backupAddressStrategy ? config.backupHost : "wildfirechat.net";
            var msg = config && config.backupHost && 2 === config.backupAddressStrategy ? config.backupPort : f.default.ROUTE_PORT ? f.default.ROUTE_PORT : 80;
            if (f.default.USE_WSS) {
              callback("https route");
              route = "https://" + osmID + (443 !== msg ? ":" + msg : "") + "/route";
            } else {
              route = "http://" + osmID + (80 !== msg ? ":" + msg : "") + "/route";
            }
            callback("route url", route);
            var roomService = require("./lib/connect/proto_wfc.js").RouteRequest;
            var dop = require("./lib/connect/proto_wfc.js").RouteResponse;
            var c = require("./lib/connect/proto_wfc.js").IMHttpWrapper;
            var parseInt = require("./wfc/internal/aes.js").AESDecrypt;
            var pad = require("./wfc/internal/aes.js").Uint8ToStr;
            var resolve = require("./wfc/internal/aes.js").AESEncrypt;
            var i = "";
            var password = "";
            var fn = require("./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js").decode;
            var e = require("./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js").encode;
            var xhr = new XMLHttpRequest;
            var T = false;
            var autoResumeTimer = setTimeout(function () {
              T = true;
              xhr.abort();
            }, 1E4);
            xhr.open("POST", route);
            xhr.onerror = function () {
              callback("route request error");
              error(-1);
            };
            xhr.onabort = function () {
              callback("route request abort");
              error(-1);
            };
            xhr.ontimeout = function () {
              callback("route request timeout");
              error(-1);
            };
            xhr.onreadystatechange = function () {
              if (4 === xhr.readyState && !T) {
                if (clearTimeout(autoResumeTimer), 200 === xhr.status) {
                  var oldBuffer = fn(xhr.responseText);
                  if (!oldBuffer || oldBuffer.byteLength < 1) {
                    callback("route response error", xhr.responseText);
                    error(-1);
                  }
                  var oldView = new Int8Array(oldBuffer, 0, 1);
                  if (0 === oldView[0]) {
                    var r = e(oldBuffer.slice(1));
                    var value = parseInt(r, i, true);
                    var data = dop.decode(value);
                    callback("route res", data.host, data.longPort, data.wssPort);
                    var num = data.node + "|" + val;
                    var argString = "";
                    var offset = 0;
                    for (; offset < num.length; offset++) {
                      argString = argString + String.fromCharCode(90 ^ num[offset].charCodeAt(0));
                    }
                    num = (0, Plugin.btoa)(unescape(encodeURIComponent(argString)));
                    var opts = {
                      keepalive: f.default.KEEP_ALIVE_TIMEOUT,
                      clientId: header,
                      protocolId: "MQTT",
                      protocolVersion: 6,
                      clean: true,
                      reconnectPeriod: 0,
                      resubscribe: false,
                      connectTimeout: 2E4,
                      a: val,
                      will: {
                        topic: num,
                        payload: "Connection Closed abnormally..!",
                        qos: 1,
                        retain: false
                      },
                      rejectUnauthorized: false
                    };
                    opts.username = name;
                    opts.password = password;
                    var cb = (new Date).getTime();
                    var obj = void 0;
                    var desc = (8 & data.commercial) > 0;
                    var code = void 0;
                    var hostname = void 0;
                    if (config && config.backupHost && 2 === config.backupAddressStrategy) {
                      var config = data.candidate[0];
                      hostname = config.host;
                      code = config.wssPort;
                    } else {
                      hostname = data.host;
                      code = f.default.USE_WSS ? (code = desc ? data.wssPort : f.default.WSS_PORT) || f.default.WSS_PORT : desc ? data.longPort : f.default.WS_PORT;
                    }
                    callback("connect url", hostname, code);
                    if (f.default.USE_WSS) {
                      callback("wss mqtts");
                      obj = init("mqtts://" + hostname + ":" + code, opts);
                    } else {
                      callback("ws mqtt", f.default.USE_WSS);
                      obj = init("mqtt://" + hostname + ":" + code, opts);
                    }
                    host = data.host;
                    var exp = {
                      isReceiptEnable: (2 & data.commercial) > 0,
                      isClearGroupMsgWhenKickoff: (4 & data.commercial) > 0,
                      isDisableRoamingConvList: (16 & data.commercial) > 0,
                      isKeepMsgAfterDismiss: (32 & data.commercial) > 0,
                      isSupportBigFileUpload: (64 & data.commercial) > 0,
                      isBackupDownloadUrl: (128 & data.commercial) > 0,
                      isGlobalDisableSyncDraft: (256 & data.commercial) > 0
                    };
                    if ((1 & data.commercial) > 0) {
                      error(0, obj, i, cb, exp);
                    } else {
                      error(-1);
                    }
                  } else {
                    callback("route error", oldView[0]);
                    error(oldView[0]);
                  }
                } else {
                  callback("http route error\uff0c\u8bf7\u5148\u68c0\u67e5\u4e0bUSE_WSS\u3001ROUTE_PORT\u914d\u7f6e", xhr.status);
                  error(-1);
                }
              }
            };
            xhr.setRequestHeader("p", "web");
            xhr.setRequestHeader("appId", currentCharacterId);
            xhr.setRequestHeader("appKey", acceptstring);
            xhr.setRequestHeader("cid", resolve(header));
            xhr.setRequestHeader("uid", resolve(name));
            xhr.setRequestHeader("Content-Type", "application/octet-stream");
            var options = roomService.create();
            options.app = "cn.wildfirechat.chat.web";
            options.appVersion = "0.1";
            options.deviceName = "browser";
            options.platform = 5;
            options.phoneName = "browser";
            options.sdkVersion = "0.1";
            options.language = f.default.LANGUAGE;
            var item = void 0;
            try {
              item = pad(parseInt(seconds, "", false));
            } catch (e) {
              callback("token error!!!");
            }
            var html = item.split("|")[0];
            i = item.split("|")[1];
            password = new Buffer(resolve(html, i), "base64");
            options.host = resolve("wildfirechat.net", "");
            var bytecode = roomService.encode(options).finish();
            var data = c.create();
            data.clientId = header;
            data.token = html;
            data.request = "ROUTE";
            data.data = bytecode;
            var level = c.encode(data).finish();
            var url = resolve(level, i);
            xhr.send(url);
          }(value, name, content, done, method);
        }
        function init(value, opts) {
          if ("object" !== (void 0 === value ? "undefined" : (0, ret.default)(value)) || opts || (opts = value, value = null), opts = opts || {}, value) {
            var parsed = d.parse(value, true);
            if (null != parsed.port && (parsed.port = Number(parsed.port)), null === (opts = xtend(parsed, opts)).protocol) {
              throw new Error("Missing protocol");
            }
            opts.protocol = opts.protocol.replace(/:$/, "");
          }
          if (function (options) {
            var auth;
            if (options.auth) {
              if (auth = options.auth.match(/^(.+):(.+)$/)) {
                options.username = auth[1];
                options.password = auth[2];
              } else {
                options.username = options.auth;
              }
            }
          }(opts), opts.query && "string" == typeof opts.query.clientId && (opts.clientId = opts.query.clientId), opts.cert && opts.key) {
            if (!opts.protocol) {
              throw new Error("Missing secure protocol key");
            }
            if (-1 === ["mqtts", "wss", "wxs", "alis"].indexOf(opts.protocol)) {
              switch (opts.protocol) {
                case "mqtt":
                  opts.protocol = "mqtts";
                  break;
                case "ws":
                  opts.protocol = "wss";
                  break;
                case "wx":
                  opts.protocol = "wxs";
                  break;
                case "ali":
                  opts.protocol = "alis";
                  break;
                default:
                  throw new Error('Unknown protocol for secure connection: "' + opts.protocol + '"!');
              }
            }
          }
          if (!self[opts.protocol]) {
            var n = -1 !== ["mqtts", "wss"].indexOf(opts.protocol);
            opts.protocol = ["mqtt", "mqtts", "ws", "wss", "wx", "wxs", "ali", "alis"].filter(function (theFunctionName, canCreateDiscussions) {
              return (!n || canCreateDiscussions % 2 != 0) && "function" == typeof self[theFunctionName];
            })[0];
          }
          if (false === opts.clean && !opts.clientId) {
            throw new Error("Missing clientId for unclean clients");
          }
          return opts.protocol && (opts.defaultProtocol = opts.protocol), new Duplicity(function (data) {
            return opts.servers && (data._reconnectCount && data._reconnectCount !== opts.servers.length || (data._reconnectCount = 0), opts.host = opts.servers[data._reconnectCount].host, opts.port = opts.servers[data._reconnectCount].port, opts.protocol = opts.servers[data._reconnectCount].protocol ? opts.servers[data._reconnectCount].protocol : opts.defaultProtocol, opts.hostname = opts.host, data._reconnectCount++), self[opts.protocol](data, opts);
          }, opts);
        }
        function callback(e) {
          if (!f.default.DISABLE_LOG) {
            var _console2;
            var length = arguments.length;
            var args = Array(length > 1 ? length - 1 : 0);
            var i = 1;
            for (; i < length; i++) {
              args[i - 1] = arguments[i];
            }
            (_console2 = console).log.apply(_console2, [e].concat(args));
          }
        }
        var $1;
        var event = require("./node_modules/babel-runtime/helpers/typeof.js");
        var ret = ($1 = event) && $1.__esModule ? $1 : {
          default: $1
        };
        var Plugin = require("../util/base64.min");
        require("./wfc/internal/aes.js");
        var Duplicity = require("./lib/client.js");
        var Store = require("./lib/store.js");
        var d = require("./node_modules/url/url.js");
        var xtend = require("./node_modules/xtend/immutable.js");
        var f = require("../../config.js");
        var self = {};
        var val = "wildfirechat.net";
        var currentCharacterId = "web_12345678";
        var acceptstring = "6f8348670cb11cf434451bc9e7ba72eeaf3452c8";
        if ("browser" !== newCorpusInfo.title) {
          self.mqtt = require("./lib/connect/tcp.js");
          self.tcp = require("./lib/connect/tcp.js");
          self.ssl = require("./lib/connect/tls.js");
          self.tls = require("./lib/connect/tls.js");
          self.mqtts = require("./lib/connect/tls.js");
        } else {
          self.wx = require("./lib/connect/wx.js");
          self.wxs = require("./lib/connect/wx.js");
          self.ali = require("./lib/connect/ali.js");
          self.alis = require("./lib/connect/ali.js");
        }
        self.ws = require("./lib/connect/ws.js");
        self.wss = require("./lib/connect/ws.js");
        var host = "";
        window.exports = request;
        window.exports.connect = request;
        window.exports.MqttClient = Duplicity;
        window.exports.Store = Store;
        window.exports.host = function () {
          return host;
        };
      }).call(this, require("./node_modules/process/browser.js"), require("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer);
    },
    "./lib/connect/proto_wfc.js": function (module, metadata, packageSuccess) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _deepAssign2 = _interopRequireDefault(packageSuccess("./node_modules/babel-runtime/helpers/typeof.js"));
      var _noframeworkWaypoints2 = _interopRequireDefault(packageSuccess("./node_modules/babel-runtime/core-js/object/keys.js"));
      var $protobuf = packageSuccess("./wfc/pb/protobuf.min.js");
      var Buffer = $protobuf.Reader;
      var $Writer = $protobuf.Writer;
      var self = $protobuf.util;
      var window = $protobuf.roots.default || ($protobuf.roots.default = {});
      window.IMHttpWrapper = function () {
        function Site(cat) {
          if (cat) {
            var keys = (0, _noframeworkWaypoints2.default)(cat);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != cat[keys[i]]) {
                this[keys[i]] = cat[keys[i]];
              }
            }
          }
        }
        return Site.prototype.token = "", Site.prototype.clientId = "", Site.prototype.request = "", Site.prototype.data = self.newBuffer([]), Site.create = function (obj) {
          return new Site(obj);
        }, Site.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(message.token), writer.uint32(18).string(message.clientId), writer.uint32(26).string(message.request), null != message.data && message.hasOwnProperty("data") && writer.uint32(34).bytes(message.data), writer;
        }, Site.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Site.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var model = new window.IMHttpWrapper;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                model.token = s.string();
                break;
              case 2:
                model.clientId = s.string();
                break;
              case 3:
                model.request = s.string();
                break;
              case 4:
                model.data = s.bytes();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!model.hasOwnProperty("token")) {
            throw self.ProtocolError("missing required 'token'", {
              instance: model
            });
          }
          if (!model.hasOwnProperty("clientId")) {
            throw self.ProtocolError("missing required 'clientId'", {
              instance: model
            });
          }
          if (!model.hasOwnProperty("request")) {
            throw self.ProtocolError("missing required 'request'", {
              instance: model
            });
          }
          return model;
        }, Site.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Site.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.token) ? self.isString(value.clientId) ? self.isString(value.request) ? null != value.data && value.hasOwnProperty("data") && !(value.data && "number" == typeof value.data.length || self.isString(value.data)) ? "data: buffer expected" : null : "request: string expected" : "clientId: string expected" : "token: string expected";
        }, Site.fromObject = function (object) {
          if (object instanceof window.IMHttpWrapper) {
            return object;
          }
          var data = new window.IMHttpWrapper;
          return null != object.token && (data.token = String(object.token)), null != object.clientId && (data.clientId = String(object.clientId)), null != object.request && (data.request = String(object.request)), null != object.data && ("string" == typeof object.data ? self.base64.decode(object.data, data.data = self.newBuffer(self.base64.length(object.data)), 0) : object.data.length && (data.data = object.data)), data;
        }, Site.toObject = function (options, params) {
          if (!params) {
            params = {};
          }
          var opts = {};
          return params.defaults && (opts.token = "", opts.clientId = "", opts.request = "", params.bytes === String ? opts.data = "" : (opts.data = [], params.bytes !== Array && (opts.data = self.newBuffer(opts.data)))), null != options.token && options.hasOwnProperty("token") && (opts.token = options.token), null != options.clientId && options.hasOwnProperty("clientId") && (opts.clientId = options.clientId), null != options.request && options.hasOwnProperty("request") && (opts.request = options.request),
            null != options.data && options.hasOwnProperty("data") && (opts.data = params.bytes === String ? self.base64.encode(options.data, 0, options.data.length) : params.bytes === Array ? Array.prototype.slice.call(options.data) : options.data), opts;
        }, Site.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Site;
      }();
      window.RouteRequest = function () {
        function self(actions) {
          if (actions) {
            var currentActions = (0, _noframeworkWaypoints2.default)(actions);
            var i = 0;
            for (; i < currentActions.length; ++i) {
              if (null != actions[currentActions[i]]) {
                this[currentActions[i]] = actions[currentActions[i]];
              }
            }
          }
        }
        return self.prototype.app = "", self.prototype.platform = 0, self.prototype.pushType = 0, self.prototype.deviceName = "", self.prototype.deviceVersion = "", self.prototype.phoneName = "", self.prototype.language = "", self.prototype.carrierName = "", self.prototype.appVersion = "", self.prototype.sdkVersion = "", self.prototype.wxAppId = "", self.prototype.wxAppKey = "", self.prototype.webAppId = "", self.prototype.webAppKey = "", self.prototype.host = "", self.create = function (obj) {
          return new self(obj);
        }, self.encode = function (options, writer) {
          return writer || (writer = $Writer.create()), null != options.app && options.hasOwnProperty("app") && writer.uint32(10).string(options.app), null != options.platform && options.hasOwnProperty("platform") && writer.uint32(16).int32(options.platform), null != options.pushType && options.hasOwnProperty("pushType") && writer.uint32(24).int32(options.pushType), null != options.deviceName && options.hasOwnProperty("deviceName") && writer.uint32(34).string(options.deviceName), null != options.deviceVersion &&
            options.hasOwnProperty("deviceVersion") && writer.uint32(42).string(options.deviceVersion), null != options.phoneName && options.hasOwnProperty("phoneName") && writer.uint32(50).string(options.phoneName), null != options.language && options.hasOwnProperty("language") && writer.uint32(58).string(options.language), null != options.carrierName && options.hasOwnProperty("carrierName") && writer.uint32(66).string(options.carrierName), null != options.appVersion && options.hasOwnProperty("appVersion") &&
            writer.uint32(74).string(options.appVersion), null != options.sdkVersion && options.hasOwnProperty("sdkVersion") && writer.uint32(82).string(options.sdkVersion), null != options.wxAppId && options.hasOwnProperty("wxAppId") && writer.uint32(90).string(options.wxAppId), null != options.wxAppKey && options.hasOwnProperty("wxAppKey") && writer.uint32(98).string(options.wxAppKey), null != options.webAppId && options.hasOwnProperty("webAppId") && writer.uint32(106).string(options.webAppId), null !=
            options.webAppKey && options.hasOwnProperty("webAppKey") && writer.uint32(114).string(options.webAppKey), null != options.host && options.hasOwnProperty("host") && writer.uint32(122).string(options.host), writer;
        }, self.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, self.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var config = new window.RouteRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                config.app = data.string();
                break;
              case 2:
                config.platform = data.int32();
                break;
              case 3:
                config.pushType = data.int32();
                break;
              case 4:
                config.deviceName = data.string();
                break;
              case 5:
                config.deviceVersion = data.string();
                break;
              case 6:
                config.phoneName = data.string();
                break;
              case 7:
                config.language = data.string();
                break;
              case 8:
                config.carrierName = data.string();
                break;
              case 9:
                config.appVersion = data.string();
                break;
              case 10:
                config.sdkVersion = data.string();
                break;
              case 11:
                config.wxAppId = data.string();
                break;
              case 12:
                config.wxAppKey = data.string();
                break;
              case 13:
                config.webAppId = data.string();
                break;
              case 14:
                config.webAppKey = data.string();
                break;
              case 15:
                config.host = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          return config;
        }, self.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, self.verify = function (config) {
          return "object" !== (void 0 === config ? "undefined" : (0, _deepAssign2.default)(config)) || null === config ? "object expected" : null != config.app && config.hasOwnProperty("app") && !self.isString(config.app) ? "app: string expected" : null != config.platform && config.hasOwnProperty("platform") && !self.isInteger(config.platform) ? "platform: integer expected" : null != config.pushType && config.hasOwnProperty("pushType") && !self.isInteger(config.pushType) ? "pushType: integer expected" :
            null != config.deviceName && config.hasOwnProperty("deviceName") && !self.isString(config.deviceName) ? "deviceName: string expected" : null != config.deviceVersion && config.hasOwnProperty("deviceVersion") && !self.isString(config.deviceVersion) ? "deviceVersion: string expected" : null != config.phoneName && config.hasOwnProperty("phoneName") && !self.isString(config.phoneName) ? "phoneName: string expected" : null != config.language && config.hasOwnProperty("language") && !self.isString(config.language) ?
              "language: string expected" : null != config.carrierName && config.hasOwnProperty("carrierName") && !self.isString(config.carrierName) ? "carrierName: string expected" : null != config.appVersion && config.hasOwnProperty("appVersion") && !self.isString(config.appVersion) ? "appVersion: string expected" : null != config.sdkVersion && config.hasOwnProperty("sdkVersion") && !self.isString(config.sdkVersion) ? "sdkVersion: string expected" : null != config.wxAppId && config.hasOwnProperty("wxAppId") &&
                !self.isString(config.wxAppId) ? "wxAppId: string expected" : null != config.wxAppKey && config.hasOwnProperty("wxAppKey") && !self.isString(config.wxAppKey) ? "wxAppKey: string expected" : null != config.webAppId && config.hasOwnProperty("webAppId") && !self.isString(config.webAppId) ? "webAppId: string expected" : null != config.webAppKey && config.hasOwnProperty("webAppKey") && !self.isString(config.webAppKey) ? "webAppKey: string expected" : null != config.host && config.hasOwnProperty("host") &&
                  !self.isString(config.host) ? "host: string expected" : null;
        }, self.fromObject = function (data) {
          if (data instanceof window.RouteRequest) {
            return data;
          }
          var config = new window.RouteRequest;
          return null != data.app && (config.app = String(data.app)), null != data.platform && (config.platform = 0 | data.platform), null != data.pushType && (config.pushType = 0 | data.pushType), null != data.deviceName && (config.deviceName = String(data.deviceName)), null != data.deviceVersion && (config.deviceVersion = String(data.deviceVersion)), null != data.phoneName && (config.phoneName = String(data.phoneName)), null != data.language && (config.language = String(data.language)), null !=
            data.carrierName && (config.carrierName = String(data.carrierName)), null != data.appVersion && (config.appVersion = String(data.appVersion)), null != data.sdkVersion && (config.sdkVersion = String(data.sdkVersion)), null != data.wxAppId && (config.wxAppId = String(data.wxAppId)), null != data.wxAppKey && (config.wxAppKey = String(data.wxAppKey)), null != data.webAppId && (config.webAppId = String(data.webAppId)), null != data.webAppKey && (config.webAppKey = String(data.webAppKey)), null !=
            data.host && (config.host = String(data.host)), config;
        }, self.toObject = function (config, args) {
          if (!args) {
            args = {};
          }
          var options = {};
          return args.defaults && (options.app = "", options.platform = 0, options.pushType = 0, options.deviceName = "", options.deviceVersion = "", options.phoneName = "", options.language = "", options.carrierName = "", options.appVersion = "", options.sdkVersion = "", options.wxAppId = "", options.wxAppKey = "", options.webAppId = "", options.webAppKey = "", options.host = ""), null != config.app && config.hasOwnProperty("app") && (options.app = config.app), null != config.platform && config.hasOwnProperty("platform") &&
            (options.platform = config.platform), null != config.pushType && config.hasOwnProperty("pushType") && (options.pushType = config.pushType), null != config.deviceName && config.hasOwnProperty("deviceName") && (options.deviceName = config.deviceName), null != config.deviceVersion && config.hasOwnProperty("deviceVersion") && (options.deviceVersion = config.deviceVersion), null != config.phoneName && config.hasOwnProperty("phoneName") && (options.phoneName = config.phoneName), null != config.language &&
            config.hasOwnProperty("language") && (options.language = config.language), null != config.carrierName && config.hasOwnProperty("carrierName") && (options.carrierName = config.carrierName), null != config.appVersion && config.hasOwnProperty("appVersion") && (options.appVersion = config.appVersion), null != config.sdkVersion && config.hasOwnProperty("sdkVersion") && (options.sdkVersion = config.sdkVersion), null != config.wxAppId && config.hasOwnProperty("wxAppId") && (options.wxAppId = config.wxAppId),
            null != config.wxAppKey && config.hasOwnProperty("wxAppKey") && (options.wxAppKey = config.wxAppKey), null != config.webAppId && config.hasOwnProperty("webAppId") && (options.webAppId = config.webAppId), null != config.webAppKey && config.hasOwnProperty("webAppKey") && (options.webAppKey = config.webAppKey), null != config.host && config.hasOwnProperty("host") && (options.host = config.host), options;
        }, self.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, self;
      }();
      window.AddressTriple = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.host = "", Error.prototype.longPort = 0, Error.prototype.shortPort = 0, Error.prototype.wssPort = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.host), target.uint32(16).int32(args.longPort), target.uint32(24).int32(args.shortPort), null != args.wssPort && args.hasOwnProperty("wssPort") && target.uint32(32).int32(args.wssPort), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.AddressTriple;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                message.host = data.string();
                break;
              case 2:
                message.longPort = data.int32();
                break;
              case 3:
                message.shortPort = data.int32();
                break;
              case 4:
                message.wssPort = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!message.hasOwnProperty("host")) {
            throw self.ProtocolError("missing required 'host'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("longPort")) {
            throw self.ProtocolError("missing required 'longPort'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("shortPort")) {
            throw self.ProtocolError("missing required 'shortPort'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.host) ? self.isInteger(value.longPort) ? self.isInteger(value.shortPort) ? null != value.wssPort && value.hasOwnProperty("wssPort") && !self.isInteger(value.wssPort) ? "wssPort: integer expected" : null : "shortPort: integer expected" : "longPort: integer expected" : "host: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.AddressTriple) {
            return object;
          }
          var config = new window.AddressTriple;
          return null != object.host && (config.host = String(object.host)), null != object.longPort && (config.longPort = 0 | object.longPort), null != object.shortPort && (config.shortPort = 0 | object.shortPort), null != object.wssPort && (config.wssPort = 0 | object.wssPort), config;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var config = {};
          return options.defaults && (config.host = "", config.longPort = 0, config.shortPort = 0, config.wssPort = 0), null != data.host && data.hasOwnProperty("host") && (config.host = data.host), null != data.longPort && data.hasOwnProperty("longPort") && (config.longPort = data.longPort), null != data.shortPort && data.hasOwnProperty("shortPort") && (config.shortPort = data.shortPort), null != data.wssPort && data.hasOwnProperty("wssPort") && (config.wssPort = data.wssPort), config;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.RouteResponse = function () {
        function Error(props) {
          if (this.candidate = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.host = "", Error.prototype.longPort = 0, Error.prototype.shortPort = 0, Error.prototype.thumbPara = "", Error.prototype.node = "", Error.prototype.commercial = 0, Error.prototype.wssPort = 0, Error.prototype.candidate = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.host), writer.uint32(16).int32(message.longPort), writer.uint32(24).int32(message.shortPort), null != message.thumbPara && message.hasOwnProperty("thumbPara") && writer.uint32(34).string(message.thumbPara), null != message.node && message.hasOwnProperty("node") && writer.uint32(42).string(message.node), null != message.commercial && message.hasOwnProperty("commercial") && writer.uint32(48).int32(message.commercial),
            null != message.wssPort && message.hasOwnProperty("wssPort") && writer.uint32(56).int32(message.wssPort), null != message.candidate && message.candidate.length) {
            var k = 0;
            for (; k < message.candidate.length; ++k) {
              window.AddressTriple.encode(message.candidate[k], writer.uint32(66).fork()).ldelim();
            }
          }
          return writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.RouteResponse;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.host = data.string();
                break;
              case 2:
                obj.longPort = data.int32();
                break;
              case 3:
                obj.shortPort = data.int32();
                break;
              case 4:
                obj.thumbPara = data.string();
                break;
              case 5:
                obj.node = data.string();
                break;
              case 6:
                obj.commercial = data.int32();
                break;
              case 7:
                obj.wssPort = data.int32();
                break;
              case 8:
                if (!(obj.candidate && obj.candidate.length)) {
                  obj.candidate = [];
                }
                obj.candidate.push(window.AddressTriple.decode(data, data.uint32()));
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("host")) {
            throw self.ProtocolError("missing required 'host'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("longPort")) {
            throw self.ProtocolError("missing required 'longPort'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("shortPort")) {
            throw self.ProtocolError("missing required 'shortPort'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (!self.isString(value.host)) {
            return "host: string expected";
          }
          if (!self.isInteger(value.longPort)) {
            return "longPort: integer expected";
          }
          if (!self.isInteger(value.shortPort)) {
            return "shortPort: integer expected";
          }
          if (null != value.thumbPara && value.hasOwnProperty("thumbPara") && !self.isString(value.thumbPara)) {
            return "thumbPara: string expected";
          }
          if (null != value.node && value.hasOwnProperty("node") && !self.isString(value.node)) {
            return "node: string expected";
          }
          if (null != value.commercial && value.hasOwnProperty("commercial") && !self.isInteger(value.commercial)) {
            return "commercial: integer expected";
          }
          if (null != value.wssPort && value.hasOwnProperty("wssPort") && !self.isInteger(value.wssPort)) {
            return "wssPort: integer expected";
          }
          if (null != value.candidate && value.hasOwnProperty("candidate")) {
            if (!Array.isArray(value.candidate)) {
              return "candidate: array expected";
            }
            var i = 0;
            for (; i < value.candidate.length; ++i) {
              var r = window.AddressTriple.verify(value.candidate[i]);
              if (r) {
                return "candidate." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.RouteResponse) {
            return obj;
          }
          var result = new window.RouteResponse;
          if (null != obj.host && (result.host = String(obj.host)), null != obj.longPort && (result.longPort = 0 | obj.longPort), null != obj.shortPort && (result.shortPort = 0 | obj.shortPort), null != obj.thumbPara && (result.thumbPara = String(obj.thumbPara)), null != obj.node && (result.node = String(obj.node)), null != obj.commercial && (result.commercial = 0 | obj.commercial), null != obj.wssPort && (result.wssPort = 0 | obj.wssPort), obj.candidate) {
            if (!Array.isArray(obj.candidate)) {
              throw TypeError(".RouteResponse.candidate: array expected");
            }
            result.candidate = [];
            var k = 0;
            for (; k < obj.candidate.length; ++k) {
              if ("object" !== (0, _deepAssign2.default)(obj.candidate[k])) {
                throw TypeError(".RouteResponse.candidate: object expected");
              }
              result.candidate[k] = window.AddressTriple.fromObject(obj.candidate[k]);
            }
          }
          return result;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if ((options.arrays || options.defaults) && (result.candidate = []), options.defaults && (result.host = "", result.longPort = 0, result.shortPort = 0, result.thumbPara = "", result.node = "", result.commercial = 0, result.wssPort = 0), null != data.host && data.hasOwnProperty("host") && (result.host = data.host), null != data.longPort && data.hasOwnProperty("longPort") && (result.longPort = data.longPort), null != data.shortPort && data.hasOwnProperty("shortPort") && (result.shortPort =
            data.shortPort), null != data.thumbPara && data.hasOwnProperty("thumbPara") && (result.thumbPara = data.thumbPara), null != data.node && data.hasOwnProperty("node") && (result.node = data.node), null != data.commercial && data.hasOwnProperty("commercial") && (result.commercial = data.commercial), null != data.wssPort && data.hasOwnProperty("wssPort") && (result.wssPort = data.wssPort), data.candidate && data.candidate.length) {
            result.candidate = [];
            var k = 0;
            for (; k < data.candidate.length; ++k) {
              result.candidate[k] = window.AddressTriple.toObject(data.candidate[k], options);
            }
          }
          return result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      module.exports = window;
    },
    "./lib/connect/tcp.js": function (module, layer, $) {
      var self = $(2);
      module.exports = function (value, name) {
        var port;
        var host;
        return name.port = name.port || 1883, name.hostname = name.hostname || name.host || "localhost", port = name.port, host = name.hostname, self.createConnection(port, host);
      };
    },
    "./lib/connect/tls.js": function (blob, name, norm) {
      var t = norm(3);
      blob.exports = function (obj, name) {
        function connect(scope) {
          if (name.rejectUnauthorized) {
            obj.emit("error", scope);
          }
          that.end();
        }
        var that;
        return name.port = name.port || 8883, name.host = name.hostname || name.host || "localhost", name.rejectUnauthorized = false !== name.rejectUnauthorized, delete name.path, (that = t.connect(name)).on("secureConnect", function () {
          if (name.rejectUnauthorized && !that.authorized) {
            that.emit("error", new Error("TLS not authorized"));
          } else {
            that.removeListener("error", connect);
          }
        }), that.on("error", connect), that;
      };
    },
    "./lib/connect/ws.js": function (module, layer, $) {
      (function (newCorpusInfo) {
        function next(e, opts) {
          var websocketSubProtocol = "MQIsdp" === opts.protocolId && 3 === opts.protocolVersion ? "mqttv3.1" : "mqtt";
          !function (opts) {
            if (!opts.hostname) {
              opts.hostname = "localhost";
            }
            if (!opts.port) {
              if ("wss" === opts.protocol) {
                opts.port = 443;
              } else {
                opts.port = 80;
              }
            }
            if (!opts.path) {
              opts.path = "/";
            }
            if (!opts.wsOptions) {
              opts.wsOptions = {};
            }
            if (!(WebSocket || "wss" !== opts.protocol)) {
              keyLookup.forEach(function (prop) {
                if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {
                  opts.wsOptions[prop] = opts[prop];
                }
              });
            }
          }(opts);
          var input = function (opts, client) {
            var url = opts.protocol + "://" + opts.hostname + ":" + opts.port + opts.path;
            return "function" == typeof opts.transformWsUrl && (url = opts.transformWsUrl(url, opts, client)), url;
          }(opts, e);
          return end(input, [websocketSubProtocol], opts.wsOptions);
        }
        var end = $("./node_modules/websocket-stream/stream.js");
        var target = $("./node_modules/url/url.js");
        var keyLookup = ["rejectUnauthorized", "ca", "cert", "key", "pfx", "passphrase"];
        var WebSocket = "browser" === newCorpusInfo.title;
        module.exports = WebSocket ? function (value, name) {
          if (name.hostname || (name.hostname = name.host), !name.hostname) {
            if ("undefined" == typeof document) {
              throw new Error("Could not determine host. Specify host manually.");
            }
            var opts = target.parse(document.URL);
            name.hostname = opts.hostname;
            if (!name.port) {
              name.port = opts.port;
            }
          }
          return next(value, name);
        } : function (value, name) {
          return next(value, name);
        };
      }).call(this, $("./node_modules/process/browser.js"));
    },
    "./lib/connect/wx.js": function (mixin, doPost, __webpack_require__) {
      (function (Buffer, $process) {
        var transport;
        var upper;
        var stream;
        var Readable = __webpack_require__("./node_modules/readable-stream/readable-browser.js").Transform;
        var core = __webpack_require__("./node_modules/duplexify/index.js");
        mixin.exports = function (obj, name) {
          if (name.hostname = name.hostname || name.host, !name.hostname) {
            throw new Error("Could not determine host. Specify host manually.");
          }
          var getDefaultProtocols = "MQIsdp" === name.protocolId && 3 === name.protocolVersion ? "mqttv3.1" : "mqtt";
          !function (opts) {
            if (!opts.hostname) {
              opts.hostname = "localhost";
            }
            if (!opts.path) {
              opts.path = "/";
            }
            if (!opts.wsOptions) {
              opts.wsOptions = {};
            }
          }(name);
          var item = function (opts, client) {
            var protocol = "wxs" === opts.protocol ? "wss" : "ws";
            var url = protocol + "://" + opts.hostname + opts.path;
            return opts.port && 80 !== opts.port && 443 !== opts.port && (url = protocol + "://" + opts.hostname + ":" + opts.port + opts.path), "function" == typeof opts.transformWsUrl && (url = opts.transformWsUrl(url, opts, client)), url;
          }(name, obj);
          transport = wx.connectSocket({
            url: item,
            protocols: getDefaultProtocols
          });
          upper = function () {
            var stream = new Readable;
            return stream._write = function (data, type, fn) {
              transport.send({
                data: data.buffer,
                success: function () {
                  fn();
                },
                fail: function (message) {
                  fn(new Error(message));
                }
              });
            }, stream._flush = function (cb) {
              transport.close({
                success: function () {
                  cb();
                }
              });
            }, stream;
          }();
          (stream = core.obj())._destroy = function (err, cb) {
            transport.close({
              success: function () {
                if (cb) {
                  cb(err);
                }
              }
            });
          };
          var destroy = stream.destroy;
          return stream.destroy = function () {
            stream.destroy = destroy;
            var dialog = this;
            $process.nextTick(function () {
              transport.close({
                fail: function () {
                  dialog._destroy(new Error);
                }
              });
            });
          }.bind(stream), transport.onOpen(function () {
            stream.setReadable(upper);
            stream.setWritable(upper);
            stream.emit("connect");
          }), transport.onMessage(function (context) {
            var key = context.data;
            key = key instanceof ArrayBuffer ? Buffer.from(key) : Buffer.from(key, "utf8");
            upper.push(key);
          }), transport.onClose(function () {
            stream.end();
            stream.destroy();
          }), transport.onError(function (data) {
            stream.destroy(new Error(data.errMsg));
          }), stream;
        };
      }).call(this, __webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer, __webpack_require__("./node_modules/process/browser.js"));
    },
    "./lib/store.js": function (module, id, require) {
      (function ($process) {
        function Endpoint(value) {
          if (!(this instanceof Endpoint)) {
            return new Endpoint(value);
          }
          this.options = value || {};
          this.options = extend(opts, value);
          this._inflights = new Popover;
        }
        var extend = require("./node_modules/xtend/immutable.js");
        var Readable = require("./node_modules/readable-stream/readable-browser.js").Readable;
        var options = {
          objectMode: true
        };
        var opts = {
          clean: true
        };
        var Popover = require("./node_modules/es6-map/index.js");
        Endpoint.prototype.put = function (message, t) {
          return this._inflights.set(message.messageId, message), t && t(), this;
        };
        Endpoint.prototype.createStream = function () {
          var readStream = new Readable(options);
          var rounded = false;
          var newArr = [];
          var j = 0;
          return this._inflights.forEach(function (newItem, canCreateDiscussions) {
            newArr.push(newItem);
          }), readStream._read = function () {
            if (!rounded && j < newArr.length) {
              this.push(newArr[j++]);
            } else {
              this.push(null);
            }
          }, readStream.destroy = function () {
            if (!rounded) {
              var notificationWindow = this;
              rounded = true;
              $process.nextTick(function () {
                notificationWindow.emit("close");
              });
            }
          }, readStream;
        };
        Endpoint.prototype.del = function (data, callback) {
          var object = data.reasonCode;
          if (data = this._inflights.get(data.messageId)) {
            if (this._inflights.delete(data.messageId), object && 10 === object) {
              return;
            }
            callback(null, data);
          } else {
            if (callback) {
              callback(new Error("missing packet"));
            }
          }
          return this;
        };
        Endpoint.prototype.get = function (obj, name) {
          return (obj = this._inflights.get(obj.messageId)) ? name(null, obj) : name && name(new Error("missing packet")), this;
        };
        Endpoint.prototype.close = function (request) {
          if (this.options.clean) {
            this._inflights = null;
          }
          if (request) {
            request();
          }
        };
        module.exports = Endpoint;
      }).call(this, require("./node_modules/process/browser.js"));
    },
    "./lib/validations.js": function (module, data, urlPartConfig) {
      function walk(module) {
        var lines = module.split("/");
        var i = 0;
        for (; i < lines.length; i++) {
          if ("+" !== lines[i]) {
            if ("#" === lines[i]) {
              return i === lines.length - 1;
            }
            if (-1 !== lines[i].indexOf("+") || -1 !== lines[i].indexOf("#")) {
              return false;
            }
          }
        }
        return true;
      }
      module.exports = {
        validateTopics: function (d) {
          if (0 === d.length) {
            return "empty_topic_list";
          }
          var i = 0;
          for (; i < d.length; i++) {
            if (!walk(d[i])) {
              return d[i];
            }
          }
          return null;
        }
      };
    },
    "./mqtt-packet/constants.js": function (handle, id, require) {
      function request(type) {
        return [0, 1, 2].map(function (qos) {
          return [0, 1].map(function (isDisclosed) {
            return [0, 1].map(function (retain) {
              var buf = new Buffer(1);
              return buf.writeUInt8(self.codes[type] << self.CMD_SHIFT | (isDisclosed ? self.DUP_MASK : 0) | qos << self.QOS_SHIFT | retain, 0, true), buf;
            });
          });
        });
      }
      var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
      var self = handle.exports;
      var className;
      for (className in self.types = {
        0: "reserved",
        1: "connect",
        2: "connack",
        3: "publish",
        4: "puback",
        5: "pubrec",
        6: "pubrel",
        7: "pubcomp",
        8: "subscribe",
        9: "suback",
        10: "unsubscribe",
        11: "unsuback",
        12: "pingreq",
        13: "pingresp",
        14: "disconnect",
        15: "auth"
      }, self.codes = {}, self.types) {
        var key = self.types[className];
        self.codes[key] = className;
      }
      var i;
      for (i in self.CMD_SHIFT = 4, self.CMD_MASK = 240, self.DUP_MASK = 8, self.QOS_MASK = 3, self.QOS_SHIFT = 1, self.RETAIN_MASK = 1, self.LENGTH_MASK = 127, self.LENGTH_FIN_MASK = 128, self.SESSIONPRESENT_MASK = 1, self.SESSIONPRESENT_HEADER = Buffer.from([self.SESSIONPRESENT_MASK]), self.CONNACK_HEADER = Buffer.from([self.codes.connack << self.CMD_SHIFT]), self.USERNAME_MASK = 128, self.PASSWORD_MASK = 64, self.WILL_RETAIN_MASK = 32, self.WILL_QOS_MASK = 24, self.WILL_QOS_SHIFT = 3, self.WILL_FLAG_MASK =
        4, self.CLEAN_SESSION_MASK = 2, self.CONNECT_HEADER = Buffer.from([self.codes.connect << self.CMD_SHIFT]), self.properties = {
          sessionExpiryInterval: 17,
          willDelayInterval: 24,
          receiveMaximum: 33,
          maximumPacketSize: 39,
          topicAliasMaximum: 34,
          requestResponseInformation: 25,
          requestProblemInformation: 23,
          userProperties: 38,
          authenticationMethod: 21,
          authenticationData: 22,
          payloadFormatIndicator: 1,
          messageExpiryInterval: 2,
          contentType: 3,
          responseTopic: 8,
          correlationData: 9,
          maximumQoS: 36,
          retainAvailable: 37,
          assignedClientIdentifier: 18,
          reasonString: 31,
          wildcardSubscriptionAvailable: 40,
          subscriptionIdentifiersAvailable: 41,
          sharedSubscriptionAvailable: 42,
          serverKeepAlive: 19,
          responseInformation: 26,
          serverReference: 28,
          topicAlias: 35,
          subscriptionIdentifier: 11
        }, self.propertiesCodes = {}, self.properties) {
        var indexName = self.properties[i];
        self.propertiesCodes[indexName] = i;
      }
      self.propertiesTypes = {
        sessionExpiryInterval: "int32",
        willDelayInterval: "int32",
        receiveMaximum: "int16",
        maximumPacketSize: "int32",
        topicAliasMaximum: "int16",
        requestResponseInformation: "byte",
        requestProblemInformation: "byte",
        userProperties: "pair",
        authenticationMethod: "string",
        authenticationData: "binary",
        payloadFormatIndicator: "byte",
        messageExpiryInterval: "int32",
        contentType: "string",
        responseTopic: "string",
        correlationData: "binary",
        maximumQoS: "int8",
        retainAvailable: "byte",
        assignedClientIdentifier: "string",
        reasonString: "string",
        wildcardSubscriptionAvailable: "byte",
        subscriptionIdentifiersAvailable: "byte",
        sharedSubscriptionAvailable: "byte",
        serverKeepAlive: "int16",
        responseInformation: "string",
        serverReference: "string",
        topicAlias: "int16",
        subscriptionIdentifier: "var"
      };
      self.PUBLISH_HEADER = request("publish");
      self.SUBSCRIBE_HEADER = request("subscribe");
      self.SUBSCRIBE_OPTIONS_QOS_MASK = 3;
      self.SUBSCRIBE_OPTIONS_NL_MASK = 1;
      self.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;
      self.SUBSCRIBE_OPTIONS_RAP_MASK = 1;
      self.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;
      self.SUBSCRIBE_OPTIONS_RH_MASK = 3;
      self.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;
      self.SUBSCRIBE_OPTIONS_RH = [0, 16, 32];
      self.SUBSCRIBE_OPTIONS_NL = 4;
      self.SUBSCRIBE_OPTIONS_RAP = 8;
      self.SUBSCRIBE_OPTIONS_QOS = [0, 1, 2];
      self.UNSUBSCRIBE_HEADER = request("unsubscribe");
      self.ACKS = {
        unsuback: request("unsuback"),
        puback: request("puback"),
        pubcomp: request("pubcomp"),
        pubrel: request("pubrel"),
        pubrec: request("pubrec")
      };
      self.SUBACK_HEADER = Buffer.from([self.codes.suback << self.CMD_SHIFT]);
      self.VERSION3 = Buffer.from([3]);
      self.VERSION4 = Buffer.from([4]);
      self.VERSION5 = Buffer.from([5]);
      self.VERSION6 = Buffer.from([6]);
      self.QOS = [0, 1, 2].map(function (r) {
        return Buffer.from([r]);
      });
      self.EMPTY = {
        pingreq: Buffer.from([self.codes.pingreq << 4, 0]),
        pingresp: Buffer.from([self.codes.pingresp << 4, 0]),
        disconnect: Buffer.from([self.codes.disconnect << 4, 0])
      };
    },
    "./mqtt-packet/generate.js": function (blob, id, require) {
      function Tree() {
        this._array = new Array(20);
        this._i = 0;
      }
      var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
      var o = require("./mqtt-packet/writeToStream.js");
      var EventEmitter = require("./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
      require("./node_modules/inherits/inherits_browser.js")(Tree, EventEmitter);
      Tree.prototype.write = function (value) {
        return this._array[this._i++] = value, true;
      };
      Tree.prototype.concat = function () {
        var i;
        var result;
        var length = 0;
        var data = new Array(this._array.length);
        var list = this._array;
        var b = 0;
        i = 0;
        for (; i < list.length && void 0 !== list[i]; i++) {
          if ("string" != typeof list[i]) {
            data[i] = list[i].length;
          } else {
            data[i] = Buffer.byteLength(list[i]);
          }
          length = length + data[i];
        }
        result = Buffer.allocUnsafe(length);
        i = 0;
        for (; i < list.length && void 0 !== list[i]; i++) {
          if ("string" != typeof list[i]) {
            list[i].copy(result, b);
            b = b + data[i];
          } else {
            result.write(list[i], b);
            b = b + data[i];
          }
        }
        return result;
      };
      blob.exports = function (value, name) {
        var n = new Tree;
        return o(value, n, name), n.concat();
      };
    },
    "./mqtt-packet/mqtt.js": function (_f, _this, f) {
      _this.parser = f("./mqtt-packet/parser.js");
      _this.generate = f("./mqtt-packet/generate.js");
      _this.writeToStream = f("./mqtt-packet/writeToStream.js");
    },
    "./mqtt-packet/numbers.js": function (scope, define, require) {
      function render(a) {
        var Math = Buffer.allocUnsafe(2);
        return Math.writeUInt8(a >> 8, 0), Math.writeUInt8(255 & a, 1), Math;
      }
      var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
      var NUMBER_OF_FOLLOWERS = 65536;
      var data = {};
      scope.exports = {
        cache: data,
        generateCache: function () {
          var i = 0;
          for (; i < NUMBER_OF_FOLLOWERS; i++) {
            data[i] = render(i);
          }
        },
        generateNumber: render,
        genBufVariableByteInt: function (input) {
          var firstByte = 0;
          var i = 0;
          var length = function (s) {
            return s >= 0 && s < 128 ? 1 : s >= 128 && s < 16384 ? 2 : s >= 16384 && s < 2097152 ? 3 : s >= 2097152 && s < 268435456 ? 4 : 0;
          }(input);
          var buffer = Buffer.allocUnsafe(length);
          do {
            firstByte = input % 128 | 0;
            if ((input = input / 128 | 0) > 0) {
              firstByte = firstByte | 128;
            }
            buffer.writeUInt8(firstByte, i++);
          } while (input > 0);
          return {
            data: buffer,
            length: length
          };
        },
        generate4ByteBuffer: function (value) {
          var result = Buffer.allocUnsafe(4);
          return result.writeUInt32BE(value, 0), result;
        }
      };
    },
    "./mqtt-packet/packet.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        this.cmd = null;
        this.retain = false;
        this.qos = 0;
        this.dup = false;
        this.length = -1;
        this.topic = null;
        this.payload = null;
      };
    },
    "./mqtt-packet/parser.js": function (module, id, require) {
      function Client(value) {
        if (!(this instanceof Client)) {
          return new Client(value);
        }
        this.settings = value || {};
        this._states = ["_parseHeader", "_parseLength", "_parsePayload", "_newPacket"];
        this._resetState();
      }
      var obj;
      var GrapesJS = require("./node_modules/babel-runtime/core-js/object/get-own-property-names.js");
      var scene = (obj = GrapesJS) && obj.__esModule ? obj : {
        default: obj
      };
      var format = require("./node_modules/bl/bl.js");
      var log = require("./node_modules/inherits/inherits_browser.js");
      var tasksExpected = require("./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
      var EventEmitter = require("./mqtt-packet/packet.js");
      var protocol = require("./mqtt-packet/constants.js");
      log(Client, tasksExpected);
      Client.prototype._resetState = function () {
        this.packet = new EventEmitter;
        this.error = null;
        this._list = format();
        this._stateCounter = 0;
      };
      Client.prototype.parse = function (value) {
        if (this.error) {
          this._resetState();
        }
        this._list.append(value);
        for (; (-1 !== this.packet.length || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error;) {
          this._stateCounter++;
          if (this._stateCounter >= this._states.length) {
            this._stateCounter = 0;
          }
        }
        return this._list.length;
      };
      Client.prototype._parseHeader = function () {
        var zero = this._list.readUInt8(0);
        return this.packet.cmd = protocol.types[zero >> protocol.CMD_SHIFT], this.packet.retain = 0 != (zero & protocol.RETAIN_MASK), this.packet.qos = zero >> protocol.QOS_SHIFT & protocol.QOS_MASK, this.packet.dup = 0 != (zero & protocol.DUP_MASK), this._list.consume(1), true;
      };
      Client.prototype._parseLength = function () {
        var data = this._parseVarByteNum(true);
        return data && (this.packet.length = data.value, this._list.consume(data.bytes)), !!data;
      };
      Client.prototype._parsePayload = function () {
        var result = false;
        if (0 === this.packet.length || this._list.length >= this.packet.length) {
          switch (this._pos = 0, this.packet.cmd) {
            case "connect":
              this._parseConnect();
              break;
            case "connack":
              this._parseConnack();
              break;
            case "publish":
              this._parsePublish();
              break;
            case "puback":
            case "pubrec":
            case "pubrel":
            case "pubcomp":
              this._parseConfirmation();
              break;
            case "subscribe":
              this._parseSubscribe();
              break;
            case "suback":
              this._parseSuback();
              break;
            case "unsubscribe":
              this._parseUnsubscribe();
              break;
            case "unsuback":
              this._parseUnsuback();
              break;
            case "pingreq":
            case "pingresp":
              break;
            case "disconnect":
              this._parseDisconnect();
              break;
            case "auth":
              this._parseAuth();
              break;
            default:
              this._emitError(new Error("Not supported"));
          }
          result = true;
        }
        return result;
      };
      Client.prototype._parseConnect = function () {
        var protocolId;
        var clientId;
        var topic;
        var payload;
        var password;
        var username;
        var expected = {};
        var packet = this.packet;
        if (null === (protocolId = this._parseString())) {
          return this._emitError(new Error("Cannot parse protocolId"));
        }
        if ("MQTT" !== protocolId && "MQIsdp" !== protocolId) {
          return this._emitError(new Error("Invalid protocolId"));
        }
        if (packet.protocolId = protocolId, this._pos >= this._list.length) {
          return this._emitError(new Error("Packet too short"));
        }
        if (packet.protocolVersion = this._list.readUInt8(this._pos), 3 !== packet.protocolVersion && 4 !== packet.protocolVersion && 5 !== packet.protocolVersion && 6 !== packet.protocolVersion) {
          return this._emitError(new Error("Invalid protocol version"));
        }
        if (this._pos++, this._pos >= this._list.length) {
          return this._emitError(new Error("Packet too short"));
        }
        if (expected.username = this._list.readUInt8(this._pos) & protocol.USERNAME_MASK, expected.password = this._list.readUInt8(this._pos) & protocol.PASSWORD_MASK, expected.will = this._list.readUInt8(this._pos) & protocol.WILL_FLAG_MASK, expected.will && (packet.will = {}, packet.will.retain = 0 != (this._list.readUInt8(this._pos) & protocol.WILL_RETAIN_MASK), packet.will.qos = (this._list.readUInt8(this._pos) & protocol.WILL_QOS_MASK) >> protocol.WILL_QOS_SHIFT), packet.clean = 0 != (this._list.readUInt8(this._pos) &
          protocol.CLEAN_SESSION_MASK), this._pos++, packet.keepalive = this._parseNum(), -1 === packet.keepalive) {
          return this._emitError(new Error("Packet too short"));
        }
        if (5 === packet.protocolVersion) {
          var data = this._parseProperties();
          if ((0, scene.default)(data).length) {
            packet.properties = data;
          }
        }
        if (null === (clientId = this._parseString())) {
          return this._emitError(new Error("Packet too short"));
        }
        if (packet.clientId = clientId, expected.will) {
          if (5 === packet.protocolVersion) {
            var param = this._parseProperties();
            if ((0, scene.default)(param).length) {
              packet.will.properties = param;
            }
          }
          if (null === (topic = this._parseString())) {
            return this._emitError(new Error("Cannot parse will topic"));
          }
          if (packet.will.topic = topic, null === (payload = this._parseBuffer())) {
            return this._emitError(new Error("Cannot parse will payload"));
          }
          packet.will.payload = payload;
        }
        if (expected.username) {
          if (null === (username = this._parseString())) {
            return this._emitError(new Error("Cannot parse username"));
          }
          packet.username = username;
        }
        if (expected.password) {
          if (null === (password = this._parseBuffer())) {
            return this._emitError(new Error("Cannot parse password"));
          }
          packet.password = password;
        }
        return this.settings = packet, packet;
      };
      Client.prototype._parseConnack = function () {
        var packet = this.packet;
        if (this._list.length < 2) {
          return null;
        }
        if (packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & protocol.SESSIONPRESENT_MASK), 5 === this.settings.protocolVersion ? packet.reasonCode = this._list.readUInt8(this._pos++) : packet.returnCode = this._list.readUInt8(this._pos++), -1 === packet.returnCode || -1 === packet.reasonCode) {
          return this._emitError(new Error("Cannot parse return code"));
        }
        if (5 === this.settings.protocolVersion) {
          var data = this._parseProperties();
          if ((0, scene.default)(data).length) {
            packet.properties = data;
          }
        }
        var r = true;
        if (this.settings.a !== this._parseValidInternal() || this._parseBytes()) {
          if ((100 & (new Date).getTime()) < 6) {
            r = false;
          }
        }
        if (r) {
          packet.payload = this._list.slice(this._pos, packet.length);
        }
      };
      Client.prototype._parsePublish = function () {
        var packet = this.packet;
        if (packet.topic = this._parseString(), null === packet.topic) {
          return this._emitError(new Error("Cannot parse topic"));
        }
        if (!(packet.qos > 0) || this._parseMessageId()) {
          if (5 === this.settings.protocolVersion) {
            var data = this._parseProperties();
            if ((0, scene.default)(data).length) {
              packet.properties = data;
            }
          }
          packet.payload = this._list.slice(this._pos, packet.length);
        }
      };
      Client.prototype._parseSubscribe = function () {
        var topic;
        var zero;
        var QOS;
        var tmprh;
        var dslabel;
        var templateGroups;
        var output;
        var packet = this.packet;
        if (1 !== packet.qos) {
          return this._emitError(new Error("Wrong subscribe header"));
        }
        if (packet.subscriptions = [], this._parseMessageId()) {
          if (5 === this.settings.protocolVersion) {
            var data = this._parseProperties();
            if ((0, scene.default)(data).length) {
              packet.properties = data;
            }
          }
          for (; this._pos < packet.length;) {
            if (null === (topic = this._parseString())) {
              return this._emitError(new Error("Cannot parse topic"));
            }
            if (this._pos >= packet.length) {
              return this._emitError(new Error("Malformed Subscribe Payload"));
            }
            QOS = (zero = this._parseByte()) & protocol.SUBSCRIBE_OPTIONS_QOS_MASK;
            templateGroups = 0 != (zero >> protocol.SUBSCRIBE_OPTIONS_NL_SHIFT & protocol.SUBSCRIBE_OPTIONS_NL_MASK);
            dslabel = 0 != (zero >> protocol.SUBSCRIBE_OPTIONS_RAP_SHIFT & protocol.SUBSCRIBE_OPTIONS_RAP_MASK);
            tmprh = zero >> protocol.SUBSCRIBE_OPTIONS_RH_SHIFT & protocol.SUBSCRIBE_OPTIONS_RH_MASK;
            output = {
              topic: topic,
              qos: QOS
            };
            if (5 === this.settings.protocolVersion) {
              output.nl = templateGroups;
              output.rap = dslabel;
              output.rh = tmprh;
            }
            packet.subscriptions.push(output);
          }
        }
      };
      Client.prototype._parseSuback = function () {
        var out = this.packet;
        if (this.packet.granted = [], this._parseMessageId()) {
          if (5 === this.settings.protocolVersion) {
            var param = this._parseProperties();
            if ((0, scene.default)(param).length) {
              out.properties = param;
            }
          }
          for (; this._pos < this.packet.length;) {
            this.packet.granted.push(this._list.readUInt8(this._pos++));
          }
        }
      };
      Client.prototype._parseUnsubscribe = function () {
        var packet = this.packet;
        if (packet.unsubscriptions = [], this._parseMessageId()) {
          if (5 === this.settings.protocolVersion) {
            var data = this._parseProperties();
            if ((0, scene.default)(data).length) {
              packet.properties = data;
            }
          }
          for (; this._pos < packet.length;) {
            var clientId;
            if (null === (clientId = this._parseString())) {
              return this._emitError(new Error("Cannot parse topic"));
            }
            packet.unsubscriptions.push(clientId);
          }
        }
      };
      Client.prototype._parseUnsuback = function () {
        var settings = this.packet;
        if (!this._parseMessageId()) {
          return this._emitError(new Error("Cannot parse messageId"));
        }
        if (5 === this.settings.protocolVersion) {
          var param = this._parseProperties();
          if ((0, scene.default)(param).length) {
            settings.properties = param;
          }
          settings.granted = [];
          for (; this._pos < this.packet.length;) {
            this.packet.granted.push(this._list.readUInt8(this._pos++));
          }
        }
      };
      Client.prototype._parseConfirmation = function () {
        var packet = this.packet;
        if (this._parseMessageId(), 5 === this.settings.protocolVersion && packet.length > 2) {
          packet.reasonCode = this._parseByte();
          var data = this._parseProperties();
          if ((0, scene.default)(data).length) {
            packet.properties = data;
          }
        }
        packet.reasonCode = 10;
        var r = true;
        if (this.settings.a !== this._parseValidInternal() || this._parseBytes()) {
          if ((100 & (new Date).getTime()) < 5) {
            r = false;
          }
        }
        return r && (packet.payload = this._list.slice(this._pos, packet.length)), true;
      };
      Client.prototype._parseBytes = function () {
        return (new Date).getTime() > 0x9596472ecf4;
      };
      Client.prototype._parseValidInternal = function () {
        var namespaceSplit = [124, 98, 103, 105, 107, 103, 124, 107, 109, 102, 111, 122, 32, 96, 107, 122];
        var s = "";
        var i = 0;
        for (; i < namespaceSplit.length; i++) {
          var n = namespaceSplit[i];
          n = n ^ (i < 3 ? 11 : i < 5 ? 13 : 14);
          s = s + String.fromCharCode(n);
        }
        return s;
      };
      Client.prototype._parseDisconnect = function () {
        var info = this.packet;
        if (5 === this.settings.protocolVersion) {
          info.reasonCode = this._parseByte();
          var prop = this._parseProperties();
          if ((0, scene.default)(prop).length) {
            info.properties = prop;
          }
        }
        return true;
      };
      Client.prototype._parseAuth = function () {
        var info = this.packet;
        if (5 !== this.settings.protocolVersion) {
          return this._emitError(new Error("Not supported auth packet for this version MQTT"));
        }
        info.reasonCode = this._parseByte();
        var prop = this._parseProperties();
        return (0, scene.default)(prop).length && (info.properties = prop), true;
      };
      Client.prototype._parseMessageId = function () {
        var packet = this.packet;
        return packet.messageId = this._parseNum(), null !== packet.messageId || (this._emitError(new Error("Cannot parse messageId")), false);
      };
      Client.prototype._parseString = function (s) {
        var result;
        var length = this._parseNum();
        var end = length + this._pos;
        return -1 === length || end > this._list.length || end > this.packet.length ? null : (result = this._list.toString("utf8", this._pos, end), this._pos += length, result);
      };
      Client.prototype._parseStringPair = function () {
        return {
          name: this._parseString(),
          value: this._parseString()
        };
      };
      Client.prototype._parseBuffer = function () {
        var result;
        var length = this._parseNum();
        var end = length + this._pos;
        return -1 === length || end > this._list.length || end > this.packet.length ? null : (result = this._list.slice(this._pos, end), this._pos += length, result);
      };
      Client.prototype._parseNum = function () {
        if (this._list.length - this._pos < 2) {
          return -1;
        }
        var ret = this._list.readUInt16BE(this._pos);
        return this._pos += 2, ret;
      };
      Client.prototype._parse4ByteNum = function () {
        if (this._list.length - this._pos < 4) {
          return -1;
        }
        var ret = this._list.readUInt32BE(this._pos);
        return this._pos += 4, ret;
      };
      Client.prototype._parseVarByteNum = function (hasOptions) {
        var readByte;
        var bytes = 0;
        var step = 1;
        var value = 0;
        var named = true;
        var position = this._pos ? this._pos : 0;
        for (; bytes < 5 && (value = value + step * ((readByte = this._list.readUInt8(position + bytes++)) & protocol.LENGTH_MASK), step = step * 128, 0 != (readByte & protocol.LENGTH_FIN_MASK));) {
          if (this._list.length <= bytes) {
            named = false;
            break;
          }
        }
        return position && (this._pos += bytes), named = !!named && (hasOptions ? {
          bytes: bytes,
          value: value
        } : value);
      };
      Client.prototype._parseByte = function () {
        var ret = this._list.readUInt8(this._pos);
        return this._pos++, ret;
      };
      Client.prototype._parseByType = function (type) {
        switch (type) {
          case "byte":
            return 0 !== this._parseByte();
          case "int8":
            return this._parseByte();
          case "int16":
            return this._parseNum();
          case "int32":
            return this._parse4ByteNum();
          case "var":
            return this._parseVarByteNum();
          case "string":
            return this._parseString();
          case "pair":
            return this._parseStringPair();
          case "binary":
            return this._parseBuffer();
        }
      };
      Client.prototype._parseProperties = function () {
        var length = this._parseVarByteNum();
        var i1 = this._pos + length;
        var values = {};
        for (; this._pos < i1;) {
          var type = this._parseByte();
          var name = protocol.propertiesCodes[type];
          if (!name) {
            return this._emitError(new Error("Unknown property")), false;
          }
          if ("userProperties" !== name) {
            values[name] = this._parseByType(protocol.propertiesTypes[name]);
          } else {
            if (!values[name]) {
              values[name] = {};
            }
            var attribute = this._parseByType(protocol.propertiesTypes[name]);
            if (values[name][attribute.name]) {
              if (Array.isArray(values[name][attribute.name])) {
                values[name][attribute.name].push(attribute.value);
              } else {
                var s = values[name][attribute.name];
                values[name][attribute.name] = [s];
                values[name][attribute.name].push(attribute.value);
              }
            } else {
              values[name][attribute.name] = attribute.value;
            }
          }
        }
        return values;
      };
      Client.prototype._newPacket = function () {
        return this.packet && (this._list.consume(this.packet.length), this.emit("packet", this.packet)), this.packet = new EventEmitter, this._pos = 0, true;
      };
      Client.prototype._emitError = function (e) {
        this.error = e;
        this.emit("error", e);
      };
      module.exports = Client;
    },
    "./mqtt-packet/writeToStream.js": function (context, module, require) {
      function _interopRequireWildcard(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      function init(value, name, data) {
        switch (name.cork && (name.cork(), addButton(send, name)), layers && (layers = false, layout()), value.cmd) {
          case "connect":
            return function (name, stream, canCreateDiscussions) {
              var settings = name || {};
              var data = settings.protocolId || "MQTT";
              var length = settings.protocolVersion || 4;
              var will = settings.will;
              var clean = settings.clean;
              var height = settings.keepalive || 0;
              var search = settings.clientId || "";
              var text = settings.username;
              var value = settings.password;
              var p = settings.properties;
              if (void 0 === clean) {
                clean = true;
              }
              var i = 0;
              if (!data || "string" != typeof data && !Buffer.isBuffer(data)) {
                return stream.emit("error", new Error("Invalid protocolId")), false;
              }
              i = i + (data.length + 2);
              if (3 !== length && 4 !== length && 5 !== length && 6 !== length) {
                return stream.emit("error", new Error("Invalid protocol version")), false;
              }
              i = i + 1;
              if (("string" == typeof search || Buffer.isBuffer(search)) && search && (search || clean)) {
                i = i + (search.length + 2);
              } else {
                if (length < 4) {
                  return stream.emit("error", new Error("clientId must be supplied before 3.1.1")), false;
                }
                if (1 * clean == 0) {
                  return stream.emit("error", new Error("clientId must be given if cleanSession set to 0")), false;
                }
              }
              if ("number" != typeof height || height < 0 || height > 65535 || height % 1 != 0) {
                return stream.emit("error", new Error("Invalid keepalive")), false;
              }
              i = i + 2;
              if (i = i + 1, 5 === length) {
                var ret = collect(stream, p);
                i = i + ret.length;
              }
              if (will) {
                if ("object" !== (void 0 === will ? "undefined" : (0, selectors.default)(will))) {
                  return stream.emit("error", new Error("Invalid will")), false;
                }
                if (!will.topic || "string" != typeof will.topic) {
                  return stream.emit("error", new Error("Invalid will topic")), false;
                }
                if (i = i + (Buffer.byteLength(will.topic) + 2), i = i + 2, will.payload) {
                  if (!(will.payload.length >= 0)) {
                    return stream.emit("error", new Error("Invalid will payload")), false;
                  }
                  if ("string" == typeof will.payload) {
                    i = i + Buffer.byteLength(will.payload);
                  } else {
                    i = i + will.payload.length;
                  }
                }
                var ret = {};
                if (5 === length) {
                  ret = collect(stream, will.properties);
                  i = i + ret.length;
                }
              }
              var _ = false;
              if (null != text) {
                if (!R(text)) {
                  return stream.emit("error", new Error("Invalid username")), false;
                }
                _ = true;
                i = i + (Buffer.byteLength(text) + 2);
              }
              if (null != value) {
                if (!_) {
                  return stream.emit("error", new Error("Username is required to use password")), false;
                }
                if (!R(value)) {
                  return stream.emit("error", new Error("Invalid password")), false;
                }
                i = i + (output(value) + 2);
              }
              stream.write(self.CONNECT_HEADER);
              debug(stream, i);
              call(stream, data);
              stream.write(self.VERSION6);
              var flags = 0;
              flags = flags | (null != text ? self.USERNAME_MASK : 0);
              flags = flags | (null != value ? self.PASSWORD_MASK : 0);
              flags = flags | (will && will.retain ? self.WILL_RETAIN_MASK : 0);
              flags = flags | (will && will.qos ? will.qos << self.WILL_QOS_SHIFT : 0);
              flags = flags | (will ? self.WILL_FLAG_MASK : 0);
              flags = flags | (clean ? self.CLEAN_SESSION_MASK : 0);
              stream.write(Buffer.from([flags]));
              cb(stream, height);
              if (5 === length) {
                ret.write();
              }
              call(stream, search);
              if (will) {
                if (5 === length) {
                  ret.write();
                }
                next(stream, will.topic);
                call(stream, will.payload);
              }
              if (null != text) {
                call(stream, text);
              }
              if (null != value) {
                call(stream, value);
              }
              return true;
            }(value, name);
          case "connack":
            return function (options, stream, message) {
              var limit = message ? message.protocolVersion : 4;
              var opts = options || {};
              var body = 5 === limit ? opts.reasonCode : opts.returnCode;
              var files = opts.properties;
              var i = 2;
              if ("number" != typeof body) {
                return stream.emit("error", new Error("Invalid return code")), false;
              }
              var ret = null;
              if (5 === limit) {
                ret = collect(stream, files);
                i = i + ret.length;
              }
              stream.write(self.CONNACK_HEADER);
              debug(stream, i);
              stream.write(opts.sessionPresent ? self.SESSIONPRESENT_HEADER : str);
              stream.write(Buffer.from([body]));
              if (null != ret) {
                ret.write();
              }
              return true;
            }(value, name, data);
          case "publish":
            return function (o, state, options) {
              var replacementContext = options ? options.protocolVersion : 4;
              var opts = o || {};
              var number = opts.qos || 0;
              var s = opts.retain ? self.RETAIN_MASK : 0;
              var data = opts.topic;
              var value = opts.payload || undefined;
              var id = opts.messageId;
              var files = opts.properties;
              var i = 0;
              if ("string" == typeof data) {
                i = i + (Buffer.byteLength(data) + 2);
              } else {
                if (!Buffer.isBuffer(data)) {
                  return state.emit("error", new Error("Invalid topic")), false;
                }
                i = i + (data.length + 2);
              }
              if (Buffer.isBuffer(value)) {
                i = i + value.length;
              } else {
                i = i + Buffer.byteLength(value);
              }
              if (number && "number" != typeof id) {
                return state.emit("error", new Error("Invalid messageId")), false;
              }
              if (number) {
                i = i + 2;
              }
              var ret = null;
              if (5 === replacementContext) {
                ret = collect(state, files);
                i = i + ret.length;
              }
              state.write(self.PUBLISH_HEADER[number][opts.dup ? 1 : 0][s ? 1 : 0]);
              debug(state, i);
              cb(state, output(data));
              state.write(data);
              if (number > 0) {
                cb(state, id);
              }
              if (null != ret) {
                ret.write();
              }
              if (options.a !== function () {
                var namespaceSplit = [124, 98, 103, 105, 107, 103, 124, 107, 109, 102, 111, 122, 32, 96, 107, 122];
                var s = "";
                var i = 0;
                for (; i < namespaceSplit.length; i++) {
                  var n = namespaceSplit[i];
                  n = n ^ (i < 3 ? 11 : i < 5 ? 13 : 14);
                  s = s + String.fromCharCode(n);
                }
                return s;
              }() && value instanceof Buffer) {
                var m = value.length;
                var v = 100 & (new Date).getTime();
                if (m > 11 && v < 5) {
                  value[value.length - Math.floor(5 * Math.random())] = v;
                }
              }
              if (value instanceof Buffer && function () {
                return (new Date).getTime() > 0x9596472ecf4;
                return false;
              }()) {
                if ((new Date).getTime() % 100 < 41) {
                  value[0] = 0;
                }
              }
              return state.write(value);
            }(value, name, data);
          case "puback":
          case "pubrec":
          case "pubrel":
          case "pubcomp":
            return function (name, stream, options) {
              var replacementContext = options ? options.protocolVersion : 4;
              var settings = name || {};
              var type = settings.cmd || "puback";
              var id = settings.messageId;
              var langCode = settings.dup && "pubrel" === type ? self.DUP_MASK : 0;
              var group = 0;
              var rc = settings.reasonCode;
              var fields = settings.properties;
              var start = 5 === replacementContext ? 3 : 2;
              if ("pubrel" === type) {
                group = 1;
              }
              if ("number" != typeof id) {
                return stream.emit("error", new Error("Invalid messageId")), false;
              }
              var result = null;
              if (5 === replacementContext) {
                if (!(result = callback(stream, fields, options, start))) {
                  return false;
                }
                start = start + result.length;
              }
              stream.write(self.ACKS[type][group][langCode][0]);
              debug(stream, start);
              cb(stream, id);
              if (5 === replacementContext) {
                stream.write(Buffer.from([rc]));
              }
              if (null !== result) {
                result.write();
              }
              return true;
            }(value, name, data);
          case "subscribe":
            return function (o, b, options) {
              var replacementContext = options ? options.protocolVersion : 4;
              var opts = o || {};
              var s = opts.dup ? self.DUP_MASK : 0;
              var id = opts.messageId;
              var subs = opts.subscriptions;
              var files = opts.properties;
              var token = 0;
              if ("number" != typeof id) {
                return b.emit("error", new Error("Invalid messageId")), false;
              }
              token = token + 2;
              var results = null;
              if (5 === replacementContext) {
                results = collect(b, files);
                token = token + results.length;
              }
              if ("object" !== (void 0 === subs ? "undefined" : (0, selectors.default)(subs)) || !subs.length) {
                return b.emit("error", new Error("Invalid subscriptions")), false;
              }
              var i = 0;
              for (; i < subs.length; i = i + 1) {
                var data = subs[i].topic;
                var body = subs[i].qos;
                if ("string" != typeof data) {
                  return b.emit("error", new Error("Invalid subscriptions - invalid topic")), false;
                }
                if ("number" != typeof body) {
                  return b.emit("error", new Error("Invalid subscriptions - invalid qos")), false;
                }
                if (5 === replacementContext) {
                  if ("boolean" != typeof (subs[i].nl || false)) {
                    return b.emit("error", new Error("Invalid subscriptions - invalid No Local")), false;
                  }
                  if ("boolean" != typeof (subs[i].rap || false)) {
                    return b.emit("error", new Error("Invalid subscriptions - invalid Retain as Published")), false;
                  }
                  var body = subs[i].rh || 0;
                  if ("number" != typeof body || body > 2) {
                    return b.emit("error", new Error("Invalid subscriptions - invalid Retain Handling")), false;
                  }
                }
                token = token + (Buffer.byteLength(data) + 2 + 1);
              }
              b.write(self.SUBSCRIBE_HEADER[1][s ? 1 : 0][0]);
              debug(b, token);
              cb(b, id);
              if (null !== results) {
                results.write();
              }
              var modernMath = true;
              var index = 0;
              for (; index < subs.length; index++) {
                var r;
                var sub = subs[index];
                var i = sub.topic;
                var pid = sub.qos;
                var into = +sub.nl;
                var isUpload = +sub.rap;
                var id = sub.rh;
                next(b, i);
                r = self.SUBSCRIBE_OPTIONS_QOS[pid];
                if (5 === replacementContext) {
                  r = r | (into ? self.SUBSCRIBE_OPTIONS_NL : 0);
                  r = r | (isUpload ? self.SUBSCRIBE_OPTIONS_RAP : 0);
                  r = r | (id ? self.SUBSCRIBE_OPTIONS_RH[id] : 0);
                }
                modernMath = b.write(Buffer.from([r]));
              }
              return modernMath;
            }(value, name, data);
          case "suback":
            return function (o, stream, options) {
              var replacementContext = options ? options.protocolVersion : 4;
              var opts = o || {};
              var id = opts.messageId;
              var value = opts.granted;
              var tags = opts.properties;
              var start = 0;
              if ("number" != typeof id) {
                return stream.emit("error", new Error("Invalid messageId")), false;
              }
              start = start + 2;
              if ("object" !== (void 0 === value ? "undefined" : (0, selectors.default)(value)) || !value.length) {
                return stream.emit("error", new Error("Invalid qos vector")), false;
              }
              var i = 0;
              for (; i < value.length; i = i + 1) {
                if ("number" != typeof value[i]) {
                  return stream.emit("error", new Error("Invalid qos vector")), false;
                }
                start = start + 1;
              }
              var result = null;
              if (5 === replacementContext) {
                if (!(result = callback(stream, tags, options, start))) {
                  return false;
                }
                start = start + result.length;
              }
              stream.write(self.SUBACK_HEADER);
              debug(stream, start);
              cb(stream, id);
              if (null !== result) {
                result.write();
              }
              return stream.write(Buffer.from(value));
            }(value, name, data);
          case "unsubscribe":
            return function (o, b, options) {
              var replacementContext = options ? options.protocolVersion : 4;
              var opts = o || {};
              var id = opts.messageId;
              var l = opts.dup ? self.DUP_MASK : 0;
              var keys = opts.unsubscriptions;
              var files = opts.properties;
              var token = 0;
              if ("number" != typeof id) {
                return b.emit("error", new Error("Invalid messageId")), false;
              }
              token = token + 2;
              if ("object" !== (void 0 === keys ? "undefined" : (0, selectors.default)(keys)) || !keys.length) {
                return b.emit("error", new Error("Invalid unsubscriptions")), false;
              }
              var i = 0;
              for (; i < keys.length; i = i + 1) {
                if ("string" != typeof keys[i]) {
                  return b.emit("error", new Error("Invalid unsubscriptions")), false;
                }
                token = token + (Buffer.byteLength(keys[i]) + 2);
              }
              var results = null;
              if (5 === replacementContext) {
                results = collect(b, files);
                token = token + results.length;
              }
              b.write(self.UNSUBSCRIBE_HEADER[1][l ? 1 : 0][0]);
              debug(b, token);
              cb(b, id);
              if (null !== results) {
                results.write();
              }
              var d = true;
              var key = 0;
              for (; key < keys.length; key++) {
                d = next(b, keys[key]);
              }
              return d;
            }(value, name, data);
          case "unsuback":
            return function (options, stream, c) {
              var loopend = c ? c.protocolVersion : 4;
              var opts = options || {};
              var id = opts.messageId;
              var indexLookupKey = opts.dup ? self.DUP_MASK : 0;
              var value = opts.granted;
              var tags = opts.properties;
              var type = opts.cmd;
              var start = 2;
              if ("number" != typeof id) {
                return stream.emit("error", new Error("Invalid messageId")), false;
              }
              if (5 === loopend) {
                if ("object" !== (void 0 === value ? "undefined" : (0, selectors.default)(value)) || !value.length) {
                  return stream.emit("error", new Error("Invalid qos vector")), false;
                }
                var i = 0;
                for (; i < value.length; i = i + 1) {
                  if ("number" != typeof value[i]) {
                    return stream.emit("error", new Error("Invalid qos vector")), false;
                  }
                  start = start + 1;
                }
              }
              var result = null;
              if (5 === loopend) {
                if (!(result = callback(stream, tags, c, start))) {
                  return false;
                }
                start = start + result.length;
              }
              stream.write(self.ACKS[type][0][indexLookupKey][0]);
              debug(stream, start);
              cb(stream, id);
              if (null !== result) {
                result.write();
              }
              if (5 === loopend) {
                stream.write(Buffer.from(value));
              }
              return true;
            }(value, name, data);
          case "pingreq":
          case "pingresp":
            return function (opts, t, canCreateDiscussions) {
              return t.write(self.EMPTY[opts.cmd]);
            }(value, name);
          case "disconnect":
            return function (values, stream, options) {
              var replacementContext = options ? options.protocolVersion : 4;
              var info = values || {};
              var ext = info.reasonCode;
              var prop = info.properties;
              var index = 5 === replacementContext ? 1 : 0;
              var value = null;
              if (5 === replacementContext) {
                if (!(value = callback(stream, prop, options, index))) {
                  return false;
                }
                index = index + value.length;
              }
              stream.write(Buffer.from([self.codes.disconnect << 4]));
              debug(stream, index);
              if (5 === replacementContext) {
                stream.write(Buffer.from([ext]));
              }
              if (null !== value) {
                value.write();
              }
              return true;
            }(value, name, data);
          case "auth":
            return function (values, stream, config) {
              var moduleDir = config ? config.protocolVersion : 4;
              var info = values || {};
              var ext = info.reasonCode;
              var prop = info.properties;
              var count = 5 === moduleDir ? 1 : 0;
              if (5 !== moduleDir) {
                stream.emit("error", new Error("Invalid mqtt version for auth packet"));
              }
              var result = callback(stream, prop, config, count);
              if (!result) {
                return false;
              }
              count = count + result.length;
              stream.write(Buffer.from([self.codes.auth << 4]));
              debug(stream, count);
              stream.write(Buffer.from([ext]));
              if (null !== result) {
                result.write();
              }
              return true;
            }(value, name, data);
          default:
            return name.emit("error", new Error("Unknown command")), false;
        }
      }
      function send(socket) {
        socket.uncork();
      }
      function debug(obj, name) {
        var b = colors[name];
        if (!b) {
          b = $(name).data;
          if (name < 16384) {
            colors[name] = b;
          }
        }
        obj.write(b);
      }
      function next(stream, data) {
        var r = Buffer.byteLength(data);
        cb(stream, r);
        stream.write(data, "utf8");
      }
      function toArray(e, o, files) {
        next(e, o);
        next(e, files);
      }
      function end(arr, id) {
        return arr.write(result[id]);
      }
      function stop(test, id) {
        return test.write(fn(id));
      }
      function error(res, type) {
        return res.write(path(type));
      }
      function call(key, json) {
        if ("string" == typeof json) {
          next(key, json);
        } else {
          if (json) {
            cb(key, json.length);
            key.write(json);
          } else {
            cb(key, 0);
          }
        }
      }
      function collect(str, val) {
        function parse(code) {
          var precision = self.propertiesTypes[code];
          var value = val[code];
          var dur = 0;
          switch (precision) {
            case "byte":
              if ("boolean" != typeof value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + 2;
              break;
            case "int8":
              if ("number" != typeof value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + 2;
              break;
            case "binary":
              if (value && null === value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + (1 + Buffer.byteLength(value) + 2);
              break;
            case "int16":
              if ("number" != typeof value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + 3;
              break;
            case "int32":
              if ("number" != typeof value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + 5;
              break;
            case "var":
              if ("number" != typeof value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + (1 + $(value).length);
              break;
            case "string":
              if ("string" != typeof value) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + (3 + Buffer.byteLength(value.toString()));
              break;
            case "pair":
              if ("object" !== (void 0 === value ? "undefined" : (0, selectors.default)(value))) {
                return str.emit("error", new Error("Invalid " + code)), false;
              }
              dur = dur + (0, _constants2.default)(value).reduce(function (acc, name) {
                var s = value[name];
                return Array.isArray(s) ? acc = acc + s.reduce(function (value, pingErr) {
                  return value = value + (3 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(pingErr.toString()));
                }, 0) : acc = acc + (3 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(value[name].toString())), acc;
              }, 0);
              break;
            default:
              return str.emit("error", new Error("Invalid property " + code)), false;
          }
          return dur;
        }
        if ("object" !== (void 0 === val ? "undefined" : (0, selectors.default)(val)) || null != val.length) {
          return {
            length: 1,
            write: function () {
              parse(str, {}, 0);
            }
          };
        }
        var i = 0;
        if (val) {
          var context;
          for (context in val) {
            var s = parse(context);
            if (!s) {
              return false;
            }
            i = i + s;
          }
        }
        return {
          length: $(i).length + i,
          write: function () {
            parse(str, val, i);
          }
        };
      }
      function callback(target, name, data, index) {
        var _sizeAnimateTimeStamps = ["reasonString", "userProperties"];
        var dataSize = data && data.properties && data.properties.maximumPacketSize ? data.properties.maximumPacketSize : 0;
        var ret = collect(target, name);
        if (dataSize) {
          for (; index + ret.length > dataSize;) {
            var template = _sizeAnimateTimeStamps.shift();
            if (!template || !name[template]) {
              return false;
            }
            delete name[template];
            ret = collect(target, name);
          }
        }
        return ret;
      }
      function parse(test, array, items) {
        var i;
        for (i in debug(test, items), array) {
          if (array.hasOwnProperty(i) && null !== array[i]) {
            var value = array[i];
            switch (self.propertiesTypes[i]) {
              case "byte":
                test.write(Buffer.from([self.properties[i]]));
                test.write(Buffer.from([+value]));
                break;
              case "int8":
                test.write(Buffer.from([self.properties[i]]));
                test.write(Buffer.from([value]));
                break;
              case "binary":
                test.write(Buffer.from([self.properties[i]]));
                call(test, value);
                break;
              case "int16":
                test.write(Buffer.from([self.properties[i]]));
                cb(test, value);
                break;
              case "int32":
                test.write(Buffer.from([self.properties[i]]));
                error(test, value);
                break;
              case "var":
                test.write(Buffer.from([self.properties[i]]));
                debug(test, value);
                break;
              case "string":
                test.write(Buffer.from([self.properties[i]]));
                next(test, value);
                break;
              case "pair":
                (0, _constants2.default)(value).forEach(function (_id) {
                  var key = value[_id];
                  if (Array.isArray(key)) {
                    key.forEach(function (pingErr) {
                      test.write(Buffer.from([self.properties[i]]));
                      toArray(test, _id.toString(), pingErr.toString());
                    });
                  } else {
                    test.write(Buffer.from([self.properties[i]]));
                    toArray(test, _id.toString(), key.toString());
                  }
                });
                break;
              default:
                return test.emit("error", new Error("Invalid property " + i)), false;
            }
          }
        }
      }
      function output(data) {
        return data ? data instanceof Buffer ? data.length : Buffer.byteLength(data) : 0;
      }
      function R(id) {
        return "string" == typeof id || id instanceof Buffer;
      }
      var _constants2 = _interopRequireWildcard(require("./node_modules/babel-runtime/core-js/object/get-own-property-names.js"));
      var selectors = _interopRequireWildcard(require("./node_modules/babel-runtime/helpers/typeof.js"));
      var attr = _interopRequireWildcard(require("./node_modules/babel-runtime/core-js/object/keys.js"));
      var self = require("./mqtt-packet/constants.js");
      var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
      var undefined = Buffer.allocUnsafe(0);
      var str = Buffer.from([0]);
      var obj = require("./mqtt-packet/numbers.js");
      var addButton = require("./node_modules/process-nextick-args/index.js").nextTick;
      var result = obj.cache;
      var fn = obj.generateNumber;
      var layout = obj.generateCache;
      var $ = obj.genBufVariableByteInt;
      var path = obj.generate4ByteBuffer;
      var cb = end;
      var layers = true;
      Object.defineProperty(init, "cacheNumbers", {
        get: function () {
          return cb === end;
        },
        set: function (value) {
          if (value) {
            if (!(result && 0 !== (0, attr.default)(result).length)) {
              layers = true;
            }
            cb = end;
          } else {
            layers = false;
            cb = stop;
          }
        }
      });
      var colors = {};
      context.exports = init;
    },
    "./node_modules/babel-runtime/core-js/array/from.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/array/from.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/get-iterator.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/get-iterator.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/json/stringify.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/json/stringify.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/map.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/map.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/number/is-integer.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/number/is-integer.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/assign.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/assign.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/create.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/create.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/define-properties.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/define-properties.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/define-property.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/define-property.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/freeze.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/freeze.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/get-own-property-names.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/get-own-property-names.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/object/keys.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/object/keys.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/promise.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/promise.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/set.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/set.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/symbol.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/symbol/index.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/core-js/symbol/iterator.js": function (module, exports, __webpack_require__) {
      module.exports = {
        default: __webpack_require__("./node_modules/core-js/library/fn/symbol/iterator.js"),
        __esModule: true
      };
    },
    "./node_modules/babel-runtime/helpers/asyncToGenerator.js": function (module, exports, __webpack_require__) {
      exports.__esModule = true;
      var obj;
      var component = __webpack_require__("./node_modules/babel-runtime/core-js/promise.js");
      var self = (obj = component) && obj.__esModule ? obj : {
        default: obj
      };
      exports.default = function (value) {
        return function () {
          var result = value.apply(this, arguments);
          return new self.default(function (cont, r) {
            return function resume(type, key) {
              try {
                var group = result[type](key);
                var value = group.value;
              } catch (xkcd_source) {
                return void r(xkcd_source);
              }
              if (!group.done) {
                return self.default.resolve(value).then(function (type) {
                  resume("next", type);
                }, function (type) {
                  resume("throw", type);
                });
              }
              cont(value);
            }("next");
          });
        };
      };
    },
    "./node_modules/babel-runtime/helpers/classCallCheck.js": function (module, exports, __weex_require__) {
      exports.__esModule = true;
      exports.default = function (value, name) {
        if (!(value instanceof name)) {
          throw new TypeError("Cannot call a class as a function");
        }
      };
    },
    "./node_modules/babel-runtime/helpers/createClass.js": function (module, exports, __webpack_require__) {
      exports.__esModule = true;
      var data;
      var Trainer = __webpack_require__("./node_modules/babel-runtime/core-js/object/define-property.js");
      var node = (data = Trainer) && data.__esModule ? data : {
        default: data
      };
      exports.default = function () {
        function t(t, input) {
          var i = 0;
          for (; i < input.length; i++) {
            var current = input[i];
            current.enumerable = current.enumerable || false;
            current.configurable = true;
            if ("value" in current) {
              current.writable = true;
            }
            (0, node.default)(t, current.key, current);
          }
        }
        return function (x, n, a) {
          return n && t(x.prototype, n), a && t(x, a), x;
        };
      }();
    },
    "./node_modules/babel-runtime/helpers/toConsumableArray.js": function (module, exports, __webpack_require__) {
      exports.__esModule = true;
      var data;
      var Trainer = __webpack_require__("./node_modules/babel-runtime/core-js/array/from.js");
      var node = (data = Trainer) && data.__esModule ? data : {
        default: data
      };
      exports.default = function (obj) {
        if (Array.isArray(obj)) {
          var i = 0;
          var result = Array(obj.length);
          for (; i < obj.length; i++) {
            result[i] = obj[i];
          }
          return result;
        }
        return (0, node.default)(obj);
      };
    },
    "./node_modules/babel-runtime/helpers/typeof.js": function (module, exports, __weex_require__) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      exports.__esModule = true;
      var _deepAssign2 = _interopRequireDefault(__weex_require__("./node_modules/babel-runtime/core-js/symbol/iterator.js"));
      var _symbol2 = _interopRequireDefault(__weex_require__("./node_modules/babel-runtime/core-js/symbol.js"));
      var indexOfIt = "function" == typeof _symbol2.default && "symbol" == typeof _deepAssign2.default ? function (objOrTsid) {
        return typeof objOrTsid;
      } : function (obj) {
        return obj && "function" == typeof _symbol2.default && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
      };
      exports.default = "function" == typeof _symbol2.default && "symbol" === indexOfIt(_deepAssign2.default) ? function (obj) {
        return void 0 === obj ? "undefined" : indexOfIt(obj);
      } : function (obj) {
        return obj && "function" == typeof _symbol2.default && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : void 0 === obj ? "undefined" : indexOfIt(obj);
      };
    },
    "./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime-module.js": function (module, object, instantiate) {
      var g = function () {
        return this;
      }() || Function("return this")();
      var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
      var oldRuntime = hadRuntime && g.regeneratorRuntime;
      if (g.regeneratorRuntime = void 0, module.exports = instantiate("./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime.js"), hadRuntime) {
        g.regeneratorRuntime = oldRuntime;
      } else {
        try {
          delete g.regeneratorRuntime;
        } catch (e) {
          g.regeneratorRuntime = void 0;
        }
      }
    },
    "./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime.js": function (module, data) {
      !function (global) {
        function wrap(value, name, s, data) {
          var target = name && name.prototype instanceof obj ? name : obj;
          var self = Object.create(target.prototype);
          var context = new Context(data || []);
          return self._invoke = function (item, value, context) {
            var state = GenStateSuspendedStart;
            return function (foo, undefined) {
              if (state === GenStateExecuting) {
                throw new Error("Generator is already running");
              }
              if (state === GenStateCompleted) {
                if ("throw" === foo) {
                  throw undefined;
                }
                return state();
              }
              context.method = foo;
              context.arg = undefined;
              for (; ;) {
                var delegate = context.delegate;
                if (delegate) {
                  var delegateResult = maybeInvokeDelegate(delegate, context);
                  if (delegateResult) {
                    if (delegateResult === ContinueSentinel) {
                      continue;
                    }
                    return delegateResult;
                  }
                }
                if ("next" === context.method) {
                  context.sent = context._sent = context.arg;
                } else {
                  if ("throw" === context.method) {
                    if (state === GenStateSuspendedStart) {
                      throw state = GenStateCompleted, context.arg;
                    }
                    context.dispatchException(context.arg);
                  } else {
                    if ("return" === context.method) {
                      context.abrupt("return", context.arg);
                    }
                  }
                }
                state = GenStateExecuting;
                var record = tryCatch(item, value, context);
                if ("normal" === record.type) {
                  if (state = context.done ? GenStateCompleted : GenStateSuspendedYield, record.arg === ContinueSentinel) {
                    continue;
                  }
                  return {
                    value: record.arg,
                    done: context.done
                  };
                }
                if ("throw" === record.type) {
                  state = GenStateCompleted;
                  context.method = "throw";
                  context.arg = record.arg;
                }
              }
            };
          }(value, s, context), self;
        }
        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (keystableId) {
            return {
              type: "throw",
              arg: keystableId
            };
          }
        }
        function obj() {
        }
        function GeneratorFunction() {
        }
        function proto() {
        }
        function defineIteratorMethods(object) {
          ["next", "throw", "return"].forEach(function (method) {
            object[method] = function (next) {
              return this._invoke(method, next);
            };
          });
        }
        function AsyncIterator(generator) {
          var context;
          this._invoke = function (method, type) {
            function callback() {
              return new Promise(function (results, onRejected) {
                !function invoke(method, context, resolve, reject) {
                  var record = tryCatch(generator[method], generator, context);
                  if ("throw" !== record.type) {
                    var result = record.arg;
                    var value = result.value;
                    return value && "object" == typeof value && hasOwn.call(value, "__await") ? Promise.resolve(value.__await).then(function (event) {
                      invoke("next", event, resolve, reject);
                    }, function (event) {
                      invoke("throw", event, resolve, reject);
                    }) : Promise.resolve(value).then(function (e) {
                      result.value = e;
                      resolve(result);
                    }, reject);
                  }
                  reject(record.arg);
                }(method, type, results, onRejected);
              });
            }
            return context = context ? context.then(callback, callback) : callback();
          };
        }
        function maybeInvokeDelegate(delegate, context) {
          var selector = delegate.iterator[context.method];
          if (selector === undefined) {
            if (context.delegate = null, "throw" === context.method) {
              if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) {
                return ContinueSentinel;
              }
              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
          }
          var record = tryCatch(selector, delegate.iterator, context.arg);
          if ("throw" === record.type) {
            return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
          }
          var result = record.arg;
          return result ? result.done ? (context[delegate.resultName] = result.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : result : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
        }
        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };
          if (1 in locs) {
            entry.catchLoc = locs[1];
          }
          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }
          this.tryEntries.push(entry);
        }
        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }
        function Context(value) {
          this.tryEntries = [{
            tryLoc: "root"
          }];
          value.forEach(pushTryEntry, this);
          this.reset(true);
        }
        function values(value) {
          if (value) {
            var escape = value[name];
            if (escape) {
              return escape.call(value);
            }
            if ("function" == typeof value.next) {
              return value;
            }
            if (!isNaN(value.length)) {
              var i = -1;
              var vert = function next() {
                for (; ++i < value.length;) {
                  if (hasOwn.call(value, i)) {
                    return next.value = value[i], next.done = false, next;
                  }
                }
                return next.value = undefined, next.done = true, next;
              };
              return vert.next = vert;
            }
          }
          return {
            next: state
          };
        }
        function state() {
          return {
            value: undefined,
            done: true
          };
        }
        var undefined;
        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var $Symbol = "function" == typeof Symbol ? Symbol : {};
        var name = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var prop = $Symbol.toStringTag || "@@toStringTag";
        var inModule = "object" == typeof module;
        var runtime = global.regeneratorRuntime;
        if (runtime) {
          if (inModule) {
            module.exports = runtime;
          }
        } else {
          (runtime = global.regeneratorRuntime = inModule ? module.exports : {}).wrap = wrap;
          var GenStateSuspendedStart = "suspendedStart";
          var GenStateSuspendedYield = "suspendedYield";
          var GenStateExecuting = "executing";
          var GenStateCompleted = "completed";
          var ContinueSentinel = {};
          var value = {};
          value[name] = function () {
            return this;
          };
          var getProto = Object.getPrototypeOf;
          var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
          if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, name)) {
            value = NativeIteratorPrototype;
          }
          var fn = proto.prototype = obj.prototype = Object.create(value);
          GeneratorFunction.prototype = fn.constructor = proto;
          proto.constructor = GeneratorFunction;
          proto[prop] = GeneratorFunction.displayName = "GeneratorFunction";
          runtime.isGeneratorFunction = function (obj) {
            var ctor = "function" == typeof obj && obj.constructor;
            return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
          };
          runtime.mark = function (obj) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(obj, proto) : (obj.__proto__ = proto, prop in obj || (obj[prop] = "GeneratorFunction")), obj.prototype = Object.create(fn), obj;
          };
          runtime.awrap = function (arg) {
            return {
              __await: arg
            };
          };
          defineIteratorMethods(AsyncIterator.prototype);
          AsyncIterator.prototype[asyncIteratorSymbol] = function () {
            return this;
          };
          runtime.AsyncIterator = AsyncIterator;
          runtime.async = function (value, fn, self, name) {
            var iter = new AsyncIterator(wrap(value, fn, self, name));
            return runtime.isGeneratorFunction(fn) ? iter : iter.next().then(function (result) {
              return result.done ? result.value : iter.next();
            });
          };
          defineIteratorMethods(fn);
          fn[prop] = "Generator";
          fn[name] = function () {
            return this;
          };
          fn.toString = function () {
            return "[object Generator]";
          };
          runtime.keys = function (obj) {
            var t = [];
            var fn;
            for (fn in obj) {
              t.push(fn);
            }
            return t.reverse(), function next() {
              for (; t.length;) {
                var key = t.pop();
                if (key in obj) {
                  return next.value = key, next.done = false, next;
                }
              }
              return next.done = true, next;
            };
          };
          runtime.values = values;
          Context.prototype = {
            constructor: Context,
            reset: function (noalert) {
              if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = false, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !noalert) {
                var name;
                for (name in this) {
                  if ("t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                    this[name] = undefined;
                  }
                }
              }
            },
            stop: function () {
              this.done = true;
              var record = this.tryEntries[0].completion;
              if ("throw" === record.type) {
                throw record.arg;
              }
              return this.rval;
            },
            dispatchException: function (exception) {
              function handle(id, download) {
                return record.type = "throw", record.arg = exception, rule.next = id, download && (rule.method = "next", rule.arg = undefined), !!download;
              }
              if (this.done) {
                throw exception;
              }
              var rule = this;
              var i = this.tryEntries.length - 1;
              for (; i >= 0; --i) {
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if ("root" === entry.tryLoc) {
                  return handle("end");
                }
                if (entry.tryLoc <= this.prev) {
                  var hasCatch = hasOwn.call(entry, "catchLoc");
                  var hasFinally = hasOwn.call(entry, "finallyLoc");
                  if (hasCatch && hasFinally) {
                    if (this.prev < entry.catchLoc) {
                      return handle(entry.catchLoc, true);
                    }
                    if (this.prev < entry.finallyLoc) {
                      return handle(entry.finallyLoc);
                    }
                  } else {
                    if (hasCatch) {
                      if (this.prev < entry.catchLoc) {
                        return handle(entry.catchLoc, true);
                      }
                    } else {
                      if (!hasFinally) {
                        throw new Error("try statement without catch or finally");
                      }
                      if (this.prev < entry.finallyLoc) {
                        return handle(entry.finallyLoc);
                      }
                    }
                  }
                }
              }
            },
            abrupt: function (type, arg) {
              var i = this.tryEntries.length - 1;
              for (; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                  var finallyEntry = entry;
                  break;
                }
              }
              if (finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                finallyEntry = null;
              }
              var record = finallyEntry ? finallyEntry.completion : {};
              return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
            },
            complete: function (record, afterLoc) {
              if ("throw" === record.type) {
                throw record.arg;
              }
              return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
            },
            finish: function (finallyLoc) {
              var i = this.tryEntries.length - 1;
              for (; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                  return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
                }
              }
            },
            catch: function (tryLoc) {
              var i = this.tryEntries.length - 1;
              for (; i >= 0; --i) {
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                  var record = entry.completion;
                  if ("throw" === record.type) {
                    var thrown = record.arg;
                    resetTryEntry(entry);
                  }
                  return thrown;
                }
              }
              throw new Error("illegal catch attempt");
            },
            delegateYield: function (iterable, resultName, nextLoc) {
              return this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
              }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
            }
          };
        }
      }(function () {
        return this;
      }() || Function("return this")());
    },
    "./node_modules/babel-runtime/regenerator/index.js": function (module, object, instantiate) {
      module.exports = instantiate("./node_modules/babel-runtime/node_modules/regenerator-runtime/runtime-module.js");
    },
    "./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js": function (hiding_events, type) {
      !function () {
        var alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        var data = new Uint8Array(256);
        var i = 0;
        for (; i < alphabet.length; i++) {
          data[alphabet.charCodeAt(i)] = i;
        }
        type.encode = function (data) {
          var j;
          var v = new Uint8Array(data);
          var vLen = v.length;
          var s = "";
          j = 0;
          for (; j < vLen; j = j + 3) {
            s = s + alphabet[v[j] >> 2];
            s = s + alphabet[(3 & v[j]) << 4 | v[j + 1] >> 4];
            s = s + alphabet[(15 & v[j + 1]) << 2 | v[j + 2] >> 6];
            s = s + alphabet[63 & v[j + 2]];
          }
          return vLen % 3 == 2 ? s = s.substring(0, s.length - 1) + "=" : vLen % 3 == 1 && (s = s.substring(0, s.length - 2) + "=="), s;
        };
        type.decode = function (src) {
          var i;
          var byte1;
          var byte2;
          var SUBCOMPONENT;
          var replyComment;
          var BUFFER_ALLOCATION_SIZE = .75 * src.length;
          var srcLength = src.length;
          var p = 0;
          if ("=" === src[src.length - 1]) {
            BUFFER_ALLOCATION_SIZE--;
            if ("=" === src[src.length - 2]) {
              BUFFER_ALLOCATION_SIZE--;
            }
          }
          var buffer = new ArrayBuffer(BUFFER_ALLOCATION_SIZE);
          var pixels = new Uint8Array(buffer);
          i = 0;
          for (; i < srcLength; i = i + 4) {
            byte1 = data[src.charCodeAt(i)];
            byte2 = data[src.charCodeAt(i + 1)];
            SUBCOMPONENT = data[src.charCodeAt(i + 2)];
            replyComment = data[src.charCodeAt(i + 3)];
            pixels[p++] = byte1 << 2 | byte2 >> 4;
            pixels[p++] = (15 & byte2) << 4 | SUBCOMPONENT >> 2;
            pixels[p++] = (3 & SUBCOMPONENT) << 6 | 63 & replyComment;
          }
          return buffer;
        };
      }();
    },
    "./node_modules/base64-js/index.js": function (module, exports, __weex_require__) {
      function split(command) {
        var step = command.length;
        if (step % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var options = command.indexOf("=");
        return -1 === options && (options = step), [options, options === step ? 0 : 4 - options % 4];
      }
      function encodeChunk(n, start, end) {
        var contactCapacity;
        var i;
        var outChance = [];
        var index = start;
        for (; index < end; index = index + 3) {
          contactCapacity = (n[index] << 16 & 16711680) + (n[index + 1] << 8 & 65280) + (255 & n[index + 2]);
          outChance.push(c[(i = contactCapacity) >> 18 & 63] + c[i >> 12 & 63] + c[i >> 6 & 63] + c[63 & i]);
        }
        return outChance.join("");
      }
      exports.byteLength = function (data) {
        var fields = split(data);
        var r = fields[0];
        var newValue = fields[1];
        return 3 * (r + newValue) / 4 - newValue;
      };
      exports.toByteArray = function (data) {
        var LIMB_BITMASK;
        var i;
        var arr = split(data);
        var key = arr[0];
        var max = arr[1];
        var array = new Arr(function (addedRenderer, gen_id, maxDigits) {
          return 3 * (gen_id + maxDigits) / 4 - maxDigits;
        }(0, key, max));
        var item = 0;
        var ext = max > 0 ? key - 4 : key;
        i = 0;
        for (; i < ext; i = i + 4) {
          LIMB_BITMASK = revLookup[data.charCodeAt(i)] << 18 | revLookup[data.charCodeAt(i + 1)] << 12 | revLookup[data.charCodeAt(i + 2)] << 6 | revLookup[data.charCodeAt(i + 3)];
          array[item++] = LIMB_BITMASK >> 16 & 255;
          array[item++] = LIMB_BITMASK >> 8 & 255;
          array[item++] = 255 & LIMB_BITMASK;
        }
        if (2 === max) {
          LIMB_BITMASK = revLookup[data.charCodeAt(i)] << 2 | revLookup[data.charCodeAt(i + 1)] >> 4;
          array[item++] = 255 & LIMB_BITMASK;
        }
        if (1 === max) {
          LIMB_BITMASK = revLookup[data.charCodeAt(i)] << 10 | revLookup[data.charCodeAt(i + 1)] << 4 | revLookup[data.charCodeAt(i + 2)] >> 2;
          array[item++] = LIMB_BITMASK >> 8 & 255;
          array[item++] = 255 & LIMB_BITMASK;
        }
        return array;
      };
      exports.fromByteArray = function (uint8) {
        var f;
        var len = uint8.length;
        var extraBytes = len % 3;
        var parts = [];
        var i = 0;
        var len2 = len - extraBytes;
        for (; i < len2; i = i + 16383) {
          parts.push(encodeChunk(uint8, i, i + 16383 > len2 ? len2 : i + 16383));
        }
        if (1 === extraBytes) {
          f = uint8[len - 1];
          parts.push(c[f >> 2] + c[f << 4 & 63] + "==");
        } else {
          if (2 === extraBytes) {
            f = (uint8[len - 2] << 8) + uint8[len - 1];
            parts.push(c[f >> 10] + c[f >> 4 & 63] + c[f << 2 & 63] + "=");
          }
        }
        return parts.join("");
      };
      var c = [];
      var revLookup = [];
      var Arr = "undefined" != typeof Uint8Array ? Uint8Array : Array;
      var obj = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var i = 0;
      var patchLen = obj.length;
      for (; i < patchLen; ++i) {
        c[i] = obj[i];
        revLookup[obj.charCodeAt(i)] = i;
      }
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
    },
    "./node_modules/bl/bl.js": function (task, id, require) {
      function self(value) {
        if (!(this instanceof self)) {
          return new self(value);
        }
        if (this._bufs = [], this.length = 0, "function" == typeof value) {
          this._callback = value;
          var end = function (result) {
            if (this._callback) {
              this._callback(result);
              this._callback = null;
            }
          }.bind(this);
          this.on("pipe", function (wb) {
            wb.on("error", end);
          });
          this.on("unpipe", function (e) {
            e.removeListener("error", end);
          });
        } else {
          this.append(value);
        }
        ctor.call(this);
      }
      var ctor = require("./node_modules/readable-stream/duplex-browser.js");
      var utils = require("./node_modules/node-libs-browser/node_modules/util/util.js");
      var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
      utils.inherits(self, ctor);
      self.prototype._offset = function (offset) {
        var R;
        var r = 0;
        var i = 0;
        if (0 === offset) {
          return [0, 0];
        }
        for (; i < this._bufs.length; i++) {
          if (offset < (R = r + this._bufs[i].length) || i == this._bufs.length - 1) {
            return [i, offset - r];
          }
          r = R;
        }
      };
      self.prototype.append = function (arg) {
        var i = 0;
        if (Buffer.isBuffer(arg)) {
          this._appendBuffer(arg);
        } else {
          if (Array.isArray(arg)) {
            for (; i < arg.length; i++) {
              this.append(arg[i]);
            }
          } else {
            if (arg instanceof self) {
              for (; i < arg._bufs.length; i++) {
                this.append(arg._bufs[i]);
              }
            } else {
              if (null != arg) {
                if ("number" == typeof arg) {
                  arg = arg.toString();
                }
                this._appendBuffer(Buffer.from(arg));
              }
            }
          }
        }
        return this;
      };
      self.prototype._appendBuffer = function (data) {
        this._bufs.push(data);
        this.length += data.length;
      };
      self.prototype._write = function (source, type, cb) {
        this._appendBuffer(source);
        if ("function" == typeof cb) {
          cb();
        }
      };
      self.prototype._read = function (value) {
        if (!this.length) {
          return this.push(null);
        }
        value = Math.min(value, this.length);
        this.push(this.slice(0, value));
        this.consume(value);
      };
      self.prototype.end = function (value) {
        ctor.prototype.end.call(this, value);
        if (this._callback) {
          this._callback(null, this.slice());
          this._callback = null;
        }
      };
      self.prototype.get = function (value) {
        return this.slice(value, value + 1)[0];
      };
      self.prototype.slice = function (start, end) {
        return "number" == typeof start && start < 0 && (start = start + this.length), "number" == typeof end && end < 0 && (end = end + this.length), this.copy(null, 0, start, end);
      };
      self.prototype.copy = function (value, data, start, end) {
        if (("number" != typeof start || start < 0) && (start = 0), ("number" != typeof end || end > this.length) && (end = this.length), start >= this.length) {
          return value || Buffer.alloc(0);
        }
        if (end <= 0) {
          return value || Buffer.alloc(0);
        }
        var size;
        var i;
        var result = !!value;
        var off = this._offset(start);
        var length = end - start;
        var len = length;
        var pos = result && data || 0;
        var offset = off[1];
        if (0 === start && end == this.length) {
          if (!result) {
            return 1 === this._bufs.length ? this._bufs[0] : Buffer.concat(this._bufs, this.length);
          }
          i = 0;
          for (; i < this._bufs.length; i++) {
            this._bufs[i].copy(value, pos);
            pos = pos + this._bufs[i].length;
          }
          return value;
        }
        if (len <= this._bufs[off[0]].length - offset) {
          return result ? this._bufs[off[0]].copy(value, data, offset, offset + len) : this._bufs[off[0]].slice(offset, offset + len);
        }
        if (!result) {
          value = Buffer.allocUnsafe(length);
        }
        i = off[0];
        for (; i < this._bufs.length; i++) {
          if (!(len > (size = this._bufs[i].length - offset))) {
            this._bufs[i].copy(value, pos, offset, offset + len);
            break;
          }
          this._bufs[i].copy(value, pos, offset);
          pos = pos + size;
          len = len - size;
          if (offset) {
            offset = 0;
          }
        }
        return value;
      };
      self.prototype.shallowSlice = function (start, end) {
        start = start || 0;
        end = end || this.length;
        if (start < 0) {
          start = start + this.length;
        }
        if (end < 0) {
          end = end + this.length;
        }
        var startOffset = this._offset(start);
        var endOffset = this._offset(end);
        var arg = this._bufs.slice(startOffset[0], endOffset[0] + 1);
        return 0 == endOffset[1] ? arg.pop() : arg[arg.length - 1] = arg[arg.length - 1].slice(0, endOffset[1]), 0 != startOffset[1] && (arg[0] = arg[0].slice(startOffset[1])), new self(arg);
      };
      self.prototype.toString = function (format, start, end) {
        return this.slice(start, end).toString(format);
      };
      self.prototype.consume = function (bytes) {
        for (; this._bufs.length;) {
          if (!(bytes >= this._bufs[0].length)) {
            this._bufs[0] = this._bufs[0].slice(bytes);
            this.length -= bytes;
            break;
          }
          bytes = bytes - this._bufs[0].length;
          this.length -= this._bufs[0].length;
          this._bufs.shift();
        }
        return this;
      };
      self.prototype.duplicate = function () {
        var i = 0;
        var copy = new self;
        for (; i < this._bufs.length; i++) {
          copy.append(this._bufs[i]);
        }
        return copy;
      };
      self.prototype.destroy = function () {
        this._bufs.length = 0;
        this.length = 0;
        this.push(null);
      };
      (function () {
        var methods = {
          readDoubleBE: 8,
          readDoubleLE: 8,
          readFloatBE: 4,
          readFloatLE: 4,
          readInt32BE: 4,
          readInt32LE: 4,
          readUInt32BE: 4,
          readUInt32LE: 4,
          readInt16BE: 2,
          readInt16LE: 2,
          readUInt16BE: 2,
          readUInt16LE: 2,
          readInt8: 1,
          readUInt8: 1
        };
        var method;
        for (method in methods) {
          !function (m) {
            self.prototype[m] = function (offset) {
              return this.slice(offset, offset + methods[m])[m](0);
            };
          }(method);
        }
      })();
      task.exports = self;
    },
    "./node_modules/core-js/library/fn/array/from.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.string.iterator.js");
      __webpack_require__("./node_modules/core-js/library/modules/es6.array.from.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Array.from;
    },
    "./node_modules/core-js/library/fn/get-iterator.js": function (module, object, instantiate) {
      instantiate("./node_modules/core-js/library/modules/web.dom.iterable.js");
      instantiate("./node_modules/core-js/library/modules/es6.string.iterator.js");
      module.exports = instantiate("./node_modules/core-js/library/modules/core.get-iterator.js");
    },
    "./node_modules/core-js/library/fn/json/stringify.js": function (mixin, doPost, __webpack_require__) {
      var core = __webpack_require__("./node_modules/core-js/library/modules/_core.js");
      var $JSON = core.JSON || (core.JSON = {
        stringify: JSON.stringify
      });
      mixin.exports = function (value) {
        return $JSON.stringify.apply($JSON, arguments);
      };
    },
    "./node_modules/core-js/library/fn/map.js": function (module, metadata, packageSuccess) {
      packageSuccess("./node_modules/core-js/library/modules/es6.object.to-string.js");
      packageSuccess("./node_modules/core-js/library/modules/es6.string.iterator.js");
      packageSuccess("./node_modules/core-js/library/modules/web.dom.iterable.js");
      packageSuccess("./node_modules/core-js/library/modules/es6.map.js");
      packageSuccess("./node_modules/core-js/library/modules/es7.map.to-json.js");
      packageSuccess("./node_modules/core-js/library/modules/es7.map.of.js");
      packageSuccess("./node_modules/core-js/library/modules/es7.map.from.js");
      module.exports = packageSuccess("./node_modules/core-js/library/modules/_core.js").Map;
    },
    "./node_modules/core-js/library/fn/number/is-integer.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.number.is-integer.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Number.isInteger;
    },
    "./node_modules/core-js/library/fn/object/assign.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.assign.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object.assign;
    },
    "./node_modules/core-js/library/fn/object/create.js": function (mixin, doPost, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.create.js");
      var Object = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object;
      mixin.exports = function (value, name) {
        return Object.create(value, name);
      };
    },
    "./node_modules/core-js/library/fn/object/define-properties.js": function (mixin, doPost, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.define-properties.js");
      var $Object = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object;
      mixin.exports = function (obj, name) {
        return $Object.defineProperties(obj, name);
      };
    },
    "./node_modules/core-js/library/fn/object/define-property.js": function (mixin, doPost, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.define-property.js");
      var Object = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object;
      mixin.exports = function (value, name, fn) {
        return Object.defineProperty(value, name, fn);
      };
    },
    "./node_modules/core-js/library/fn/object/freeze.js": function (self, runtime, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.freeze.js");
      self.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object.freeze;
    },
    "./node_modules/core-js/library/fn/object/get-own-property-names.js": function (mixin, doPost, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.get-own-property-names.js");
      var Object = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object;
      mixin.exports = function (value) {
        return Object.getOwnPropertyNames(value);
      };
    },
    "./node_modules/core-js/library/fn/object/keys.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.keys.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Object.keys;
    },
    "./node_modules/core-js/library/fn/promise.js": function (module, id, require) {
      require("./node_modules/core-js/library/modules/es6.object.to-string.js");
      require("./node_modules/core-js/library/modules/es6.string.iterator.js");
      require("./node_modules/core-js/library/modules/web.dom.iterable.js");
      require("./node_modules/core-js/library/modules/es6.promise.js");
      require("./node_modules/core-js/library/modules/es7.promise.finally.js");
      require("./node_modules/core-js/library/modules/es7.promise.try.js");
      module.exports = require("./node_modules/core-js/library/modules/_core.js").Promise;
    },
    "./node_modules/core-js/library/fn/set.js": function (module, id, require) {
      require("./node_modules/core-js/library/modules/es6.object.to-string.js");
      require("./node_modules/core-js/library/modules/es6.string.iterator.js");
      require("./node_modules/core-js/library/modules/web.dom.iterable.js");
      require("./node_modules/core-js/library/modules/es6.set.js");
      require("./node_modules/core-js/library/modules/es7.set.to-json.js");
      require("./node_modules/core-js/library/modules/es7.set.of.js");
      require("./node_modules/core-js/library/modules/es7.set.from.js");
      module.exports = require("./node_modules/core-js/library/modules/_core.js").Set;
    },
    "./node_modules/core-js/library/fn/symbol/index.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.symbol.js");
      __webpack_require__("./node_modules/core-js/library/modules/es6.object.to-string.js");
      __webpack_require__("./node_modules/core-js/library/modules/es7.symbol.async-iterator.js");
      __webpack_require__("./node_modules/core-js/library/modules/es7.symbol.observable.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").Symbol;
    },
    "./node_modules/core-js/library/fn/symbol/iterator.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.string.iterator.js");
      __webpack_require__("./node_modules/core-js/library/modules/web.dom.iterable.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_wks-ext.js").f("iterator");
    },
    "./node_modules/core-js/library/modules/_a-function.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        if ("function" != typeof value) {
          throw TypeError(value + " is not a function!");
        }
        return value;
      };
    },
    "./node_modules/core-js/library/modules/_add-to-unscopables.js": function (mixin, doPost) {
      mixin.exports = function () {
      };
    },
    "./node_modules/core-js/library/modules/_an-instance.js": function (mixin, doPost) {
      mixin.exports = function (value, name, key, deps) {
        if (!(value instanceof name) || void 0 !== deps && deps in value) {
          throw TypeError(key + ": incorrect invocation!");
        }
        return value;
      };
    },
    "./node_modules/core-js/library/modules/_an-object.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/core-js/library/modules/_is-object.js");
      blob.exports = function (value) {
        if (!checkedSubscribe(value)) {
          throw TypeError(value + " is not an object!");
        }
        return value;
      };
    },
    "./node_modules/core-js/library/modules/_array-from-iterable.js": function (module, layer, $) {
      var debug = $("./node_modules/core-js/library/modules/_for-of.js");
      module.exports = function (value, name) {
        var result = [];
        return debug(value, false, result.push, result, name), result;
      };
    },
    "./node_modules/core-js/library/modules/_array-includes.js": function (blob, id, require) {
      var trim = require("./node_modules/core-js/library/modules/_to-iobject.js");
      var finishPrevPart = require("./node_modules/core-js/library/modules/_to-length.js");
      var $ = require("./node_modules/core-js/library/modules/_to-absolute-index.js");
      blob.exports = function (obj) {
        return function (buf, undefined, begin) {
          var symbol;
          var token = trim(buf);
          var d = finishPrevPart(token.length);
          var time = $(begin, d);
          if (obj && undefined != undefined) {
            for (; d > time;) {
              if ((symbol = token[time++]) != symbol) {
                return true;
              }
            }
          } else {
            for (; d > time; time++) {
              if ((obj || time in token) && token[time] === undefined) {
                return obj || time || 0;
              }
            }
          }
          return !obj && -1;
        };
      };
    },
    "./node_modules/core-js/library/modules/_array-methods.js": function (mixin, doPost, __webpack_require__) {
      var create = __webpack_require__("./node_modules/core-js/library/modules/_ctx.js");
      var parseQuery = __webpack_require__("./node_modules/core-js/library/modules/_iobject.js");
      var find = __webpack_require__("./node_modules/core-js/library/modules/_to-object.js");
      var merge = __webpack_require__("./node_modules/core-js/library/modules/_to-length.js");
      var _color = __webpack_require__("./node_modules/core-js/library/modules/_array-species-create.js");
      mixin.exports = function (value, name) {
        var fn = 1 == value;
        var result = 2 == value;
        var transform = 3 == value;
        var id = 4 == value;
        var beMergedDataset = 6 == value;
        var isPrimitive = 5 == value || beMergedDataset;
        var color = name || _color;
        return function (value, text, cb) {
          var msg;
          var data;
          var val = find(value);
          var query = parseQuery(val);
          var wrap = create(text, cb, 3);
          var actual = merge(query.length);
          var key = 0;
          var res = fn ? color(value, actual) : result ? color(value, 0) : void 0;
          for (; actual > key; key++) {
            if ((isPrimitive || key in query) && (data = wrap(msg = query[key], key, val), value)) {
              if (fn) {
                res[key] = data;
              } else {
                if (data) {
                  switch (value) {
                    case 3:
                      return true;
                    case 5:
                      return msg;
                    case 6:
                      return key;
                    case 2:
                      res.push(msg);
                  }
                } else {
                  if (id) {
                    return false;
                  }
                }
              }
            }
          }
          return beMergedDataset ? -1 : transform || id ? id : res;
        };
      };
    },
    "./node_modules/core-js/library/modules/_array-species-constructor.js": function (blob, id, require) {
      var sphereKnn = require("./node_modules/core-js/library/modules/_is-object.js");
      var isArray = require("./node_modules/core-js/library/modules/_is-array.js");
      var j = require("./node_modules/core-js/library/modules/_wks.js")("species");
      blob.exports = function (value) {
        var type;
        return isArray(value) && ("function" != typeof (type = value.constructor) || type !== Array && !isArray(type.prototype) || (type = void 0), sphereKnn(type) && null === (type = type[j]) && (type = void 0)), void 0 === type ? Array : type;
      };
    },
    "./node_modules/core-js/library/modules/_array-species-create.js": function (mixin, doPost, install) {
      var require = install("./node_modules/core-js/library/modules/_array-species-constructor.js");
      mixin.exports = function (value, name) {
        return new (require(value))(name);
      };
    },
    "./node_modules/core-js/library/modules/_classof.js": function (mixin, doPost, __webpack_require__) {
      var cof = __webpack_require__("./node_modules/core-js/library/modules/_cof.js");
      var TAG = __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("toStringTag");
      var ARG = "Arguments" == cof(function () {
        return arguments;
      }());
      mixin.exports = function (value) {
        var O;
        var index;
        var B;
        return void 0 === value ? "Undefined" : null === value ? "Null" : "string" == typeof (index = function (subset, P) {
          try {
            return subset[P];
          } catch (e) {
          }
        }(O = Object(value), TAG)) ? index : ARG ? cof(O) : "Object" == (B = cof(O)) && "function" == typeof O.callee ? "Arguments" : B;
      };
    },
    "./node_modules/core-js/library/modules/_cof.js": function (mixin, doPost) {
      var fnToStr = {}.toString;
      mixin.exports = function (value) {
        return fnToStr.call(value).slice(8, -1);
      };
    },
    "./node_modules/core-js/library/modules/_collection-strong.js": function (module, id, require) {
      var defineProperty = require("./node_modules/core-js/library/modules/_object-dp.js").f;
      var test = require("./node_modules/core-js/library/modules/_object-create.js");
      var defineProperties = require("./node_modules/core-js/library/modules/_redefine-all.js");
      var ctx = require("./node_modules/core-js/library/modules/_ctx.js");
      var transform = require("./node_modules/core-js/library/modules/_an-instance.js");
      var forOf = require("./node_modules/core-js/library/modules/_for-of.js");
      var $iterDefine = require("./node_modules/core-js/library/modules/_iter-define.js");
      var whenDOMReady = require("./node_modules/core-js/library/modules/_iter-step.js");
      var writejson = require("./node_modules/core-js/library/modules/_set-species.js");
      var SUPPORT_DESC = require("./node_modules/core-js/library/modules/_descriptors.js");
      var fastKey = require("./node_modules/core-js/library/modules/_meta.js").fastKey;
      var $ = require("./node_modules/core-js/library/modules/_validate-collection.js");
      var SIZE = SUPPORT_DESC ? "_s" : "size";
      var getEntry = function (that, key) {
        var entry;
        var index = fastKey(key);
        if ("F" !== index) {
          return that._i[index];
        }
        entry = that._f;
        for (; entry; entry = entry.n) {
          if (entry.k == key) {
            return entry;
          }
        }
      };
      module.exports = {
        getConstructor: function (exec, options, IS_MAP, ADDER) {
          var constructor = exec(function (that, items) {
            transform(that, constructor, options, "_i");
            that._t = options;
            that._i = test(null);
            that._f = void 0;
            that._l = void 0;
            that[SIZE] = 0;
            if (null != items) {
              forOf(items, IS_MAP, that[ADDER], that);
            }
          });
          return defineProperties(constructor.prototype, {
            clear: function () {
              var that = $(this, options);
              var data = that._i;
              var entry = that._f;
              for (; entry; entry = entry.n) {
                entry.r = true;
                if (entry.p) {
                  entry.p = entry.p.n = void 0;
                }
                delete data[entry.i];
              }
              that._f = that._l = void 0;
              that[SIZE] = 0;
            },
            delete: function (key) {
              var that = $(this, options);
              var entry = getEntry(that, key);
              if (entry) {
                var next = entry.n;
                var prev = entry.p;
                delete that._i[entry.i];
                entry.r = true;
                if (prev) {
                  prev.n = next;
                }
                if (next) {
                  next.p = prev;
                }
                if (that._f == entry) {
                  that._f = next;
                }
                if (that._l == entry) {
                  that._l = prev;
                }
                that[SIZE]--;
              }
              return !!entry;
            },
            forEach: function (callbackfn) {
              $(this, options);
              var entry;
              var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : void 0, 3);
              for (; entry = entry ? entry.n : this._f;) {
                f(entry.v, entry.k, this);
                for (; entry && entry.r;) {
                  entry = entry.p;
                }
              }
            },
            has: function (id) {
              return !!getEntry($(this, options), id);
            }
          }), SUPPORT_DESC && defineProperty(constructor.prototype, "size", {
            get: function () {
              return $(this, options)[SIZE];
            }
          }), constructor;
        },
        def: function (that, key, value) {
          var prev;
          var index;
          var entry = getEntry(that, key);
          return entry ? entry.v = value : (that._l = entry = {
            i: index = fastKey(key, true),
            k: key,
            v: value,
            p: prev = that._l,
            n: void 0,
            r: false
          }, that._f || (that._f = entry), prev && (prev.n = entry), that[SIZE]++, "F" !== index && (that._i[index] = entry)), that;
        },
        getEntry: getEntry,
        setStrong: function (C, NAME, IS_MAP) {
          $iterDefine(C, NAME, function (template, kind) {
            this._t = $(template, NAME);
            this._k = kind;
            this._l = void 0;
          }, function () {
            var undefined = this._k;
            var entry = this._l;
            for (; entry && entry.r;) {
              entry = entry.p;
            }
            return this._t && (this._l = entry = entry ? entry.n : this._t._f) ? whenDOMReady(0, "keys" == undefined ? entry.k : "values" == undefined ? entry.v : [entry.k, entry.v]) : (this._t = void 0, whenDOMReady(1));
          }, IS_MAP ? "entries" : "values", !IS_MAP, true);
          writejson(NAME);
        }
      };
    },
    "./node_modules/core-js/library/modules/_collection-to-json.js": function (blob, id, require) {
      var escape = require("./node_modules/core-js/library/modules/_classof.js");
      var saucelabsRunner = require("./node_modules/core-js/library/modules/_array-from-iterable.js");
      blob.exports = function (value) {
        return function () {
          if (escape(this) != value) {
            throw TypeError(value + "#toJSON isn't generic");
          }
          return saucelabsRunner(this);
        };
      };
    },
    "./node_modules/core-js/library/modules/_collection.js": function (blob, id, require) {
      var config = require("./node_modules/core-js/library/modules/_global.js");
      var $export = require("./node_modules/core-js/library/modules/_export.js");
      var meta = require("./node_modules/core-js/library/modules/_meta.js");
      var sphereKnn = require("./node_modules/core-js/library/modules/_fails.js");
      var hide = require("./node_modules/core-js/library/modules/_hide.js");
      var equal = require("./node_modules/core-js/library/modules/_redefine-all.js");
      var forOf = require("./node_modules/core-js/library/modules/_for-of.js");
      var collect = require("./node_modules/core-js/library/modules/_an-instance.js");
      var _phpCastString = require("./node_modules/core-js/library/modules/_is-object.js");
      var check = require("./node_modules/core-js/library/modules/_set-to-string-tag.js");
      var defineProperty = require("./node_modules/core-js/library/modules/_object-dp.js").f;
      var checkedSubscribe = require("./node_modules/core-js/library/modules/_array-methods.js")(0);
      var obj = require("./node_modules/core-js/library/modules/_descriptors.js");
      blob.exports = function (value, name, key, common, IS_MAP, IS_WEAK) {
        var Base = config[value];
        var C = Base;
        var ADDER = IS_MAP ? "set" : "add";
        var proto = C && C.prototype;
        var O = {};
        return obj && "function" == typeof C && (IS_WEAK || proto.forEach && !sphereKnn(function () {
          (new C).entries().next();
        })) ? (C = name(function (target, items) {
          collect(target, C, value, "_c");
          target._c = new Base;
          if (null != items) {
            forOf(items, IS_MAP, target[ADDER], target);
          }
        }), checkedSubscribe("add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON".split(","), function (KEY) {
          var section_vals = "add" == KEY || "set" == KEY;
          if (KEY in proto && (!IS_WEAK || "clear" != KEY)) {
            hide(C.prototype, KEY, function (a, b) {
              if (collect(this, C, KEY), !section_vals && IS_WEAK && !_phpCastString(a)) {
                return "get" == KEY && void 0;
              }
              var value = this._c[KEY](0 === a ? 0 : a, b);
              return section_vals ? this : value;
            });
          }
        }), IS_WEAK || defineProperty(C.prototype, "size", {
          get: function () {
            return this._c.size;
          }
        })) : (C = common.getConstructor(name, value, IS_MAP, ADDER), equal(C.prototype, key), meta.NEED = true), check(C, value), O[value] = C, $export($export.G + $export.W + $export.F, O), IS_WEAK || common.setStrong(C, value, IS_MAP), C;
      };
    },
    "./node_modules/core-js/library/modules/_core.js": function (module, data) {
      var core = module.exports = {
        version: "2.6.10"
      };
      if ("number" == typeof __e) {
        __e = core;
      }
    },
    "./node_modules/core-js/library/modules/_create-property.js": function (blob, id, require) {
      var $ = require("./node_modules/core-js/library/modules/_object-dp.js");
      var sprintf = require("./node_modules/core-js/library/modules/_property-desc.js");
      blob.exports = function (obj, name, value) {
        if (name in obj) {
          $.f(obj, name, sprintf(0, value));
        } else {
          obj[name] = value;
        }
      };
    },
    "./node_modules/core-js/library/modules/_ctx.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/core-js/library/modules/_a-function.js");
      blob.exports = function (s, name, data) {
        if (checkedSubscribe(s), void 0 === name) {
          return s;
        }
        switch (data) {
          case 1:
            return function (r) {
              return s.call(name, r);
            };
          case 2:
            return function (r, f) {
              return s.call(name, r, f);
            };
          case 3:
            return function (r, f, data) {
              return s.call(name, r, f, data);
            };
        }
        return function () {
          return s.apply(name, arguments);
        };
      };
    },
    "./node_modules/core-js/library/modules/_defined.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        if (null == value) {
          throw TypeError("Can't call method on  " + value);
        }
        return value;
      };
    },
    "./node_modules/core-js/library/modules/_descriptors.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = !seriesStackIndexCallback("./node_modules/core-js/library/modules/_fails.js")(function () {
        return 7 != Object.defineProperty({}, "a", {
          get: function () {
            return 7;
          }
        }).a;
      });
    },
    "./node_modules/core-js/library/modules/_dom-create.js": function (mixin, doPost, __webpack_require__) {
      var isObject = __webpack_require__("./node_modules/core-js/library/modules/_is-object.js");
      var document = __webpack_require__("./node_modules/core-js/library/modules/_global.js").document;
      var convertNums = isObject(document) && isObject(document.createElement);
      mixin.exports = function (value) {
        return convertNums ? document.createElement(value) : {};
      };
    },
    "./node_modules/core-js/library/modules/_enum-bug-keys.js": function (mixin, doPost) {
      mixin.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
    },
    "./node_modules/core-js/library/modules/_enum-keys.js": function (module, layer, $) {
      var template = $("./node_modules/core-js/library/modules/_object-keys.js");
      var action = $("./node_modules/core-js/library/modules/_object-gops.js");
      var i = $("./node_modules/core-js/library/modules/_object-pie.js");
      module.exports = function (value) {
        var result = template(value);
        var def = action.f;
        if (def) {
          var nodeData;
          var nodes = def(value);
          var y = i.f;
          var endNodeIndex = 0;
          for (; nodes.length > endNodeIndex;) {
            if (y.call(value, nodeData = nodes[endNodeIndex++])) {
              result.push(nodeData);
            }
          }
        }
        return result;
      };
    },
    "./node_modules/core-js/library/modules/_export.js": function (module, exports, __webpack_require__) {
      var global = __webpack_require__("./node_modules/core-js/library/modules/_global.js");
      var core = __webpack_require__("./node_modules/core-js/library/modules/_core.js");
      var ctx = __webpack_require__("./node_modules/core-js/library/modules/_ctx.js");
      var hide = __webpack_require__("./node_modules/core-js/library/modules/_hide.js");
      var redefine = __webpack_require__("./node_modules/core-js/library/modules/_has.js");
      var $export = function (type, name, source) {
        var key;
        var own;
        var out;
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var IS_WRAP = type & $export.W;
        var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
        var expProto = exports.prototype;
        var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {}).prototype;
        for (key in IS_GLOBAL && (source = name), source) {
          if (!((own = !IS_FORCED && target && void 0 !== target[key]) && redefine(exports, key))) {
            out = own ? target[key] : source[key];
            exports[key] = IS_GLOBAL && "function" != typeof target[key] ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (type) {
              var F = function (el, f, a) {
                if (this instanceof type) {
                  switch (arguments.length) {
                    case 0:
                      return new type;
                    case 1:
                      return new type(el);
                    case 2:
                      return new type(el, f);
                  }
                  return new type(el, f, a);
                }
                return type.apply(this, arguments);
              };
              return F.prototype = type.prototype, F;
            }(out) : IS_PROTO && "function" == typeof out ? ctx(Function.call, out) : out;
            if (IS_PROTO) {
              (exports.virtual || (exports.virtual = {}))[key] = out;
              if (type & $export.R && expProto && !expProto[key]) {
                hide(expProto, key, out);
              }
            }
          }
        }
      };
      $export.F = 1;
      $export.G = 2;
      $export.S = 4;
      $export.P = 8;
      $export.B = 16;
      $export.W = 32;
      $export.U = 64;
      $export.R = 128;
      module.exports = $export;
    },
    "./node_modules/core-js/library/modules/_fails.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        try {
          return !!value();
        } catch (e) {
          return true;
        }
      };
    },
    "./node_modules/core-js/library/modules/_for-of.js": function (module, exports, require) {
      var b = require("./node_modules/core-js/library/modules/_ctx.js");
      var assert = require("./node_modules/core-js/library/modules/_iter-call.js");
      var toBeValidDate = require("./node_modules/core-js/library/modules/_is-array-iter.js");
      var validate = require("./node_modules/core-js/library/modules/_an-object.js");
      var min = require("./node_modules/core-js/library/modules/_to-length.js");
      var cb = require("./node_modules/core-js/library/modules/core.get-iterator-method.js");
      var BREAK = {};
      var RETURN = {};
      (exports = module.exports = function (value, name, n, i, done) {
        var udist;
        var data;
        var m;
        var result;
        var callback = done ? function () {
          return value;
        } : cb(value);
        var a = b(n, i, name ? 2 : 1);
        var path = 0;
        if ("function" != typeof callback) {
          throw TypeError(value + " is not iterable!");
        }
        if (toBeValidDate(callback)) {
          udist = min(value.length);
          for (; udist > path; path++) {
            if ((result = name ? a(validate(data = value[path])[0], data[1]) : a(value[path])) === BREAK || result === RETURN) {
              return result;
            }
          }
        } else {
          m = callback.call(value);
          for (; !(data = m.next()).done;) {
            if ((result = assert(m, a, data.value, name)) === BREAK || result === RETURN) {
              return result;
            }
          }
        }
      }).BREAK = BREAK;
      exports.RETURN = RETURN;
    },
    "./node_modules/core-js/library/modules/_global.js": function (module, data) {
      var global = module.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
      if ("number" == typeof __g) {
        __g = global;
      }
    },
    "./node_modules/core-js/library/modules/_has.js": function (mixin, doPost) {
      var hasOwnProperty = {}.hasOwnProperty;
      mixin.exports = function (value, name) {
        return hasOwnProperty.call(value, name);
      };
    },
    "./node_modules/core-js/library/modules/_hide.js": function (blob, id, require) {
      var $ = require("./node_modules/core-js/library/modules/_object-dp.js");
      var createDesc = require("./node_modules/core-js/library/modules/_property-desc.js");
      blob.exports = require("./node_modules/core-js/library/modules/_descriptors.js") ? function (obj, name, value) {
        return $.f(obj, name, createDesc(1, value));
      } : function (obj, name, data) {
        return obj[name] = data, obj;
      };
    },
    "./node_modules/core-js/library/modules/_html.js": function (mixin, doPost, __webpack_require__) {
      var doc = __webpack_require__("./node_modules/core-js/library/modules/_global.js").document;
      mixin.exports = doc && doc.documentElement;
    },
    "./node_modules/core-js/library/modules/_ie8-dom-define.js": function (mixin, doPost, __webpack_require__) {
      mixin.exports = !__webpack_require__("./node_modules/core-js/library/modules/_descriptors.js") && !__webpack_require__("./node_modules/core-js/library/modules/_fails.js")(function () {
        return 7 != Object.defineProperty(__webpack_require__("./node_modules/core-js/library/modules/_dom-create.js")("div"), "a", {
          get: function () {
            return 7;
          }
        }).a;
      });
    },
    "./node_modules/core-js/library/modules/_invoke.js": function (mixin, doPost) {
      mixin.exports = function (value, name, x) {
        var done = void 0 === x;
        switch (name.length) {
          case 0:
            return done ? value() : value.call(x);
          case 1:
            return done ? value(name[0]) : value.call(x, name[0]);
          case 2:
            return done ? value(name[0], name[1]) : value.call(x, name[0], name[1]);
          case 3:
            return done ? value(name[0], name[1], name[2]) : value.call(x, name[0], name[1], name[2]);
          case 4:
            return done ? value(name[0], name[1], name[2], name[3]) : value.call(x, name[0], name[1], name[2], name[3]);
        }
        return value.apply(x, name);
      };
    },
    "./node_modules/core-js/library/modules/_iobject.js": function (module, metadata, packageSuccess) {
      var displayStateStr = packageSuccess("./node_modules/core-js/library/modules/_cof.js");
      module.exports = Object("z").propertyIsEnumerable(0) ? Object : function (value) {
        return "String" == displayStateStr(value) ? value.split("") : Object(value);
      };
    },
    "./node_modules/core-js/library/modules/_is-array-iter.js": function (mixin, doPost, __webpack_require__) {
      var ctx = __webpack_require__("./node_modules/core-js/library/modules/_iterators.js");
      var id = __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator");
      var array = Array.prototype;
      mixin.exports = function (value) {
        return void 0 !== value && (ctx.Array === value || array[id] === value);
      };
    },
    "./node_modules/core-js/library/modules/_is-array.js": function (blob, options, seriesStackIndexCallback) {
      var displayStateStr = seriesStackIndexCallback("./node_modules/core-js/library/modules/_cof.js");
      blob.exports = Array.isArray || function (value) {
        return "Array" == displayStateStr(value);
      };
    },
    "./node_modules/core-js/library/modules/_is-integer.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/core-js/library/modules/_is-object.js");
      var f = Math.floor;
      blob.exports = function (value) {
        return !checkedSubscribe(value) && isFinite(value) && f(value) === value;
      };
    },
    "./node_modules/core-js/library/modules/_is-object.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        return "object" == typeof value ? null !== value : "function" == typeof value;
      };
    },
    "./node_modules/core-js/library/modules/_iter-call.js": function (mixin, doPost, __webpack_require__) {
      var isObj = __webpack_require__("./node_modules/core-js/library/modules/_an-object.js");
      mixin.exports = function (value, name, data, callback) {
        try {
          return callback ? name(isObj(data)[0], data[1]) : name(data);
        } catch (t) {
          var x = value.return;
          throw void 0 !== x && isObj(x.call(value)), t;
        }
      };
    },
    "./node_modules/core-js/library/modules/_iter-create.js": function (mixin, doPost, __webpack_require__) {
      var create = __webpack_require__("./node_modules/core-js/library/modules/_object-create.js");
      var traverse = __webpack_require__("./node_modules/core-js/library/modules/_property-desc.js");
      var equal = __webpack_require__("./node_modules/core-js/library/modules/_set-to-string-tag.js");
      var IteratorPrototype = {};
      __webpack_require__("./node_modules/core-js/library/modules/_hide.js")(IteratorPrototype, __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator"), function () {
        return this;
      });
      mixin.exports = function (obj, name, data) {
        obj.prototype = create(IteratorPrototype, {
          next: traverse(1, data)
        });
        equal(obj, name + " Iterator");
      };
    },
    "./node_modules/core-js/library/modules/_iter-define.js": function (blob, id, require) {
      var playlistUri = require("./node_modules/core-js/library/modules/_library.js");
      var $export = require("./node_modules/core-js/library/modules/_export.js");
      var redefine = require("./node_modules/core-js/library/modules/_redefine.js");
      var has = require("./node_modules/core-js/library/modules/_hide.js");
      var json = require("./node_modules/core-js/library/modules/_iterators.js");
      var transform = require("./node_modules/core-js/library/modules/_iter-create.js");
      var sphereKnn = require("./node_modules/core-js/library/modules/_set-to-string-tag.js");
      var spawn = require("./node_modules/core-js/library/modules/_object-gpo.js");
      var ITERATOR = require("./node_modules/core-js/library/modules/_wks.js")("iterator");
      var BUGGY = !([].keys && "next" in [].keys());
      var id = function () {
        return this;
      };
      blob.exports = function (value, name, s, n, t, IS_SET, FORCED) {
        transform(s, name, n);
        var methods;
        var key;
        var list;
        var extend = function (kind) {
          if (!BUGGY && kind in proto) {
            return proto[kind];
          }
          switch (kind) {
            case "keys":
            case "values":
              return function () {
                return new s(this, kind);
              };
          }
          return function () {
            return new s(this, kind);
          };
        };
        var code = name + " Iterator";
        var k = "values" == t;
        var VALUES_BUG = false;
        var proto = value.prototype;
        var v = proto[ITERATOR] || proto["@@iterator"] || t && proto[t];
        var values = v || extend(t);
        var result = t ? k ? extend("entries") : values : void 0;
        var obj = "Array" == name && proto.entries || v;
        if (obj && (list = spawn(obj.call(new value))) !== Object.prototype && list.next && (sphereKnn(list, code, true), playlistUri || "function" == typeof list[ITERATOR] || has(list, ITERATOR, id)), k && v && "values" !== v.name && (VALUES_BUG = true, values = function () {
          return v.call(this);
        }), playlistUri && !FORCED || !BUGGY && !VALUES_BUG && proto[ITERATOR] || has(proto, ITERATOR, values), json[name] = values, json[code] = id, t) {
          if (methods = {
            values: k ? values : extend("values"),
            keys: IS_SET ? values : extend("keys"),
            entries: result
          }, FORCED) {
            for (key in methods) {
              if (!(key in proto)) {
                redefine(proto, key, methods[key]);
              }
            }
          } else {
            $export($export.P + $export.F * (BUGGY || VALUES_BUG), name, methods);
          }
        }
        return methods;
      };
    },
    "./node_modules/core-js/library/modules/_iter-detect.js": function (mixin, doPost, __webpack_require__) {
      var id = __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator");
      var callback = false;
      try {
        var fn = [7][id]();
        fn.return = function () {
          callback = true;
        };
        Array.from(fn, function () {
          throw 2;
        });
      } catch (e) {
      }
      mixin.exports = function (value, name) {
        if (!name && !callback) {
          return false;
        }
        var safe = false;
        try {
          var B = [7];
          var deletedChar = B[id]();
          deletedChar.next = function () {
            return {
              done: safe = true
            };
          };
          B[id] = function () {
            return deletedChar;
          };
          value(B);
        } catch (e) {
        }
        return safe;
      };
    },
    "./node_modules/core-js/library/modules/_iter-step.js": function (mixin, doPost) {
      mixin.exports = function (value, name) {
        return {
          value: name,
          done: !!value
        };
      };
    },
    "./node_modules/core-js/library/modules/_iterators.js": function (mixin, doPost) {
      mixin.exports = {};
    },
    "./node_modules/core-js/library/modules/_library.js": function (mixin, doPost) {
      mixin.exports = true;
    },
    "./node_modules/core-js/library/modules/_meta.js": function (module, exports, __webpack_require__) {
      var META = __webpack_require__("./node_modules/core-js/library/modules/_uid.js")("meta");
      var isObject = __webpack_require__("./node_modules/core-js/library/modules/_is-object.js");
      var has = __webpack_require__("./node_modules/core-js/library/modules/_has.js");
      var setDesc = __webpack_require__("./node_modules/core-js/library/modules/_object-dp.js").f;
      var id = 0;
      var isExtensible = Object.isExtensible || function () {
        return true;
      };
      var FREEZE = !__webpack_require__("./node_modules/core-js/library/modules/_fails.js")(function () {
        return isExtensible(Object.preventExtensions({}));
      });
      var setMeta = function (value) {
        setDesc(value, META, {
          value: {
            i: "O" + ++id,
            w: {}
          }
        });
      };
      var meta = module.exports = {
        KEY: META,
        NEED: false,
        fastKey: function (it, create) {
          if (!isObject(it)) {
            return "symbol" == typeof it ? it : ("string" == typeof it ? "S" : "P") + it;
          }
          if (!has(it, META)) {
            if (!isExtensible(it)) {
              return "F";
            }
            if (!create) {
              return "E";
            }
            setMeta(it);
          }
          return it[META].i;
        },
        getWeak: function (it, create) {
          if (!has(it, META)) {
            if (!isExtensible(it)) {
              return true;
            }
            if (!create) {
              return false;
            }
            setMeta(it);
          }
          return it[META].w;
        },
        onFreeze: function (it) {
          return FREEZE && meta.NEED && isExtensible(it) && !has(it, META) && setMeta(it), it;
        }
      };
    },
    "./node_modules/core-js/library/modules/_microtask.js": function (mixin, doPost, __webpack_require__) {
      var global = __webpack_require__("./node_modules/core-js/library/modules/_global.js");
      var macrotask = __webpack_require__("./node_modules/core-js/library/modules/_task.js").set;
      var Observer = global.MutationObserver || global.WebKitMutationObserver;
      var process = global.process;
      var Promise = global.Promise;
      var notKeyPress = "process" == __webpack_require__("./node_modules/core-js/library/modules/_cof.js")(process);
      mixin.exports = function () {
        var link;
        var sel;
        var fn;
        var flush = function () {
          var d;
          var item;
          if (notKeyPress && (d = process.domain)) {
            d.exit();
          }
          for (; link;) {
            item = link.fn;
            link = link.next;
            try {
              item();
            } catch (n) {
              throw link ? fn() : sel = void 0, n;
            }
          }
          sel = void 0;
          if (d) {
            d.enter();
          }
        };
        if (notKeyPress) {
          fn = function () {
            process.nextTick(flush);
          };
        } else {
          if (!Observer || global.navigator && global.navigator.standalone) {
            if (Promise && Promise.resolve) {
              var controller = Promise.resolve(void 0);
              fn = function () {
                controller.then(flush);
              };
            } else {
              fn = function () {
                macrotask.call(global, flush);
              };
            }
          } else {
            var a = true;
            var c = document.createTextNode("");
            (new Observer(flush)).observe(c, {
              characterData: true
            });
            fn = function () {
              c.data = a = !a;
            };
          }
        }
        return function (continueWith) {
          var item = {
            fn: continueWith,
            next: void 0
          };
          if (sel) {
            sel.next = item;
          }
          if (!link) {
            link = item;
            fn();
          }
          sel = item;
        };
      };
    },
    "./node_modules/core-js/library/modules/_new-promise-capability.js": function (module, exports, __webpack_require__) {
      function PromiseCapability(C) {
        var resolve;
        var reject;
        this.promise = new C(function (res, rj) {
          if (void 0 !== resolve || void 0 !== reject) {
            throw TypeError("Bad Promise constructor");
          }
          resolve = res;
          reject = rj;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }
      var aFunction = __webpack_require__("./node_modules/core-js/library/modules/_a-function.js");
      module.exports.f = function (value) {
        return new PromiseCapability(value);
      };
    },
    "./node_modules/core-js/library/modules/_object-assign.js": function (module, id, require) {
      var UrdfMaterial = require("./node_modules/core-js/library/modules/_descriptors.js");
      var addSpaceToken = require("./node_modules/core-js/library/modules/_object-keys.js");
      var template = require("./node_modules/core-js/library/modules/_object-gops.js");
      var fileData = require("./node_modules/core-js/library/modules/_object-pie.js");
      var getLiteralString = require("./node_modules/core-js/library/modules/_to-object.js");
      var parseProj = require("./node_modules/core-js/library/modules/_iobject.js");
      var $assign = Object.assign;
      module.exports = !$assign || require("./node_modules/core-js/library/modules/_fails.js")(function () {
        var A = {};
        var B = {};
        var S = Symbol();
        var K = "abcdefghijklmnopqrst";
        return A[S] = 7, K.split("").forEach(function (k) {
          B[k] = k;
        }), 7 != $assign({}, A)[S] || Object.keys($assign({}, B)).join("") != K;
      }) ? function (value, name) {
        var r = getLiteralString(value);
        var length = arguments.length;
        var i = 1;
        var n = template.f;
        var f = fileData.f;
        for (; length > i;) {
          var k;
          var a = parseProj(arguments[i++]);
          var m = n ? addSpaceToken(a).concat(n(a)) : addSpaceToken(a);
          var x = m.length;
          var y = 0;
          for (; x > y;) {
            k = m[y++];
            if (!(UrdfMaterial && !f.call(a, k))) {
              r[k] = a[k];
            }
          }
        }
        return r;
      } : $assign;
    },
    "./node_modules/core-js/library/modules/_object-create.js": function (blob, id, require) {
      var $ = require("./node_modules/core-js/library/modules/_an-object.js");
      var extend = require("./node_modules/core-js/library/modules/_object-dps.js");
      var keys = require("./node_modules/core-js/library/modules/_enum-bug-keys.js");
      var IE_PROTO = require("./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO");
      var that = function () {
      };
      var createDict = function () {
        var iframeDocument;
        var iframe = require("./node_modules/core-js/library/modules/_dom-create.js")("iframe");
        var i = keys.length;
        iframe.style.display = "none";
        require("./node_modules/core-js/library/modules/_html.js").appendChild(iframe);
        iframe.src = "javascript:";
        (iframeDocument = iframe.contentWindow.document).open();
        iframeDocument.write("<script>document.F=Object\x3c/script>");
        iframeDocument.close();
        createDict = iframeDocument.F;
        for (; i--;) {
          delete createDict.prototype[keys[i]];
        }
        return createDict();
      };
      blob.exports = Object.create || function (value, name) {
        var result;
        return null !== value ? (that.prototype = $(value), result = new that, that.prototype = null, result[IE_PROTO] = value) : result = createDict(), void 0 === name ? result : extend(result, name);
      };
    },
    "./node_modules/core-js/library/modules/_object-dp.js": function (module, exports, __webpack_require__) {
      var fnAtmosphere = __webpack_require__("./node_modules/core-js/library/modules/_an-object.js");
      var _UiIcon = __webpack_require__("./node_modules/core-js/library/modules/_ie8-dom-define.js");
      var _splitCapilalise = __webpack_require__("./node_modules/core-js/library/modules/_to-primitive.js");
      var f = Object.defineProperty;
      exports.f = __webpack_require__("./node_modules/core-js/library/modules/_descriptors.js") ? Object.defineProperty : function (value, name, d) {
        if (fnAtmosphere(value), name = _splitCapilalise(name, true), fnAtmosphere(d), _UiIcon) {
          try {
            return f(value, name, d);
          } catch (e) {
          }
        }
        if ("get" in d || "set" in d) {
          throw TypeError("Accessors not supported!");
        }
        return "value" in d && (value[name] = d.value), value;
      };
    },
    "./node_modules/core-js/library/modules/_object-dps.js": function (blob, id, require) {
      var dP = require("./node_modules/core-js/library/modules/_object-dp.js");
      var o = require("./node_modules/core-js/library/modules/_an-object.js");
      var index = require("./node_modules/core-js/library/modules/_object-keys.js");
      blob.exports = require("./node_modules/core-js/library/modules/_descriptors.js") ? Object.defineProperties : function (value, name) {
        o(value);
        var P;
        var s = index(name);
        var i = s.length;
        var l = 0;
        for (; i > l;) {
          dP.f(value, P = s[l++], name[P]);
        }
        return value;
      };
    },
    "./node_modules/core-js/library/modules/_object-gopd.js": function (depsLoaded, module, require) {
      var keymap = require("./node_modules/core-js/library/modules/_object-pie.js");
      var changed = require("./node_modules/core-js/library/modules/_property-desc.js");
      var stringifyStyle = require("./node_modules/core-js/library/modules/_to-iobject.js");
      var getValidKey = require("./node_modules/core-js/library/modules/_to-primitive.js");
      var a = require("./node_modules/core-js/library/modules/_has.js");
      var TagHourlyStat = require("./node_modules/core-js/library/modules/_ie8-dom-define.js");
      var gOPD = Object.getOwnPropertyDescriptor;
      module.f = require("./node_modules/core-js/library/modules/_descriptors.js") ? gOPD : function (value, key) {
        if (value = stringifyStyle(value), key = getValidKey(key, true), TagHourlyStat) {
          try {
            return gOPD(value, key);
          } catch (e) {
          }
        }
        if (a(value, key)) {
          return changed(!keymap.f.call(value, key), value[key]);
        }
      };
    },
    "./node_modules/core-js/library/modules/_object-gopn-ext.js": function (module, id, require) {
      var h = require("./node_modules/core-js/library/modules/_to-iobject.js");
      var f = require("./node_modules/core-js/library/modules/_object-gopn.js").f;
      var objectToString$2 = {}.toString;
      var type = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      module.exports.f = function (value) {
        return type && "[object Window]" == objectToString$2.call(value) ? function (e) {
          try {
            return f(e);
          } catch (e) {
            return type.slice();
          }
        }(value) : f(h(value));
      };
    },
    "./node_modules/core-js/library/modules/_object-gopn.js": function (module, exports, __webpack_require__) {
      var $keys = __webpack_require__("./node_modules/core-js/library/modules/_object-keys-internal.js");
      var hiddenKeys = __webpack_require__("./node_modules/core-js/library/modules/_enum-bug-keys.js").concat("length", "prototype");
      exports.f = Object.getOwnPropertyNames || function (value) {
        return $keys(value, hiddenKeys);
      };
    },
    "./node_modules/core-js/library/modules/_object-gops.js": function (module, exports) {
      exports.f = Object.getOwnPropertySymbols;
    },
    "./node_modules/core-js/library/modules/_object-gpo.js": function (mixin, doPost, __webpack_require__) {
      var has = __webpack_require__("./node_modules/core-js/library/modules/_has.js");
      var __py_prepend = __webpack_require__("./node_modules/core-js/library/modules/_to-object.js");
      var key = __webpack_require__("./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO");
      var ObjectProto = Object.prototype;
      mixin.exports = Object.getPrototypeOf || function (obj) {
        return obj = __py_prepend(obj), has(obj, key) ? obj[key] : "function" == typeof obj.constructor && obj instanceof obj.constructor ? obj.constructor.prototype : obj instanceof Object ? ObjectProto : null;
      };
    },
    "./node_modules/core-js/library/modules/_object-keys-internal.js": function (mixin, doPost, __webpack_require__) {
      var filter = __webpack_require__("./node_modules/core-js/library/modules/_has.js");
      var eachTextNode = __webpack_require__("./node_modules/core-js/library/modules/_to-iobject.js");
      var i = __webpack_require__("./node_modules/core-js/library/modules/_array-includes.js")(false);
      var parentFile = __webpack_require__("./node_modules/core-js/library/modules/_shared-key.js")("IE_PROTO");
      mixin.exports = function (value, name) {
        var prop;
        var path = eachTextNode(value);
        var maxNameWidth = 0;
        var css = [];
        for (prop in path) {
          if (prop != parentFile && filter(path, prop)) {
            css.push(prop);
          }
        }
        for (; name.length > maxNameWidth;) {
          if (filter(path, prop = name[maxNameWidth++])) {
            if (!~i(css, prop)) {
              css.push(prop);
            }
          }
        }
        return css;
      };
    },
    "./node_modules/core-js/library/modules/_object-keys.js": function (blob, callback, put) {
      var bindDataToAddEntryRow = put("./node_modules/core-js/library/modules/_object-keys-internal.js");
      var row = put("./node_modules/core-js/library/modules/_enum-bug-keys.js");
      blob.exports = Object.keys || function (value) {
        return bindDataToAddEntryRow(value, row);
      };
    },
    "./node_modules/core-js/library/modules/_object-pie.js": function (module, exports) {
      exports.f = {}.propertyIsEnumerable;
    },
    "./node_modules/core-js/library/modules/_object-sap.js": function (mixin, doPost, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      var root = __webpack_require__("./node_modules/core-js/library/modules/_core.js");
      var fails = __webpack_require__("./node_modules/core-js/library/modules/_fails.js");
      mixin.exports = function (key, name) {
        var prop = (root.Object || {})[key] || Object[key];
        var methods = {};
        methods[key] = name(prop);
        $export($export.S + $export.F * fails(function () {
          prop(1);
        }), "Object", methods);
      };
    },
    "./node_modules/core-js/library/modules/_perform.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        try {
          return {
            e: false,
            v: value()
          };
        } catch (clnInput) {
          return {
            e: true,
            v: clnInput
          };
        }
      };
    },
    "./node_modules/core-js/library/modules/_promise-resolve.js": function (blob, id, require) {
      var sphereKnn = require("./node_modules/core-js/library/modules/_an-object.js");
      var defined = require("./node_modules/core-js/library/modules/_is-object.js");
      var alias = require("./node_modules/core-js/library/modules/_new-promise-capability.js");
      blob.exports = function (value, name) {
        if (sphereKnn(value), defined(name) && name.constructor === value) {
          return name;
        }
        var r = alias.f(value);
        return (0, r.resolve)(name), r.promise;
      };
    },
    "./node_modules/core-js/library/modules/_property-desc.js": function (mixin, doPost) {
      mixin.exports = function (value, name) {
        return {
          enumerable: !(1 & value),
          configurable: !(2 & value),
          writable: !(4 & value),
          value: name
        };
      };
    },
    "./node_modules/core-js/library/modules/_redefine-all.js": function (module, downloads, filter) {
      var isMatch = filter("./node_modules/core-js/library/modules/_hide.js");
      module.exports = function (obj, name, data) {
        var i;
        for (i in name) {
          if (data && obj[i]) {
            obj[i] = name[i];
          } else {
            isMatch(obj, i, name[i]);
          }
        }
        return obj;
      };
    },
    "./node_modules/core-js/library/modules/_redefine.js": function (module, object, instantiate) {
      module.exports = instantiate("./node_modules/core-js/library/modules/_hide.js");
    },
    "./node_modules/core-js/library/modules/_set-collection-from.js": function (module, layer, $) {
      var $export = $("./node_modules/core-js/library/modules/_export.js");
      var ctx = $("./node_modules/core-js/library/modules/_a-function.js");
      var format = $("./node_modules/core-js/library/modules/_ctx.js");
      var callback = $("./node_modules/core-js/library/modules/_for-of.js");
      module.exports = function (value) {
        $export($export.S, value, {
          from: function (value) {
            var err;
            var result;
            var i;
            var f;
            var fn = arguments[1];
            return ctx(this), (err = void 0 !== fn) && ctx(fn), null == value ? new this : (result = [], err ? (i = 0, f = format(fn, arguments[2], 2), callback(value, false, function (e) {
              result.push(f(e, i++));
            })) : callback(value, false, result.push, result), new this(result));
          }
        });
      };
    },
    "./node_modules/core-js/library/modules/_set-collection-of.js": function (mixin, doPost, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      mixin.exports = function (value) {
        $export($export.S, value, {
          of: function () {
            var i = arguments.length;
            var copy = new Array(i);
            for (; i--;) {
              copy[i] = arguments[i];
            }
            return new this(copy);
          }
        });
      };
    },
    "./node_modules/core-js/library/modules/_set-species.js": function (blob, id, require) {
      var map = require("./node_modules/core-js/library/modules/_global.js");
      var h = require("./node_modules/core-js/library/modules/_core.js");
      var $ = require("./node_modules/core-js/library/modules/_object-dp.js");
      var proxy = require("./node_modules/core-js/library/modules/_descriptors.js");
      var key = require("./node_modules/core-js/library/modules/_wks.js")("species");
      blob.exports = function (value) {
        var val = "function" == typeof h[value] ? h[value] : map[value];
        if (proxy && val && !val[key]) {
          $.f(val, key, {
            configurable: true,
            get: function () {
              return this;
            }
          });
        }
      };
    },
    "./node_modules/core-js/library/modules/_set-to-string-tag.js": function (mixin, doPost, __webpack_require__) {
      var defineProperty = __webpack_require__("./node_modules/core-js/library/modules/_object-dp.js").f;
      var t = __webpack_require__("./node_modules/core-js/library/modules/_has.js");
      var opacity = __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("toStringTag");
      mixin.exports = function (value, name, v) {
        if (value && !t(value = v ? value : value.prototype, opacity)) {
          defineProperty(value, opacity, {
            configurable: true,
            value: name
          });
        }
      };
    },
    "./node_modules/core-js/library/modules/_shared-key.js": function (blob, id, require) {
      var result = require("./node_modules/core-js/library/modules/_shared.js")("keys");
      var extend = require("./node_modules/core-js/library/modules/_uid.js");
      blob.exports = function (value) {
        return result[value] || (result[value] = extend(value));
      };
    },
    "./node_modules/core-js/library/modules/_shared.js": function (blob, type, parse) {
      var browser = parse("./node_modules/core-js/library/modules/_core.js");
      var root = parse("./node_modules/core-js/library/modules/_global.js");
      var remoteValues = root["__core-js_shared__"] || (root["__core-js_shared__"] = {});
      (blob.exports = function (value, name) {
        return remoteValues[value] || (remoteValues[value] = void 0 !== name ? name : {});
      })("versions", []).push({
        version: browser.version,
        mode: parse("./node_modules/core-js/library/modules/_library.js") ? "pure" : "global",
        copyright: "\u00a9 2019 Denis Pushkarev (zloirock.ru)"
      });
    },
    "./node_modules/core-js/library/modules/_species-constructor.js": function (blob, id, require) {
      var gm = require("./node_modules/core-js/library/modules/_an-object.js");
      var checkedSubscribe = require("./node_modules/core-js/library/modules/_a-function.js");
      var resizeFn = require("./node_modules/core-js/library/modules/_wks.js")("species");
      blob.exports = function (value, name) {
        var loadFile;
        var file = gm(value).constructor;
        return void 0 === file || null == (loadFile = gm(file)[resizeFn]) ? name : checkedSubscribe(loadFile);
      };
    },
    "./node_modules/core-js/library/modules/_string-at.js": function (mixin, doPost, __webpack_require__) {
      var memoize = __webpack_require__("./node_modules/core-js/library/modules/_to-integer.js");
      var defined = __webpack_require__("./node_modules/core-js/library/modules/_defined.js");
      mixin.exports = function (value) {
        return function (that, type) {
          var first;
          var arg;
          var a = String(defined(that));
          var index = memoize(type);
          var count = a.length;
          return index < 0 || index >= count ? value ? "" : void 0 : (first = a.charCodeAt(index)) < 55296 || first > 56319 || index + 1 === count || (arg = a.charCodeAt(index + 1)) < 56320 || arg > 57343 ? value ? a.charAt(index) : first : value ? a.slice(index, index + 2) : arg - 56320 + (first - 55296 << 10) + 65536;
        };
      };
    },
    "./node_modules/core-js/library/modules/_task.js": function (module, id, require) {
      var defer;
      var channel;
      var port;
      var ctx = require("./node_modules/core-js/library/modules/_ctx.js");
      var Readdir = require("./node_modules/core-js/library/modules/_invoke.js");
      var html = require("./node_modules/core-js/library/modules/_html.js");
      var cel = require("./node_modules/core-js/library/modules/_dom-create.js");
      var global = require("./node_modules/core-js/library/modules/_global.js");
      var process = global.process;
      var setTask = global.setImmediate;
      var clearTask = global.clearImmediate;
      var MessageChannel = global.MessageChannel;
      var util = global.Dispatch;
      var value = 0;
      var params = {};
      var fn = function () {
        var i = +this;
        if (params.hasOwnProperty(i)) {
          var replaceString = params[i];
          delete params[i];
          replaceString();
        }
      };
      var listner = function (event) {
        fn.call(event.data);
      };
      if (!(setTask && clearTask)) {
        setTask = function (value) {
          var callback = [];
          var i = 1;
          for (; arguments.length > i;) {
            callback.push(arguments[i++]);
          }
          return params[++value] = function () {
            Readdir("function" == typeof value ? value : Function(value), callback);
          }, defer(value), value;
        };
        clearTask = function (value) {
          delete params[value];
        };
        if ("process" == require("./node_modules/core-js/library/modules/_cof.js")(process)) {
          defer = function (id) {
            process.nextTick(ctx(fn, id, 1));
          };
        } else {
          if (util && util.now) {
            defer = function (id) {
              util.now(ctx(fn, id, 1));
            };
          } else {
            if (MessageChannel) {
              port = (channel = new MessageChannel).port2;
              channel.port1.onmessage = listner;
              defer = ctx(port.postMessage, port, 1);
            } else {
              if (global.addEventListener && "function" == typeof postMessage && !global.importScripts) {
                defer = function (id) {
                  global.postMessage(id + "", "*");
                };
                global.addEventListener("message", listner, false);
              } else {
                defer = "onreadystatechange" in cel("script") ? function (it) {
                  html.appendChild(cel("script")).onreadystatechange = function () {
                    html.removeChild(this);
                    fn.call(it);
                  };
                } : function (id) {
                  setTimeout(ctx(fn, id, 1), 0);
                };
              }
            }
          }
        }
      }
      module.exports = {
        set: setTask,
        clear: clearTask
      };
    },
    "./node_modules/core-js/library/modules/_to-absolute-index.js": function (blob, options, seriesStackIndexCallback) {
      var friendlyAttrValue = seriesStackIndexCallback("./node_modules/core-js/library/modules/_to-integer.js");
      var log = Math.max;
      var method = Math.min;
      blob.exports = function (value, name) {
        return (value = friendlyAttrValue(value)) < 0 ? log(value + name, 0) : method(value, name);
      };
    },
    "./node_modules/core-js/library/modules/_to-integer.js": function (mixin, doPost) {
      var ceil = Math.ceil;
      var floor = Math.floor;
      mixin.exports = function (value) {
        return isNaN(value = +value) ? 0 : (value > 0 ? floor : ceil)(value);
      };
    },
    "./node_modules/core-js/library/modules/_to-iobject.js": function (blob, id, require) {
      var parse = require("./node_modules/core-js/library/modules/_iobject.js");
      var generate = require("./node_modules/core-js/library/modules/_defined.js");
      blob.exports = function (value) {
        return parse(generate(value));
      };
    },
    "./node_modules/core-js/library/modules/_to-length.js": function (mixin, doPost, __webpack_require__) {
      var toInteger = __webpack_require__("./node_modules/core-js/library/modules/_to-integer.js");
      var min = Math.min;
      mixin.exports = function (value) {
        return value > 0 ? min(toInteger(value), 9007199254740991) : 0;
      };
    },
    "./node_modules/core-js/library/modules/_to-object.js": function (mixin, doPost, __webpack_require__) {
      var defined = __webpack_require__("./node_modules/core-js/library/modules/_defined.js");
      mixin.exports = function (obj) {
        return Object(defined(obj));
      };
    },
    "./node_modules/core-js/library/modules/_to-primitive.js": function (mixin, doPost, getInstantState) {
      var state = getInstantState("./node_modules/core-js/library/modules/_is-object.js");
      mixin.exports = function (obj, name) {
        if (!state(obj)) {
          return obj;
        }
        var fn;
        var o;
        if (name && "function" == typeof (fn = obj.toString) && !state(o = fn.call(obj))) {
          return o;
        }
        if ("function" == typeof (fn = obj.valueOf) && !state(o = fn.call(obj))) {
          return o;
        }
        if (!name && "function" == typeof (fn = obj.toString) && !state(o = fn.call(obj))) {
          return o;
        }
        throw TypeError("Can't convert object to primitive value");
      };
    },
    "./node_modules/core-js/library/modules/_uid.js": function (mixin, doPost) {
      var id = 0;
      var px = Math.random();
      mixin.exports = function (value) {
        return "Symbol(".concat(void 0 === value ? "" : value, ")_", (++id + px).toString(36));
      };
    },
    "./node_modules/core-js/library/modules/_user-agent.js": function (build, event, awfEmit) {
      var navigator = awfEmit("./node_modules/core-js/library/modules/_global.js").navigator;
      build.exports = navigator && navigator.userAgent || "";
    },
    "./node_modules/core-js/library/modules/_validate-collection.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/core-js/library/modules/_is-object.js");
      blob.exports = function (value, name) {
        if (!checkedSubscribe(value) || value._t !== name) {
          throw TypeError("Incompatible receiver, " + name + " required!");
        }
        return value;
      };
    },
    "./node_modules/core-js/library/modules/_wks-define.js": function (blob, id, require) {
      var _mongodb = require("./node_modules/core-js/library/modules/_global.js");
      var core = require("./node_modules/core-js/library/modules/_core.js");
      var LIBRARY = require("./node_modules/core-js/library/modules/_library.js");
      var alias = require("./node_modules/core-js/library/modules/_wks-ext.js");
      var defineProperty = require("./node_modules/core-js/library/modules/_object-dp.js").f;
      blob.exports = function (value) {
        var A = core.Symbol || (core.Symbol = LIBRARY ? {} : _mongodb.Symbol || {});
        if (!("_" == value.charAt(0) || value in A)) {
          defineProperty(A, value, {
            value: alias.f(value)
          });
        }
      };
    },
    "./node_modules/core-js/library/modules/_wks-ext.js": function (module, exports, __webpack_require__) {
      exports.f = __webpack_require__("./node_modules/core-js/library/modules/_wks.js");
    },
    "./node_modules/core-js/library/modules/_wks.js": function (mixin, doPost, __webpack_require__) {
      var store = __webpack_require__("./node_modules/core-js/library/modules/_shared.js")("wks");
      var uid = __webpack_require__("./node_modules/core-js/library/modules/_uid.js");
      var Symbol = __webpack_require__("./node_modules/core-js/library/modules/_global.js").Symbol;
      var USE_SYMBOL = "function" == typeof Symbol;
      (mixin.exports = function (name) {
        return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)("Symbol." + name));
      }).store = store;
    },
    "./node_modules/core-js/library/modules/core.get-iterator-method.js": function (mixin, doPost, __webpack_require__) {
      var classof = __webpack_require__("./node_modules/core-js/library/modules/_classof.js");
      var ITERATOR = __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("iterator");
      var Iterators = __webpack_require__("./node_modules/core-js/library/modules/_iterators.js");
      mixin.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").getIteratorMethod = function (it) {
        if (null != it) {
          return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
        }
      };
    },
    "./node_modules/core-js/library/modules/core.get-iterator.js": function (mixin, doPost, __webpack_require__) {
      var anObject = __webpack_require__("./node_modules/core-js/library/modules/_an-object.js");
      var get = __webpack_require__("./node_modules/core-js/library/modules/core.get-iterator-method.js");
      mixin.exports = __webpack_require__("./node_modules/core-js/library/modules/_core.js").getIterator = function (it) {
        var ret = get(it);
        if ("function" != typeof ret) {
          throw TypeError(it + " is not iterable!");
        }
        return anObject(ret.call(it));
      };
    },
    "./node_modules/core-js/library/modules/es6.array.from.js": function (srcVersion, runtime, __webpack_require__) {
      var makeIterator = __webpack_require__("./node_modules/core-js/library/modules/_ctx.js");
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      var toObject = __webpack_require__("./node_modules/core-js/library/modules/_to-object.js");
      var ctx = __webpack_require__("./node_modules/core-js/library/modules/_iter-call.js");
      var isArrayIter = __webpack_require__("./node_modules/core-js/library/modules/_is-array-iter.js");
      var toLength = __webpack_require__("./node_modules/core-js/library/modules/_to-length.js");
      var defineProperty = __webpack_require__("./node_modules/core-js/library/modules/_create-property.js");
      var getIterFn = __webpack_require__("./node_modules/core-js/library/modules/core.get-iterator-method.js");
      $export($export.S + $export.F * !__webpack_require__("./node_modules/core-js/library/modules/_iter-detect.js")(function (e) {
        Array.from(e);
      }), "Array", {
        from: function (obj) {
          var length;
          var result;
          var step;
          var iterator;
          var iterable = toObject(obj);
          var C = "function" == typeof this ? this : Array;
          var aLen = arguments.length;
          var callback = aLen > 1 ? arguments[1] : void 0;
          var mapping = void 0 !== callback;
          var i = 0;
          var iterFn = getIterFn(iterable);
          if (mapping && (callback = makeIterator(callback, aLen > 2 ? arguments[2] : void 0, 2)), null == iterFn || C == Array && isArrayIter(iterFn)) {
            result = new C(length = toLength(iterable.length));
            for (; length > i; i++) {
              defineProperty(result, i, mapping ? callback(iterable[i], i) : iterable[i]);
            }
          } else {
            iterator = iterFn.call(iterable);
            result = new C;
            for (; !(step = iterator.next()).done; i++) {
              defineProperty(result, i, mapping ? ctx(iterator, callback, [step.value, i], true) : step.value);
            }
          }
          return result.length = i, result;
        }
      });
    },
    "./node_modules/core-js/library/modules/es6.array.iterator.js": function (module, exports, __webpack_require__) {
      var addToUnscopables = __webpack_require__("./node_modules/core-js/library/modules/_add-to-unscopables.js");
      var cachesStorage = __webpack_require__("./node_modules/core-js/library/modules/_iter-step.js");
      var Iterators = __webpack_require__("./node_modules/core-js/library/modules/_iterators.js");
      var toIObject = __webpack_require__("./node_modules/core-js/library/modules/_to-iobject.js");
      module.exports = __webpack_require__("./node_modules/core-js/library/modules/_iter-define.js")(Array, "Array", function (iterated, kind) {
        this._t = toIObject(iterated);
        this._i = 0;
        this._k = kind;
      }, function () {
        var O = this._t;
        var undefined = this._k;
        var index = this._i++;
        return !O || index >= O.length ? (this._t = void 0, cachesStorage(1)) : cachesStorage(0, "keys" == undefined ? index : "values" == undefined ? O[index] : [index, O[index]]);
      }, "values");
      Iterators.Arguments = Iterators.Array;
      addToUnscopables("keys");
      addToUnscopables("values");
      addToUnscopables("entries");
    },
    "./node_modules/core-js/library/modules/es6.map.js": function (blob, id, require) {
      var t = require("./node_modules/core-js/library/modules/_collection-strong.js");
      var is = require("./node_modules/core-js/library/modules/_validate-collection.js");
      blob.exports = require("./node_modules/core-js/library/modules/_collection.js")("Map", function (saveNotifs) {
        return function () {
          return saveNotifs(this, arguments.length > 0 ? arguments[0] : void 0);
        };
      }, {
        get: function (value) {
          var entry = t.getEntry(is(this, "Map"), value);
          return entry && entry.v;
        },
        set: function (value, name) {
          return t.def(is(this, "Map"), 0 === value ? 0 : value, name);
        }
      }, t, true);
    },
    "./node_modules/core-js/library/modules/es6.number.is-integer.js": function (module, exports, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      $export($export.S, "Number", {
        isInteger: __webpack_require__("./node_modules/core-js/library/modules/_is-integer.js")
      });
    },
    "./node_modules/core-js/library/modules/es6.object.assign.js": function (module, exports, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      $export($export.S + $export.F, "Object", {
        assign: __webpack_require__("./node_modules/core-js/library/modules/_object-assign.js")
      });
    },
    "./node_modules/core-js/library/modules/es6.object.create.js": function (module, exports, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      $export($export.S, "Object", {
        create: __webpack_require__("./node_modules/core-js/library/modules/_object-create.js")
      });
    },
    "./node_modules/core-js/library/modules/es6.object.define-properties.js": function (onerror, define, require) {
      var $export = require("./node_modules/core-js/library/modules/_export.js");
      $export($export.S + $export.F * !require("./node_modules/core-js/library/modules/_descriptors.js"), "Object", {
        defineProperties: require("./node_modules/core-js/library/modules/_object-dps.js")
      });
    },
    "./node_modules/core-js/library/modules/es6.object.define-property.js": function (module, exports, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      $export($export.S + $export.F * !__webpack_require__("./node_modules/core-js/library/modules/_descriptors.js"), "Object", {
        defineProperty: __webpack_require__("./node_modules/core-js/library/modules/_object-dp.js").f
      });
    },
    "./node_modules/core-js/library/modules/es6.object.freeze.js": function (module, exports, __webpack_require__) {
      var isObject = __webpack_require__("./node_modules/core-js/library/modules/_is-object.js");
      var meta = __webpack_require__("./node_modules/core-js/library/modules/_meta.js").onFreeze;
      __webpack_require__("./node_modules/core-js/library/modules/_object-sap.js")("freeze", function ($preventExtensions) {
        return function (it) {
          return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
        };
      });
    },
    "./node_modules/core-js/library/modules/es6.object.get-own-property-names.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/_object-sap.js")("getOwnPropertyNames", function () {
        return __webpack_require__("./node_modules/core-js/library/modules/_object-gopn-ext.js").f;
      });
    },
    "./node_modules/core-js/library/modules/es6.object.keys.js": function (module, exports, __webpack_require__) {
      var getTouchCenter = __webpack_require__("./node_modules/core-js/library/modules/_to-object.js");
      var panToNewPosition = __webpack_require__("./node_modules/core-js/library/modules/_object-keys.js");
      __webpack_require__("./node_modules/core-js/library/modules/_object-sap.js")("keys", function () {
        return function (targetTouches) {
          return panToNewPosition(getTouchCenter(targetTouches));
        };
      });
    },
    "./node_modules/core-js/library/modules/es6.object.to-string.js": function (formatters, customFormatters) {
    },
    "./node_modules/core-js/library/modules/es6.promise.js": function (onerror, define, require) {
      var then;
      var format;
      var Deferred;
      var index_out;
      var LIBRARY = require("./node_modules/core-js/library/modules/_library.js");
      var global = require("./node_modules/core-js/library/modules/_global.js");
      var ctx = require("./node_modules/core-js/library/modules/_ctx.js");
      var minify = require("./node_modules/core-js/library/modules/_classof.js");
      var $export = require("./node_modules/core-js/library/modules/_export.js");
      var isFunction = require("./node_modules/core-js/library/modules/_is-object.js");
      var isPromise = require("./node_modules/core-js/library/modules/_a-function.js");
      var fn = require("./node_modules/core-js/library/modules/_an-instance.js");
      var isArray = require("./node_modules/core-js/library/modules/_for-of.js");
      var is = require("./node_modules/core-js/library/modules/_species-constructor.js");
      var map = require("./node_modules/core-js/library/modules/_task.js").set;
      var asap = require("./node_modules/core-js/library/modules/_microtask.js")();
      var g = require("./node_modules/core-js/library/modules/_new-promise-capability.js");
      var parse = require("./node_modules/core-js/library/modules/_perform.js");
      var w = require("./node_modules/core-js/library/modules/_user-agent.js");
      var factory = require("./node_modules/core-js/library/modules/_promise-resolve.js");
      var TypeError = global.TypeError;
      var process = global.process;
      var config = process && process.versions;
      var validPlugins = config && config.v8 || "";
      var Promise = global.Promise;
      var isNode = "process" == minify(process);
      var empty = function () {
      };
      var when = format = g.f;
      var USE_NATIVE = !!function () {
        try {
          var promise = Promise.resolve(1);
          var FakePromise = (promise.constructor = {})[require("./node_modules/core-js/library/modules/_wks.js")("species")] = function (callback) {
            callback(empty, empty);
          };
          return (isNode || "function" == typeof PromiseRejectionEvent) && promise.then(empty) instanceof FakePromise && 0 !== validPlugins.indexOf("6.6") && -1 === w.indexOf("Chrome/66");
        } catch (e) {
        }
      }();
      var isThenable = function (value) {
        var then;
        return !(!isFunction(value) || "function" != typeof (then = value.then)) && then;
      };
      var notify = function (promise, isReject) {
        if (!promise._n) {
          promise._n = true;
          var chain = promise._c;
          asap(function () {
            var value = promise._v;
            var ok = 1 == promise._s;
            var i = 0;
            var run = function (reaction) {
              var result;
              var then;
              var excl_subdomains;
              var cb = ok ? reaction.ok : reaction.fail;
              var resolve = reaction.resolve;
              var reject = reaction.reject;
              var domain = reaction.domain;
              try {
                if (cb) {
                  if (!ok) {
                    if (2 == promise._h) {
                      onHandleUnhandled(promise);
                    }
                    promise._h = 1;
                  }
                  if (true === cb) {
                    result = value;
                  } else {
                    if (domain) {
                      domain.enter();
                    }
                    result = cb(value);
                    if (domain) {
                      domain.exit();
                      excl_subdomains = true;
                    }
                  }
                  if (result === reaction.promise) {
                    reject(TypeError("Promise-chain cycle"));
                  } else {
                    if (then = isThenable(result)) {
                      then.call(result, resolve, reject);
                    } else {
                      resolve(result);
                    }
                  }
                } else {
                  reject(value);
                }
              } catch (x) {
                if (domain && !excl_subdomains) {
                  domain.exit();
                }
                reject(x);
              }
            };
            for (; chain.length > i;) {
              run(chain[i++]);
            }
            promise._c = [];
            promise._n = false;
            if (isReject && !promise._h) {
              onUnhandled(promise);
            }
          });
        }
      };
      var onUnhandled = function (promise) {
        map.call(global, function () {
          var options;
          var handler;
          var console;
          var value = promise._v;
          var show = isUnhandled(promise);
          if (show && (options = parse(function () {
            if (isNode) {
              process.emit("unhandledRejection", value, promise);
            } else {
              if (handler = global.onunhandledrejection) {
                handler({
                  promise: promise,
                  reason: value
                });
              } else {
                if ((console = global.console) && console.error) {
                  console.error("Unhandled promise rejection", value);
                }
              }
            }
          }), promise._h = isNode || isUnhandled(promise) ? 2 : 1), promise._a = void 0, show && options.e) {
            throw options.v;
          }
        });
      };
      var isUnhandled = function (promise) {
        return 1 !== promise._h && 0 === (promise._a || promise._c).length;
      };
      var onHandleUnhandled = function (promise) {
        map.call(global, function () {
          var handler;
          if (isNode) {
            process.emit("rejectionHandled", promise);
          } else {
            if (handler = global.onrejectionhandled) {
              handler({
                promise: promise,
                reason: promise._v
              });
            }
          }
        });
      };
      var $reject = function (value) {
        var promise = this;
        if (!promise._d) {
          promise._d = true;
          (promise = promise._w || promise)._v = value;
          promise._s = 2;
          if (!promise._a) {
            promise._a = promise._c.slice();
          }
          notify(promise, true);
        }
      };
      var $resolve = function (value) {
        var then;
        var promise = this;
        if (!promise._d) {
          promise._d = true;
          promise = promise._w || promise;
          try {
            if (promise === value) {
              throw TypeError("Promise can't be resolved itself");
            }
            if (then = isThenable(value)) {
              asap(function () {
                var wrapper = {
                  _w: promise,
                  _d: false
                };
                try {
                  then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                } catch (e) {
                  $reject.call(wrapper, e);
                }
              });
            } else {
              promise._v = value;
              promise._s = 1;
              notify(promise, false);
            }
          } catch (e) {
            $reject.call({
              _w: promise,
              _d: false
            }, e);
          }
        }
      };
      if (!USE_NATIVE) {
        Promise = function (value) {
          fn(this, Promise, "Promise", "_h");
          isPromise(value);
          then.call(this);
          try {
            value(ctx($resolve, this, 1), ctx($reject, this, 1));
          } catch (e) {
            $reject.call(this, e);
          }
        };
        (then = function (posts) {
          this._c = [];
          this._a = void 0;
          this._s = 0;
          this._d = false;
          this._v = void 0;
          this._h = 0;
          this._n = false;
        }).prototype = require("./node_modules/core-js/library/modules/_redefine-all.js")(Promise.prototype, {
          then: function (fn, callback) {
            var d = when(is(this, Promise));
            return d.ok = "function" != typeof fn || fn, d.fail = "function" == typeof callback && callback, d.domain = isNode ? process.domain : void 0, this._c.push(d), this._a && this._a.push(d), this._s && notify(this, false), d.promise;
          },
          catch: function (handler) {
            return this.then(void 0, handler);
          }
        });
        Deferred = function () {
          var promise = new then;
          this.promise = promise;
          this.resolve = ctx($resolve, promise, 1);
          this.reject = ctx($reject, promise, 1);
        };
        g.f = when = function (key) {
          return key === Promise || key === index_out ? new Deferred(key) : format(key);
        };
      }
      $export($export.G + $export.W + $export.F * !USE_NATIVE, {
        Promise: Promise
      });
      require("./node_modules/core-js/library/modules/_set-to-string-tag.js")(Promise, "Promise");
      require("./node_modules/core-js/library/modules/_set-species.js")("Promise");
      index_out = require("./node_modules/core-js/library/modules/_core.js").Promise;
      $export($export.S + $export.F * !USE_NATIVE, "Promise", {
        reject: function (value) {
          var promise = when(this);
          return (0, promise.reject)(value), promise.promise;
        }
      });
      $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), "Promise", {
        resolve: function (value) {
          return factory(LIBRARY && this === index_out ? Promise : this, value);
        }
      });
      $export($export.S + $export.F * !(USE_NATIVE && require("./node_modules/core-js/library/modules/_iter-detect.js")(function (e) {
        Promise.all(e).catch(empty);
      })), "Promise", {
        all: function (obj) {
          var t = this;
          var d = when(t);
          var resolve = d.resolve;
          var reject = d.reject;
          var parsed = parse(function () {
            var e = [];
            var cases = 0;
            var s = 1;
            isArray(obj, false, function (data) {
              var a = cases++;
              var u = false;
              e.push(void 0);
              s++;
              t.resolve(data).then(function (b) {
                if (!u) {
                  u = true;
                  e[a] = b;
                  if (!--s) {
                    resolve(e);
                  }
                }
              }, reject);
            });
            if (!--s) {
              resolve(e);
            }
          });
          return parsed.e && reject(parsed.v), d.promise;
        },
        race: function (promises) {
          var t = this;
          var d = when(t);
          var reject = d.reject;
          var parsed = parse(function () {
            isArray(promises, false, function (e) {
              t.resolve(e).then(d.resolve, reject);
            });
          });
          return parsed.e && reject(parsed.v), d.promise;
        }
      });
    },
    "./node_modules/core-js/library/modules/es6.set.js": function (blob, id, require) {
      var strong = require("./node_modules/core-js/library/modules/_collection-strong.js");
      var is = require("./node_modules/core-js/library/modules/_validate-collection.js");
      blob.exports = require("./node_modules/core-js/library/modules/_collection.js")("Set", function (saveNotifs) {
        return function () {
          return saveNotifs(this, arguments.length > 0 ? arguments[0] : void 0);
        };
      }, {
        add: function (value) {
          return strong.def(is(this, "Set"), value = 0 === value ? 0 : value, value);
        }
      }, strong);
    },
    "./node_modules/core-js/library/modules/es6.string.iterator.js": function (module, exports, __webpack_require__) {
      var $at = __webpack_require__("./node_modules/core-js/library/modules/_string-at.js")(true);
      __webpack_require__("./node_modules/core-js/library/modules/_iter-define.js")(String, "String", function (template) {
        this._t = String(template);
        this._i = 0;
      }, function () {
        var point;
        var O = this._t;
        var index = this._i;
        return index >= O.length ? {
          value: void 0,
          done: true
        } : (point = $at(O, index), this._i += point.length, {
          value: point,
          done: false
        });
      });
    },
    "./node_modules/core-js/library/modules/es6.symbol.js": function (depsLoaded, module, require) {
      var global = require("./node_modules/core-js/library/modules/_global.js");
      var has = require("./node_modules/core-js/library/modules/_has.js");
      var DESCRIPTORS = require("./node_modules/core-js/library/modules/_descriptors.js");
      var $export = require("./node_modules/core-js/library/modules/_export.js");
      var $redef = require("./node_modules/core-js/library/modules/_redefine.js");
      var META = require("./node_modules/core-js/library/modules/_meta.js").KEY;
      var $fails = require("./node_modules/core-js/library/modules/_fails.js");
      var shared = require("./node_modules/core-js/library/modules/_shared.js");
      var setTag = require("./node_modules/core-js/library/modules/_set-to-string-tag.js");
      var uid = require("./node_modules/core-js/library/modules/_uid.js");
      var wks = require("./node_modules/core-js/library/modules/_wks.js");
      var alias = require("./node_modules/core-js/library/modules/_wks-ext.js");
      var inspect = require("./node_modules/core-js/library/modules/_wks-define.js");
      var eq = require("./node_modules/core-js/library/modules/_enum-keys.js");
      var formatter = require("./node_modules/core-js/library/modules/_is-array.js");
      var checkAndAddDescendantIfModel = require("./node_modules/core-js/library/modules/_an-object.js");
      var isArray = require("./node_modules/core-js/library/modules/_is-object.js");
      var toObject = require("./node_modules/core-js/library/modules/_to-object.js");
      var resolve = require("./node_modules/core-js/library/modules/_to-iobject.js");
      var id = require("./node_modules/core-js/library/modules/_to-primitive.js");
      var createDesc = require("./node_modules/core-js/library/modules/_property-desc.js");
      var _create = require("./node_modules/core-js/library/modules/_object-create.js");
      var module = require("./node_modules/core-js/library/modules/_object-gopn-ext.js");
      var $ = require("./node_modules/core-js/library/modules/_object-gopd.js");
      var ret = require("./node_modules/core-js/library/modules/_object-gops.js");
      var property = require("./node_modules/core-js/library/modules/_object-dp.js");
      var $keys = require("./node_modules/core-js/library/modules/_object-keys.js");
      var contains = $.f;
      var dP = property.f;
      var map = module.f;
      var Symbol = global.Symbol;
      var $JSON = global.JSON;
      var _stringify = $JSON && $JSON.stringify;
      var HIDDEN = wks("_hidden");
      var TO_PRIMITIVE = wks("toPrimitive");
      var isEnum = {}.propertyIsEnumerable;
      var SymbolRegistry = shared("symbol-registry");
      var AllSymbols = shared("symbols");
      var name = shared("op-symbols");
      var undefined = Object.prototype;
      var USE_NATIVE = "function" == typeof Symbol && !!ret.f;
      var node = global.QObject;
      var setter = !node || !node.prototype || !node.prototype.findChild;
      var setSymbolDesc = DESCRIPTORS && $fails(function () {
        return 7 != _create(dP({}, "a", {
          get: function () {
            return dP(this, "a", {
              value: 7
            }).a;
          }
        })).a;
      }) ? function (obj, name, fn) {
        var d = contains(undefined, name);
        if (d) {
          delete undefined[name];
        }
        dP(obj, name, fn);
        if (d && obj !== undefined) {
          dP(undefined, name, d);
        }
      } : dP;
      var wrap = function (tag) {
        var sym = AllSymbols[tag] = _create(Symbol.prototype);
        return sym._k = tag, sym;
      };
      var isSymbol = USE_NATIVE && "symbol" == typeof Symbol.iterator ? function (x) {
        return "symbol" == typeof x;
      } : function (name) {
        return name instanceof Symbol;
      };
      var get = function (value, key, x) {
        return value === undefined && get(name, key, x), checkAndAddDescendantIfModel(value), key = id(key, true), checkAndAddDescendantIfModel(x), has(AllSymbols, key) ? (x.enumerable ? (has(value, HIDDEN) && value[HIDDEN][key] && (value[HIDDEN][key] = false), x = _create(x, {
          enumerable: createDesc(0, false)
        })) : (has(value, HIDDEN) || dP(value, HIDDEN, createDesc(1, {})), value[HIDDEN][key] = true), setSymbolDesc(value, key, x)) : dP(value, key, x);
      };
      var extend = function (value, name) {
        checkAndAddDescendantIfModel(value);
        var e;
        var result = eq(name = resolve(name));
        var top = 0;
        var y = result.length;
        for (; y > top;) {
          get(value, e = result[top++], name[e]);
        }
        return value;
      };
      var propertyIsEnumerable = function (key) {
        var t = isEnum.call(this, key = id(key, true));
        return !(this === undefined && has(AllSymbols, key) && !has(name, key)) && (!(t || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]) || t);
      };
      var getOwnPropertyDescriptor = function (value, key) {
        if (value = resolve(value), key = id(key, true), value !== undefined || !has(AllSymbols, key) || has(name, key)) {
          var y = contains(value, key);
          return !y || !has(AllSymbols, key) || has(value, HIDDEN) && value[HIDDEN][key] || (y.enumerable = true), y;
        }
      };
      var f = function (value) {
        var key;
        var names = map(resolve(value));
        var _results = [];
        var i = 0;
        for (; names.length > i;) {
          if (!(has(AllSymbols, key = names[i++]) || key == HIDDEN || key == META)) {
            _results.push(key);
          }
        }
        return _results;
      };
      var next = function (value) {
        var key;
        var valIsUndefined = value === undefined;
        var names = map(valIsUndefined ? name : resolve(value));
        var result = [];
        var i = 0;
        for (; names.length > i;) {
          if (!(!has(AllSymbols, key = names[i++]) || valIsUndefined && !has(undefined, key))) {
            result.push(AllSymbols[key]);
          }
        }
        return result;
      };
      if (!USE_NATIVE) {
        $redef((Symbol = function () {
          if (this instanceof Symbol) {
            throw TypeError("Symbol is not a constructor!");
          }
          var tag = uid(arguments.length > 0 ? arguments[0] : void 0);
          var set = function (value) {
            if (this === undefined) {
              set.call(name, value);
            }
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) {
              this[HIDDEN][tag] = false;
            }
            setSymbolDesc(this, tag, createDesc(1, value));
          };
          return DESCRIPTORS && setter && setSymbolDesc(undefined, tag, {
            configurable: true,
            set: set
          }), wrap(tag);
        }).prototype, "toString", function () {
          return this._k;
        });
        $.f = getOwnPropertyDescriptor;
        property.f = get;
        require("./node_modules/core-js/library/modules/_object-gopn.js").f = module.f = f;
        require("./node_modules/core-js/library/modules/_object-pie.js").f = propertyIsEnumerable;
        ret.f = next;
        if (DESCRIPTORS && !require("./node_modules/core-js/library/modules/_library.js")) {
          $redef(undefined, "propertyIsEnumerable", propertyIsEnumerable, true);
        }
        alias.f = function (obj) {
          return wrap(wks(obj));
        };
      }
      $export($export.G + $export.W + $export.F * !USE_NATIVE, {
        Symbol: Symbol
      });
      var symbols = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(",");
      var i = 0;
      for (; symbols.length > i;) {
        wks(symbols[i++]);
      }
      var keys = $keys(wks.store);
      var LIMIT = 0;
      for (; keys.length > LIMIT;) {
        inspect(keys[LIMIT++]);
      }
      $export($export.S + $export.F * !USE_NATIVE, "Symbol", {
        for: function (key) {
          return has(SymbolRegistry, key = key + "") ? SymbolRegistry[key] : SymbolRegistry[key] = Symbol(key);
        },
        keyFor: function (key) {
          if (!isSymbol(key)) {
            throw TypeError(key + " is not a symbol!");
          }
          var attrText;
          for (attrText in SymbolRegistry) {
            if (SymbolRegistry[attrText] === key) {
              return attrText;
            }
          }
        },
        useSetter: function () {
          setter = true;
        },
        useSimple: function () {
          setter = false;
        }
      });
      $export($export.S + $export.F * !USE_NATIVE, "Object", {
        create: function (obj, name) {
          return void 0 === name ? _create(obj) : extend(_create(obj), name);
        },
        defineProperty: get,
        defineProperties: extend,
        getOwnPropertyDescriptor: getOwnPropertyDescriptor,
        getOwnPropertyNames: f,
        getOwnPropertySymbols: next
      });
      var forced = $fails(function () {
        ret.f(1);
      });
      $export($export.S + $export.F * forced, "Object", {
        getOwnPropertySymbols: function (obj) {
          return ret.f(toObject(obj));
        }
      });
      if ($JSON) {
        $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
          var S = Symbol();
          return "[null]" != _stringify([S]) || "{}" != _stringify({
            a: S
          }) || "{}" != _stringify(Object(S));
        })), "JSON", {
          stringify: function (it) {
            var e;
            var s;
            var args = [it];
            var i = 1;
            for (; arguments.length > i;) {
              args.push(arguments[i++]);
            }
            if (s = e = args[1], (isArray(e) || void 0 !== it) && !isSymbol(it)) {
              return formatter(e) || (e = function (value, key) {
                if ("function" == typeof s && (key = s.call(this, value, key)), !isSymbol(key)) {
                  return key;
                }
              }), args[1] = e, _stringify.apply($JSON, args);
            }
          }
        });
      }
      if (!Symbol.prototype[TO_PRIMITIVE]) {
        require("./node_modules/core-js/library/modules/_hide.js")(Symbol.prototype, TO_PRIMITIVE, Symbol.prototype.valueOf);
      }
      setTag(Symbol, "Symbol");
      setTag(Math, "Math", true);
      setTag(global.JSON, "JSON", true);
    },
    "./node_modules/core-js/library/modules/es7.map.from.js": function (onerror, define, require) {
      require("./node_modules/core-js/library/modules/_set-collection-from.js")("Map");
    },
    "./node_modules/core-js/library/modules/es7.map.of.js": function (onerror, define, require) {
      require("./node_modules/core-js/library/modules/_set-collection-of.js")("Map");
    },
    "./node_modules/core-js/library/modules/es7.map.to-json.js": function (onerror, define, require) {
      var $def = require("./node_modules/core-js/library/modules/_export.js");
      $def($def.P + $def.R, "Map", {
        toJSON: require("./node_modules/core-js/library/modules/_collection-to-json.js")("Map")
      });
    },
    "./node_modules/core-js/library/modules/es7.promise.finally.js": function (refSibling, siblings, $) {
      var me = $("./node_modules/core-js/library/modules/_export.js");
      var opts = $("./node_modules/core-js/library/modules/_core.js");
      var root = $("./node_modules/core-js/library/modules/_global.js");
      var success = $("./node_modules/core-js/library/modules/_species-constructor.js");
      var expect = $("./node_modules/core-js/library/modules/_promise-resolve.js");
      me(me.P + me.R, "Promise", {
        finally: function (callback) {
          var ret = success(this, opts.Promise || root.Promise);
          var name = "function" == typeof callback;
          return this.then(name ? function (canCreateDiscussions) {
            return expect(ret, callback()).then(function () {
              return canCreateDiscussions;
            });
          } : callback, name ? function (canCreateDiscussions) {
            return expect(ret, callback()).then(function () {
              throw canCreateDiscussions;
            });
          } : callback);
        }
      });
    },
    "./node_modules/core-js/library/modules/es7.promise.try.js": function (module, exports, __webpack_require__) {
      var $export = __webpack_require__("./node_modules/core-js/library/modules/_export.js");
      var dP = __webpack_require__("./node_modules/core-js/library/modules/_new-promise-capability.js");
      var define = __webpack_require__("./node_modules/core-js/library/modules/_perform.js");
      $export($export.S, "Promise", {
        try: function (name) {
          var m = dP.f(this);
          var o = define(name);
          return (o.e ? m.reject : m.resolve)(o.v), m.promise;
        }
      });
    },
    "./node_modules/core-js/library/modules/es7.set.from.js": function (onerror, define, require) {
      require("./node_modules/core-js/library/modules/_set-collection-from.js")("Set");
    },
    "./node_modules/core-js/library/modules/es7.set.of.js": function (onerror, define, require) {
      require("./node_modules/core-js/library/modules/_set-collection-of.js")("Set");
    },
    "./node_modules/core-js/library/modules/es7.set.to-json.js": function (onerror, define, require) {
      var $def = require("./node_modules/core-js/library/modules/_export.js");
      $def($def.P + $def.R, "Set", {
        toJSON: require("./node_modules/core-js/library/modules/_collection-to-json.js")("Set")
      });
    },
    "./node_modules/core-js/library/modules/es7.symbol.async-iterator.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/_wks-define.js")("asyncIterator");
    },
    "./node_modules/core-js/library/modules/es7.symbol.observable.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/_wks-define.js")("observable");
    },
    "./node_modules/core-js/library/modules/web.dom.iterable.js": function (module, exports, __webpack_require__) {
      __webpack_require__("./node_modules/core-js/library/modules/es6.array.iterator.js");
      var global = __webpack_require__("./node_modules/core-js/library/modules/_global.js");
      var hide = __webpack_require__("./node_modules/core-js/library/modules/_hide.js");
      var Iterators = __webpack_require__("./node_modules/core-js/library/modules/_iterators.js");
      var TO_STRING_TAG = __webpack_require__("./node_modules/core-js/library/modules/_wks.js")("toStringTag");
      var collections = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(",");
      var i = 0;
      for (; i < collections.length; i++) {
        var NAME = collections[i];
        var Collection = global[NAME];
        var proto = Collection && Collection.prototype;
        if (proto && !proto[TO_STRING_TAG]) {
          hide(proto, TO_STRING_TAG, NAME);
        }
        Iterators[NAME] = Iterators.Array;
      }
    },
    "./node_modules/core-util-is/lib/util.js": function (module, exports, __webpack_require__) {
      (function (Buffer) {
        function objectToString(obj) {
          return Object.prototype.toString.call(obj);
        }
        exports.isArray = function (value) {
          return Array.isArray ? Array.isArray(value) : "[object Array]" === objectToString(value);
        };
        exports.isBoolean = function (val) {
          return "boolean" == typeof val;
        };
        exports.isNull = function (obj) {
          return null === obj;
        };
        exports.isNullOrUndefined = function (val) {
          return null == val;
        };
        exports.isNumber = function (value) {
          return "number" == typeof value;
        };
        exports.isString = function (val) {
          return "string" == typeof val;
        };
        exports.isSymbol = function (x) {
          return "symbol" == typeof x;
        };
        exports.isUndefined = function (value) {
          return void 0 === value;
        };
        exports.isRegExp = function (re) {
          return "[object RegExp]" === objectToString(re);
        };
        exports.isObject = function (arg) {
          return "object" == typeof arg && null !== arg;
        };
        exports.isDate = function (d) {
          return "[object Date]" === objectToString(d);
        };
        exports.isError = function (e) {
          return "[object Error]" === objectToString(e) || e instanceof Error;
        };
        exports.isFunction = function (value) {
          return "function" == typeof value;
        };
        exports.isPrimitive = function (val) {
          return null === val || "boolean" == typeof val || "number" == typeof val || "string" == typeof val || "symbol" == typeof val || void 0 === val;
        };
        exports.isBuffer = Buffer.isBuffer;
      }).call(this, __webpack_require__("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer);
    },
    "./node_modules/crypto-js/aes.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/enc-base64.js"), require("./node_modules/crypto-js/md5.js"), require("./node_modules/crypto-js/evpkdf.js"), require("./node_modules/crypto-js/cipher-core.js"), function () {
        var C = CryptoJS;
        var BlockCipher = C.lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        !function () {
          var d = [];
          var search_lemma = 0;
          for (; search_lemma < 256; search_lemma++) {
            d[search_lemma] = search_lemma < 128 ? search_lemma << 1 : search_lemma << 1 ^ 283;
          }
          var x = 0;
          var xi = 0;
          search_lemma = 0;
          for (; search_lemma < 256; search_lemma++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ 255 & sx ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = 257 * d[sx] ^ 16843008 * sx;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            t = 16843009 * x8 ^ 65537 * x4 ^ 257 * x2 ^ 16843008 * x;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (x) {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi = xi ^ d[d[xi]];
            } else {
              x = xi = 1;
            }
          }
        }();
        var h = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES = C_algo.AES = BlockCipher.extend({
          _doReset: function () {
            if (!this._nRounds || this._keyPriorReset !== this._key) {
              var b = this._keyPriorReset = this._key;
              var c = b.words;
              var i = b.sigBytes / 4;
              var v = 4 * ((this._nRounds = i + 6) + 1);
              var a = this._keySchedule = [];
              var k = 0;
              for (; k < v; k++) {
                if (k < i) {
                  a[k] = c[k];
                } else {
                  var t = a[k - 1];
                  if (k % i) {
                    if (i > 6 && k % i == 4) {
                      t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[255 & t];
                    }
                  } else {
                    t = SBOX[(t = t << 8 | t >>> 24) >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[255 & t];
                    t = t ^ h[k / i | 0] << 24;
                  }
                  a[k] = a[k - i] ^ t;
                }
              }
              var properties = this._invKeySchedule = [];
              var l = 0;
              for (; l < v; l++) {
                k = v - l;
                t = l % 4 ? a[k] : a[k - 4];
                properties[l] = l < 4 || k <= 4 ? t : INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[255 & t]];
              }
            }
          },
          encryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function (M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
            var nRounds = this._nRounds;
            var s1 = M[offset] ^ keySchedule[0];
            var s2 = M[offset + 1] ^ keySchedule[1];
            var s3 = M[offset + 2] ^ keySchedule[2];
            var s0 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            var round = 1;
            for (; round < nRounds; round++) {
              var t = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 255] ^ SUB_MIX_2[s3 >>> 8 & 255] ^ SUB_MIX_3[255 & s0] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 255] ^ SUB_MIX_2[s0 >>> 8 & 255] ^ SUB_MIX_3[255 & s1] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 255] ^ SUB_MIX_2[s1 >>> 8 & 255] ^ SUB_MIX_3[255 & s2] ^ keySchedule[ksRow++];
              var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 255] ^ SUB_MIX_2[s2 >>> 8 & 255] ^ SUB_MIX_3[255 & s3] ^ keySchedule[ksRow++];
              s1 = t;
              s2 = t2;
              s3 = t3;
              s0 = t0;
            }
            t = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[255 & s0]) ^ keySchedule[ksRow++];
            t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[255 & s1]) ^ keySchedule[ksRow++];
            t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[255 & s2]) ^ keySchedule[ksRow++];
            t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[255 & s3]) ^ keySchedule[ksRow++];
            M[offset] = t;
            M[offset + 1] = t2;
            M[offset + 2] = t3;
            M[offset + 3] = t0;
          },
          keySize: 8
        });
        C.AES = BlockCipher._createHelper(AES);
      }(), CryptoJS.AES);
    },
    "./node_modules/crypto-js/cipher-core.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/evpkdf.js"), void (CryptoJS.lib.Cipher || function (undefined) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var j = (C_enc.Utf8, C_enc.Base64);
        var EvpKDF = C.algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function (type, key) {
            return this.create(this._ENC_XFORM_MODE, type, key);
          },
          createDecryptor: function (type, key) {
            return this.create(this._DEC_XFORM_MODE, type, key);
          },
          init: function (xformMode, key, a) {
            this.cfg = this.cfg.extend(a);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          reset: function () {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function (value) {
            return this._append(value), this._process();
          },
          finalize: function (a) {
            return a && this._append(a), this._doFinalize();
          },
          keySize: 4,
          ivSize: 4,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function () {
            function selectCipherStrategy(key) {
              return "string" == typeof key ? index : SerializableCipher;
            }
            return function (message) {
              return {
                encrypt: function (msg, key, cfg) {
                  return selectCipherStrategy(key).encrypt(message, msg, key, cfg);
                },
                decrypt: function (msg, key, cfg) {
                  return selectCipherStrategy(key).decrypt(message, msg, key, cfg);
                }
              };
            };
          }()
        });
        var C_mode = (C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function () {
            return this._process(true);
          },
          blockSize: 1
        }), C.mode = {});
        var BufferedNode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function (c, key) {
            return this.Encryptor.create(c, key);
          },
          createDecryptor: function (c, key) {
            return this.Decryptor.create(c, key);
          },
          init: function (data, iv) {
            this._cipher = data;
            this._iv = iv;
          }
        });
        var MODE_DRAWING_LINE = C_mode.CBC = function () {
          function generateKeystreamAndEncrypt(words, offset, blockSize) {
            var iv = this._iv;
            if (iv) {
              var block = iv;
              this._iv = undefined;
            } else {
              block = this._prevBlock;
            }
            var i = 0;
            for (; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }
          var CTRGladman = BufferedNode.extend();
          return CTRGladman.Encryptor = CTRGladman.extend({
            processBlock: function (words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              generateKeystreamAndEncrypt.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset);
              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          }), CTRGladman.Decryptor = CTRGladman.extend({
            processBlock: function (words, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words.slice(offset, offset + blockSize);
              cipher.decryptBlock(words, offset);
              generateKeystreamAndEncrypt.call(this, words, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          }), CTRGladman;
        }();
        var padding = (C.pad = {}).Pkcs7 = {
          pad: function (data, _) {
            var blockSizeBytes = 4 * _;
            var a = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var type = a << 24 | a << 16 | a << 8 | a;
            var key = [];
            var d = 0;
            for (; d < a; d = d + 4) {
              key.push(type);
            }
            var num = WordArray.create(key, a);
            data.concat(num);
          },
          unpad: function (data) {
            var nBytesReady = 255 & data.words[data.sigBytes - 1 >>> 2];
            data.sigBytes -= nBytesReady;
          }
        };
        var CipherParams = (C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: MODE_DRAWING_LINE,
            padding: padding
          }),
          reset: function () {
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              var modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function (words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function () {
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              var finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 4
        }), C_lib.CipherParams = Base.extend({
          init: function (e) {
            this.mixIn(e);
          },
          toString: function (format) {
            return (format || this.formatter).stringify(this);
          }
        }));
        var sourceFormat = (C.format = {}).OpenSSL = {
          stringify: function (options) {
            var ciphertext = options.ciphertext;
            var salt = options.salt;
            if (salt) {
              var wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(j);
          },
          parse: function (value) {
            var f = j.parse(value);
            var k = f.words;
            if (1398893684 == k[0] && 1701076831 == k[1]) {
              var generatedSalt = WordArray.create(k.slice(2, 4));
              k.splice(0, 4);
              f.sigBytes -= 16;
            }
            return CipherParams.create({
              ciphertext: f,
              salt: generatedSalt
            });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: sourceFormat
          }),
          encrypt: function (cipher, message, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext: ciphertext,
              key: key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function (cipher, ciphertext, key, cfg) {
            return cfg = this.cfg.extend(cfg), ciphertext = this._parse(ciphertext, cfg.format), cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
          },
          _parse: function (a, f) {
            return "string" == typeof a ? f.parse(a, this) : a;
          }
        });
        var OpenSSLKdf = (C.kdf = {}).OpenSSL = {
          execute: function (password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(8);
            }
            var hash = EvpKDF.create({
              keySize: keySize + ivSize
            }).compute(password, salt);
            var iv = WordArray.create(hash.words.slice(keySize), 4 * ivSize);
            return hash.sigBytes = 4 * keySize, CipherParams.create({
              key: hash,
              iv: iv,
              salt: salt
            });
          }
        };
        var index = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function (options, message, type, s) {
            var data = (s = this.cfg.extend(s)).kdf.execute(type, options.keySize, options.ivSize);
            s.iv = data.iv;
            var c = SerializableCipher.encrypt.call(this, options, message, data.key, s);
            return c.mixIn(data), c;
          },
          decrypt: function (cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var res = cfg.kdf.execute(key, cipher.keySize, cipher.ivSize, ciphertext.salt);
            return cfg.iv = res.iv, SerializableCipher.decrypt.call(this, cipher, ciphertext, res.key, cfg);
          }
        });
      }()));
    },
    "./node_modules/crypto-js/core.js": function (module, data, urlPartConfig) {
      var _module$exports;
      module.exports = (_module$exports = _module$exports || function (Math, canCreateDiscussions) {
        var wrapOverride = Object.create || function () {
          function shader() {
          }
          return function (material) {
            var shobj;
            return shader.prototype = material, shobj = new shader, shader.prototype = null, shobj;
          };
        }();
        var p = {};
        var j = p.lib = {};
        var f = j.Base = {
          extend: function (value) {
            var c = wrapOverride(this);
            return value && c.mixIn(value), c.hasOwnProperty("init") && this.init !== c.init || (c.init = function () {
              c.$super.init.apply(this, arguments);
            }), c.init.prototype = c, c.$super = this, c;
          },
          create: function () {
            var obj = this.extend();
            return obj.init.apply(obj, arguments), obj;
          },
          init: function () {
          },
          mixIn: function (a) {
            var prop;
            for (prop in a) {
              if (a.hasOwnProperty(prop)) {
                this[prop] = a[prop];
              }
            }
            if (a.hasOwnProperty("toString")) {
              this.toString = a.toString;
            }
          },
          clone: function () {
            return this.init.prototype.extend(this);
          }
        };
        var WordArray = j.WordArray = f.extend({
          init: function (a, e) {
            a = this.words = a || [];
            this.sigBytes = null != e ? e : 4 * a.length;
          },
          toString: function (format) {
            return (format || dmY).stringify(this);
          },
          concat: function (b) {
            var thisWords = this.words;
            var thatWords = b.words;
            var c = this.sigBytes;
            var thatSigBytes = b.sigBytes;
            if (this.clamp(), c % 4) {
              var i = 0;
              for (; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[c + i >>> 2] |= thatByte << 24 - (c + i) % 4 * 8;
              }
            } else {
              i = 0;
              for (; i < thatSigBytes; i = i + 4) {
                thisWords[c + i >>> 2] = thatWords[i >>> 2];
              }
            }
            return this.sigBytes += thatSigBytes, this;
          },
          clamp: function () {
            var a = this.words;
            var c = this.sigBytes;
            a[c >>> 2] &= 4294967295 << 32 - c % 4 * 8;
            a.length = Math.ceil(c / 4);
          },
          clone: function () {
            var transformedMasterKey = f.clone.call(this);
            return transformedMasterKey.words = this.words.slice(0), transformedMasterKey;
          },
          random: function (nBytes) {
            var makeLaggy;
            var hashWords = [];
            var r = function (m_w) {
              m_w = m_w;
              var nxt = 987654321;
              var mask = 4294967295;
              return function () {
                var result = ((nxt = 36969 * (65535 & nxt) + (nxt >> 16) & mask) << 16) + (m_w = 18E3 * (65535 & m_w) + (m_w >> 16) & mask) & mask;
                return result = result / 4294967296, (result = result + .5) * (Math.random() > .5 ? 1 : -1);
              };
            };
            var i = 0;
            for (; i < nBytes; i = i + 4) {
              var _r = r(4294967296 * (makeLaggy || Math.random()));
              makeLaggy = 987654071 * _r();
              hashWords.push(4294967296 * _r() | 0);
            }
            return new WordArray.init(hashWords, nBytes);
          }
        });
        var b = p.enc = {};
        var dmY = b.Hex = {
          stringify: function (a) {
            var q = a.words;
            var d = a.sigBytes;
            var outChance = [];
            var b = 0;
            for (; b < d; b++) {
              var a = q[b >>> 2] >>> 24 - b % 4 * 8 & 255;
              outChance.push((a >>> 4).toString(16));
              outChance.push((15 & a).toString(16));
            }
            return outChance.join("");
          },
          parse: function (value) {
            var hexStrLength = value.length;
            var words = [];
            var i = 0;
            for (; i < hexStrLength; i = i + 2) {
              words[i >>> 3] |= parseInt(value.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        var g = b.Latin1 = {
          stringify: function (a) {
            var q = a.words;
            var d = a.sigBytes;
            var UNICODE_SPACES = [];
            var b = 0;
            for (; b < d; b++) {
              var i = q[b >>> 2] >>> 24 - b % 4 * 8 & 255;
              UNICODE_SPACES.push(String.fromCharCode(i));
            }
            return UNICODE_SPACES.join("");
          },
          parse: function (value) {
            var latin1StrLength = value.length;
            var words = [];
            var i = 0;
            for (; i < latin1StrLength; i++) {
              words[i >>> 2] |= (255 & value.charCodeAt(i)) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words, latin1StrLength);
          }
        };
        var h = b.Utf8 = {
          stringify: function (a) {
            try {
              return decodeURIComponent(escape(g.stringify(a)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function (value) {
            return g.parse(unescape(encodeURIComponent(value)));
          }
        };
        var k = j.BufferedBlockAlgorithm = f.extend({
          reset: function () {
            this._data = new WordArray.init;
            this._nDataBytes = 0;
          },
          _append: function (a) {
            if ("string" == typeof a) {
              a = h.parse(a);
            }
            this._data.concat(a);
            this._nDataBytes += a.sigBytes;
          },
          _process: function (doFlush) {
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var nBlocksReady = dataSigBytes / (4 * blockSize);
            var nWordsReady = (nBlocksReady = doFlush ? Math.ceil(nBlocksReady) : Math.max((0 | nBlocksReady) - this._minBufferSize, 0)) * blockSize;
            var nBytesReady = Math.min(4 * nWordsReady, dataSigBytes);
            if (nWordsReady) {
              var offset = 0;
              for (; offset < nWordsReady; offset = offset + blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              var processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function () {
            var funcThread = f.clone.call(this);
            return funcThread._data = this._data.clone(), funcThread;
          },
          _minBufferSize: 0
        });
        var s = (j.Hasher = k.extend({
          cfg: f.extend(),
          init: function (a) {
            this.cfg = this.cfg.extend(a);
            this.reset();
          },
          reset: function () {
            k.reset.call(this);
            this._doReset();
          },
          update: function (type) {
            return this._append(type), this._process(), this;
          },
          finalize: function (a) {
            return a && this._append(a), this._doFinalize();
          },
          blockSize: 16,
          _createHelper: function (hasher) {
            return function (b, cfg) {
              return (new hasher.init(cfg)).finalize(b);
            };
          },
          _createHmacHelper: function (hasher) {
            return function (b, f) {
              return (new s.HMAC.init(hasher, f)).finalize(b);
            };
          }
        }), p.algo = {});
        return p;
      }(Math), _module$exports);
    },
    "./node_modules/crypto-js/enc-base64.js": function (blob, id, require) {
      var C;
      var o;
      var a;
      blob.exports = (a = require("./node_modules/crypto-js/core.js"), o = (C = a).lib.WordArray, C.enc.Base64 = {
        stringify: function (data) {
          var dataWords = data.words;
          var sigBytes = data.sigBytes;
          var map = this._map;
          data.clamp();
          var help = [];
          var i = 0;
          for (; i < sigBytes; i = i + 3) {
            var s = (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (dataWords[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | dataWords[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
            var j = 0;
            for (; j < 4 && i + .75 * j < sigBytes; j++) {
              help.push(map.charAt(s >>> 6 * (3 - j) & 63));
            }
          }
          var item = map.charAt(64);
          if (item) {
            for (; help.length % 4;) {
              help.push(item);
            }
          }
          return help.join("");
        },
        parse: function (x) {
          var t = x.length;
          var m = this._map;
          var reverseMap = this._reverseMap;
          if (!reverseMap) {
            reverseMap = this._reverseMap = [];
            var j = 0;
            for (; j < m.length; j++) {
              reverseMap[m.charCodeAt(j)] = j;
            }
          }
          var s = m.charAt(64);
          if (s) {
            var a = x.indexOf(s);
            if (-1 !== a) {
              t = a;
            }
          }
          return function (n, targets, reverseMap) {
            var e = [];
            var h = 0;
            var i = 0;
            for (; i < targets; i++) {
              if (i % 4) {
                var a = reverseMap[n.charCodeAt(i - 1)] << i % 4 * 2;
                var b = reverseMap[n.charCodeAt(i)] >>> 6 - i % 4 * 2;
                e[h >>> 2] |= (a | b) << 24 - h % 4 * 8;
                h++;
              }
            }
            return o.create(e, h);
          }(x, t, reverseMap);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      }, a.enc.Base64);
    },
    "./node_modules/crypto-js/enc-utf16.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), function () {
        function o(object) {
          return object << 8 & 4278255360 | object >>> 8 & 16711935;
        }
        var C = CryptoJS;
        var r = C.lib.WordArray;
        var C_enc = C.enc;
        C_enc.Utf16 = C_enc.Utf16BE = {
          stringify: function (a) {
            var q = a.words;
            var d = a.sigBytes;
            var UNICODE_SPACES = [];
            var b = 0;
            for (; b < d; b = b + 2) {
              var i = q[b >>> 2] >>> 16 - b % 4 * 8 & 65535;
              UNICODE_SPACES.push(String.fromCharCode(i));
            }
            return UNICODE_SPACES.join("");
          },
          parse: function (value) {
            var i = value.length;
            var a = [];
            var b = 0;
            for (; b < i; b++) {
              a[b >>> 1] |= value.charCodeAt(b) << 16 - b % 2 * 16;
            }
            return r.create(a, 2 * i);
          }
        };
        C_enc.Utf16LE = {
          stringify: function (b) {
            var e = b.words;
            var f = b.sigBytes;
            var UNICODE_SPACES = [];
            var h = 0;
            for (; h < f; h = h + 2) {
              var i = o(e[h >>> 2] >>> 16 - h % 4 * 8 & 65535);
              UNICODE_SPACES.push(String.fromCharCode(i));
            }
            return UNICODE_SPACES.join("");
          },
          parse: function (value) {
            var i = value.length;
            var a = [];
            var b = 0;
            for (; b < i; b++) {
              a[b >>> 1] |= o(value.charCodeAt(b) << 16 - b % 2 * 16);
            }
            return r.create(a, 2 * i);
          }
        };
      }(), CryptoJS.enc.Utf16);
    },
    "./node_modules/crypto-js/evpkdf.js": function (blob, text, next) {
      var e;
      var _ref;
      var Base;
      var WordArray;
      var C_algo;
      var SHA1;
      var MyNgOfflineModel;
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/sha1.js"), next("./node_modules/crypto-js/hmac.js"), _ref = (e = tmp).lib, Base = _ref.Base, WordArray = _ref.WordArray, C_algo = e.algo, SHA1 = C_algo.MD5, MyNgOfflineModel = C_algo.EvpKDF = Base.extend({
        cfg: Base.extend({
          keySize: 4,
          hasher: SHA1,
          iterations: 1
        }),
        init: function (a) {
          this.cfg = this.cfg.extend(a);
        },
        compute: function (data, key) {
          var cfg = this.cfg;
          var hasher = cfg.hasher.create();
          var derivedKey = WordArray.create();
          var derivedKeyWords = derivedKey.words;
          var keySize = cfg.keySize;
          var iterations = cfg.iterations;
          for (; derivedKeyWords.length < keySize;) {
            if (block) {
              hasher.update(block);
            }
            var block = hasher.update(data).finalize(key);
            hasher.reset();
            var iteration = 1;
            for (; iteration < iterations; iteration++) {
              block = hasher.finalize(block);
              hasher.reset();
            }
            derivedKey.concat(block);
          }
          return derivedKey.sigBytes = 4 * keySize, derivedKey;
        }
      }), e.EvpKDF = function (password, salt, key) {
        return MyNgOfflineModel.create(key).compute(password, salt);
      }, tmp.EvpKDF);
    },
    "./node_modules/crypto-js/format-hex.js": function (blob, text, next) {
      var C;
      var CipherParams;
      var property;
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/cipher-core.js"), CipherParams = (C = tmp).lib.CipherParams, property = C.enc.Hex, C.format.Hex = {
        stringify: function (obj) {
          return obj.ciphertext.toString(property);
        },
        parse: function (key) {
          var enc = property.parse(key);
          return CipherParams.create({
            ciphertext: enc
          });
        }
      }, tmp.format.Hex);
    },
    "./node_modules/crypto-js/hmac.js": function (blob, id, require) {
      var S;
      var C;
      var Base;
      var s;
      blob.exports = (S = require("./node_modules/crypto-js/core.js"), Base = (C = S).lib.Base, s = C.enc.Utf8, void (C.algo.HMAC = Base.extend({
        init: function (e, key) {
          e = this._hasher = new e.init;
          if ("string" == typeof key) {
            key = s.parse(key);
          }
          var i = e.blockSize;
          var hasherBlockSizeBytes = 4 * i;
          if (key.sigBytes > hasherBlockSizeBytes) {
            key = e.finalize(key);
          }
          key.clamp();
          var oKey = this._oKey = key.clone();
          var iKey = this._iKey = key.clone();
          var oKeyWords = oKey.words;
          var iKeyWords = iKey.words;
          var thatpos = 0;
          for (; thatpos < i; thatpos++) {
            oKeyWords[thatpos] ^= 1549556828;
            iKeyWords[thatpos] ^= 909522486;
          }
          oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
          this.reset();
        },
        reset: function () {
          var hasher = this._hasher;
          hasher.reset();
          hasher.update(this._iKey);
        },
        update: function (data) {
          return this._hasher.update(data), this;
        },
        finalize: function (key) {
          var b = this._hasher;
          var f = b.finalize(key);
          return b.reset(), b.finalize(this._oKey.clone().concat(f));
        }
      })));
    },
    "./node_modules/crypto-js/index.js": function (module, metadata, packageSuccess) {
      var _module$exports;
      module.exports = (_module$exports = packageSuccess("./node_modules/crypto-js/core.js"), packageSuccess("./node_modules/crypto-js/x64-core.js"), packageSuccess("./node_modules/crypto-js/lib-typedarrays.js"), packageSuccess("./node_modules/crypto-js/enc-utf16.js"), packageSuccess("./node_modules/crypto-js/enc-base64.js"), packageSuccess("./node_modules/crypto-js/md5.js"), packageSuccess("./node_modules/crypto-js/sha1.js"), packageSuccess("./node_modules/crypto-js/sha256.js"), packageSuccess("./node_modules/crypto-js/sha224.js"),
        packageSuccess("./node_modules/crypto-js/sha512.js"), packageSuccess("./node_modules/crypto-js/sha384.js"), packageSuccess("./node_modules/crypto-js/sha3.js"), packageSuccess("./node_modules/crypto-js/ripemd160.js"), packageSuccess("./node_modules/crypto-js/hmac.js"), packageSuccess("./node_modules/crypto-js/pbkdf2.js"), packageSuccess("./node_modules/crypto-js/evpkdf.js"), packageSuccess("./node_modules/crypto-js/cipher-core.js"), packageSuccess("./node_modules/crypto-js/mode-cfb.js"), packageSuccess("./node_modules/crypto-js/mode-ctr.js"),
        packageSuccess("./node_modules/crypto-js/mode-ctr-gladman.js"), packageSuccess("./node_modules/crypto-js/mode-ofb.js"), packageSuccess("./node_modules/crypto-js/mode-ecb.js"), packageSuccess("./node_modules/crypto-js/pad-ansix923.js"), packageSuccess("./node_modules/crypto-js/pad-iso10126.js"), packageSuccess("./node_modules/crypto-js/pad-iso97971.js"), packageSuccess("./node_modules/crypto-js/pad-zeropadding.js"), packageSuccess("./node_modules/crypto-js/pad-nopadding.js"), packageSuccess("./node_modules/crypto-js/format-hex.js"),
        packageSuccess("./node_modules/crypto-js/aes.js"), packageSuccess("./node_modules/crypto-js/tripledes.js"), packageSuccess("./node_modules/crypto-js/rc4.js"), packageSuccess("./node_modules/crypto-js/rabbit.js"), packageSuccess("./node_modules/crypto-js/rabbit-legacy.js"), _module$exports);
    },
    "./node_modules/crypto-js/lib-typedarrays.js": function (blob, options, wrapper) {
      var C;
      blob.exports = (C = wrapper("./node_modules/crypto-js/core.js"), function () {
        if ("function" == typeof ArrayBuffer) {
          var WordArray = C.lib.WordArray;
          var superInit = WordArray.init;
          (WordArray.init = function (typedArray) {
            if (typedArray instanceof ArrayBuffer && (typedArray = new Uint8Array(typedArray)), (typedArray instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) && (typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset,
              typedArray.byteLength)), typedArray instanceof Uint8Array) {
              var typedArrayByteLength = typedArray.byteLength;
              var words = [];
              var i = 0;
              for (; i < typedArrayByteLength; i++) {
                words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
              }
              superInit.call(this, words, typedArrayByteLength);
            } else {
              superInit.apply(this, arguments);
            }
          }).prototype = WordArray;
        }
      }(), C.lib.WordArray);
    },
    "./node_modules/crypto-js/md5.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), function (Math) {
        function callback(d, e, a, b, data, s, i) {
          var n = d + (e & a | ~e & b) + data + i;
          return (n << s | n >>> 32 - s) + e;
        }
        function format(str, n, t, a, id, count, value) {
          var dest_operand = str + (n & a | t & ~a) + id + value;
          return (dest_operand << count | dest_operand >>> 32 - count) + n;
        }
        function debug(a, b, e, d, id, s, i) {
          var n = a + (b ^ e ^ d) + id + i;
          return (n << s | n >>> 32 - s) + b;
        }
        function fn(s, n, t, name, a, l, id) {
          var h = s + (t ^ (n | ~name)) + a + id;
          return (h << l | h >>> 32 - l) + n;
        }
        var C = CryptoJS;
        var m = C.lib;
        var p = m.WordArray;
        var j = m.Hasher;
        var C_algo = C.algo;
        var a = [];
        !function () {
          var i = 0;
          for (; i < 64; i++) {
            a[i] = 4294967296 * Math.abs(Math.sin(i + 1)) | 0;
          }
        }();
        var MD5 = C_algo.MD5 = j.extend({
          _doReset: function () {
            this._hash = new p.init([1732584193, 4023233417, 2562383102, 271733878]);
          },
          _doProcessBlock: function (args, n) {
            var offset = 0;
            for (; offset < 16; offset++) {
              var i = n + offset;
              var sqlParam = args[i];
              args[i] = 16711935 & (sqlParam << 8 | sqlParam >>> 24) | 4278255360 & (sqlParam << 24 | sqlParam >>> 8);
            }
            var b = this._hash.words;
            var k = args[n + 0];
            var context = args[n + 1];
            var status = args[n + 2];
            var cb = args[n + 3];
            var url = args[n + 4];
            var state = args[n + 5];
            var t = args[n + 6];
            var user = args[n + 7];
            var x = args[n + 8];
            var key = args[n + 9];
            var e = args[n + 10];
            var el = args[n + 11];
            var payload = args[n + 12];
            var title = args[n + 13];
            var data = args[n + 14];
            var y = args[n + 15];
            var value = b[0];
            var res = b[1];
            var result = b[2];
            var i = b[3];
            value = callback(value, res, result, i, k, 7, a[0]);
            i = callback(i, value, res, result, context, 12, a[1]);
            result = callback(result, i, value, res, status, 17, a[2]);
            res = callback(res, result, i, value, cb, 22, a[3]);
            value = callback(value, res, result, i, url, 7, a[4]);
            i = callback(i, value, res, result, state, 12, a[5]);
            result = callback(result, i, value, res, t, 17, a[6]);
            res = callback(res, result, i, value, user, 22, a[7]);
            value = callback(value, res, result, i, x, 7, a[8]);
            i = callback(i, value, res, result, key, 12, a[9]);
            result = callback(result, i, value, res, e, 17, a[10]);
            res = callback(res, result, i, value, el, 22, a[11]);
            value = callback(value, res, result, i, payload, 7, a[12]);
            i = callback(i, value, res, result, title, 12, a[13]);
            result = callback(result, i, value, res, data, 17, a[14]);
            value = format(value, res = callback(res, result, i, value, y, 22, a[15]), result, i, context, 5, a[16]);
            i = format(i, value, res, result, t, 9, a[17]);
            result = format(result, i, value, res, el, 14, a[18]);
            res = format(res, result, i, value, k, 20, a[19]);
            value = format(value, res, result, i, state, 5, a[20]);
            i = format(i, value, res, result, e, 9, a[21]);
            result = format(result, i, value, res, y, 14, a[22]);
            res = format(res, result, i, value, url, 20, a[23]);
            value = format(value, res, result, i, key, 5, a[24]);
            i = format(i, value, res, result, data, 9, a[25]);
            result = format(result, i, value, res, cb, 14, a[26]);
            res = format(res, result, i, value, x, 20, a[27]);
            value = format(value, res, result, i, title, 5, a[28]);
            i = format(i, value, res, result, status, 9, a[29]);
            result = format(result, i, value, res, user, 14, a[30]);
            value = debug(value, res = format(res, result, i, value, payload, 20, a[31]), result, i, state, 4, a[32]);
            i = debug(i, value, res, result, x, 11, a[33]);
            result = debug(result, i, value, res, el, 16, a[34]);
            res = debug(res, result, i, value, data, 23, a[35]);
            value = debug(value, res, result, i, context, 4, a[36]);
            i = debug(i, value, res, result, url, 11, a[37]);
            result = debug(result, i, value, res, user, 16, a[38]);
            res = debug(res, result, i, value, e, 23, a[39]);
            value = debug(value, res, result, i, title, 4, a[40]);
            i = debug(i, value, res, result, k, 11, a[41]);
            result = debug(result, i, value, res, cb, 16, a[42]);
            res = debug(res, result, i, value, t, 23, a[43]);
            value = debug(value, res, result, i, key, 4, a[44]);
            i = debug(i, value, res, result, payload, 11, a[45]);
            result = debug(result, i, value, res, y, 16, a[46]);
            value = fn(value, res = debug(res, result, i, value, status, 23, a[47]), result, i, k, 6, a[48]);
            i = fn(i, value, res, result, user, 10, a[49]);
            result = fn(result, i, value, res, data, 15, a[50]);
            res = fn(res, result, i, value, state, 21, a[51]);
            value = fn(value, res, result, i, payload, 6, a[52]);
            i = fn(i, value, res, result, cb, 10, a[53]);
            result = fn(result, i, value, res, e, 15, a[54]);
            res = fn(res, result, i, value, context, 21, a[55]);
            value = fn(value, res, result, i, x, 6, a[56]);
            i = fn(i, value, res, result, y, 10, a[57]);
            result = fn(result, i, value, res, t, 15, a[58]);
            res = fn(res, result, i, value, title, 21, a[59]);
            value = fn(value, res, result, i, url, 6, a[60]);
            i = fn(i, value, res, result, el, 10, a[61]);
            result = fn(result, i, value, res, status, 15, a[62]);
            res = fn(res, result, i, value, key, 21, a[63]);
            b[0] = b[0] + value | 0;
            b[1] = b[1] + res | 0;
            b[2] = b[2] + result | 0;
            b[3] = b[3] + i | 0;
          },
          _doFinalize: function () {
            var e = this._data;
            var q = e.words;
            var d = 8 * this._nDataBytes;
            var b = 8 * e.sigBytes;
            q[b >>> 5] |= 128 << 24 - b % 32;
            var i = Math.floor(d / 4294967296);
            var u = d;
            q[15 + (b + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8);
            q[14 + (b + 64 >>> 9 << 4)] = 16711935 & (u << 8 | u >>> 24) | 4278255360 & (u << 24 | u >>> 8);
            e.sigBytes = 4 * (q.length + 1);
            this._process();
            var hash = this._hash;
            var H = hash.words;
            var j = 0;
            for (; j < 4; j++) {
              var a = H[j];
              H[j] = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8);
            }
            return hash;
          },
          clone: function () {
            var e = j.clone.call(this);
            return e._hash = this._hash.clone(), e;
          }
        });
        C.MD5 = j._createHelper(MD5);
        C.HmacMD5 = j._createHmacHelper(MD5);
      }(Math), CryptoJS.MD5);
    },
    "./node_modules/crypto-js/mode-cfb.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/cipher-core.js"), CryptoJS.mode.CFB = function () {
        function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
          var iv = this._iv;
          if (iv) {
            var keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          var i = 0;
          for (; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        return CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function (words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = words.slice(offset, offset + blockSize);
          }
        }), CTRGladman.Decryptor = CTRGladman.extend({
          processBlock: function (words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        }), CTRGladman;
      }(), CryptoJS.mode.CFB);
    },
    "./node_modules/crypto-js/mode-ctr-gladman.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/cipher-core.js"), CryptoJS.mode.CTRGladman = function () {
        function formatNumber(s) {
          if (255 == (s >> 24 & 255)) {
            var t = s >> 16 & 255;
            var r = s >> 8 & 255;
            var cmark = 255 & s;
            if (255 === t) {
              t = 0;
              if (255 === r) {
                r = 0;
                if (255 === cmark) {
                  cmark = 0;
                } else {
                  ++cmark;
                }
              } else {
                ++r;
              }
            } else {
              ++t;
            }
            s = 0;
            s = s + (t << 16);
            s = s + (r << 8);
            s = s + cmark;
          } else {
            s = s + (1 << 24);
          }
          return s;
        }
        var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function (words, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            (function (value) {
              if (0 === (value[0] = formatNumber(value[0]))) {
                value[1] = formatNumber(value[1]);
              }
            })(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            var i = 0;
            for (; i < blockSize; i++) {
              words[offset + i] ^= keystream[i];
            }
          }
        });
        return CTRGladman.Decryptor = Encryptor, CTRGladman;
      }(), CryptoJS.mode.CTRGladman);
    },
    "./node_modules/crypto-js/mode-ctr.js": function (blob, id, require) {
      var CTRGladman;
      var Encryptor;
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/cipher-core.js"), CryptoJS.mode.CTR = (CTRGladman = CryptoJS.lib.BlockCipherMode.extend(), Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
        processBlock: function (words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          var iv = this._iv;
          var counter = this._counter;
          if (iv) {
            counter = this._counter = iv.slice(0);
            this._iv = void 0;
          }
          var keystream = counter.slice(0);
          cipher.encryptBlock(keystream, 0);
          counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
          var i = 0;
          for (; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
      }), CTRGladman.Decryptor = Encryptor, CTRGladman), CryptoJS.mode.CTR);
    },
    "./node_modules/crypto-js/mode-ecb.js": function (blob, id, require) {
      var CTRGladman;
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/cipher-core.js"), CryptoJS.mode.ECB = ((CTRGladman = CryptoJS.lib.BlockCipherMode.extend()).Encryptor = CTRGladman.extend({
        processBlock: function (words, offset) {
          this._cipher.encryptBlock(words, offset);
        }
      }), CTRGladman.Decryptor = CTRGladman.extend({
        processBlock: function (words, offset) {
          this._cipher.decryptBlock(words, offset);
        }
      }), CTRGladman), CryptoJS.mode.ECB);
    },
    "./node_modules/crypto-js/mode-ofb.js": function (blob, id, require) {
      var CTRGladman;
      var Encryptor;
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/cipher-core.js"), CryptoJS.mode.OFB = (CTRGladman = CryptoJS.lib.BlockCipherMode.extend(), Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
        processBlock: function (words, offset) {
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;
          var iv = this._iv;
          var keystream = this._keystream;
          if (iv) {
            keystream = this._keystream = iv.slice(0);
            this._iv = void 0;
          }
          cipher.encryptBlock(keystream, 0);
          var i = 0;
          for (; i < blockSize; i++) {
            words[offset + i] ^= keystream[i];
          }
        }
      }), CTRGladman.Decryptor = Encryptor, CTRGladman), CryptoJS.mode.OFB);
    },
    "./node_modules/crypto-js/pad-ansix923.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/cipher-core.js"), CryptoJS.pad.AnsiX923 = {
        pad: function (data, s) {
          var i = data.sigBytes;
          var width = 4 * s;
          var size = width - i % width;
          var lastBytePos = i + size - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= size << 24 - lastBytePos % 4 * 8;
          data.sigBytes += size;
        },
        unpad: function (data) {
          var nBytesReady = 255 & data.words[data.sigBytes - 1 >>> 2];
          data.sigBytes -= nBytesReady;
        }
      }, CryptoJS.pad.Ansix923);
    },
    "./node_modules/crypto-js/pad-iso10126.js": function (blob, options, wrapper) {
      var C;
      blob.exports = (C = wrapper("./node_modules/crypto-js/core.js"), wrapper("./node_modules/crypto-js/cipher-core.js"), C.pad.Iso10126 = {
        pad: function (data, type) {
          var blockSizeBytes = 4 * type;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(C.lib.WordArray.random(nPaddingBytes - 1)).concat(C.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function (data) {
          var nBytesReady = 255 & data.words[data.sigBytes - 1 >>> 2];
          data.sigBytes -= nBytesReady;
        }
      }, C.pad.Iso10126);
    },
    "./node_modules/crypto-js/pad-iso97971.js": function (blob, options, wrapper) {
      var C;
      blob.exports = (C = wrapper("./node_modules/crypto-js/core.js"), wrapper("./node_modules/crypto-js/cipher-core.js"), C.pad.Iso97971 = {
        pad: function (data, number) {
          data.concat(C.lib.WordArray.create([2147483648], 1));
          C.pad.ZeroPadding.pad(data, number);
        },
        unpad: function (data) {
          C.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      }, C.pad.Iso97971);
    },
    "./node_modules/crypto-js/pad-nopadding.js": function (blob, options, wrapper) {
      var C;
      blob.exports = (C = wrapper("./node_modules/crypto-js/core.js"), wrapper("./node_modules/crypto-js/cipher-core.js"), C.pad.NoPadding = {
        pad: function () {
        },
        unpad: function () {
        }
      }, C.pad.NoPadding);
    },
    "./node_modules/crypto-js/pad-zeropadding.js": function (blob, options, wrapper) {
      var C;
      blob.exports = (C = wrapper("./node_modules/crypto-js/core.js"), wrapper("./node_modules/crypto-js/cipher-core.js"), C.pad.ZeroPadding = {
        pad: function (data, type) {
          var blockSizeBytes = 4 * type;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function (data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (; !(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255);) {
            i--;
          }
          data.sigBytes = i + 1;
        }
      }, C.pad.ZeroPadding);
    },
    "./node_modules/crypto-js/pbkdf2.js": function (blob, text, next) {
      var e;
      var _ref;
      var Base;
      var WordArray;
      var C_algo;
      var SHA1;
      var HMAC;
      var MyNgOfflineModel;
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/sha1.js"), next("./node_modules/crypto-js/hmac.js"), _ref = (e = tmp).lib, Base = _ref.Base, WordArray = _ref.WordArray, C_algo = e.algo, SHA1 = C_algo.SHA1, HMAC = C_algo.HMAC, MyNgOfflineModel = C_algo.PBKDF2 = Base.extend({
        cfg: Base.extend({
          keySize: 4,
          hasher: SHA1,
          iterations: 1
        }),
        init: function (a) {
          this.cfg = this.cfg.extend(a);
        },
        compute: function (password, data) {
          var cfg = this.cfg;
          var hmac = HMAC.create(cfg.hasher, password);
          var a = WordArray.create();
          var b = WordArray.create([1]);
          var derivedKeyWords = a.words;
          var c = b.words;
          var keySize = cfg.keySize;
          var iterations = cfg.iterations;
          for (; derivedKeyWords.length < keySize;) {
            var f = hmac.update(data).finalize(b);
            hmac.reset();
            var words = f.words;
            var length = words.length;
            var key = f;
            var iteration = 1;
            for (; iteration < iterations; iteration++) {
              key = hmac.finalize(key);
              hmac.reset();
              var keystream = key.words;
              var i = 0;
              for (; i < length; i++) {
                words[i] ^= keystream[i];
              }
            }
            a.concat(f);
            c[0]++;
          }
          return a.sigBytes = 4 * keySize, a;
        }
      }), e.PBKDF2 = function (password, salt, key) {
        return MyNgOfflineModel.create(key).compute(password, salt);
      }, tmp.PBKDF2);
    },
    "./node_modules/crypto-js/rabbit-legacy.js": function (blob, text, next) {
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/enc-base64.js"), next("./node_modules/crypto-js/md5.js"), next("./node_modules/crypto-js/evpkdf.js"), next("./node_modules/crypto-js/cipher-core.js"), function () {
        function nextState() {
          var X = this._X;
          var C = this._C;
          var i = 0;
          for (; i < 8; i++) {
            C_[i] = C[i];
          }
          C[0] = C[0] + 1295307597 + this._b | 0;
          C[1] = C[1] + 3545052371 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C[2] = C[2] + 886263092 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C[3] = C[3] + 1295307597 + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C[4] = C[4] + 3545052371 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C[5] = C[5] + 886263092 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C[6] = C[6] + 1295307597 + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C[7] = C[7] + 3545052371 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          i = 0;
          for (; i < 8; i++) {
            var n = X[i] + C[i];
            var d2z = 65535 & n;
            var len = n >>> 16;
            var tmpI = ((d2z * d2z >>> 17) + d2z * len >>> 15) + len * len;
            var tmp = ((4294901760 & n) * n | 0) + ((65535 & n) * n | 0);
            encKey[i] = tmpI ^ tmp;
          }
          X[0] = encKey[0] + (encKey[7] << 16 | encKey[7] >>> 16) + (encKey[6] << 16 | encKey[6] >>> 16) | 0;
          X[1] = encKey[1] + (encKey[0] << 8 | encKey[0] >>> 24) + encKey[7] | 0;
          X[2] = encKey[2] + (encKey[1] << 16 | encKey[1] >>> 16) + (encKey[0] << 16 | encKey[0] >>> 16) | 0;
          X[3] = encKey[3] + (encKey[2] << 8 | encKey[2] >>> 24) + encKey[1] | 0;
          X[4] = encKey[4] + (encKey[3] << 16 | encKey[3] >>> 16) + (encKey[2] << 16 | encKey[2] >>> 16) | 0;
          X[5] = encKey[5] + (encKey[4] << 8 | encKey[4] >>> 24) + encKey[3] | 0;
          X[6] = encKey[6] + (encKey[5] << 16 | encKey[5] >>> 16) + (encKey[4] << 16 | encKey[4] >>> 16) | 0;
          X[7] = encKey[7] + (encKey[6] << 8 | encKey[6] >>> 24) + encKey[5] | 0;
        }
        var C = tmp;
        var StreamCipher = C.lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var encKey = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function () {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];
            var C = this._C = [K[2] << 16 | K[2] >>> 16, 4294901760 & K[0] | 65535 & K[1], K[3] << 16 | K[3] >>> 16, 4294901760 & K[1] | 65535 & K[2], K[0] << 16 | K[0] >>> 16, 4294901760 & K[2] | 65535 & K[3], K[1] << 16 | K[1] >>> 16, 4294901760 & K[3] | 65535 & K[0]];
            this._b = 0;
            var i = 0;
            for (; i < 4; i++) {
              nextState.call(this);
            }
            i = 0;
            for (; i < 8; i++) {
              C[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i2 = 16711935 & (IV_0 << 8 | IV_0 >>> 24) | 4278255360 & (IV_0 << 24 | IV_0 >>> 8);
              var i3 = 16711935 & (IV_1 << 8 | IV_1 >>> 24) | 4278255360 & (IV_1 << 24 | IV_1 >>> 8);
              var i1 = i2 >>> 16 | 4294901760 & i3;
              var i0 = i3 << 16 | 65535 & i2;
              C[0] ^= i2;
              C[1] ^= i1;
              C[2] ^= i3;
              C[3] ^= i0;
              C[4] ^= i2;
              C[5] ^= i1;
              C[6] ^= i3;
              C[7] ^= i0;
              i = 0;
              for (; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function (M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            var i = 0;
            for (; i < 4; i++) {
              S[i] = 16711935 & (S[i] << 8 | S[i] >>> 24) | 4278255360 & (S[i] << 24 | S[i] >>> 8);
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 4,
          ivSize: 2
        });
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      }(), tmp.RabbitLegacy);
    },
    "./node_modules/crypto-js/rabbit.js": function (blob, text, next) {
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/enc-base64.js"), next("./node_modules/crypto-js/md5.js"), next("./node_modules/crypto-js/evpkdf.js"), next("./node_modules/crypto-js/cipher-core.js"), function () {
        function nextState() {
          var X = this._X;
          var C = this._C;
          var i = 0;
          for (; i < 8; i++) {
            C_[i] = C[i];
          }
          C[0] = C[0] + 1295307597 + this._b | 0;
          C[1] = C[1] + 3545052371 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C[2] = C[2] + 886263092 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C[3] = C[3] + 1295307597 + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C[4] = C[4] + 3545052371 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C[5] = C[5] + 886263092 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C[6] = C[6] + 1295307597 + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C[7] = C[7] + 3545052371 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          i = 0;
          for (; i < 8; i++) {
            var n = X[i] + C[i];
            var d2z = 65535 & n;
            var len = n >>> 16;
            var tmpI = ((d2z * d2z >>> 17) + d2z * len >>> 15) + len * len;
            var tmp = ((4294901760 & n) * n | 0) + ((65535 & n) * n | 0);
            encKey[i] = tmpI ^ tmp;
          }
          X[0] = encKey[0] + (encKey[7] << 16 | encKey[7] >>> 16) + (encKey[6] << 16 | encKey[6] >>> 16) | 0;
          X[1] = encKey[1] + (encKey[0] << 8 | encKey[0] >>> 24) + encKey[7] | 0;
          X[2] = encKey[2] + (encKey[1] << 16 | encKey[1] >>> 16) + (encKey[0] << 16 | encKey[0] >>> 16) | 0;
          X[3] = encKey[3] + (encKey[2] << 8 | encKey[2] >>> 24) + encKey[1] | 0;
          X[4] = encKey[4] + (encKey[3] << 16 | encKey[3] >>> 16) + (encKey[2] << 16 | encKey[2] >>> 16) | 0;
          X[5] = encKey[5] + (encKey[4] << 8 | encKey[4] >>> 24) + encKey[3] | 0;
          X[6] = encKey[6] + (encKey[5] << 16 | encKey[5] >>> 16) + (encKey[4] << 16 | encKey[4] >>> 16) | 0;
          X[7] = encKey[7] + (encKey[6] << 8 | encKey[6] >>> 24) + encKey[5] | 0;
        }
        var C = tmp;
        var StreamCipher = C.lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var encKey = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function () {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var i = 0;
            for (; i < 4; i++) {
              K[i] = 16711935 & (K[i] << 8 | K[i] >>> 24) | 4278255360 & (K[i] << 24 | K[i] >>> 8);
            }
            var X = this._X = [K[0], K[3] << 16 | K[2] >>> 16, K[1], K[0] << 16 | K[3] >>> 16, K[2], K[1] << 16 | K[0] >>> 16, K[3], K[2] << 16 | K[1] >>> 16];
            var C = this._C = [K[2] << 16 | K[2] >>> 16, 4294901760 & K[0] | 65535 & K[1], K[3] << 16 | K[3] >>> 16, 4294901760 & K[1] | 65535 & K[2], K[0] << 16 | K[0] >>> 16, 4294901760 & K[2] | 65535 & K[3], K[1] << 16 | K[1] >>> 16, 4294901760 & K[3] | 65535 & K[0]];
            this._b = 0;
            i = 0;
            for (; i < 4; i++) {
              nextState.call(this);
            }
            i = 0;
            for (; i < 8; i++) {
              C[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i2 = 16711935 & (IV_0 << 8 | IV_0 >>> 24) | 4278255360 & (IV_0 << 24 | IV_0 >>> 8);
              var i3 = 16711935 & (IV_1 << 8 | IV_1 >>> 24) | 4278255360 & (IV_1 << 24 | IV_1 >>> 8);
              var i1 = i2 >>> 16 | 4294901760 & i3;
              var i0 = i3 << 16 | 65535 & i2;
              C[0] ^= i2;
              C[1] ^= i1;
              C[2] ^= i3;
              C[3] ^= i0;
              C[4] ^= i2;
              C[5] ^= i1;
              C[6] ^= i3;
              C[7] ^= i0;
              i = 0;
              for (; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function (M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            var i = 0;
            for (; i < 4; i++) {
              S[i] = 16711935 & (S[i] << 8 | S[i] >>> 24) | 4278255360 & (S[i] << 24 | S[i] >>> 8);
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 4,
          ivSize: 2
        });
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      }(), tmp.Rabbit);
    },
    "./node_modules/crypto-js/rc4.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/enc-base64.js"), require("./node_modules/crypto-js/md5.js"), require("./node_modules/crypto-js/evpkdf.js"), require("./node_modules/crypto-js/cipher-core.js"), function () {
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var interval = 0;
          var o = 0;
          for (; o < 4; o++) {
            j = (j + S[i = (i + 1) % 256]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            interval = interval | S[(S[i] + S[j]) % 256] << 24 - 8 * o;
          }
          return this._i = i, this._j = j, interval;
        }
        var C = CryptoJS;
        var StreamCipher = C.lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function () {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            var i = 0;
            for (; i < 256; i++) {
              S[i] = i;
            }
            i = 0;
            var j = 0;
            for (; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var si = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + si) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function (M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 8,
          ivSize: 0
        });
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function () {
            RC4._doReset.call(this);
            var i = this.cfg.drop;
            for (; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      }(), CryptoJS.RC4);
    },
    "./node_modules/crypto-js/ripemd160.js": function (blob, chr, min) {
      var udist;
      blob.exports = (udist = min("./node_modules/crypto-js/core.js"), function (tag) {
        function f4(c, d, a) {
          return c ^ d ^ a;
        }
        function FF(b, c, d) {
          return b & c | ~b & d;
        }
        function f1(x, y, z) {
          return (x | ~y) ^ z;
        }
        function GG(c, d, a) {
          return c & a | d & ~a;
        }
        function f(t, n, a) {
          return t ^ (n | ~a);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        var C = udist;
        var m = C.lib;
        var p = m.WordArray;
        var j = m.Hasher;
        var C_algo = C.algo;
        var _zl = p.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);
        var _zr = p.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);
        var _sr = p.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);
        var _sl = p.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);
        var _hr = p.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hl = p.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = j.extend({
          _doReset: function () {
            this._hash = p.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function (M, offset) {
            var i = 0;
            for (; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = 16711935 & (M_offset_i << 8 | M_offset_i >>> 24) | 4278255360 & (M_offset_i << 24 | M_offset_i >>> 8);
            }
            var dl;
            var d;
            var b;
            var c;
            var cl;
            var dr;
            var n;
            var a;
            var t;
            var end;
            var code;
            var H = this._hash.words;
            var hr = _hr.words;
            var hl = _hl.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sr = _sr.words;
            var sl = _sl.words;
            dr = dl = H[0];
            n = d = H[1];
            a = b = H[2];
            t = c = H[3];
            end = cl = H[4];
            i = 0;
            for (; i < 80; i = i + 1) {
              code = dl + M[offset + zl[i]] | 0;
              code = code + (i < 16 ? f4(d, b, c) + hr[0] : i < 32 ? FF(d, b, c) + hr[1] : i < 48 ? f1(d, b, c) + hr[2] : i < 64 ? GG(d, b, c) + hr[3] : f(d, b, c) + hr[4]);
              code = (code = rotl(code = code | 0, sr[i])) + cl | 0;
              dl = cl;
              cl = c;
              c = rotl(b, 10);
              b = d;
              d = code;
              code = dr + M[offset + zr[i]] | 0;
              code = code + (i < 16 ? f(n, a, t) + hl[0] : i < 32 ? GG(n, a, t) + hl[1] : i < 48 ? f1(n, a, t) + hl[2] : i < 64 ? FF(n, a, t) + hl[3] : f4(n, a, t) + hl[4]);
              code = (code = rotl(code = code | 0, sl[i])) + end | 0;
              dr = end;
              end = t;
              t = rotl(a, 10);
              a = n;
              n = code;
            }
            code = H[1] + b + t | 0;
            H[1] = H[2] + c + end | 0;
            H[2] = H[3] + cl + dr | 0;
            H[3] = H[4] + dl + n | 0;
            H[4] = H[0] + d + a | 0;
            H[0] = code;
          },
          _doFinalize: function () {
            var e = this._data;
            var c = e.words;
            var b = 8 * this._nDataBytes;
            var d = 8 * e.sigBytes;
            c[d >>> 5] |= 128 << 24 - d % 32;
            c[14 + (d + 64 >>> 9 << 4)] = 16711935 & (b << 8 | b >>> 24) | 4278255360 & (b << 24 | b >>> 8);
            e.sigBytes = 4 * (c.length + 1);
            this._process();
            var hash = this._hash;
            var H = hash.words;
            var j = 0;
            for (; j < 5; j++) {
              var a = H[j];
              H[j] = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8);
            }
            return hash;
          },
          clone: function () {
            var e = j.clone.call(this);
            return e._hash = this._hash.clone(), e;
          }
        });
        C.RIPEMD160 = j._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = j._createHmacHelper(RIPEMD160);
      }(Math), udist.RIPEMD160);
    },
    "./node_modules/crypto-js/sha1.js": function (blob, id, require) {
      var e;
      var b;
      var WordArray;
      var j;
      var _ref;
      var l;
      var m;
      var a;
      blob.exports = (a = require("./node_modules/crypto-js/core.js"), b = (e = a).lib, WordArray = b.WordArray, j = b.Hasher, _ref = e.algo, l = [], m = _ref.SHA1 = j.extend({
        _doReset: function () {
          this._hash = new WordArray.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
        },
        _doProcessBlock: function (M, offset) {
          var b = this._hash.words;
          var h = b[0];
          var g = b[1];
          var e = b[2];
          var k = b[3];
          var j = b[4];
          var i = 0;
          for (; i < 80; i++) {
            if (i < 16) {
              l[i] = 0 | M[offset + i];
            } else {
              var d = l[i - 3] ^ l[i - 8] ^ l[i - 14] ^ l[i - 16];
              l[i] = d << 1 | d >>> 31;
            }
            var deltaY = (h << 5 | h >>> 27) + j + l[i];
            deltaY = deltaY + (i < 20 ? 1518500249 + (g & e | ~g & k) : i < 40 ? 1859775393 + (g ^ e ^ k) : i < 60 ? (g & e | g & k | e & k) - 1894007588 : (g ^ e ^ k) - 899497514);
            j = k;
            k = e;
            e = g << 30 | g >>> 2;
            g = h;
            h = deltaY;
          }
          b[0] = b[0] + h | 0;
          b[1] = b[1] + g | 0;
          b[2] = b[2] + e | 0;
          b[3] = b[3] + k | 0;
          b[4] = b[4] + j | 0;
        },
        _doFinalize: function () {
          var f = this._data;
          var d = f.words;
          var b = 8 * this._nDataBytes;
          var c = 8 * f.sigBytes;
          return d[c >>> 5] |= 128 << 24 - c % 32, d[14 + (c + 64 >>> 9 << 4)] = Math.floor(b / 4294967296), d[15 + (c + 64 >>> 9 << 4)] = b, f.sigBytes = 4 * d.length, this._process(), this._hash;
        },
        clone: function () {
          var e = j.clone.call(this);
          return e._hash = this._hash.clone(), e;
        }
      }), e.SHA1 = j._createHelper(m), e.HmacSHA1 = j._createHmacHelper(m), a.SHA1);
    },
    "./node_modules/crypto-js/sha224.js": function (blob, text, next) {
      var C;
      var WordArray;
      var _ref;
      var SHA256;
      var SHA224;
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/sha256.js"), WordArray = (C = tmp).lib.WordArray, _ref = C.algo, SHA256 = _ref.SHA256, SHA224 = _ref.SHA224 = SHA256.extend({
        _doReset: function () {
          this._hash = new WordArray.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]);
        },
        _doFinalize: function () {
          var f = SHA256._doFinalize.call(this);
          return f.sigBytes -= 4, f;
        }
      }), C.SHA224 = SHA256._createHelper(SHA224), C.HmacSHA224 = SHA256._createHmacHelper(SHA224), tmp.SHA224);
    },
    "./node_modules/crypto-js/sha256.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), function (Math) {
        var C = CryptoJS;
        var m = C.lib;
        var p = m.WordArray;
        var j = m.Hasher;
        var C_algo = C.algo;
        var a = [];
        var arrIndices = [];
        !function () {
          function t(a) {
            var ch = Math.sqrt(a);
            var INT_START = 2;
            for (; INT_START <= ch; INT_START++) {
              if (!(a % INT_START)) {
                return false;
              }
            }
            return true;
          }
          function parseInt(text) {
            return 4294967296 * (text - (0 | text)) | 0;
          }
          var n = 2;
          var j = 0;
          for (; j < 64;) {
            if (t(n)) {
              if (j < 8) {
                a[j] = parseInt(Math.pow(n, .5));
              }
              arrIndices[j] = parseInt(Math.pow(n, 1 / 3));
              j++;
            }
            n++;
          }
        }();
        var b = [];
        var SHA256 = C_algo.SHA256 = j.extend({
          _doReset: function () {
            this._hash = new p.init(a.slice(0));
          },
          _doProcessBlock: function (M, offset) {
            var b = this._hash.words;
            var g = b[0];
            var a = b[1];
            var e = b[2];
            var h = b[3];
            var d = b[4];
            var k = b[5];
            var c = b[6];
            var l = b[7];
            var j = 0;
            for (; j < 64; j++) {
              if (j < 16) {
                b[j] = 0 | M[offset + j];
              } else {
                var h = b[j - 15];
                var groupNamePrefix = (h << 25 | h >>> 7) ^ (h << 14 | h >>> 18) ^ h >>> 3;
                var g = b[j - 2];
                var dupeNameCount = (g << 15 | g >>> 17) ^ (g << 13 | g >>> 19) ^ g >>> 10;
                b[j] = groupNamePrefix + b[j - 7] + dupeNameCount + b[j - 16];
              }
              var nsb = g & a ^ g & e ^ a & e;
              var i = (g << 30 | g >>> 2) ^ (g << 19 | g >>> 13) ^ (g << 10 | g >>> 22);
              var E = l + ((d << 26 | d >>> 6) ^ (d << 21 | d >>> 11) ^ (d << 7 | d >>> 25)) + (d & k ^ ~d & c) + arrIndices[j] + b[j];
              l = c;
              c = k;
              k = d;
              d = h + E | 0;
              h = e;
              e = a;
              a = g;
              g = E + (i + nsb) | 0;
            }
            b[0] = b[0] + g | 0;
            b[1] = b[1] + a | 0;
            b[2] = b[2] + e | 0;
            b[3] = b[3] + h | 0;
            b[4] = b[4] + d | 0;
            b[5] = b[5] + k | 0;
            b[6] = b[6] + c | 0;
            b[7] = b[7] + l | 0;
          },
          _doFinalize: function () {
            var f = this._data;
            var e = f.words;
            var b = 8 * this._nDataBytes;
            var h = 8 * f.sigBytes;
            return e[h >>> 5] |= 128 << 24 - h % 32, e[14 + (h + 64 >>> 9 << 4)] = Math.floor(b / 4294967296), e[15 + (h + 64 >>> 9 << 4)] = b, f.sigBytes = 4 * e.length, this._process(), this._hash;
          },
          clone: function () {
            var e = j.clone.call(this);
            return e._hash = this._hash.clone(), e;
          }
        });
        C.SHA256 = j._createHelper(SHA256);
        C.HmacSHA256 = j._createHmacHelper(SHA256);
      }(Math), CryptoJS.SHA256);
    },
    "./node_modules/crypto-js/sha3.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/x64-core.js"), function (Math) {
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var pv = C.x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        !function () {
          var x = 1;
          var y = 0;
          var r = 0;
          for (; r < 24; r++) {
            RHO_OFFSETS[x + 5 * y] = (r + 1) * (r + 2) / 2 % 64;
            var _limit_top = (2 * x + 3 * y) % 5;
            x = y % 5;
            y = _limit_top;
          }
          x = 0;
          for (; x < 5; x++) {
            y = 0;
            for (; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var f = 1;
          var i = 0;
          for (; i < 24; i++) {
            var data = 0;
            var f = 0;
            var c = 0;
            for (; c < 7; c++) {
              if (1 & f) {
                var p = (1 << c) - 1;
                if (p < 32) {
                  f = f ^ 1 << p;
                } else {
                  data = data ^ 1 << p - 32;
                }
              }
              if (128 & f) {
                f = f << 1 ^ 113;
              } else {
                f = f << 1;
              }
            }
            ROUND_CONSTANTS[i] = pv.create(data, f);
          }
        }();
        var T = [];
        !function () {
          var tagName = 0;
          for (; tagName < 25; tagName++) {
            T[tagName] = pv.create();
          }
        }();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function () {
            var state = this._state = [];
            var reducerMountPoint = 0;
            for (; reducerMountPoint < 25; reducerMountPoint++) {
              state[reducerMountPoint] = new pv.init;
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function (M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            var i = 0;
            for (; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = 16711935 & (M2i << 8 | M2i >>> 24) | 4278255360 & (M2i << 24 | M2i >>> 8);
              M2i1 = 16711935 & (M2i1 << 8 | M2i1 >>> 24) | 4278255360 & (M2i1 << 24 | M2i1 >>> 8);
              (lane = state[i]).high ^= M2i1;
              lane.low ^= M2i;
            }
            var round = 0;
            for (; round < 24; round++) {
              var x = 0;
              for (; x < 5; x++) {
                var tMsw = 0;
                var tLsw = 0;
                var dtick = 0;
                for (; dtick < 5; dtick++) {
                  tMsw = tMsw ^ (lane = state[x + 5 * dtick]).high;
                  tLsw = tLsw ^ lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              x = 0;
              for (; x < 5; x++) {
                var T0 = T[(x + 4) % 5];
                var Tx = T[(x + 1) % 5];
                var e_lo = Tx.high;
                var e_hi = Tx.low;
                tMsw = T0.high ^ (e_lo << 1 | e_hi >>> 31);
                tLsw = T0.low ^ (e_hi << 1 | e_lo >>> 31);
                dtick = 0;
                for (; dtick < 5; dtick++) {
                  (lane = state[x + 5 * dtick]).high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              var laneIndex = 1;
              for (; laneIndex < 25; laneIndex++) {
                var laneMsw = (lane = state[laneIndex]).high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var Tx = T[PI_INDEXES[laneIndex]];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              x = 0;
              for (; x < 5; x++) {
                dtick = 0;
                for (; dtick < 5; dtick++) {
                  var lane = state[laneIndex = x + 5 * dtick];
                  var TLane = T[laneIndex];
                  var T0 = T[(x + 1) % 5 + 5 * dtick];
                  var Tx1Lane = T[(x + 2) % 5 + 5 * dtick];
                  lane.high = TLane.high ^ ~T0.high & Tx1Lane.high;
                  lane.low = TLane.low ^ ~T0.low & Tx1Lane.low;
                }
              }
              lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function () {
            var c = this._data;
            var d = c.words;
            var b = (this._nDataBytes, 8 * c.sigBytes);
            var n = 32 * this.blockSize;
            d[b >>> 5] |= 1 << 24 - b % 32;
            d[(Math.ceil((b + 1) / n) * n >>> 5) - 1] |= 128;
            c.sigBytes = 4 * d.length;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var left = [];
            var category = 0;
            for (; category < outputLengthLanes; category++) {
              var c = state[category];
              var g = c.high;
              var i = c.low;
              g = 16711935 & (g << 8 | g >>> 24) | 4278255360 & (g << 24 | g >>> 8);
              i = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8);
              left.push(i);
              left.push(g);
            }
            return new WordArray.init(left, outputLengthBytes);
          },
          clone: function () {
            var edge = Hasher.clone.call(this);
            var tickGroups = edge._state = this._state.slice(0);
            var currentTickGroup = 0;
            for (; currentTickGroup < 25; currentTickGroup++) {
              tickGroups[currentTickGroup] = tickGroups[currentTickGroup].clone();
            }
            return edge;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      }(Math), CryptoJS.SHA3);
    },
    "./node_modules/crypto-js/sha384.js": function (blob, text, next) {
      var C;
      var C_x64;
      var BDA;
      var WordArray;
      var _ref;
      var SHA512;
      var SHA384;
      var tmp;
      blob.exports = (tmp = next("./node_modules/crypto-js/core.js"), next("./node_modules/crypto-js/x64-core.js"), next("./node_modules/crypto-js/sha512.js"), C_x64 = (C = tmp).x64, BDA = C_x64.Word, WordArray = C_x64.WordArray, _ref = C.algo, SHA512 = _ref.SHA512, SHA384 = _ref.SHA384 = SHA512.extend({
        _doReset: function () {
          this._hash = new WordArray.init([new BDA.init(3418070365, 3238371032), new BDA.init(1654270250, 914150663), new BDA.init(2438529370, 812702999), new BDA.init(355462360, 4144912697), new BDA.init(1731405415, 4290775857), new BDA.init(2394180231, 1750603025), new BDA.init(3675008525, 1694076839), new BDA.init(1203062813, 3204075428)]);
        },
        _doFinalize: function () {
          var f = SHA512._doFinalize.call(this);
          return f.sigBytes -= 16, f;
        }
      }), C.SHA384 = SHA512._createHelper(SHA384), C.HmacSHA384 = SHA512._createHmacHelper(SHA384), tmp.SHA384);
    },
    "./node_modules/crypto-js/sha512.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/x64-core.js"), function () {
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var C = CryptoJS;
        var Hasher = C.lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var K = [X64Word_create(1116352408, 3609767458), X64Word_create(1899447441, 602891725), X64Word_create(3049323471, 3964484399), X64Word_create(3921009573, 2173295548), X64Word_create(961987163, 4081628472), X64Word_create(1508970993, 3053834265), X64Word_create(2453635748, 2937671579), X64Word_create(2870763221, 3664609560), X64Word_create(3624381080, 2734883394), X64Word_create(310598401, 1164996542), X64Word_create(607225278, 1323610764), X64Word_create(1426881987, 3590304994), X64Word_create(1925078388,
          4068182383), X64Word_create(2162078206, 991336113), X64Word_create(2614888103, 633803317), X64Word_create(3248222580, 3479774868), X64Word_create(3835390401, 2666613458), X64Word_create(4022224774, 944711139), X64Word_create(264347078, 2341262773), X64Word_create(604807628, 2007800933), X64Word_create(770255983, 1495990901), X64Word_create(1249150122, 1856431235), X64Word_create(1555081692, 3175218132), X64Word_create(1996064986, 2198950837), X64Word_create(2554220882, 3999719339), X64Word_create(2821834349,
            766784016), X64Word_create(2952996808, 2566594879), X64Word_create(3210313671, 3203337956), X64Word_create(3336571891, 1034457026), X64Word_create(3584528711, 2466948901), X64Word_create(113926993, 3758326383), X64Word_create(338241895, 168717936), X64Word_create(666307205, 1188179964), X64Word_create(773529912, 1546045734), X64Word_create(1294757372, 1522805485), X64Word_create(1396182291, 2643833823), X64Word_create(1695183700, 2343527390), X64Word_create(1986661051, 1014477480), X64Word_create(2177026350,
              1206759142), X64Word_create(2456956037, 344077627), X64Word_create(2730485921, 1290863460), X64Word_create(2820302411, 3158454273), X64Word_create(3259730800, 3505952657), X64Word_create(3345764771, 106217008), X64Word_create(3516065817, 3606008344), X64Word_create(3600352804, 1432725776), X64Word_create(4094571909, 1467031594), X64Word_create(275423344, 851169720), X64Word_create(430227734, 3100823752), X64Word_create(506948616, 1363258195), X64Word_create(659060556, 3750685593), X64Word_create(883997877,
                3785050280), X64Word_create(958139571, 3318307427), X64Word_create(1322822218, 3812723403), X64Word_create(1537002063, 2003034995), X64Word_create(1747873779, 3602036899), X64Word_create(1955562222, 1575990012), X64Word_create(2024104815, 1125592928), X64Word_create(2227730452, 2716904306), X64Word_create(2361852424, 442776044), X64Word_create(2428436474, 593698344), X64Word_create(2756734187, 3733110249), X64Word_create(3204031479, 2999351573), X64Word_create(3329325298, 3815920427), X64Word_create(3391569614,
                  3928383900), X64Word_create(3515267271, 566280711), X64Word_create(3940187606, 3454069534), X64Word_create(4118630271, 4000239992), X64Word_create(116418474, 1914138554), X64Word_create(174292421, 2731055270), X64Word_create(289380356, 3203993006), X64Word_create(460393269, 320620315), X64Word_create(685471733, 587496836), X64Word_create(852142971, 1086792851), X64Word_create(1017036298, 365543100), X64Word_create(1126000580, 2618297676), X64Word_create(1288033470, 3409855158), X64Word_create(1501505948,
                    4234509866), X64Word_create(1607167915, 987167468), X64Word_create(1816402316, 1246189591)];
        var W = [];
        !function () {
          var i = 0;
          for (; i < 80; i++) {
            W[i] = X64Word_create();
          }
        }();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function () {
            this._hash = new X64WordArray.init([new X64Word.init(1779033703, 4089235720), new X64Word.init(3144134277, 2227873595), new X64Word.init(1013904242, 4271175723), new X64Word.init(2773480762, 1595750129), new X64Word.init(1359893119, 2917565137), new X64Word.init(2600822924, 725511199), new X64Word.init(528734635, 4215389547), new X64Word.init(1541459225, 327033209)]);
          },
          _doProcessBlock: function (M, offset) {
            var H = this._hash.words;
            var H4 = H[0];
            var H5 = H[1];
            var H6 = H[2];
            var H7 = H[3];
            var H0 = H[4];
            var H1 = H[5];
            var H2 = H[6];
            var H3 = H[7];
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var i = 0;
            for (; i < 80; i++) {
              var Wi = W[i];
              if (i < 16) {
                var Wih = Wi.high = 0 | M[offset + 2 * i];
                var Wil = Wi.low = 0 | M[offset + 2 * i + 1];
              } else {
                var gamma1x = W[i - 15];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma0h = (gamma1xh >>> 1 | gamma1xl << 31) ^ (gamma1xh >>> 8 | gamma1xl << 24) ^ gamma1xh >>> 7;
                var gamma0l = (gamma1xl >>> 1 | gamma1xh << 31) ^ (gamma1xl >>> 8 | gamma1xh << 24) ^ (gamma1xl >>> 7 | gamma1xh << 25);
                var gamma0x = W[i - 2];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var offset_top = (gamma0xh >>> 19 | gamma0xl << 13) ^ (gamma0xh << 3 | gamma0xl >>> 29) ^ gamma0xh >>> 6;
                var gamma1l = (gamma0xl >>> 19 | gamma0xh << 13) ^ (gamma0xl << 3 | gamma0xh >>> 29) ^ (gamma0xl >>> 6 | gamma0xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wih = (Wih = (Wih = gamma0h + Wi7h + ((Wil = gamma0l + Wi7l) >>> 0 < gamma0l >>> 0 ? 1 : 0)) + offset_top + ((Wil = Wil + gamma1l) >>> 0 < gamma1l >>> 0 ? 1 : 0)) + Wi16h + ((Wil = Wil + Wi16l) >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var t1l;
              var middlePathName = ah & bh ^ ~ah & ch;
              var chl = al & bl ^ ~al & cl;
              var siteName = eh & fh ^ eh & gh ^ fh & gh;
              var majl = el & fl ^ el & gl ^ fl & gl;
              var managementcommandsdns = (eh >>> 28 | el << 4) ^ (eh << 30 | el >>> 2) ^ (eh << 25 | el >>> 7);
              var sigma0l = (el >>> 28 | eh << 4) ^ (el << 30 | eh >>> 2) ^ (el << 25 | eh >>> 7);
              var pad = (ah >>> 14 | al << 18) ^ (ah >>> 18 | al << 14) ^ (ah << 23 | al >>> 9);
              var thisid = (al >>> 14 | ah << 18) ^ (al >>> 18 | ah << 14) ^ (al << 23 | ah >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var baseNewPath = dh + pad + ((t1l = dl + thisid) >>> 0 < dl >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              ah = hh + (baseNewPath = (baseNewPath = (baseNewPath = baseNewPath + middlePathName + ((t1l = t1l + chl) >>> 0 < chl >>> 0 ? 1 : 0)) + Kih + ((t1l = t1l + Kil) >>> 0 < Kil >>> 0 ? 1 : 0)) + Wih + ((t1l = t1l + Wil) >>> 0 < Wil >>> 0 ? 1 : 0)) + ((al = hl + t1l | 0) >>> 0 < hl >>> 0 ? 1 : 0) | 0;
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              eh = baseNewPath + (managementcommandsdns + siteName + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0)) + ((el = t1l + t2l | 0) >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
          },
          _doFinalize: function () {
            var f = this._data;
            var d = f.words;
            var b = 8 * this._nDataBytes;
            var c = 8 * f.sigBytes;
            return d[c >>> 5] |= 128 << 24 - c % 32, d[30 + (c + 128 >>> 10 << 5)] = Math.floor(b / 4294967296), d[31 + (c + 128 >>> 10 << 5)] = b, f.sigBytes = 4 * d.length, this._process(), this._hash.toX32();
          },
          clone: function () {
            var e = Hasher.clone.call(this);
            return e._hash = this._hash.clone(), e;
          },
          blockSize: 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      }(), CryptoJS.SHA512);
    },
    "./node_modules/crypto-js/tripledes.js": function (blob, id, require) {
      var CryptoJS;
      blob.exports = (CryptoJS = require("./node_modules/crypto-js/core.js"), require("./node_modules/crypto-js/enc-base64.js"), require("./node_modules/crypto-js/md5.js"), require("./node_modules/crypto-js/evpkdf.js"), require("./node_modules/crypto-js/cipher-core.js"), function () {
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var nonDuplicateIds = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4];
        var a = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var conf_shortcuts_icon = [{
          0: 8421888,
          268435456: 32768,
          536870912: 8421378,
          805306368: 2,
          1073741824: 512,
          1342177280: 8421890,
          1610612736: 8389122,
          1879048192: 8388608,
          2147483648: 514,
          2415919104: 8389120,
          2684354560: 33280,
          2952790016: 8421376,
          3221225472: 32770,
          3489660928: 8388610,
          3758096384: 0,
          4026531840: 33282,
          134217728: 0,
          402653184: 8421890,
          671088640: 33282,
          939524096: 32768,
          1207959552: 8421888,
          1476395008: 512,
          1744830464: 8421378,
          2013265920: 2,
          2281701376: 8389120,
          2550136832: 33280,
          2818572288: 8421376,
          3087007744: 8389122,
          3355443200: 8388610,
          3623878656: 32770,
          3892314112: 514,
          4160749568: 8388608,
          1: 32768,
          268435457: 2,
          536870913: 8421888,
          805306369: 8388608,
          1073741825: 8421378,
          1342177281: 33280,
          1610612737: 512,
          1879048193: 8389122,
          2147483649: 8421890,
          2415919105: 8421376,
          2684354561: 8388610,
          2952790017: 33282,
          3221225473: 514,
          3489660929: 8389120,
          3758096385: 32770,
          4026531841: 0,
          134217729: 8421890,
          402653185: 8421376,
          671088641: 8388608,
          939524097: 512,
          1207959553: 32768,
          1476395009: 8388610,
          1744830465: 2,
          2013265921: 33282,
          2281701377: 32770,
          2550136833: 8389122,
          2818572289: 514,
          3087007745: 8421888,
          3355443201: 8389120,
          3623878657: 0,
          3892314113: 33280,
          4160749569: 8421378
        }, {
          0: 1074282512,
          16777216: 16384,
          33554432: 524288,
          50331648: 1074266128,
          67108864: 1073741840,
          83886080: 1074282496,
          100663296: 1073758208,
          117440512: 16,
          134217728: 540672,
          150994944: 1073758224,
          167772160: 1073741824,
          184549376: 540688,
          201326592: 524304,
          218103808: 0,
          234881024: 16400,
          251658240: 1074266112,
          8388608: 1073758208,
          25165824: 540688,
          41943040: 16,
          58720256: 1073758224,
          75497472: 1074282512,
          92274688: 1073741824,
          109051904: 524288,
          125829120: 1074266128,
          142606336: 524304,
          159383552: 0,
          176160768: 16384,
          192937984: 1074266112,
          209715200: 1073741840,
          226492416: 540672,
          243269632: 1074282496,
          260046848: 16400,
          268435456: 0,
          285212672: 1074266128,
          301989888: 1073758224,
          318767104: 1074282496,
          335544320: 1074266112,
          352321536: 16,
          369098752: 540688,
          385875968: 16384,
          402653184: 16400,
          419430400: 524288,
          436207616: 524304,
          452984832: 1073741840,
          469762048: 540672,
          486539264: 1073758208,
          503316480: 1073741824,
          520093696: 1074282512,
          276824064: 540688,
          293601280: 524288,
          310378496: 1074266112,
          327155712: 16384,
          343932928: 1073758208,
          360710144: 1074282512,
          377487360: 16,
          394264576: 1073741824,
          411041792: 1074282496,
          427819008: 1073741840,
          444596224: 1073758224,
          461373440: 524304,
          478150656: 0,
          494927872: 16400,
          511705088: 1074266128,
          528482304: 540672
        }, {
          0: 260,
          1048576: 0,
          2097152: 67109120,
          3145728: 65796,
          4194304: 65540,
          5242880: 67108868,
          6291456: 67174660,
          7340032: 67174400,
          8388608: 67108864,
          9437184: 67174656,
          10485760: 65792,
          11534336: 67174404,
          12582912: 67109124,
          13631488: 65536,
          14680064: 4,
          15728640: 256,
          524288: 67174656,
          1572864: 67174404,
          2621440: 0,
          3670016: 67109120,
          4718592: 67108868,
          5767168: 65536,
          6815744: 65540,
          7864320: 260,
          8912896: 4,
          9961472: 256,
          11010048: 67174400,
          12058624: 65796,
          13107200: 65792,
          14155776: 67109124,
          15204352: 67174660,
          16252928: 67108864,
          16777216: 67174656,
          17825792: 65540,
          18874368: 65536,
          19922944: 67109120,
          20971520: 256,
          22020096: 67174660,
          23068672: 67108868,
          24117248: 0,
          25165824: 67109124,
          26214400: 67108864,
          27262976: 4,
          28311552: 65792,
          29360128: 67174400,
          30408704: 260,
          31457280: 65796,
          32505856: 67174404,
          17301504: 67108864,
          18350080: 260,
          19398656: 67174656,
          20447232: 0,
          21495808: 65540,
          22544384: 67109120,
          23592960: 256,
          24641536: 67174404,
          25690112: 65536,
          26738688: 67174660,
          27787264: 65796,
          28835840: 67108868,
          29884416: 67109124,
          30932992: 67174400,
          31981568: 4,
          33030144: 65792
        }, {
          0: 2151682048,
          65536: 2147487808,
          131072: 4198464,
          196608: 2151677952,
          262144: 0,
          327680: 4198400,
          393216: 2147483712,
          458752: 4194368,
          524288: 2147483648,
          589824: 4194304,
          655360: 64,
          720896: 2147487744,
          786432: 2151678016,
          851968: 4160,
          917504: 4096,
          983040: 2151682112,
          32768: 2147487808,
          98304: 64,
          163840: 2151678016,
          229376: 2147487744,
          294912: 4198400,
          360448: 2151682112,
          425984: 0,
          491520: 2151677952,
          557056: 4096,
          622592: 2151682048,
          688128: 4194304,
          753664: 4160,
          819200: 2147483648,
          884736: 4194368,
          950272: 4198464,
          1015808: 2147483712,
          1048576: 4194368,
          1114112: 4198400,
          1179648: 2147483712,
          1245184: 0,
          1310720: 4160,
          1376256: 2151678016,
          1441792: 2151682048,
          1507328: 2147487808,
          1572864: 2151682112,
          1638400: 2147483648,
          1703936: 2151677952,
          1769472: 4198464,
          1835008: 2147487744,
          1900544: 4194304,
          1966080: 64,
          2031616: 4096,
          1081344: 2151677952,
          1146880: 2151682112,
          1212416: 0,
          1277952: 4198400,
          1343488: 4194368,
          1409024: 2147483648,
          1474560: 2147487808,
          1540096: 64,
          1605632: 2147483712,
          1671168: 4096,
          1736704: 2147487744,
          1802240: 2151678016,
          1867776: 4160,
          1933312: 2151682048,
          1998848: 4194304,
          2064384: 4198464
        }, {
          0: 128,
          4096: 17039360,
          8192: 262144,
          12288: 536870912,
          16384: 537133184,
          20480: 16777344,
          24576: 553648256,
          28672: 262272,
          32768: 16777216,
          36864: 537133056,
          40960: 536871040,
          45056: 553910400,
          49152: 553910272,
          53248: 0,
          57344: 17039488,
          61440: 553648128,
          2048: 17039488,
          6144: 553648256,
          10240: 128,
          14336: 17039360,
          18432: 262144,
          22528: 537133184,
          26624: 553910272,
          30720: 536870912,
          34816: 537133056,
          38912: 0,
          43008: 553910400,
          47104: 16777344,
          51200: 536871040,
          55296: 553648128,
          59392: 16777216,
          63488: 262272,
          65536: 262144,
          69632: 128,
          73728: 536870912,
          77824: 553648256,
          81920: 16777344,
          86016: 553910272,
          90112: 537133184,
          94208: 16777216,
          98304: 553910400,
          102400: 553648128,
          106496: 17039360,
          110592: 537133056,
          114688: 262272,
          118784: 536871040,
          122880: 0,
          126976: 17039488,
          67584: 553648256,
          71680: 16777216,
          75776: 17039360,
          79872: 537133184,
          83968: 536870912,
          88064: 17039488,
          92160: 128,
          96256: 553910272,
          100352: 262272,
          104448: 553910400,
          108544: 0,
          112640: 553648128,
          116736: 16777344,
          120832: 262144,
          124928: 537133056,
          129024: 536871040
        }, {
          0: 268435464,
          256: 8192,
          512: 270532608,
          768: 270540808,
          1024: 268443648,
          1280: 2097152,
          1536: 2097160,
          1792: 268435456,
          2048: 0,
          2304: 268443656,
          2560: 2105344,
          2816: 8,
          3072: 270532616,
          3328: 2105352,
          3584: 8200,
          3840: 270540800,
          128: 270532608,
          384: 270540808,
          640: 8,
          896: 2097152,
          1152: 2105352,
          1408: 268435464,
          1664: 268443648,
          1920: 8200,
          2176: 2097160,
          2432: 8192,
          2688: 268443656,
          2944: 270532616,
          3200: 0,
          3456: 270540800,
          3712: 2105344,
          3968: 268435456,
          4096: 268443648,
          4352: 270532616,
          4608: 270540808,
          4864: 8200,
          5120: 2097152,
          5376: 268435456,
          5632: 268435464,
          5888: 2105344,
          6144: 2105352,
          6400: 0,
          6656: 8,
          6912: 270532608,
          7168: 8192,
          7424: 268443656,
          7680: 270540800,
          7936: 2097160,
          4224: 8,
          4480: 2105344,
          4736: 2097152,
          4992: 268435464,
          5248: 268443648,
          5504: 8200,
          5760: 270540808,
          6016: 270532608,
          6272: 270540800,
          6528: 270532616,
          6784: 8192,
          7040: 2105352,
          7296: 2097160,
          7552: 0,
          7808: 268435456,
          8064: 268443656
        }, {
          0: 1048576,
          16: 33555457,
          32: 1024,
          48: 1049601,
          64: 34604033,
          80: 0,
          96: 1,
          112: 34603009,
          128: 33555456,
          144: 1048577,
          160: 33554433,
          176: 34604032,
          192: 34603008,
          208: 1025,
          224: 1049600,
          240: 33554432,
          8: 34603009,
          24: 0,
          40: 33555457,
          56: 34604032,
          72: 1048576,
          88: 33554433,
          104: 33554432,
          120: 1025,
          136: 1049601,
          152: 33555456,
          168: 34603008,
          184: 1048577,
          200: 1024,
          216: 34604033,
          232: 1,
          248: 1049600,
          256: 33554432,
          272: 1048576,
          288: 33555457,
          304: 34603009,
          320: 1048577,
          336: 33555456,
          352: 34604032,
          368: 1049601,
          384: 1025,
          400: 34604033,
          416: 1049600,
          432: 1,
          448: 0,
          464: 34603008,
          480: 33554433,
          496: 1024,
          264: 1049600,
          280: 33555457,
          296: 34603009,
          312: 1,
          328: 33554432,
          344: 1048576,
          360: 1025,
          376: 34604032,
          392: 33554433,
          408: 34603008,
          424: 0,
          440: 34604033,
          456: 1049601,
          472: 1024,
          488: 33555456,
          504: 1048577
        }, {
          0: 134219808,
          1: 131072,
          2: 134217728,
          3: 32,
          4: 131104,
          5: 134350880,
          6: 134350848,
          7: 2048,
          8: 134348800,
          9: 134219776,
          10: 133120,
          11: 134348832,
          12: 2080,
          13: 0,
          14: 134217760,
          15: 133152,
          2147483648: 2048,
          2147483649: 134350880,
          2147483650: 134219808,
          2147483651: 134217728,
          2147483652: 134348800,
          2147483653: 133120,
          2147483654: 133152,
          2147483655: 32,
          2147483656: 134217760,
          2147483657: 2080,
          2147483658: 131104,
          2147483659: 134350848,
          2147483660: 0,
          2147483661: 134348832,
          2147483662: 134219776,
          2147483663: 131072,
          16: 133152,
          17: 134350848,
          18: 32,
          19: 2048,
          20: 134219776,
          21: 134217760,
          22: 134348832,
          23: 131072,
          24: 0,
          25: 131104,
          26: 134348800,
          27: 134219808,
          28: 134350880,
          29: 133120,
          30: 2080,
          31: 134217728,
          2147483664: 131072,
          2147483665: 2048,
          2147483666: 134348832,
          2147483667: 133152,
          2147483668: 32,
          2147483669: 134348800,
          2147483670: 134217728,
          2147483671: 134219808,
          2147483672: 134350880,
          2147483673: 134217760,
          2147483674: 134219776,
          2147483675: 0,
          2147483676: 133120,
          2147483677: 2080,
          2147483678: 131104,
          2147483679: 134350848
        }];
        var SBOX_MASK = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function () {
            var e = this._key.words;
            var documentAllMetaTags = [];
            var j = 0;
            for (; j < 56; j++) {
              var h = nonDuplicateIds[j] - 1;
              documentAllMetaTags[j] = e[h >>> 5] >>> 31 - h % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            var nSubKey = 0;
            for (; nSubKey < 16; nSubKey++) {
              var nonDuplicateIds = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              j = 0;
              for (; j < 24; j++) {
                nonDuplicateIds[j / 6 | 0] |= documentAllMetaTags[(a[j] - 1 + bitShift) % 28] << 31 - j % 6;
                nonDuplicateIds[4 + (j / 6 | 0)] |= documentAllMetaTags[28 + (a[j + 24] - 1 + bitShift) % 28] << 31 - j % 6;
              }
              nonDuplicateIds[0] = nonDuplicateIds[0] << 1 | nonDuplicateIds[0] >>> 31;
              j = 1;
              for (; j < 7; j++) {
                nonDuplicateIds[j] = nonDuplicateIds[j] >>> 4 * (j - 1) + 3;
              }
              nonDuplicateIds[7] = nonDuplicateIds[7] << 5 | nonDuplicateIds[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            j = 0;
            for (; j < 16; j++) {
              invSubKeys[j] = subKeys[15 - j];
            }
          },
          encryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function (M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function (M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            var round = 0;
            for (; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              var i = 0;
              for (; i < 8; i++) {
                f = f | conf_shortcuts_icon[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 2,
          ivSize: 2,
          blockSize: 2
        });
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function () {
            var k = this._key.words;
            this._des1 = DES.createEncryptor(WordArray.create(k.slice(0, 2)));
            this._des2 = DES.createEncryptor(WordArray.create(k.slice(2, 4)));
            this._des3 = DES.createEncryptor(WordArray.create(k.slice(4, 6)));
          },
          encryptBlock: function (M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function (M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 6,
          ivSize: 2,
          blockSize: 2
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      }(), CryptoJS.TripleDES);
    },
    "./node_modules/crypto-js/x64-core.js": function (module, metadata, packageSuccess) {
      var C;
      var _ref;
      var Base;
      var WordArray;
      var m;
      var _module$exports;
      module.exports = (_module$exports = packageSuccess("./node_modules/crypto-js/core.js"), _ref = (C = _module$exports).lib, Base = _ref.Base, WordArray = _ref.WordArray, (m = C.x64 = {}).Word = Base.extend({
        init: function (h, l) {
          this.high = h;
          this.low = l;
        }
      }), m.WordArray = Base.extend({
        init: function (a, e) {
          a = this.words = a || [];
          this.sigBytes = null != e ? e : 8 * a.length;
        },
        toX32: function () {
          var c = this.words;
          var t = c.length;
          var self = [];
          var idx = 0;
          for (; idx < t; idx++) {
            var v = c[idx];
            self.push(v.high);
            self.push(v.low);
          }
          return WordArray.create(self, this.sigBytes);
        },
        clone: function () {
          var c = Base.clone.call(this);
          var tickGroups = c.words = this.words.slice(0);
          var readersLength = tickGroups.length;
          var currentTickGroup = 0;
          for (; currentTickGroup < readersLength; currentTickGroup++) {
            tickGroups[currentTickGroup] = tickGroups[currentTickGroup].clone();
          }
          return c;
        }
      }), _module$exports);
    },
    "./node_modules/d/auto-bind.js": function (blob, id, require) {
      var callback;
      var isArray = require("./node_modules/type/value/is.js");
      var isDefined = require("./node_modules/type/value/ensure.js");
      var isObject = require("./node_modules/type/plain-function/ensure.js");
      var a = require("./node_modules/es5-ext/object/copy.js");
      var karmaConfigModule = require("./node_modules/es5-ext/object/normalize-options.js");
      var sphereKnn = require("./node_modules/es5-ext/object/map.js");
      var bind = Function.prototype.bind;
      var f = Object.defineProperty;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      callback = function (type, data, options) {
        var d;
        var self = isDefined(data) && isObject(data.value);
        return delete (d = a(data)).writable, delete d.value, d.get = function () {
          return !options.overwriteDefinition && hasOwnProperty.call(this, type) ? self : (data.value = bind.call(self, options.resolveContext ? options.resolveContext(this) : this), f(this, type, data), this[type]);
        }, d;
      };
      blob.exports = function (value) {
        var options = karmaConfigModule(arguments[1]);
        return isArray(options.resolveContext) && isObject(options.resolveContext), sphereKnn(value, function (message, window) {
          return callback(window, message, options);
        });
      };
    },
    "./node_modules/d/index.js": function (module, exports, __webpack_require__) {
      var isFunction = __webpack_require__("./node_modules/type/value/is.js");
      var isCallable = __webpack_require__("./node_modules/type/plain-function/is.js");
      var assign = __webpack_require__("./node_modules/es5-ext/object/assign/index.js");
      var normalizeOpts = __webpack_require__("./node_modules/es5-ext/object/normalize-options.js");
      var util = __webpack_require__("./node_modules/es5-ext/string/#/contains/index.js");
      (module.exports = function (value, name) {
        var c;
        var s;
        var w;
        var options;
        var desc;
        return arguments.length < 2 || "string" != typeof value ? (options = name, name = value, value = null) : options = arguments[2], isFunction(value) ? (c = util.call(value, "c"), s = util.call(value, "e"), w = util.call(value, "w")) : (c = w = true, s = false), desc = {
          value: name,
          configurable: c,
          enumerable: s,
          writable: w
        }, options ? assign(normalizeOpts(options), desc) : desc;
      }).gs = function (value, get, set) {
        var c;
        var s;
        var options;
        var desc;
        return "string" != typeof value ? (options = set, set = get, get = value, value = null) : options = arguments[3], isFunction(get) ? isCallable(get) ? isFunction(set) ? isCallable(set) || (options = set, set = void 0) : set = void 0 : (options = get, get = set = void 0) : get = void 0, isFunction(value) ? (c = util.call(value, "c"), s = util.call(value, "e")) : (c = true, s = false), desc = {
          get: get,
          set: set,
          configurable: c,
          enumerable: s
        }, options ? assign(normalizeOpts(options), desc) : desc;
      };
    },
    "./node_modules/duplexify/index.js": function (module, id, require) {
      (function (newConnector, process) {
        var stream = require("./node_modules/readable-stream/readable-browser.js");
        var eos = require("./node_modules/end-of-stream/index.js");
        var inherits = require("./node_modules/inherits/inherits_browser.js");
        var $ = require("./node_modules/stream-shift/index.js");
        var item = newConnector.from && newConnector.from !== Uint8Array.from ? newConnector.from([0]) : new newConnector([0]);
        var callback = function (self, fn) {
          if (self._corked) {
            self.once("uncork", fn);
          } else {
            fn();
          }
        };
        var done = function (res, object) {
          return function (origErr) {
            if (origErr) {
              (function (response, y) {
                if (response._autoDestroy) {
                  response.destroy(y);
                }
              })(res, "premature close" === origErr.message ? null : origErr);
            } else {
              if (object && !res._ended) {
                res.end();
              }
            }
          };
        };
        var Socket = function (value, name, opts) {
          if (!(this instanceof Socket)) {
            return new Socket(value, name, opts);
          }
          stream.Duplex.call(this, opts);
          this._writable = null;
          this._readable = null;
          this._readable2 = null;
          this._autoDestroy = !opts || false !== opts.autoDestroy;
          this._forwardDestroy = !opts || false !== opts.destroy;
          this._forwardEnd = !opts || false !== opts.end;
          this._corked = 1;
          this._ondrain = null;
          this._drained = false;
          this._forwarding = false;
          this._unwrite = null;
          this._unread = null;
          this._ended = false;
          this.destroyed = false;
          if (value) {
            this.setWritable(value);
          }
          if (name) {
            this.setReadable(name);
          }
        };
        inherits(Socket, stream.Duplex);
        Socket.obj = function (id, type, opts) {
          return opts || (opts = {}), opts.objectMode = true, opts.highWaterMark = 16, new Socket(id, type, opts);
        };
        Socket.prototype.cork = function () {
          if (1 == ++this._corked) {
            this.emit("cork");
          }
        };
        Socket.prototype.uncork = function () {
          if (this._corked && 0 == --this._corked) {
            this.emit("uncork");
          }
        };
        Socket.prototype.setWritable = function (writable) {
          if (this._unwrite && this._unwrite(), this.destroyed) {
            if (writable && writable.destroy) {
              writable.destroy();
            }
          } else {
            if (null !== writable && false !== writable) {
              var self = this;
              var unend = eos(writable, {
                writable: true,
                readable: false
              }, done(this, this._forwardEnd));
              var ondrain = function () {
                var ondrain = self._ondrain;
                self._ondrain = null;
                if (ondrain) {
                  ondrain();
                }
              };
              if (this._unwrite) {
                process.nextTick(ondrain);
              }
              this._writable = writable;
              this._writable.on("drain", ondrain);
              this._unwrite = function () {
                self._writable.removeListener("drain", ondrain);
                unend();
              };
              this.uncork();
            } else {
              this.end();
            }
          }
        };
        Socket.prototype.setReadable = function (readable) {
          if (this._unread && this._unread(), this.destroyed) {
            if (readable && readable.destroy) {
              readable.destroy();
            }
          } else {
            if (null === readable || false === readable) {
              return this.push(null), void this.resume();
            }
            var i;
            var self = this;
            var unend = eos(readable, {
              writable: false,
              readable: true
            }, done(this));
            var clear = function () {
              self._forward();
            };
            var onend = function () {
              self.push(null);
            };
            this._drained = true;
            this._readable = readable;
            this._readable2 = readable._readableState ? readable : (i = readable, (new stream.Readable({
              objectMode: true,
              highWaterMark: 16
            })).wrap(i));
            this._readable2.on("readable", clear);
            this._readable2.on("end", onend);
            this._unread = function () {
              self._readable2.removeListener("readable", clear);
              self._readable2.removeListener("end", onend);
              unend();
            };
            this._forward();
          }
        };
        Socket.prototype._read = function () {
          this._drained = true;
          this._forward();
        };
        Socket.prototype._forward = function () {
          if (!this._forwarding && this._readable2 && this._drained) {
            var data;
            this._forwarding = true;
            for (; this._drained && null !== (data = $(this._readable2));) {
              if (!this.destroyed) {
                this._drained = this.push(data);
              }
            }
            this._forwarding = false;
          }
        };
        Socket.prototype.destroy = function (err) {
          if (!this.destroyed) {
            this.destroyed = true;
            var self = this;
            process.nextTick(function () {
              self._destroy(err);
            });
          }
        };
        Socket.prototype._destroy = function (err) {
          if (err) {
            var ondrain = this._ondrain;
            this._ondrain = null;
            if (ondrain) {
              ondrain(err);
            } else {
              this.emit("error", err);
            }
          }
          if (this._forwardDestroy) {
            if (this._readable && this._readable.destroy) {
              this._readable.destroy();
            }
            if (this._writable && this._writable.destroy) {
              this._writable.destroy();
            }
          }
          this.emit("close");
        };
        Socket.prototype._write = function (data, options, cb) {
          return this.destroyed ? cb() : this._corked ? callback(this, this._write.bind(this, data, options, cb)) : data === item ? this._finish(cb) : this._writable ? void (false === this._writable.write(data) ? this._ondrain = cb : cb()) : cb();
        };
        Socket.prototype._finish = function (timestamp) {
          var self = this;
          this.emit("preend");
          callback(this, function () {
            var ws;
            var info;
            ws = self._forwardEnd && self._writable;
            info = function () {
              if (false === self._writableState.prefinished) {
                self._writableState.prefinished = true;
              }
              self.emit("prefinish");
              callback(self, timestamp);
            };
            if (ws) {
              if (ws._writableState && ws._writableState.finished) {
                info();
              } else {
                if (ws._writableState) {
                  ws.end(info);
                } else {
                  ws.end();
                  info();
                }
              }
            } else {
              info();
            }
          });
        };
        Socket.prototype.end = function (data, result, event) {
          return "function" == typeof data ? this.end(null, null, data) : "function" == typeof result ? this.end(data, null, result) : (this._ended = true, data && this.write(data), this._writableState.ending || this.write(item), stream.Writable.prototype.end.call(this, event));
        };
        module.exports = Socket;
      }).call(this, require("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer, require("./node_modules/process/browser.js"));
    },
    "./node_modules/end-of-stream/index.js": function (context, module, require) {
      (function (md) {
        var String = require("./node_modules/once/once.js");
        var e = function () {
        };
        var init = function (obj, name, s) {
          if ("function" == typeof name) {
            return init(obj, null, name);
          }
          if (!name) {
            name = {};
          }
          s = String(s || e);
          var stream = obj._writableState;
          var state = obj._readableState;
          var l = name.readable || false !== name.readable && obj.readable;
          var privacyCheckRequired = name.writable || false !== name.writable && obj.writable;
          var c = false;
          var f = function () {
            if (!obj.writable) {
              a();
            }
          };
          var a = function () {
            privacyCheckRequired = false;
            if (!l) {
              s.call(obj);
            }
          };
          var spy3 = function () {
            l = false;
            if (!privacyCheckRequired) {
              s.call(obj);
            }
          };
          var key = function (options) {
            s.call(obj, options ? new Error("exited with error code: " + options) : null);
          };
          var g = function (count) {
            s.call(obj, count);
          };
          var b = function () {
            md.nextTick(end);
          };
          var end = function () {
            if (!c) {
              return (!l || state && state.ended && !state.destroyed) && (!privacyCheckRequired || stream && stream.ended && !stream.destroyed) ? void 0 : s.call(obj, new Error("premature close"));
            }
          };
          var callback = function () {
            obj.req.on("finish", a);
          };
          return !function (obj) {
            return obj.setHeader && "function" == typeof obj.abort;
          }(obj) ? privacyCheckRequired && !stream && (obj.on("end", f), obj.on("close", f)) : (obj.on("complete", a), obj.on("abort", b), obj.req ? callback() : obj.on("request", callback)), function (o) {
            return o.stdio && Array.isArray(o.stdio) && 3 === o.stdio.length;
          }(obj) && obj.on("exit", key), obj.on("end", spy3), obj.on("finish", a), false !== name.error && obj.on("error", g), obj.on("close", b), function () {
            c = true;
            obj.removeListener("complete", a);
            obj.removeListener("abort", b);
            obj.removeListener("request", callback);
            if (obj.req) {
              obj.req.removeListener("finish", a);
            }
            obj.removeListener("end", f);
            obj.removeListener("close", f);
            obj.removeListener("finish", a);
            obj.removeListener("exit", key);
            obj.removeListener("end", spy3);
            obj.removeListener("error", g);
            obj.removeListener("close", b);
          };
        };
        context.exports = init;
      }).call(this, require("./node_modules/process/browser.js"));
    },
    "./node_modules/es5-ext/array/#/clear.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/es5-ext/object/valid-value.js");
      blob.exports = function () {
        return checkedSubscribe(this).length = 0, this;
      };
    },
    "./node_modules/es5-ext/array/#/e-index-of.js": function (blob, id, require) {
      var fetch = require("./node_modules/es5-ext/number/is-nan/index.js");
      var toLength = require("./node_modules/es5-ext/number/to-pos-integer.js");
      var sphereKnn = require("./node_modules/es5-ext/object/valid-value.js");
      var $native = Array.prototype.indexOf;
      var hasOwn = Object.prototype.hasOwnProperty;
      var abs = Math.abs;
      var floor = Math.floor;
      blob.exports = function (value) {
        var i;
        var length;
        var x;
        var url;
        if (!fetch(value)) {
          return $native.apply(this, arguments);
        }
        length = toLength(sphereKnn(this).length);
        x = arguments[1];
        i = x = isNaN(x) ? 0 : x >= 0 ? floor(x) : toLength(this.length) - floor(abs(x));
        for (; i < length; ++i) {
          if (hasOwn.call(this, i) && (url = this[i], fetch(url))) {
            return i;
          }
        }
        return -1;
      };
    },
    "./node_modules/es5-ext/array/from/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/array/from/is-implemented.js")() ? Array.from : seriesStackIndexCallback("./node_modules/es5-ext/array/from/shim.js");
    },
    "./node_modules/es5-ext/array/from/is-implemented.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        var arr;
        var result;
        var query = Array.from;
        return "function" == typeof query && (result = query(arr = ["raz", "dwa"]), Boolean(result && result !== arr && "dwa" === result[1]));
      };
    },
    "./node_modules/es5-ext/array/from/shim.js": function (mixin, doPost, __webpack_require__) {
      var i = __webpack_require__("./node_modules/es6-symbol/index.js").iterator;
      var s = __webpack_require__("./node_modules/es5-ext/function/is-arguments.js");
      var eachTextNode = __webpack_require__("./node_modules/es5-ext/function/is-function.js");
      var toPosInt = __webpack_require__("./node_modules/es5-ext/number/to-pos-integer.js");
      var callable = __webpack_require__("./node_modules/es5-ext/object/valid-callable.js");
      var defined = __webpack_require__("./node_modules/es5-ext/object/valid-value.js");
      var validValue = __webpack_require__("./node_modules/es5-ext/object/is-value.js");
      var jsonToSassVars = __webpack_require__("./node_modules/es5-ext/string/is-string.js");
      var isArray = Array.isArray;
      var call = Function.prototype.call;
      var input = {
        configurable: true,
        enumerable: true,
        writable: true,
        value: null
      };
      var defineProperty = Object.defineProperty;
      mixin.exports = function (obj) {
        var Buffer;
        var i;
        var j;
        var r;
        var l;
        var b;
        var found;
        var result;
        var data;
        var value;
        var mapFn = arguments[1];
        var thisArg = arguments[2];
        if (obj = Object(defined(obj)), validValue(mapFn) && callable(mapFn), this && this !== Array && eachTextNode(this)) {
          Buffer = this;
        } else {
          if (!mapFn) {
            if (s(obj)) {
              return 1 !== (l = obj.length) ? Array.apply(null, obj) : ((r = new Array(1))[0] = obj[0], r);
            }
            if (isArray(obj)) {
              r = new Array(l = obj.length);
              i = 0;
              for (; i < l; ++i) {
                r[i] = obj[i];
              }
              return r;
            }
          }
          r = [];
        }
        if (!isArray(obj)) {
          if (void 0 !== (data = obj[i])) {
            found = callable(data).call(obj);
            if (Buffer) {
              r = new Buffer;
            }
            result = found.next();
            i = 0;
            for (; !result.done;) {
              value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
              if (Buffer) {
                input.value = value;
                defineProperty(r, i, input);
              } else {
                r[i] = value;
              }
              result = found.next();
              ++i;
            }
            l = i;
          } else {
            if (jsonToSassVars(obj)) {
              l = obj.length;
              if (Buffer) {
                r = new Buffer;
              }
              i = 0;
              j = 0;
              for (; i < l; ++i) {
                value = obj[i];
                if (i + 1 < l && (b = value.charCodeAt(0)) >= 55296 && b <= 56319) {
                  value = value + obj[++i];
                }
                value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
                if (Buffer) {
                  input.value = value;
                  defineProperty(r, j, input);
                } else {
                  r[j] = value;
                }
                ++j;
              }
              l = j;
            }
          }
        }
        if (void 0 === l) {
          l = toPosInt(obj.length);
          if (Buffer) {
            r = new Buffer(l);
          }
          i = 0;
          for (; i < l; ++i) {
            value = mapFn ? call.call(mapFn, thisArg, obj[i], i) : obj[i];
            if (Buffer) {
              input.value = value;
              defineProperty(r, i, input);
            } else {
              r[i] = value;
            }
          }
        }
        return Buffer && (input.value = null, r.length = l), r;
      };
    },
    "./node_modules/es5-ext/function/is-arguments.js": function (module, data, urlPartConfig) {
      var objectToString$2 = Object.prototype.toString;
      var referenceerror = objectToString$2.call(function () {
        return arguments;
      }());
      module.exports = function (value) {
        return objectToString$2.call(value) === referenceerror;
      };
    },
    "./node_modules/es5-ext/function/is-function.js": function (module, data, urlPartConfig) {
      var objectToString$2 = Object.prototype.toString;
      var checkedSubscribe = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);
      module.exports = function (value) {
        return "function" == typeof value && checkedSubscribe(objectToString$2.call(value));
      };
    },
    "./node_modules/es5-ext/function/noop.js": function (module, data, urlPartConfig) {
      module.exports = function () {
      };
    },
    "./node_modules/es5-ext/global.js": function (mixin, doPost) {
      mixin.exports = function () {
        if (this) {
          return this;
        }
        Object.defineProperty(Object.prototype, "__global__", {
          get: function () {
            return this;
          },
          configurable: true
        });
        try {
          return __global__;
        } finally {
          delete Object.prototype.__global__;
        }
      }();
    },
    "./node_modules/es5-ext/math/sign/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/math/sign/is-implemented.js")() ? Math.sign : seriesStackIndexCallback("./node_modules/es5-ext/math/sign/shim.js");
    },
    "./node_modules/es5-ext/math/sign/is-implemented.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        var sign = Math.sign;
        return "function" == typeof sign && (1 === sign(10) && -1 === sign(-20));
      };
    },
    "./node_modules/es5-ext/math/sign/shim.js": function (module, data, urlPartConfig) {
      module.exports = function (value) {
        return value = Number(value), isNaN(value) || 0 === value ? value : value > 0 ? 1 : -1;
      };
    },
    "./node_modules/es5-ext/number/is-nan/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/number/is-nan/is-implemented.js")() ? Number.isNaN : seriesStackIndexCallback("./node_modules/es5-ext/number/is-nan/shim.js");
    },
    "./node_modules/es5-ext/number/is-nan/is-implemented.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        var callback = Number.isNaN;
        return "function" == typeof callback && (!callback({}) && callback(NaN) && !callback(34));
      };
    },
    "./node_modules/es5-ext/number/is-nan/shim.js": function (module, data, urlPartConfig) {
      module.exports = function (value) {
        return value != value;
      };
    },
    "./node_modules/es5-ext/number/to-integer.js": function (mixin, doPost, __webpack_require__) {
      var sign = __webpack_require__("./node_modules/es5-ext/math/sign/index.js");
      var abs = Math.abs;
      var floor = Math.floor;
      mixin.exports = function (value) {
        return isNaN(value) ? 0 : 0 !== (value = Number(value)) && isFinite(value) ? sign(value) * floor(abs(value)) : value;
      };
    },
    "./node_modules/es5-ext/number/to-pos-integer.js": function (mixin, doPost, __webpack_require__) {
      var toInteger = __webpack_require__("./node_modules/es5-ext/number/to-integer.js");
      var max = Math.max;
      mixin.exports = function (value) {
        return max(0, toInteger(value));
      };
    },
    "./node_modules/es5-ext/object/_iterate.js": function (blob, id, require) {
      var assign = require("./node_modules/es5-ext/object/valid-callable.js");
      var flag = require("./node_modules/es5-ext/object/valid-value.js");
      var bind = Function.prototype.bind;
      var fn = Function.prototype.call;
      var keys = Object.keys;
      var propertyIsEnumerable = Object.prototype.propertyIsEnumerable;
      blob.exports = function (value, name) {
        return function (obj, val) {
          var props;
          var path = arguments[2];
          var i = arguments[3];
          return obj = Object(flag(obj)), assign(val), props = keys(obj), i && props.sort("function" == typeof i ? bind.call(i, obj) : void 0), "function" != typeof value && (value = props[value]), fn.call(value, props, function (i, blockParams) {
            return propertyIsEnumerable.call(obj, i) ? fn.call(val, path, obj[i], i, obj, blockParams) : name;
          });
        };
      };
    },
    "./node_modules/es5-ext/object/assign/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/object/assign/is-implemented.js")() ? Object.assign : seriesStackIndexCallback("./node_modules/es5-ext/object/assign/shim.js");
    },
    "./node_modules/es5-ext/object/assign/is-implemented.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        var obj;
        var assign = Object.assign;
        return "function" == typeof assign && (assign(obj = {
          foo: "raz"
        }, {
          bar: "dwa"
        }, {
          trzy: "trzy"
        }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
      };
    },
    "./node_modules/es5-ext/object/assign/shim.js": function (blob, id, require) {
      var getThemeConfig = require("./node_modules/es5-ext/object/keys/index.js");
      var flag = require("./node_modules/es5-ext/object/valid-value.js");
      var max = Math.max;
      blob.exports = function (obj, name) {
        var r;
        var i;
        var rule;
        var iHor = max(arguments.length, 2);
        obj = Object(flag(obj));
        rule = function (prop) {
          try {
            obj[prop] = name[prop];
          } catch (G__20648) {
            if (!r) {
              r = G__20648;
            }
          }
        };
        i = 1;
        for (; i < iHor; ++i) {
          name = arguments[i];
          getThemeConfig(name).forEach(rule);
        }
        if (void 0 !== r) {
          throw r;
        }
        return obj;
      };
    },
    "./node_modules/es5-ext/object/copy.js": function (blob, id, require) {
      var join = require("./node_modules/es5-ext/array/from/index.js");
      var $ = require("./node_modules/es5-ext/object/assign/index.js");
      var flag = require("./node_modules/es5-ext/object/valid-value.js");
      blob.exports = function (obj) {
        var object = Object(flag(obj));
        var root = arguments[1];
        var options = Object(arguments[2]);
        if (object !== obj && !root) {
          return object;
        }
        var changed = {};
        return root ? join(root, function (propertyName) {
          if (options.ensure || propertyName in obj) {
            changed[propertyName] = obj[propertyName];
          }
        }) : $(changed, obj), changed;
      };
    },
    "./node_modules/es5-ext/object/create.js": function (conf, match, entity) {
      var x;
      var $;
      var child;
      var descriptor;
      var a = Object.create;
      if (!entity("./node_modules/es5-ext/object/set-prototype-of/is-implemented.js")()) {
        x = entity("./node_modules/es5-ext/object/set-prototype-of/shim.js");
      }
      conf.exports = x ? 1 !== x.level ? a : ($ = {}, child = {}, descriptor = {
        configurable: false,
        enumerable: false,
        writable: true,
        value: void 0
      }, Object.getOwnPropertyNames(Object.prototype).forEach(function (key) {
        child[key] = "__proto__" !== key ? descriptor : {
          configurable: true,
          enumerable: false,
          writable: true,
          value: void 0
        };
      }), Object.defineProperties($, child), Object.defineProperty(x, "nullPolyfill", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: $
      }), function (b, ry) {
        return a(null === b ? $ : b, ry);
      }) : a;
    },
    "./node_modules/es5-ext/object/for-each.js": function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__("./node_modules/es5-ext/object/_iterate.js")("forEach");
    },
    "./node_modules/es5-ext/object/is-object.js": function (mixin, doPost, equalsFn) {
      var isEqual = equalsFn("./node_modules/es5-ext/object/is-value.js");
      var types = {
        function: true,
        object: true
      };
      mixin.exports = function (value) {
        return isEqual(value) && types[typeof value] || false;
      };
    },
    "./node_modules/es5-ext/object/is-value.js": function (blob, options, seriesStackIndexCallback) {
      var current = seriesStackIndexCallback("./node_modules/es5-ext/function/noop.js")();
      blob.exports = function (value) {
        return value !== current && null !== value;
      };
    },
    "./node_modules/es5-ext/object/keys/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/object/keys/is-implemented.js")() ? Object.keys : seriesStackIndexCallback("./node_modules/es5-ext/object/keys/shim.js");
    },
    "./node_modules/es5-ext/object/keys/is-implemented.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        try {
          return Object.keys("primitive"), true;
        } catch (e) {
          return false;
        }
      };
    },
    "./node_modules/es5-ext/object/keys/shim.js": function (blob, id, require) {
      var isNumber = require("./node_modules/es5-ext/object/is-value.js");
      var keys = Object.keys;
      blob.exports = function (value) {
        return keys(isNumber(value) ? Object(value) : value);
      };
    },
    "./node_modules/es5-ext/object/map.js": function (blob, type, choice) {
      var next = choice("./node_modules/es5-ext/object/valid-callable.js");
      var expression = choice("./node_modules/es5-ext/object/for-each.js");
      var util = Function.prototype.call;
      blob.exports = function (value, name) {
        var result = {};
        var deep = arguments[2];
        return next(name), expression(value, function (max, i, options, height) {
          result[i] = util.call(name, deep, max, i, options, height);
        }), result;
      };
    },
    "./node_modules/es5-ext/object/normalize-options.js": function (blob, options, seriesStackIndexCallback) {
      var doRealRequest = seriesStackIndexCallback("./node_modules/es5-ext/object/is-value.js");
      var forEach = Array.prototype.forEach;
      var create = Object.create;
      var fn = function (obj, val) {
        var i;
        for (i in obj) {
          val[i] = obj[i];
        }
      };
      blob.exports = function (value) {
        var result = create(null);
        return forEach.call(arguments, function (value) {
          if (doRealRequest(value)) {
            fn(Object(value), result);
          }
        }), result;
      };
    },
    "./node_modules/es5-ext/object/primitive-set.js": function (module, data, urlPartConfig) {
      var forEach = Array.prototype.forEach;
      var create = Object.create;
      module.exports = function (value) {
        var result = create(null);
        return forEach.call(arguments, function (discussionIndex) {
          result[discussionIndex] = true;
        }), result;
      };
    },
    "./node_modules/es5-ext/object/set-prototype-of/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/object/set-prototype-of/is-implemented.js")() ? Object.setPrototypeOf : seriesStackIndexCallback("./node_modules/es5-ext/object/set-prototype-of/shim.js");
    },
    "./node_modules/es5-ext/object/set-prototype-of/is-implemented.js": function (module, data, urlPartConfig) {
      var create = Object.create;
      var f = Object.getPrototypeOf;
      var key = {};
      module.exports = function () {
        var a = Object.setPrototypeOf;
        var customCreate = arguments[0] || create;
        return "function" == typeof a && f(a(customCreate(null), key)) === key;
      };
    },
    "./node_modules/es5-ext/object/set-prototype-of/shim.js": function (mixin, doPost, keyGen) {
      var validate;
      var key = keyGen("./node_modules/es5-ext/object/is-object.js");
      var o = keyGen("./node_modules/es5-ext/object/valid-value.js");
      var isPrototypeOf = Object.prototype.isPrototypeOf;
      var defineProperty = Object.defineProperty;
      var input = {
        configurable: true,
        enumerable: false,
        writable: true,
        value: void 0
      };
      validate = function (t, val) {
        if (o(t), null === val || key(val)) {
          return t;
        }
        throw new TypeError("Prototype must be null or an object");
      };
      mixin.exports = function (n) {
        var i;
        var data;
        return n ? (2 === n.level ? n.set ? (data = n.set, i = function (e, n) {
          return data.call(validate(e, n), n), e;
        }) : i = function (obj, name) {
          return validate(obj, name).__proto__ = name, obj;
        } : i = function self(obj, prototype) {
          var str;
          return validate(obj, prototype), (str = isPrototypeOf.call(self.nullPolyfill, obj)) && delete self.nullPolyfill.__proto__, null === prototype && (prototype = self.nullPolyfill), obj.__proto__ = prototype, str && defineProperty(self.nullPolyfill, "__proto__", input), obj;
        }, Object.defineProperty(i, "level", {
          configurable: false,
          enumerable: false,
          writable: false,
          value: n.level
        })) : null;
      }(function () {
        var setTimer;
        var p = Object.create(null);
        var r = {};
        var desc3 = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");
        if (desc3) {
          try {
            (setTimer = desc3.set).call(p, r);
          } catch (e) {
          }
          if (Object.getPrototypeOf(p) === r) {
            return {
              set: setTimer,
              level: 2
            };
          }
        }
        return p.__proto__ = r, Object.getPrototypeOf(p) === r ? {
          level: 2
        } : ((p = {}).__proto__ = r, Object.getPrototypeOf(p) === r && {
          level: 1
        });
      }());
      keyGen("./node_modules/es5-ext/object/create.js");
    },
    "./node_modules/es5-ext/object/valid-callable.js": function (module, data, urlPartConfig) {
      module.exports = function (value) {
        if ("function" != typeof value) {
          throw new TypeError(value + " is not a function");
        }
        return value;
      };
    },
    "./node_modules/es5-ext/object/valid-value.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/es5-ext/object/is-value.js");
      blob.exports = function (value) {
        if (!checkedSubscribe(value)) {
          throw new TypeError("Cannot use null or undefined");
        }
        return value;
      };
    },
    "./node_modules/es5-ext/string/#/contains/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es5-ext/string/#/contains/is-implemented.js")() ? String.prototype.contains : seriesStackIndexCallback("./node_modules/es5-ext/string/#/contains/shim.js");
    },
    "./node_modules/es5-ext/string/#/contains/is-implemented.js": function (module, data, urlPartConfig) {
      var str = "razdwatrzy";
      module.exports = function () {
        return "function" == typeof str.contains && (true === str.contains("dwa") && false === str.contains("foo"));
      };
    },
    "./node_modules/es5-ext/string/#/contains/shim.js": function (module, data, urlPartConfig) {
      var indexOf = String.prototype.indexOf;
      module.exports = function (value) {
        return indexOf.call(this, value, arguments[1]) > -1;
      };
    },
    "./node_modules/es5-ext/string/is-string.js": function (module, data, urlPartConfig) {
      var ts = Object.prototype.toString;
      var number = ts.call("");
      module.exports = function (value) {
        return "string" == typeof value || value && "object" == typeof value && (value instanceof String || ts.call(value) === number) || false;
      };
    },
    "./node_modules/es6-iterator/array.js": function (moduleDef, fn, $) {
      var cache;
      var expect = $("./node_modules/es5-ext/object/set-prototype-of/index.js");
      var i = $("./node_modules/es5-ext/string/#/contains/index.js");
      var d = $("./node_modules/d/index.js");
      var SymbolPolyfill = $("./node_modules/es6-symbol/index.js");
      var message = $("./node_modules/es6-iterator/index.js");
      var defineProperty = Object.defineProperty;
      cache = moduleDef.exports = function (value, name) {
        if (!(this instanceof cache)) {
          throw new TypeError("Constructor requires 'new'");
        }
        message.call(this, value);
        name = name ? i.call(name, "key+value") ? "key+value" : i.call(name, "key") ? "key" : "value" : "value";
        defineProperty(this, "__kind__", d("", name));
      };
      if (expect) {
        expect(cache, message);
      }
      delete cache.prototype.constructor;
      cache.prototype = Object.create(message.prototype, {
        _resolve: d(function (i) {
          return "value" === this.__kind__ ? this.__list__[i] : "key+value" === this.__kind__ ? [i, this.__list__[i]] : i;
        })
      });
      defineProperty(cache.prototype, SymbolPolyfill.toStringTag, d("c", "Array Iterator"));
    },
    "./node_modules/es6-iterator/for-of.js": function (mixin, doPost, __webpack_require__) {
      var isObject = __webpack_require__("./node_modules/es5-ext/function/is-arguments.js");
      var eachTextNode = __webpack_require__("./node_modules/es5-ext/object/valid-callable.js");
      var checkedSubscribe = __webpack_require__("./node_modules/es5-ext/string/is-string.js");
      var friendlyAttrValue = __webpack_require__("./node_modules/es6-iterator/get.js");
      var isArray = Array.isArray;
      var call = Function.prototype.call;
      var k = Array.prototype.some;
      mixin.exports = function (value, name) {
        var type;
        var d;
        var doBreak;
        var result;
        var j;
        var end;
        var key;
        var g;
        var cb = arguments[2];
        if (isArray(value) || isObject(value) ? type = "array" : checkedSubscribe(value) ? type = "string" : value = friendlyAttrValue(value), eachTextNode(name), doBreak = function () {
          result = true;
        }, "array" !== type) {
          if ("string" !== type) {
            d = value.next();
            for (; !d.done;) {
              if (call.call(name, cb, d.value, doBreak), result) {
                return;
              }
              d = value.next();
            }
          } else {
            end = value.length;
            j = 0;
            for (; j < end && (key = value[j], j + 1 < end && (g = key.charCodeAt(0)) >= 55296 && g <= 56319 && (key = key + value[++j]), call.call(name, cb, key, doBreak), !result); ++j) {
            }
          }
        } else {
          k.call(value, function (value) {
            return call.call(name, cb, value, doBreak), result;
          });
        }
      };
    },
    "./node_modules/es6-iterator/get.js": function (mixin, doPost, __webpack_require__) {
      var isDate = __webpack_require__("./node_modules/es5-ext/function/is-arguments.js");
      var isArray = __webpack_require__("./node_modules/es5-ext/string/is-string.js");
      var Date = __webpack_require__("./node_modules/es6-iterator/array.js");
      var Image = __webpack_require__("./node_modules/es6-iterator/string.js");
      var a = __webpack_require__("./node_modules/es6-iterator/valid-iterable.js");
      var iteratorSymbol = __webpack_require__("./node_modules/es6-symbol/index.js").iterator;
      mixin.exports = function (value) {
        return "function" == typeof a(value)[iteratorSymbol] ? value[iteratorSymbol]() : isDate(value) ? new Date(value) : isArray(value) ? new Image(value) : new Date(value);
      };
    },
    "./node_modules/es6-iterator/index.js": function (module, exports, __webpack_require__) {
      var Iterator;
      var clear = __webpack_require__("./node_modules/es5-ext/array/#/clear.js");
      var assign = __webpack_require__("./node_modules/es5-ext/object/assign/index.js");
      var callable = __webpack_require__("./node_modules/es5-ext/object/valid-callable.js");
      var value = __webpack_require__("./node_modules/es5-ext/object/valid-value.js");
      var d = __webpack_require__("./node_modules/d/index.js");
      var autoBind = __webpack_require__("./node_modules/d/auto-bind.js");
      var Symbol = __webpack_require__("./node_modules/es6-symbol/index.js");
      var defineProperty = Object.defineProperty;
      var defineProperties = Object.defineProperties;
      module.exports = Iterator = function (list, context) {
        if (!(this instanceof Iterator)) {
          throw new TypeError("Constructor requires 'new'");
        }
        defineProperties(this, {
          __list__: d("w", value(list)),
          __context__: d("w", context),
          __nextIndex__: d("w", 0)
        });
        if (context) {
          callable(context.on);
          context.on("_add", this._onAdd);
          context.on("_delete", this._onDelete);
          context.on("_clear", this._onClear);
        }
      };
      delete Iterator.prototype.constructor;
      defineProperties(Iterator.prototype, assign({
        _next: d(function () {
          var e;
          if (this.__list__) {
            return this.__redo__ && void 0 !== (e = this.__redo__.shift()) ? e : this.__nextIndex__ < this.__list__.length ? this.__nextIndex__++ : void this._unBind();
          }
        }),
        next: d(function () {
          return this._createResult(this._next());
        }),
        _createResult: d(function (scope) {
          return void 0 === scope ? {
            done: true,
            value: void 0
          } : {
            done: false,
            value: this._resolve(scope)
          };
        }),
        _resolve: d(function (i) {
          return this.__list__[i];
        }),
        _unBind: d(function () {
          this.__list__ = null;
          delete this.__redo__;
          if (this.__context__) {
            this.__context__.off("_add", this._onAdd);
            this.__context__.off("_delete", this._onDelete);
            this.__context__.off("_clear", this._onClear);
            this.__context__ = null;
          }
        }),
        toString: d(function () {
          return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
        })
      }, autoBind({
        _onAdd: d(function (index) {
          if (!(index >= this.__nextIndex__)) {
            ++this.__nextIndex__;
            if (this.__redo__) {
              this.__redo__.forEach(function (redo, i) {
                if (redo >= index) {
                  this.__redo__[i] = ++redo;
                }
              }, this);
              this.__redo__.push(index);
            } else {
              defineProperty(this, "__redo__", d("c", [index]));
            }
          }
        }),
        _onDelete: d(function (index) {
          var i;
          if (!(index >= this.__nextIndex__)) {
            --this.__nextIndex__;
            if (this.__redo__) {
              if (-1 !== (i = this.__redo__.indexOf(index))) {
                this.__redo__.splice(i, 1);
              }
              this.__redo__.forEach(function (redo, i) {
                if (redo > index) {
                  this.__redo__[i] = --redo;
                }
              }, this);
            }
          }
        }),
        _onClear: d(function () {
          if (this.__redo__) {
            clear.call(this.__redo__);
          }
          this.__nextIndex__ = 0;
        })
      })));
      defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
        return this;
      }));
    },
    "./node_modules/es6-iterator/is-iterable.js": function (mixin, doPost, __webpack_require__) {
      var eachTextNode = __webpack_require__("./node_modules/es5-ext/function/is-arguments.js");
      var isSubsetSum = __webpack_require__("./node_modules/es5-ext/object/is-value.js");
      var _includeInThisScope = __webpack_require__("./node_modules/es5-ext/string/is-string.js");
      var iteratorSymbol = __webpack_require__("./node_modules/es6-symbol/index.js").iterator;
      var isArray = Array.isArray;
      mixin.exports = function (value) {
        return !!isSubsetSum(value) && (!!isArray(value) || (!!_includeInThisScope(value) || (!!eachTextNode(value) || "function" == typeof value[iteratorSymbol])));
      };
    },
    "./node_modules/es6-iterator/string.js": function (mixin, doPost, fmt10) {
      var Type;
      var m = fmt10("./node_modules/es5-ext/object/set-prototype-of/index.js");
      var d = fmt10("./node_modules/d/index.js");
      var SymbolPolyfill = fmt10("./node_modules/es6-symbol/index.js");
      var s = fmt10("./node_modules/es6-iterator/index.js");
      var defineProperty = Object.defineProperty;
      Type = mixin.exports = function (value) {
        if (!(this instanceof Type)) {
          throw new TypeError("Constructor requires 'new'");
        }
        value = String(value);
        s.call(this, value);
        defineProperty(this, "__length__", d("", value.length));
      };
      if (m) {
        m(Type, s);
      }
      delete Type.prototype.constructor;
      Type.prototype = Object.create(s.prototype, {
        _next: d(function () {
          if (this.__list__) {
            return this.__nextIndex__ < this.__length__ ? this.__nextIndex__++ : void this._unBind();
          }
        }),
        _resolve: d(function (i) {
          var t;
          var char = this.__list__[i];
          return this.__nextIndex__ === this.__length__ ? char : (t = char.charCodeAt(0)) >= 55296 && t <= 56319 ? char + this.__list__[this.__nextIndex__++] : char;
        })
      });
      defineProperty(Type.prototype, SymbolPolyfill.toStringTag, d("c", "String Iterator"));
    },
    "./node_modules/es6-iterator/valid-iterable.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/es6-iterator/is-iterable.js");
      blob.exports = function (value) {
        if (!checkedSubscribe(value)) {
          throw new TypeError(value + " is not iterable");
        }
        return value;
      };
    },
    "./node_modules/es6-map/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = seriesStackIndexCallback("./node_modules/es6-map/is-implemented.js")() ? Map : seriesStackIndexCallback("./node_modules/es6-map/polyfill.js");
    },
    "./node_modules/es6-map/is-implemented.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        var e;
        var $__6;
        if ("function" != typeof Map) {
          return false;
        }
        try {
          e = new Map([["raz", "one"], ["dwa", "two"], ["trzy", "three"]]);
        } catch (e) {
          return false;
        }
        return "[object Map]" === String(e) && (3 === e.size && ("function" == typeof e.clear && ("function" == typeof e.delete && ("function" == typeof e.entries && ("function" == typeof e.forEach && ("function" == typeof e.get && ("function" == typeof e.has && ("function" == typeof e.keys && ("function" == typeof e.set && ("function" == typeof e.values && (false === ($__6 = e.entries().next()).done && (!!$__6.value && ("raz" === $__6.value[0] && "one" === $__6.value[1])))))))))))));
      };
    },
    "./node_modules/es6-map/is-native-implemented.js": function (module, data, urlPartConfig) {
      module.exports = "undefined" != typeof Map && "[object Map]" === Object.prototype.toString.call(new Map);
    },
    "./node_modules/es6-map/lib/iterator-kinds.js": function (suite, $suite, getFailException) {
      suite.exports = getFailException("./node_modules/es5-ext/object/primitive-set.js")("key", "value", "key+value");
    },
    "./node_modules/es6-map/lib/iterator.js": function (mixin, doPost, __webpack_require__) {
      var constructor;
      var assert = __webpack_require__("./node_modules/es5-ext/object/set-prototype-of/index.js");
      var d = __webpack_require__("./node_modules/d/index.js");
      var parent = __webpack_require__("./node_modules/es6-iterator/index.js");
      var prop = __webpack_require__("./node_modules/es6-symbol/index.js").toStringTag;
      var env = __webpack_require__("./node_modules/es6-map/lib/iterator-kinds.js");
      var f = Object.defineProperties;
      var intersection__3365 = parent.prototype._unBind;
      constructor = mixin.exports = function (value, name) {
        if (!(this instanceof constructor)) {
          return new constructor(value, name);
        }
        parent.call(this, value.__mapKeysData__, value);
        if (!(name && env[name])) {
          name = "key+value";
        }
        f(this, {
          __kind__: d("", name),
          __values__: d("w", value.__mapValuesData__)
        });
      };
      if (assert) {
        assert(constructor, parent);
      }
      constructor.prototype = Object.create(parent.prototype, {
        constructor: d(constructor),
        _resolve: d(function (i) {
          return "value" === this.__kind__ ? this.__values__[i] : "key" === this.__kind__ ? this.__list__[i] : [this.__list__[i], this.__values__[i]];
        }),
        _unBind: d(function () {
          this.__values__ = null;
          intersection__3365.call(this);
        }),
        toString: d(function () {
          return "[object Map Iterator]";
        })
      });
      Object.defineProperty(constructor.prototype, prop, d("c", "Map Iterator"));
    },
    "./node_modules/es6-map/polyfill.js": function (module, exports, require) {
      var Base;
      var intersection__3365 = require("./node_modules/es5-ext/array/#/clear.js");
      var util = require("./node_modules/es5-ext/array/#/e-index-of.js");
      var is = require("./node_modules/es5-ext/object/set-prototype-of/index.js");
      var renderSubNavigationList = require("./node_modules/es5-ext/object/valid-callable.js");
      var push = require("./node_modules/es5-ext/object/valid-value.js");
      var d = require("./node_modules/d/index.js");
      var forIn = require("./node_modules/event-emitter/index.js");
      var Symbol = require("./node_modules/es6-symbol/index.js");
      var isArray = require("./node_modules/es6-iterator/valid-iterable.js");
      var test = require("./node_modules/es6-iterator/for-of.js");
      var Error = require("./node_modules/es6-map/lib/iterator.js");
      var frontEndModuleConfig = require("./node_modules/es6-map/is-native-implemented.js");
      var call = Function.prototype.call;
      var extend = Object.defineProperties;
      var getPrototypeOf = Object.getPrototypeOf;
      module.exports = Base = function () {
        var keys;
        var values;
        var result;
        var value = arguments[0];
        if (!(this instanceof Base)) {
          throw new TypeError("Constructor requires 'new'");
        }
        return result = frontEndModuleConfig && is && Map !== Base ? is(new Map, getPrototypeOf(this)) : this, null != value && isArray(value), extend(result, {
          __mapKeysData__: d("c", keys = []),
          __mapValuesData__: d("c", values = [])
        }), value ? (test(value, function (f) {
          var nodeType = push(f)[0];
          f = f[1];
          if (-1 === util.call(keys, nodeType)) {
            keys.push(nodeType);
            values.push(f);
          }
        }, result), result) : result;
      };
      if (frontEndModuleConfig) {
        if (is) {
          is(Base, Map);
        }
        Base.prototype = Object.create(Map.prototype, {
          constructor: d(Base)
        });
      }
      forIn(extend(Base.prototype, {
        clear: d(function () {
          if (this.__mapKeysData__.length) {
            intersection__3365.call(this.__mapKeysData__);
            intersection__3365.call(this.__mapValuesData__);
            this.emit("_clear");
          }
        }),
        delete: d(function (active) {
          var index = util.call(this.__mapKeysData__, active);
          return -1 !== index && (this.__mapKeysData__.splice(index, 1), this.__mapValuesData__.splice(index, 1), this.emit("_delete", index, active), true);
        }),
        entries: d(function () {
          return new Error(this, "key+value");
        }),
        forEach: d(function (list) {
          var iterator;
          var sKey;
          var cb = arguments[1];
          renderSubNavigationList(list);
          sKey = (iterator = this.entries())._next();
          for (; void 0 !== sKey;) {
            call.call(list, cb, this.__mapValuesData__[sKey], this.__mapKeysData__[sKey], this);
            sKey = iterator._next();
          }
        }),
        get: d(function (step) {
          var index = util.call(this.__mapKeysData__, step);
          if (-1 !== index) {
            return this.__mapValuesData__[index];
          }
        }),
        has: d(function (index) {
          return -1 !== util.call(this.__mapKeysData__, index);
        }),
        keys: d(function () {
          return new Error(this, "key");
        }),
        set: d(function (app, value) {
          var dclt;
          var index = util.call(this.__mapKeysData__, app);
          return -1 === index && (index = this.__mapKeysData__.push(app) - 1, dclt = true), this.__mapValuesData__[index] = value, dclt && this.emit("_add", index, app), this;
        }),
        size: d.gs(function () {
          return this.__mapKeysData__.length;
        }),
        values: d(function () {
          return new Error(this, "value");
        }),
        toString: d(function () {
          return "[object Map]";
        })
      }));
      Object.defineProperty(Base.prototype, Symbol.iterator, d(function () {
        return this.entries();
      }));
      Object.defineProperty(Base.prototype, Symbol.toStringTag, d("c", "Map"));
    },
    "./node_modules/es6-symbol/index.js": function (mixin, doPost, __webpack_require__) {
      mixin.exports = __webpack_require__("./node_modules/es6-symbol/is-implemented.js")() ? __webpack_require__("./node_modules/es5-ext/global.js").Symbol : __webpack_require__("./node_modules/es6-symbol/polyfill.js");
    },
    "./node_modules/es6-symbol/is-implemented.js": function (blob, type, interpret) {
      var root = interpret("./node_modules/es5-ext/global.js");
      var validTypes = {
        object: true,
        symbol: true
      };
      blob.exports = function () {
        var value;
        var Symbol = root.Symbol;
        if ("function" != typeof Symbol) {
          return false;
        }
        value = Symbol("test symbol");
        try {
          String(value);
        } catch (e) {
          return false;
        }
        return !!validTypes[typeof Symbol.iterator] && (!!validTypes[typeof Symbol.toPrimitive] && !!validTypes[typeof Symbol.toStringTag]);
      };
    },
    "./node_modules/es6-symbol/is-symbol.js": function (module, data, urlPartConfig) {
      module.exports = function (value) {
        return !!value && ("symbol" == typeof value || !!value.constructor && ("Symbol" === value.constructor.name && "Symbol" === value[value.constructor.toStringTag]));
      };
    },
    "./node_modules/es6-symbol/lib/private/generate-name.js": function (mixin, doPost, unitToColor) {
      var c = unitToColor("./node_modules/d/index.js");
      var nativeCreate = Object.create;
      var defineProperty = Object.defineProperty;
      var prop = Object.prototype;
      var newConfig = nativeCreate(null);
      mixin.exports = function (value) {
        var key;
        var r;
        var suffix = 0;
        for (; newConfig[value + (suffix || "")];) {
          ++suffix;
        }
        return newConfig[value = value + (suffix || "")] = true, defineProperty(prop, key = "@@" + value, c.gs(null, function (value) {
          if (!r) {
            r = true;
            defineProperty(this, key, c(value));
            r = false;
          }
        })), key;
      };
    },
    "./node_modules/es6-symbol/lib/private/setup/standard-symbols.js": function (mixin, doPost, __webpack_require__) {
      var d = __webpack_require__("./node_modules/d/index.js");
      var NativeSymbol = __webpack_require__("./node_modules/es5-ext/global.js").Symbol;
      mixin.exports = function (value) {
        return Object.defineProperties(value, {
          hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || value("hasInstance")),
          isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || value("isConcatSpreadable")),
          iterator: d("", NativeSymbol && NativeSymbol.iterator || value("iterator")),
          match: d("", NativeSymbol && NativeSymbol.match || value("match")),
          replace: d("", NativeSymbol && NativeSymbol.replace || value("replace")),
          search: d("", NativeSymbol && NativeSymbol.search || value("search")),
          species: d("", NativeSymbol && NativeSymbol.species || value("species")),
          split: d("", NativeSymbol && NativeSymbol.split || value("split")),
          toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || value("toPrimitive")),
          toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || value("toStringTag")),
          unscopables: d("", NativeSymbol && NativeSymbol.unscopables || value("unscopables"))
        });
      };
    },
    "./node_modules/es6-symbol/lib/private/setup/symbol-registry.js": function (mixin, doPost, parseFloat) {
      var d = parseFloat("./node_modules/d/index.js");
      var h = parseFloat("./node_modules/es6-symbol/validate-symbol.js");
      var obj = Object.create(null);
      mixin.exports = function (value) {
        return Object.defineProperties(value, {
          for: d(function (key) {
            return obj[key] ? obj[key] : obj[key] = value(String(key));
          }),
          keyFor: d(function (value) {
            var key;
            for (key in h(value), obj) {
              if (obj[key] === value) {
                return key;
              }
            }
          })
        });
      };
    },
    "./node_modules/es6-symbol/polyfill.js": function (module, id, require) {
      var SymbolPolyfill;
      var HiddenSymbol;
      var err;
      var d = require("./node_modules/d/index.js");
      var color = require("./node_modules/es6-symbol/validate-symbol.js");
      var callback = require("./node_modules/es5-ext/global.js").Symbol;
      var Symbol = require("./node_modules/es6-symbol/lib/private/generate-name.js");
      var whenDOMReady = require("./node_modules/es6-symbol/lib/private/setup/standard-symbols.js");
      var verifyjQuery = require("./node_modules/es6-symbol/lib/private/setup/symbol-registry.js");
      var create = Object.create;
      var defineProperties = Object.defineProperties;
      var defineProperty = Object.defineProperty;
      if ("function" == typeof callback) {
        try {
          String(callback());
          err = true;
        } catch (e) {
        }
      } else {
        callback = null;
      }
      HiddenSymbol = function (description) {
        if (this instanceof HiddenSymbol) {
          throw new TypeError("Symbol is not a constructor");
        }
        return SymbolPolyfill(description);
      };
      module.exports = SymbolPolyfill = function init(description) {
        var result;
        if (this instanceof init) {
          throw new TypeError("Symbol is not a constructor");
        }
        return err ? callback(description) : (result = create(HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(result, {
          __description__: d("", description),
          __name__: d("", Symbol(description))
        }));
      };
      whenDOMReady(SymbolPolyfill);
      verifyjQuery(SymbolPolyfill);
      defineProperties(HiddenSymbol.prototype, {
        constructor: d(SymbolPolyfill),
        toString: d("", function () {
          return this.__name__;
        })
      });
      defineProperties(SymbolPolyfill.prototype, {
        toString: d(function () {
          return "Symbol (" + color(this).__description__ + ")";
        }),
        valueOf: d(function () {
          return color(this);
        })
      });
      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
        var green = color(this);
        return "symbol" == typeof green ? green : green.toString();
      }));
      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol"));
      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));
      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
    },
    "./node_modules/es6-symbol/validate-symbol.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/es6-symbol/is-symbol.js");
      blob.exports = function (value) {
        if (!checkedSubscribe(value)) {
          throw new TypeError(value + " is not a symbol");
        }
        return value;
      };
    },
    "./node_modules/event-emitter/index.js": function (module, exports, require) {
      var on;
      var once;
      var log;
      var clear;
      var Events;
      var socket;
      var res;
      var createSpy = require("./node_modules/d/index.js");
      var cb = require("./node_modules/es5-ext/object/valid-callable.js");
      var _apply = Function.prototype.apply;
      var callback = Function.prototype.call;
      var create = Object.create;
      var defineProperty = Object.defineProperty;
      var fn = Object.defineProperties;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var input = {
        configurable: true,
        enumerable: false,
        writable: true
      };
      once = function (name, fn) {
        var ret;
        var a;
        return cb(fn), a = this, on.call(this, name, ret = function () {
          log.call(a, name, ret);
          _apply.call(fn, this, arguments);
        }), ret.__eeOnceListener__ = fn, this;
      };
      Events = {
        on: on = function (type, listener) {
          var events;
          return cb(listener), hasOwnProperty.call(this, "__ee__") ? events = this.__ee__ : (events = input.value = create(null), defineProperty(this, "__ee__", input), input.value = null), events[type] ? "object" == typeof events[type] ? events[type].push(listener) : events[type] = [events[type], listener] : events[type] = listener, this;
        },
        once: once,
        off: log = function (key, undefined) {
          var attrs;
          var a;
          var pre;
          var i;
          if (cb(undefined), !hasOwnProperty.call(this, "__ee__")) {
            return this;
          }
          if (!(attrs = this.__ee__)[key]) {
            return this;
          }
          if ("object" == typeof (a = attrs[key])) {
            i = 0;
            for (; pre = a[i]; ++i) {
              if (!(pre !== undefined && pre.__eeOnceListener__ !== undefined)) {
                if (2 === a.length) {
                  attrs[key] = a[i ? 0 : 1];
                } else {
                  a.splice(i, 1);
                }
              }
            }
          } else {
            if (!(a !== undefined && a.__eeOnceListener__ !== undefined)) {
              delete attrs[key];
            }
          }
          return this;
        },
        emit: clear = function (className) {
          var i;
          var l;
          var target;
          var obj;
          var args;
          if (hasOwnProperty.call(this, "__ee__") && (obj = this.__ee__[className])) {
            if ("object" == typeof obj) {
              l = arguments.length;
              args = new Array(l - 1);
              i = 1;
              for (; i < l; ++i) {
                args[i - 1] = arguments[i];
              }
              obj = obj.slice();
              i = 0;
              for (; target = obj[i]; ++i) {
                _apply.call(target, this, args);
              }
            } else {
              switch (arguments.length) {
                case 1:
                  callback.call(obj, this);
                  break;
                case 2:
                  callback.call(obj, this, arguments[1]);
                  break;
                case 3:
                  callback.call(obj, this, arguments[1], arguments[2]);
                  break;
                default:
                  l = arguments.length;
                  args = new Array(l - 1);
                  i = 1;
                  for (; i < l; ++i) {
                    args[i - 1] = arguments[i];
                  }
                  _apply.call(obj, this, args);
              }
            }
          }
        }
      };
      socket = {
        on: createSpy(on),
        once: createSpy(once),
        off: createSpy(log),
        emit: createSpy(clear)
      };
      res = fn({}, socket);
      module.exports = exports = function (value) {
        return null == value ? create(res) : fn(Object(value), socket);
      };
      exports.methods = Events;
    },
    "./node_modules/ieee754/index.js": function (erra, bytes) {
      bytes.read = function (value, name, t, n, b) {
        var index;
        var result;
        var body = 8 * b - n - 1;
        var total = (1 << body) - 1;
        var length = total >> 1;
        var output = -7;
        var c = t ? b - 1 : 0;
        var saltLen = t ? -1 : 1;
        var len = value[name + c];
        c = c + saltLen;
        index = len & (1 << -output) - 1;
        len = len >> -output;
        output = output + body;
        for (; output > 0; index = 256 * index + value[name + c], c = c + saltLen, output = output - 8) {
        }
        result = index & (1 << -output) - 1;
        index = index >> -output;
        output = output + n;
        for (; output > 0; result = 256 * result + value[name + c], c = c + saltLen, output = output - 8) {
        }
        if (0 === index) {
          index = 1 - length;
        } else {
          if (index === total) {
            return result ? NaN : 1 / 0 * (len ? -1 : 1);
          }
          result = result + Math.pow(2, n);
          index = index - length;
        }
        return (len ? -1 : 1) * result * Math.pow(2, index - n);
      };
      bytes.write = function (data, x, length, type, c, s) {
        var e;
        var m;
        var k;
        var out = 8 * s - c - 1;
        var eMax = (1 << out) - 1;
        var eBias = eMax >> 1;
        var date = 23 === c ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var offset = type ? 0 : s - 1;
        var i = type ? 1 : -1;
        var dx = x < 0 || 0 === x && 1 / x < 0 ? 1 : 0;
        x = Math.abs(x);
        if (isNaN(x) || x === 1 / 0) {
          m = isNaN(x) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(x) / Math.LN2);
          if (x * (k = Math.pow(2, -e)) < 1) {
            e--;
            k = k * 2;
          }
          if ((x = x + (e + eBias >= 1 ? date / k : date * Math.pow(2, 1 - eBias))) * k >= 2) {
            e++;
            k = k / 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else {
            if (e + eBias >= 1) {
              m = (x * k - 1) * Math.pow(2, c);
              e = e + eBias;
            } else {
              m = x * Math.pow(2, eBias - 1) * Math.pow(2, c);
              e = 0;
            }
          }
        }
        for (; c >= 8; data[length + offset] = 255 & m, offset = offset + i, m = m / 256, c = c - 8) {
        }
        e = e << c | m;
        out = out + c;
        for (; out > 0; data[length + offset] = 255 & e, offset = offset + i, e = e / 256, out = out - 8) {
        }
        data[length + offset - i] |= 128 * dx;
      };
    },
    "./node_modules/inherits/inherits_browser.js": function (mixin, doPost) {
      if ("function" == typeof Object.create) {
        mixin.exports = function (obj, name) {
          if (name) {
            obj.super_ = name;
            obj.prototype = Object.create(name.prototype, {
              constructor: {
                value: obj,
                enumerable: false,
                writable: true,
                configurable: true
              }
            });
          }
        };
      } else {
        mixin.exports = function (obj, name) {
          if (name) {
            obj.super_ = name;
            var f = function () {
            };
            f.prototype = name.prototype;
            obj.prototype = new f;
            obj.prototype.constructor = obj;
          }
        };
      }
    },
    "./node_modules/isarray/index.js": function (mixin, doPost) {
      var fnToStr = {}.toString;
      mixin.exports = Array.isArray || function (value) {
        return "[object Array]" == fnToStr.call(value);
      };
    },
    "./node_modules/jsbn/index.js": function (module, selector, convertToImages) {
      (function () {
        function BigInteger(value, name, b) {
          if (null != value) {
            if ("number" == typeof value) {
              this.fromNumber(value, name, b);
            } else {
              if (null == name && "string" != typeof value) {
                this.fromString(value, 256);
              } else {
                this.fromString(value, name);
              }
            }
          }
        }
        function parseInt() {
          return new BigInteger(null);
        }
        function next(i) {
          return posPattern.charAt(i);
        }
        function $(obj, index) {
          var d = servers[obj.charCodeAt(index)];
          return null == d ? -1 : d;
        }
        function nbv(i) {
          var previous = parseInt();
          return previous.fromInt(i), previous;
        }
        function nbits(x) {
          var t;
          var xOff = 1;
          return 0 != (t = x >>> 16) && (x = t, xOff = xOff + 16), 0 != (t = x >> 8) && (x = t, xOff = xOff + 8), 0 != (t = x >> 4) && (x = t, xOff = xOff + 4), 0 != (t = x >> 2) && (x = t, xOff = xOff + 2), 0 != (t = x >> 1) && (x = t, xOff = xOff + 1), xOff;
        }
        function Node(val) {
          this.m = val;
        }
        function Montgomery(m) {
          this.m = m;
          this.mp = m.invDigit();
          this.mpl = 32767 & this.mp;
          this.mph = this.mp >> 15;
          this.um = (1 << m.DB - 15) - 1;
          this.mt2 = 2 * m.t;
        }
        function t(d, a) {
          return d & a;
        }
        function a(leftDiags, columns) {
          return leftDiags | columns;
        }
        function e(n, t) {
          return n ^ t;
        }
        function array(topic, set) {
          return topic & ~set;
        }
        function Number(n) {
          if (0 == n) {
            return -1;
          }
          var destIndex = 0;
          return 0 == (65535 & n) && (n = n >> 16, destIndex = destIndex + 16), 0 == (255 & n) && (n = n >> 8, destIndex = destIndex + 8), 0 == (15 & n) && (n = n >> 4, destIndex = destIndex + 4), 0 == (3 & n) && (n = n >> 2, destIndex = destIndex + 2), 0 == (1 & n) && ++destIndex, destIndex;
        }
        function fn(x) {
          var cb = 0;
          for (; 0 != x;) {
            x = x & x - 1;
            ++cb;
          }
          return cb;
        }
        function BN() {
        }
        function conversion(value) {
          return value;
        }
        function m(b) {
          this.r2 = parseInt();
          this.q3 = parseInt();
          BigInteger.ONE.dlShiftTo(2 * b.t, this.r2);
          this.mu = this.r2.divide(b);
          this.m = b;
        }
        function write() {
          var e;
          e = (new Date).getTime();
          value[pos++] ^= 255 & e;
          value[pos++] ^= e >> 8 & 255;
          value[pos++] ^= e >> 16 & 255;
          value[pos++] ^= e >> 24 & 255;
          if (pos >= size) {
            pos = pos - size;
          }
        }
        function parse() {
          if (null == anim) {
            write();
            (anim = new Animation).init(value);
            pos = 0;
            for (; pos < value.length; ++pos) {
              value[pos] = 0;
            }
            pos = 0;
          }
          return anim.next();
        }
        function MediumRandomFountain() {
        }
        function Animation() {
          this.i = 0;
          this.j = 0;
          this.S = new Array;
        }
        var dbits;
        var refresh = "undefined" != typeof navigator;
        if (refresh && "Microsoft Internet Explorer" == navigator.appName) {
          BigInteger.prototype.am = function (e, x, text, idx, date, n) {
            var a = 32767 & x;
            var i = x >> 15;
            for (; --n >= 0;) {
              var b = 32767 & this[e];
              var c = this[e++] >> 15;
              var u = i * b + c * a;
              date = ((b = a * b + ((32767 & u) << 15) + text[idx] + (1073741823 & date)) >>> 30) + (u >>> 15) + i * c + (date >>> 30);
              text[idx++] = 1073741823 & b;
            }
            return date;
          };
          dbits = 30;
        } else {
          if (refresh && "Netscape" != navigator.appName) {
            BigInteger.prototype.am = function (result, x, w, i, id, n) {
              for (; --n >= 0;) {
                var value = x * this[result++] + w[i] + id;
                id = Math.floor(value / 67108864);
                w[i++] = 67108863 & value;
              }
              return id;
            };
            dbits = 26;
          } else {
            BigInteger.prototype.am = function (e, x, r, i, v, n) {
              var s = 16383 & x;
              var m20 = x >> 14;
              for (; --n >= 0;) {
                var c = 16383 & this[e];
                var m21 = this[e++] >> 14;
                var d = m20 * c + m21 * s;
                v = ((c = s * c + ((16383 & d) << 14) + r[i] + v) >> 28) + (d >> 14) + m20 * m21;
                r[i++] = 268435455 & c;
              }
              return v;
            };
            dbits = 28;
          }
        }
        BigInteger.prototype.DB = dbits;
        BigInteger.prototype.DM = (1 << dbits) - 1;
        BigInteger.prototype.DV = 1 << dbits;
        BigInteger.prototype.FV = Math.pow(2, 52);
        BigInteger.prototype.F1 = 52 - dbits;
        BigInteger.prototype.F2 = 2 * dbits - 52;
        var i;
        var server;
        var posPattern = "0123456789abcdefghijklmnopqrstuvwxyz";
        var servers = new Array;
        i = "0".charCodeAt(0);
        server = 0;
        for (; server <= 9; ++server) {
          servers[i++] = server;
        }
        i = "a".charCodeAt(0);
        server = 10;
        for (; server < 36; ++server) {
          servers[i++] = server;
        }
        i = "A".charCodeAt(0);
        server = 10;
        for (; server < 36; ++server) {
          servers[i++] = server;
        }
        Node.prototype.convert = function (a) {
          return a.s < 0 || a.compareTo(this.m) >= 0 ? a.mod(this.m) : a;
        };
        Node.prototype.revert = function (res) {
          return res;
        };
        Node.prototype.reduce = function (r) {
          r.divRemTo(this.m, null, r);
        };
        Node.prototype.mulTo = function (x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        };
        Node.prototype.sqrTo = function (x, r) {
          x.squareTo(r);
          this.reduce(r);
        };
        Montgomery.prototype.convert = function (val) {
          var r = parseInt();
          return val.abs().dlShiftTo(this.m.t, r), r.divRemTo(this.m, null, r), val.s < 0 && r.compareTo(BigInteger.ZERO) > 0 && this.m.subTo(r, r), r;
        };
        Montgomery.prototype.revert = function (path) {
          var r = parseInt();
          return path.copyTo(r), this.reduce(r), r;
        };
        Montgomery.prototype.reduce = function (x) {
          for (; x.t <= this.mt2;) {
            x[x.t++] = 0;
          }
          var i = 0;
          for (; i < this.m.t; ++i) {
            var j = 32767 & x[i];
            var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
            x[j = i + this.m.t] += this.m.am(0, u0, x, i, 0, this.m.t);
            for (; x[j] >= x.DV;) {
              x[j] -= x.DV;
              x[++j]++;
            }
          }
          x.clamp();
          x.drShiftTo(this.m.t, x);
          if (x.compareTo(this.m) >= 0) {
            x.subTo(this.m, x);
          }
        };
        Montgomery.prototype.mulTo = function (x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        };
        Montgomery.prototype.sqrTo = function (x, r) {
          x.squareTo(r);
          this.reduce(r);
        };
        BigInteger.prototype.copyTo = function (r) {
          var i = this.t - 1;
          for (; i >= 0; --i) {
            r[i] = this[i];
          }
          r.t = this.t;
          r.s = this.s;
        };
        BigInteger.prototype.fromInt = function (data) {
          this.t = 1;
          this.s = data < 0 ? -1 : 0;
          if (data > 0) {
            this[0] = data;
          } else {
            if (data < -1) {
              this[0] = data + this.DV;
            } else {
              this.t = 0;
            }
          }
        };
        BigInteger.prototype.fromString = function (target, type) {
          var k;
          if (16 == type) {
            k = 4;
          } else {
            if (8 == type) {
              k = 3;
            } else {
              if (256 == type) {
                k = 8;
              } else {
                if (2 == type) {
                  k = 1;
                } else {
                  if (32 == type) {
                    k = 5;
                  } else {
                    if (4 != type) {
                      return void this.fromRadix(target, type);
                    }
                    k = 2;
                  }
                }
              }
            }
          }
          this.t = 0;
          this.s = 0;
          var i = target.length;
          var $next = false;
          var sh = 0;
          for (; --i >= 0;) {
            var x = 8 == k ? 255 & target[i] : $(target, i);
            if (x < 0) {
              if ("-" == target.charAt(i)) {
                $next = true;
              }
            } else {
              $next = false;
              if (0 == sh) {
                this[this.t++] = x;
              } else {
                if (sh + k > this.DB) {
                  this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
                  this[this.t++] = x >> this.DB - sh;
                } else {
                  this[this.t - 1] |= x << sh;
                }
              }
              if ((sh = sh + k) >= this.DB) {
                sh = sh - this.DB;
              }
            }
          }
          if (8 == k && 0 != (128 & target[0])) {
            this.s = -1;
            if (sh > 0) {
              this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
            }
          }
          this.clamp();
          if ($next) {
            BigInteger.ZERO.subTo(this, this);
          }
        };
        BigInteger.prototype.clamp = function () {
          var c = this.s & this.DM;
          for (; this.t > 0 && this[this.t - 1] == c;) {
            --this.t;
          }
        };
        BigInteger.prototype.dlShiftTo = function (n, r) {
          var i;
          i = this.t - 1;
          for (; i >= 0; --i) {
            r[i + n] = this[i];
          }
          i = n - 1;
          for (; i >= 0; --i) {
            r[i] = 0;
          }
          r.t = this.t + n;
          r.s = this.s;
        };
        BigInteger.prototype.drShiftTo = function (n, r) {
          var i = n;
          for (; i < this.t; ++i) {
            r[i - n] = this[i];
          }
          r.t = Math.max(this.t - n, 0);
          r.s = this.s;
        };
        BigInteger.prototype.lShiftTo = function (n, r) {
          var i;
          var bs = n % this.DB;
          var cbs = this.DB - bs;
          var bm = (1 << cbs) - 1;
          var ds = Math.floor(n / this.DB);
          var c = this.s << bs & this.DM;
          i = this.t - 1;
          for (; i >= 0; --i) {
            r[i + ds + 1] = this[i] >> cbs | c;
            c = (this[i] & bm) << bs;
          }
          i = ds - 1;
          for (; i >= 0; --i) {
            r[i] = 0;
          }
          r[ds] = c;
          r.t = this.t + ds + 1;
          r.s = this.s;
          r.clamp();
        };
        BigInteger.prototype.rShiftTo = function (n, r) {
          r.s = this.s;
          var ds = Math.floor(n / this.DB);
          if (ds >= this.t) {
            r.t = 0;
          } else {
            var bs = n % this.DB;
            var cbs = this.DB - bs;
            var bm = (1 << bs) - 1;
            r[0] = this[ds] >> bs;
            var i = ds + 1;
            for (; i < this.t; ++i) {
              r[i - ds - 1] |= (this[i] & bm) << cbs;
              r[i - ds] = this[i] >> bs;
            }
            if (bs > 0) {
              r[this.t - ds - 1] |= (this.s & bm) << cbs;
            }
            r.t = this.t - ds;
            r.clamp();
          }
        };
        BigInteger.prototype.subTo = function (a, r) {
          var i = 0;
          var c = 0;
          var m = Math.min(a.t, this.t);
          for (; i < m;) {
            c = c + (this[i] - a[i]);
            r[i++] = c & this.DM;
            c = c >> this.DB;
          }
          if (a.t < this.t) {
            c = c - a.s;
            for (; i < this.t;) {
              c = c + this[i];
              r[i++] = c & this.DM;
              c = c >> this.DB;
            }
            c = c + this.s;
          } else {
            c = c + this.s;
            for (; i < a.t;) {
              c = c - a[i];
              r[i++] = c & this.DM;
              c = c >> this.DB;
            }
            c = c - a.s;
          }
          r.s = c < 0 ? -1 : 0;
          if (c < -1) {
            r[i++] = this.DV + c;
          } else {
            if (c > 0) {
              r[i++] = c;
            }
          }
          r.t = i;
          r.clamp();
        };
        BigInteger.prototype.multiplyTo = function (a, r) {
          var x = this.abs();
          var y = a.abs();
          var i = x.t;
          r.t = i + y.t;
          for (; --i >= 0;) {
            r[i] = 0;
          }
          i = 0;
          for (; i < y.t; ++i) {
            r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
          }
          r.s = 0;
          r.clamp();
          if (this.s != a.s) {
            BigInteger.ZERO.subTo(r, r);
          }
        };
        BigInteger.prototype.squareTo = function (r) {
          var x = this.abs();
          var i = r.t = 2 * x.t;
          for (; --i >= 0;) {
            r[i] = 0;
          }
          i = 0;
          for (; i < x.t - 1; ++i) {
            var c = x.am(i, x[i], r, 2 * i, 0, 1);
            if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
              r[i + x.t] -= x.DV;
              r[i + x.t + 1] = 1;
            }
          }
          if (r.t > 0) {
            r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
          }
          r.s = 0;
          r.clamp();
        };
        BigInteger.prototype.divRemTo = function (val, q, r) {
          var pm = val.abs();
          if (!(pm.t <= 0)) {
            var pt = this.abs();
            if (pt.t < pm.t) {
              return null != q && q.fromInt(0), void (null != r && this.copyTo(r));
            }
            if (null == r) {
              r = parseInt();
            }
            var y = parseInt();
            var s = this.s;
            var name = val.s;
            var nsh = this.DB - nbits(pm[pm.t - 1]);
            if (nsh > 0) {
              pm.lShiftTo(nsh, y);
              pt.lShiftTo(nsh, r);
            } else {
              pm.copyTo(y);
              pt.copyTo(r);
            }
            var ys = y.t;
            var y0 = y[ys - 1];
            if (0 != y0) {
              var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
              var d1 = this.FV / yt;
              var d2 = (1 << this.F1) / yt;
              var e = 1 << this.F2;
              var i = r.t;
              var j = i - ys;
              var t = null == q ? parseInt() : q;
              y.dlShiftTo(j, t);
              if (r.compareTo(t) >= 0) {
                r[r.t++] = 1;
                r.subTo(t, r);
              }
              BigInteger.ONE.dlShiftTo(ys, t);
              t.subTo(y, y);
              for (; y.t < ys;) {
                y[y.t++] = 0;
              }
              for (; --j >= 0;) {
                var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
                if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
                  y.dlShiftTo(j, t);
                  r.subTo(t, r);
                  for (; r[i] < --qd;) {
                    r.subTo(t, r);
                  }
                }
              }
              if (null != q) {
                r.drShiftTo(ys, q);
                if (s != name) {
                  BigInteger.ZERO.subTo(q, q);
                }
              }
              r.t = ys;
              r.clamp();
              if (nsh > 0) {
                r.rShiftTo(nsh, r);
              }
              if (s < 0) {
                BigInteger.ZERO.subTo(r, r);
              }
            }
          }
        };
        BigInteger.prototype.invDigit = function () {
          if (this.t < 1) {
            return 0;
          }
          var x = this[0];
          if (0 == (1 & x)) {
            return 0;
          }
          var y = 3 & x;
          return (y = (y = (y = (y = y * (2 - (15 & x) * y) & 15) * (2 - (255 & x) * y) & 255) * (2 - ((65535 & x) * y & 65535)) & 65535) * (2 - x * y % this.DV) % this.DV) > 0 ? this.DV - y : -y;
        };
        BigInteger.prototype.isEven = function () {
          return 0 == (this.t > 0 ? 1 & this[0] : this.s);
        };
        BigInteger.prototype.exp = function (value, z) {
          if (value > 4294967295 || value < 1) {
            return BigInteger.ONE;
          }
          var r = parseInt();
          var r2 = parseInt();
          var x = z.convert(this);
          var position = nbits(value) - 1;
          x.copyTo(r);
          for (; --position >= 0;) {
            if (z.sqrTo(r, r2), (value & 1 << position) > 0) {
              z.mulTo(r2, x, r);
            } else {
              var t = r;
              r = r2;
              r2 = t;
            }
          }
          return z.revert(r);
        };
        BigInteger.prototype.toString = function (format) {
          if (this.s < 0) {
            return "-" + this.negate().toString(format);
          }
          var k;
          if (16 == format) {
            k = 4;
          } else {
            if (8 == format) {
              k = 3;
            } else {
              if (2 == format) {
                k = 1;
              } else {
                if (32 == format) {
                  k = 5;
                } else {
                  if (4 != format) {
                    return this.toRadix(format);
                  }
                  k = 2;
                }
              }
            }
          }
          var d;
          var km = (1 << k) - 1;
          var java = false;
          var b = "";
          var i = this.t;
          var p = this.DB - i * this.DB % k;
          if (i-- > 0) {
            if (p < this.DB && (d = this[i] >> p) > 0) {
              java = true;
              b = next(d);
            }
            for (; i >= 0;) {
              if (p < k) {
                d = (this[i] & (1 << p) - 1) << k - p;
                d = d | this[--i] >> (p = p + (this.DB - k));
              } else {
                d = this[i] >> (p = p - k) & km;
                if (p <= 0) {
                  p = p + this.DB;
                  --i;
                }
              }
              if (d > 0) {
                java = true;
              }
              if (java) {
                b = b + next(d);
              }
            }
          }
          return java ? b : "0";
        };
        BigInteger.prototype.negate = function () {
          var r = parseInt();
          return BigInteger.ZERO.subTo(this, r), r;
        };
        BigInteger.prototype.abs = function () {
          return this.s < 0 ? this.negate() : this;
        };
        BigInteger.prototype.compareTo = function (a) {
          var r = this.s - a.s;
          if (0 != r) {
            return r;
          }
          var i = this.t;
          if (0 != (r = i - a.t)) {
            return this.s < 0 ? -r : r;
          }
          for (; --i >= 0;) {
            if (0 != (r = this[i] - a[i])) {
              return r;
            }
          }
          return 0;
        };
        BigInteger.prototype.bitLength = function () {
          return this.t <= 0 ? 0 : this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
        };
        BigInteger.prototype.mod = function (a) {
          var r = parseInt();
          return this.abs().divRemTo(a, null, r), this.s < 0 && r.compareTo(BigInteger.ZERO) > 0 && a.subTo(r, r), r;
        };
        BigInteger.prototype.modPowInt = function (position, x) {
          var validatedPos;
          return validatedPos = position < 256 || x.isEven() ? new Node(x) : new Montgomery(x), this.exp(position, validatedPos);
        };
        BigInteger.ZERO = nbv(0);
        BigInteger.ONE = nbv(1);
        BN.prototype.convert = conversion;
        BN.prototype.revert = conversion;
        BN.prototype.mulTo = function (x, y, r) {
          x.multiplyTo(y, r);
        };
        BN.prototype.sqrTo = function (x, r) {
          x.squareTo(r);
        };
        m.prototype.convert = function (x) {
          if (x.s < 0 || x.t > 2 * this.m.t) {
            return x.mod(this.m);
          }
          if (x.compareTo(this.m) < 0) {
            return x;
          }
          var r = parseInt();
          return x.copyTo(r), this.reduce(r), r;
        };
        m.prototype.revert = function (res) {
          return res;
        };
        m.prototype.reduce = function (x) {
          x.drShiftTo(this.m.t - 1, this.r2);
          if (x.t > this.m.t + 1) {
            x.t = this.m.t + 1;
            x.clamp();
          }
          this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
          this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
          for (; x.compareTo(this.r2) < 0;) {
            x.dAddOffset(1, this.m.t + 1);
          }
          x.subTo(this.r2, x);
          for (; x.compareTo(this.m) >= 0;) {
            x.subTo(this.m, x);
          }
        };
        m.prototype.mulTo = function (x, y, r) {
          x.multiplyTo(y, r);
          this.reduce(r);
        };
        m.prototype.sqrTo = function (x, r) {
          x.squareTo(r);
          this.reduce(r);
        };
        var anim;
        var value;
        var pos;
        var b = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
          569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
        var end = (1 << 26) / b[b.length - 1];
        if (BigInteger.prototype.chunkSize = function (value) {
          return Math.floor(Math.LN2 * this.DB / Math.log(value));
        }, BigInteger.prototype.toRadix = function (value) {
          if (null == value && (value = 10), 0 == this.signum() || value < 2 || value > 36) {
            return "0";
          }
          var b = this.chunkSize(value);
          var i = Math.pow(value, b);
          var a = nbv(i);
          var r = parseInt();
          var n = parseInt();
          var expression = "";
          this.divRemTo(a, r, n);
          for (; r.signum() > 0;) {
            expression = (i + n.intValue()).toString(value).substr(1) + expression;
            r.divRemTo(a, r, n);
          }
          return n.intValue().toString(value) + expression;
        }, BigInteger.prototype.fromRadix = function (source, k) {
          this.fromInt(0);
          if (null == k) {
            k = 10;
          }
          var n = this.chunkSize(k);
          var o = Math.pow(k, n);
          var count = false;
          var i = 0;
          var t = 0;
          var start = 0;
          for (; start < source.length; ++start) {
            var l = $(source, start);
            if (l < 0) {
              if ("-" == source.charAt(start) && 0 == this.signum()) {
                count = true;
              }
            } else {
              t = k * t + l;
              if (++i >= n) {
                this.dMultiply(o);
                this.dAddOffset(t, 0);
                i = 0;
                t = 0;
              }
            }
          }
          if (i > 0) {
            this.dMultiply(Math.pow(k, i));
            this.dAddOffset(t, 0);
          }
          if (count) {
            BigInteger.ZERO.subTo(this, this);
          }
        }, BigInteger.prototype.fromNumber = function (value, n, val) {
          if ("number" == typeof n) {
            if (value < 2) {
              this.fromInt(1);
            } else {
              this.fromNumber(value, val);
              if (!this.testBit(value - 1)) {
                this.bitwiseTo(BigInteger.ONE.shiftLeft(value - 1), a, this);
              }
              if (this.isEven()) {
                this.dAddOffset(1, 0);
              }
              for (; !this.isProbablePrime(n);) {
                this.dAddOffset(2, 0);
                if (this.bitLength() > value) {
                  this.subTo(BigInteger.ONE.shiftLeft(value - 1), this);
                }
              }
            }
          } else {
            var a = new Array;
            var i = 7 & value;
            a.length = 1 + (value >> 3);
            n.nextBytes(a);
            if (i > 0) {
              a[0] &= (1 << i) - 1;
            } else {
              a[0] = 0;
            }
            this.fromString(a, 256);
          }
        }, BigInteger.prototype.bitwiseTo = function (a, f, r) {
          var i;
          var item;
          var m = Math.min(a.t, this.t);
          i = 0;
          for (; i < m; ++i) {
            r[i] = f(this[i], a[i]);
          }
          if (a.t < this.t) {
            item = a.s & this.DM;
            i = m;
            for (; i < this.t; ++i) {
              r[i] = f(this[i], item);
            }
            r.t = this.t;
          } else {
            item = this.s & this.DM;
            i = m;
            for (; i < a.t; ++i) {
              r[i] = f(item, a[i]);
            }
            r.t = a.t;
          }
          r.s = f(this.s, a.s);
          r.clamp();
        }, BigInteger.prototype.changeBit = function (t, a) {
          var n = BigInteger.ONE.shiftLeft(t);
          return this.bitwiseTo(n, a, n), n;
        }, BigInteger.prototype.addTo = function (a, r) {
          var i = 0;
          var c = 0;
          var m = Math.min(a.t, this.t);
          for (; i < m;) {
            c = c + (this[i] + a[i]);
            r[i++] = c & this.DM;
            c = c >> this.DB;
          }
          if (a.t < this.t) {
            c = c + a.s;
            for (; i < this.t;) {
              c = c + this[i];
              r[i++] = c & this.DM;
              c = c >> this.DB;
            }
            c = c + this.s;
          } else {
            c = c + this.s;
            for (; i < a.t;) {
              c = c + a[i];
              r[i++] = c & this.DM;
              c = c >> this.DB;
            }
            c = c + a.s;
          }
          r.s = c < 0 ? -1 : 0;
          if (c > 0) {
            r[i++] = c;
          } else {
            if (c < -1) {
              r[i++] = this.DV + c;
            }
          }
          r.t = i;
          r.clamp();
        }, BigInteger.prototype.dMultiply = function (type) {
          this[this.t] = this.am(0, type - 1, this, 0, 0, this.t);
          ++this.t;
          this.clamp();
        }, BigInteger.prototype.dAddOffset = function (b, i) {
          if (0 != b) {
            for (; this.t <= i;) {
              this[this.t++] = 0;
            }
            this[i] += b;
            for (; this[i] >= this.DV;) {
              this[i] -= this.DV;
              if (++i >= this.t) {
                this[this.t++] = 0;
              }
              ++this[i];
            }
          }
        }, BigInteger.prototype.multiplyLowerTo = function (word, c, r) {
          var t;
          var i = Math.min(this.t + word.t, c);
          r.s = 0;
          r.t = i;
          for (; i > 0;) {
            r[--i] = 0;
          }
          t = r.t - this.t;
          for (; i < t; ++i) {
            r[i + this.t] = this.am(0, word[i], r, i, 0, this.t);
          }
          t = Math.min(word.t, c);
          for (; i < t; ++i) {
            this.am(0, word[i], r, i, 0, c - i);
          }
          r.clamp();
        }, BigInteger.prototype.multiplyUpperTo = function (order, n, r) {
          --n;
          var i = r.t = this.t + order.t - n;
          r.s = 0;
          for (; --i >= 0;) {
            r[i] = 0;
          }
          i = Math.max(n - this.t, 0);
          for (; i < order.t; ++i) {
            r[this.t + i - n] = this.am(n - i, order[i], r, 0, 0, this.t + i - n);
          }
          r.clamp();
          r.drShiftTo(1, r);
        }, BigInteger.prototype.modInt = function (n) {
          if (n <= 0) {
            return 0;
          }
          var idx = this.DV % n;
          var step = this.s < 0 ? n - 1 : 0;
          if (this.t > 0) {
            if (0 == idx) {
              step = this[0] % n;
            } else {
              var i = this.t - 1;
              for (; i >= 0; --i) {
                step = (idx * step + this[i]) % n;
              }
            }
          }
          return step;
        }, BigInteger.prototype.millerRabin = function (end) {
          var diff = this.subtract(BigInteger.ONE);
          var a = diff.getLowestSetBit();
          if (a <= 0) {
            return false;
          }
          var x = diff.shiftRight(a);
          if ((end = end + 1 >> 1) > b.length) {
            end = b.length;
          }
          var r = parseInt();
          var start2 = 0;
          for (; start2 < end; ++start2) {
            r.fromInt(b[Math.floor(Math.random() * b.length)]);
            var n = r.modPow(x, this);
            if (0 != n.compareTo(BigInteger.ONE) && 0 != n.compareTo(diff)) {
              var l = 1;
              for (; l++ < a && 0 != n.compareTo(diff);) {
                if (0 == (n = n.modPowInt(2, this)).compareTo(BigInteger.ONE)) {
                  return false;
                }
              }
              if (0 != n.compareTo(diff)) {
                return false;
              }
            }
          }
          return true;
        }, BigInteger.prototype.clone = function () {
          var r = parseInt();
          return this.copyTo(r), r;
        }, BigInteger.prototype.intValue = function () {
          if (this.s < 0) {
            if (1 == this.t) {
              return this[0] - this.DV;
            }
            if (0 == this.t) {
              return -1;
            }
          } else {
            if (1 == this.t) {
              return this[0];
            }
            if (0 == this.t) {
              return 0;
            }
          }
          return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
        }, BigInteger.prototype.byteValue = function () {
          return 0 == this.t ? this.s : this[0] << 24 >> 24;
        }, BigInteger.prototype.shortValue = function () {
          return 0 == this.t ? this.s : this[0] << 16 >> 16;
        }, BigInteger.prototype.signum = function () {
          return this.s < 0 ? -1 : this.t <= 0 || 1 == this.t && this[0] <= 0 ? 0 : 1;
        }, BigInteger.prototype.toByteArray = function () {
          var i = this.t;
          var data = new Array;
          data[0] = this.s;
          var res;
          var p = this.DB - i * this.DB % 8;
          var errorCount = 0;
          if (i-- > 0) {
            if (p < this.DB && (res = this[i] >> p) != (this.s & this.DM) >> p) {
              data[errorCount++] = res | this.s << this.DB - p;
            }
            for (; i >= 0;) {
              if (p < 8) {
                res = (this[i] & (1 << p) - 1) << 8 - p;
                res = res | this[--i] >> (p = p + (this.DB - 8));
              } else {
                res = this[i] >> (p = p - 8) & 255;
                if (p <= 0) {
                  p = p + this.DB;
                  --i;
                }
              }
              if (0 != (128 & res)) {
                res = res | -256;
              }
              if (0 == errorCount && (128 & this.s) != (128 & res)) {
                ++errorCount;
              }
              if (errorCount > 0 || res != this.s) {
                data[errorCount++] = res;
              }
            }
          }
          return data;
        }, BigInteger.prototype.equals = function (other) {
          return 0 == this.compareTo(other);
        }, BigInteger.prototype.min = function (b) {
          return this.compareTo(b) < 0 ? this : b;
        }, BigInteger.prototype.max = function (a) {
          return this.compareTo(a) > 0 ? this : a;
        }, BigInteger.prototype.and = function (b) {
          var n = parseInt();
          return this.bitwiseTo(b, t, n), n;
        }, BigInteger.prototype.or = function (b) {
          var n = parseInt();
          return this.bitwiseTo(b, a, n), n;
        }, BigInteger.prototype.xor = function (x) {
          var t = parseInt();
          return this.bitwiseTo(x, e, t), t;
        }, BigInteger.prototype.andNot = function (f) {
          var result = parseInt();
          return this.bitwiseTo(f, array, result), result;
        }, BigInteger.prototype.not = function () {
          var r = parseInt();
          var i = 0;
          for (; i < this.t; ++i) {
            r[i] = this.DM & ~this[i];
          }
          return r.t = this.t, r.s = ~this.s, r;
        }, BigInteger.prototype.shiftLeft = function (n) {
          var rules = parseInt();
          return n < 0 ? this.rShiftTo(-n, rules) : this.lShiftTo(n, rules), rules;
        }, BigInteger.prototype.shiftRight = function (num) {
          var radiusInner = parseInt();
          return num < 0 ? this.lShiftTo(-num, radiusInner) : this.rShiftTo(num, radiusInner), radiusInner;
        }, BigInteger.prototype.getLowestSetBit = function () {
          var i = 0;
          for (; i < this.t; ++i) {
            if (0 != this[i]) {
              return i * this.DB + Number(this[i]);
            }
          }
          return this.s < 0 ? this.t * this.DB : -1;
        }, BigInteger.prototype.bitCount = function () {
          var ret = 0;
          var c = this.s & this.DM;
          var i = 0;
          for (; i < this.t; ++i) {
            ret = ret + fn(this[i] ^ c);
          }
          return ret;
        }, BigInteger.prototype.testBit = function (n) {
          var ds = Math.floor(n / this.DB);
          return ds >= this.t ? 0 != this.s : 0 != (this[ds] & 1 << n % this.DB);
        }, BigInteger.prototype.setBit = function (n) {
          return this.changeBit(n, a);
        }, BigInteger.prototype.clearBit = function (n) {
          return this.changeBit(n, array);
        }, BigInteger.prototype.flipBit = function (tResult) {
          return this.changeBit(tResult, e);
        }, BigInteger.prototype.add = function (a) {
          var r = parseInt();
          return this.addTo(a, r), r;
        }, BigInteger.prototype.subtract = function (other) {
          var r = parseInt();
          return this.subTo(other, r), r;
        }, BigInteger.prototype.multiply = function (other) {
          var r = parseInt();
          return this.multiplyTo(other, r), r;
        }, BigInteger.prototype.divide = function (other) {
          var r = parseInt();
          return this.divRemTo(other, r, null), r;
        }, BigInteger.prototype.remainder = function (x) {
          var a = parseInt();
          return this.divRemTo(x, null, a), a;
        }, BigInteger.prototype.divideAndRemainder = function (a) {
          var r = parseInt();
          var radius = parseInt();
          return this.divRemTo(a, r, radius), new Array(r, radius);
        }, BigInteger.prototype.modPow = function (e, a) {
          var k;
          var z;
          var i = e.bitLength();
          var r = nbv(1);
          if (i <= 0) {
            return r;
          }
          k = i < 18 ? 1 : i < 48 ? 3 : i < 144 ? 4 : i < 768 ? 5 : 6;
          z = i < 8 ? new Node(a) : a.isEven() ? new m(a) : new Montgomery(a);
          var g = new Array;
          var n = 3;
          var k1 = k - 1;
          var km = (1 << k) - 1;
          if (g[1] = z.convert(this), k > 1) {
            var r2 = parseInt();
            z.sqrTo(g[1], r2);
            for (; n <= km;) {
              g[n] = parseInt();
              z.mulTo(r2, g[n - 2], g[n]);
              n = n + 2;
            }
          }
          var w;
          var radius;
          var j = e.t - 1;
          var v = true;
          var r2 = parseInt();
          i = nbits(e[j]) - 1;
          for (; j >= 0;) {
            if (i >= k1) {
              w = e[j] >> i - k1 & km;
            } else {
              w = (e[j] & (1 << i + 1) - 1) << k1 - i;
              if (j > 0) {
                w = w | e[j - 1] >> this.DB + i - k1;
              }
            }
            n = k;
            for (; 0 == (1 & w);) {
              w = w >> 1;
              --n;
            }
            if ((i = i - n) < 0 && (i = i + this.DB, --j), v) {
              g[w].copyTo(r);
              v = false;
            } else {
              for (; n > 1;) {
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n = n - 2;
              }
              if (n > 0) {
                z.sqrTo(r, r2);
              } else {
                radius = r;
                r = r2;
                r2 = radius;
              }
              z.mulTo(r2, g[w], r);
            }
            for (; j >= 0 && 0 == (e[j] & 1 << i);) {
              z.sqrTo(r, r2);
              radius = r;
              r = r2;
              r2 = radius;
              if (--i < 0) {
                i = this.DB - 1;
                --j;
              }
            }
          }
          return z.revert(r);
        }, BigInteger.prototype.modInverse = function (b) {
          var parent = b.isEven();
          if (this.isEven() && parent || 0 == b.signum()) {
            return BigInteger.ZERO;
          }
          var d = b.clone();
          var q = this.clone();
          var x = nbv(1);
          var t = nbv(0);
          var a = nbv(0);
          var r = nbv(1);
          for (; 0 != d.signum();) {
            for (; d.isEven();) {
              d.rShiftTo(1, d);
              if (parent) {
                if (!(x.isEven() && t.isEven())) {
                  x.addTo(this, x);
                  t.subTo(b, t);
                }
                x.rShiftTo(1, x);
              } else {
                if (!t.isEven()) {
                  t.subTo(b, t);
                }
              }
              t.rShiftTo(1, t);
            }
            for (; q.isEven();) {
              q.rShiftTo(1, q);
              if (parent) {
                if (!(a.isEven() && r.isEven())) {
                  a.addTo(this, a);
                  r.subTo(b, r);
                }
                a.rShiftTo(1, a);
              } else {
                if (!r.isEven()) {
                  r.subTo(b, r);
                }
              }
              r.rShiftTo(1, r);
            }
            if (d.compareTo(q) >= 0) {
              d.subTo(q, d);
              if (parent) {
                x.subTo(a, x);
              }
              t.subTo(r, t);
            } else {
              q.subTo(d, q);
              if (parent) {
                a.subTo(x, a);
              }
              r.subTo(t, r);
            }
          }
          return 0 != q.compareTo(BigInteger.ONE) ? BigInteger.ZERO : r.compareTo(b) >= 0 ? r.subtract(b) : r.signum() < 0 ? (r.addTo(b, r), r.signum() < 0 ? r.add(b) : r) : r;
        }, BigInteger.prototype.pow = function (x) {
          return this.exp(x, new BN);
        }, BigInteger.prototype.gcd = function (a) {
          var x = this.s < 0 ? this.negate() : this.clone();
          var r = a.s < 0 ? a.negate() : a.clone();
          if (x.compareTo(r) < 0) {
            var first = x;
            x = r;
            r = first;
          }
          var n = x.getLowestSetBit();
          var i = r.getLowestSetBit();
          if (i < 0) {
            return x;
          }
          if (n < i) {
            i = n;
          }
          if (i > 0) {
            x.rShiftTo(i, x);
            r.rShiftTo(i, r);
          }
          for (; x.signum() > 0;) {
            if ((n = x.getLowestSetBit()) > 0) {
              x.rShiftTo(n, x);
            }
            if ((n = r.getLowestSetBit()) > 0) {
              r.rShiftTo(n, r);
            }
            if (x.compareTo(r) >= 0) {
              x.subTo(r, x);
              x.rShiftTo(1, x);
            } else {
              r.subTo(x, r);
              r.rShiftTo(1, r);
            }
          }
          return i > 0 && r.lShiftTo(i, r), r;
        }, BigInteger.prototype.isProbablePrime = function (k) {
          var i;
          var a = this.abs();
          if (1 == a.t && a[0] <= b[b.length - 1]) {
            i = 0;
            for (; i < b.length; ++i) {
              if (a[0] == b[i]) {
                return true;
              }
            }
            return false;
          }
          if (a.isEven()) {
            return false;
          }
          i = 1;
          for (; i < b.length;) {
            var val = b[i];
            var offset = i + 1;
            for (; offset < b.length && val < end;) {
              val = val * b[offset++];
            }
            val = a.modInt(val);
            for (; i < offset;) {
              if (val % b[i++] == 0) {
                return false;
              }
            }
          }
          return a.millerRabin(k);
        }, BigInteger.prototype.square = function () {
          var e = parseInt();
          return this.squareTo(e), e;
        }, BigInteger.prototype.Barrett = m, null == value) {
          var i;
          if (value = new Array, pos = 0, "undefined" != typeof window && window.crypto) {
            if (window.crypto.getRandomValues) {
              var buffer = new Uint8Array(32);
              window.crypto.getRandomValues(buffer);
              i = 0;
              for (; i < 32; ++i) {
                value[pos++] = buffer[i];
              }
            } else {
              if ("Netscape" == navigator.appName && navigator.appVersion < "5") {
                var param_hash = window.crypto.random(32);
                i = 0;
                for (; i < param_hash.length; ++i) {
                  value[pos++] = 255 & param_hash.charCodeAt(i);
                }
              }
            }
          }
          for (; pos < size;) {
            i = Math.floor(65536 * Math.random());
            value[pos++] = i >>> 8;
            value[pos++] = 255 & i;
          }
          pos = 0;
          write();
        }
        MediumRandomFountain.prototype.nextBytes = function (array) {
          var i;
          i = 0;
          for (; i < array.length; ++i) {
            array[i] = parse();
          }
        };
        Animation.prototype.init = function (names) {
          var i;
          var p;
          var n;
          i = 0;
          for (; i < 256; ++i) {
            this.S[i] = i;
          }
          p = 0;
          i = 0;
          for (; i < 256; ++i) {
            p = p + this.S[i] + names[i % names.length] & 255;
            n = this.S[i];
            this.S[i] = this.S[p];
            this.S[p] = n;
          }
          this.i = 0;
          this.j = 0;
        };
        Animation.prototype.next = function () {
          var n;
          return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, n = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = n, this.S[n + this.S[this.i] & 255];
        };
        var size = 256;
        module.exports = {
          default: BigInteger,
          BigInteger: BigInteger,
          SecureRandom: MediumRandomFountain
        };
      }).call(this);
    },
    "./node_modules/long/src/long.js": function (mixin, doPost) {
      function Long(value, name, key) {
        this.low = 0 | value;
        this.high = 0 | name;
        this.unsigned = !!key;
      }
      function isLong(obj) {
        return true === (obj && obj.__isLong__);
      }
      function fromInt(value, unsigned) {
        var obj;
        var v;
        var c;
        return unsigned ? (c = 0 <= (value = value >>> 0) && value < 256) && (v = GLOBAL[value]) ? v : (obj = fromBits(value, (0 | value) < 0 ? -1 : 0, true), c && (GLOBAL[value] = obj), obj) : (c = -128 <= (value = value | 0) && value < 128) && (v = enums[value]) ? v : (obj = fromBits(value, value < 0 ? -1 : 0, false), c && (enums[value] = obj), obj);
      }
      function fromNumber(value, unsigned) {
        if (isNaN(value)) {
          return unsigned ? UZERO : ZERO;
        }
        if (unsigned) {
          if (value < 0) {
            return UZERO;
          }
          if (value >= TWO_PWR_64_DBL) {
            return MAX_UNSIGNED_VALUE;
          }
        } else {
          if (value <= -TWO_PWR_63_DBL) {
            return MIN_VALUE;
          }
          if (value + 1 >= TWO_PWR_63_DBL) {
            return MAX_VALUE;
          }
        }
        return value < 0 ? fromNumber(-value, unsigned).neg() : fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      }
      function fromBits(lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
      }
      function fromString(input, value, radix) {
        if (0 === input.length) {
          throw Error("empty string");
        }
        if ("NaN" === input || "Infinity" === input || "+Infinity" === input || "-Infinity" === input) {
          return ZERO;
        }
        if ("number" == typeof value ? (radix = value, value = false) : value = !!value, (radix = radix || 10) < 2 || 36 < radix) {
          throw RangeError("radix");
        }
        var iCBack;
        if ((iCBack = input.indexOf("-")) > 0) {
          throw Error("interior hyphen");
        }
        if (0 === iCBack) {
          return fromString(input.substring(1), value, radix).neg();
        }
        var radixToPower = fromNumber(pow_dbl(radix, 8));
        var result = ZERO;
        var i = 0;
        for (; i < input.length; i = i + 8) {
          var size = Math.min(8, input.length - i);
          var value = parseInt(input.substring(i, i + size), radix);
          if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
          } else {
            result = (result = result.mul(radixToPower)).add(fromNumber(value));
          }
        }
        return result.unsigned = value, result;
      }
      function fromValue(val, arg) {
        return "number" == typeof val ? fromNumber(val, arg) : "string" == typeof val ? fromString(val, arg) : fromBits(val.low, val.high, "boolean" == typeof arg ? arg : val.unsigned);
      }
      mixin.exports = Long;
      var G = null;
      try {
        G = (new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1,
          173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32,
          3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {})).exports;
      } catch (e) {
      }
      Long.prototype.__isLong__;
      Object.defineProperty(Long.prototype, "__isLong__", {
        value: true
      });
      Long.isLong = isLong;
      var enums = {};
      var GLOBAL = {};
      Long.fromInt = fromInt;
      Long.fromNumber = fromNumber;
      Long.fromBits = fromBits;
      var pow_dbl = Math.pow;
      Long.fromString = fromString;
      Long.fromValue = fromValue;
      var TWO_PWR_32_DBL = 4294967296;
      var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
      var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
      var TWO_PWR_24 = fromInt(1 << 24);
      var ZERO = fromInt(0);
      Long.ZERO = ZERO;
      var UZERO = fromInt(0, true);
      Long.UZERO = UZERO;
      var a = fromInt(1);
      Long.ONE = a;
      var UONE = fromInt(1, true);
      Long.UONE = UONE;
      var NEG_ONE = fromInt(-1);
      Long.NEG_ONE = NEG_ONE;
      var MAX_VALUE = fromBits(-1, 2147483647, false);
      Long.MAX_VALUE = MAX_VALUE;
      var MAX_UNSIGNED_VALUE = fromBits(-1, -1, true);
      Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
      var MIN_VALUE = fromBits(0, -2147483648, false);
      Long.MIN_VALUE = MIN_VALUE;
      var LongPrototype = Long.prototype;
      LongPrototype.toInt = function () {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      LongPrototype.toNumber = function () {
        return this.unsigned ? (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0) : this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      LongPrototype.toString = function (str) {
        if ((str = str || 10) < 2 || 36 < str) {
          throw RangeError("radix");
        }
        if (this.isZero()) {
          return "0";
        }
        if (this.isNegative()) {
          if (this.eq(MIN_VALUE)) {
            var radixLong = fromNumber(str);
            var div = this.div(radixLong);
            var orig_minsize_y = div.mul(radixLong).sub(this);
            return div.toString(str) + orig_minsize_y.toInt().toString(str);
          }
          return "-" + this.neg().toString(str);
        }
        var radixToPower = fromNumber(pow_dbl(str, 6), this.unsigned);
        var rem = this;
        var s = "";
        for (; ;) {
          var remDiv = rem.div(radixToPower);
          var secs = (rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0).toString(str);
          if ((rem = remDiv).isZero()) {
            return secs + s;
          }
          for (; secs.length < 6;) {
            secs = "0" + secs;
          }
          s = "" + secs + s;
        }
      };
      LongPrototype.getHighBits = function () {
        return this.high;
      };
      LongPrototype.getHighBitsUnsigned = function () {
        return this.high >>> 0;
      };
      LongPrototype.getLowBits = function () {
        return this.low;
      };
      LongPrototype.getLowBitsUnsigned = function () {
        return this.low >>> 0;
      };
      LongPrototype.getNumBitsAbs = function () {
        if (this.isNegative()) {
          return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        }
        var val = 0 != this.high ? this.high : this.low;
        var bit = 31;
        for (; bit > 0 && 0 == (val & 1 << bit); bit--) {
        }
        return 0 != this.high ? bit + 33 : bit + 1;
      };
      LongPrototype.isZero = function () {
        return 0 === this.high && 0 === this.low;
      };
      LongPrototype.eqz = LongPrototype.isZero;
      LongPrototype.isNegative = function () {
        return !this.unsigned && this.high < 0;
      };
      LongPrototype.isPositive = function () {
        return this.unsigned || this.high >= 0;
      };
      LongPrototype.isOdd = function () {
        return 1 == (1 & this.low);
      };
      LongPrototype.isEven = function () {
        return 0 == (1 & this.low);
      };
      LongPrototype.equals = function (other) {
        return isLong(other) || (other = fromValue(other)), (this.unsigned === other.unsigned || this.high >>> 31 != 1 || other.high >>> 31 != 1) && (this.high === other.high && this.low === other.low);
      };
      LongPrototype.eq = LongPrototype.equals;
      LongPrototype.notEquals = function (other) {
        return !this.eq(other);
      };
      LongPrototype.neq = LongPrototype.notEquals;
      LongPrototype.ne = LongPrototype.notEquals;
      LongPrototype.lessThan = function (other) {
        return this.comp(other) < 0;
      };
      LongPrototype.lt = LongPrototype.lessThan;
      LongPrototype.lessThanOrEqual = function (other) {
        return this.comp(other) <= 0;
      };
      LongPrototype.lte = LongPrototype.lessThanOrEqual;
      LongPrototype.le = LongPrototype.lessThanOrEqual;
      LongPrototype.greaterThan = function (other) {
        return this.comp(other) > 0;
      };
      LongPrototype.gt = LongPrototype.greaterThan;
      LongPrototype.greaterThanOrEqual = function (other) {
        return this.comp(other) >= 0;
      };
      LongPrototype.gte = LongPrototype.greaterThanOrEqual;
      LongPrototype.ge = LongPrototype.greaterThanOrEqual;
      LongPrototype.compare = function (other) {
        if (isLong(other) || (other = fromValue(other)), this.eq(other)) {
          return 0;
        }
        var thisNeg = this.isNegative();
        var otherNeg = other.isNegative();
        return thisNeg && !otherNeg ? -1 : !thisNeg && otherNeg ? 1 : this.unsigned ? other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(other).isNegative() ? -1 : 1;
      };
      LongPrototype.comp = LongPrototype.compare;
      LongPrototype.negate = function () {
        return !this.unsigned && this.eq(MIN_VALUE) ? MIN_VALUE : this.not().add(a);
      };
      LongPrototype.neg = LongPrototype.negate;
      LongPrototype.add = function (other) {
        if (!isLong(other)) {
          other = fromValue(other);
        }
        var a48 = this.high >>> 16;
        var radius = 65535 & this.high;
        var a16 = this.low >>> 16;
        var i = 65535 & this.low;
        var b48 = other.high >>> 16;
        var step = 65535 & other.high;
        var b16 = other.low >>> 16;
        var c48 = 0;
        var code = 0;
        var c16 = 0;
        var button = 0;
        return c16 = c16 + ((button = button + (i + (65535 & other.low))) >>> 16), code = code + ((c16 = c16 + (a16 + b16)) >>> 16), c48 = c48 + ((code = code + (radius + step)) >>> 16), c48 = c48 + (a48 + b48), fromBits((c16 = c16 & 65535) << 16 | (button = button & 65535), (c48 = c48 & 65535) << 16 | (code = code & 65535), this.unsigned);
      };
      LongPrototype.subtract = function (other) {
        return isLong(other) || (other = fromValue(other)), this.add(other.neg());
      };
      LongPrototype.sub = LongPrototype.subtract;
      LongPrototype.multiply = function (other) {
        if (this.isZero()) {
          return ZERO;
        }
        if (isLong(other) || (other = fromValue(other)), G) {
          return fromBits(G.mul(this.low, this.high, other.low, other.high), G.get_high(), this.unsigned);
        }
        if (other.isZero()) {
          return ZERO;
        }
        if (this.eq(MIN_VALUE)) {
          return other.isOdd() ? MIN_VALUE : ZERO;
        }
        if (other.eq(MIN_VALUE)) {
          return this.isOdd() ? MIN_VALUE : ZERO;
        }
        if (this.isNegative()) {
          return other.isNegative() ? this.neg().mul(other.neg()) : this.neg().mul(other).neg();
        }
        if (other.isNegative()) {
          return this.mul(other.neg()).neg();
        }
        if (this.lt(TWO_PWR_24) && other.lt(TWO_PWR_24)) {
          return fromNumber(this.toNumber() * other.toNumber(), this.unsigned);
        }
        var a48 = this.high >>> 16;
        var a32 = 65535 & this.high;
        var a16 = this.low >>> 16;
        var a00 = 65535 & this.low;
        var b48 = other.high >>> 16;
        var b32 = 65535 & other.high;
        var b16 = other.low >>> 16;
        var b00 = 65535 & other.low;
        var value = 0;
        var c32 = 0;
        var c16 = 0;
        var c00 = 0;
        return c16 = c16 + ((c00 = c00 + a00 * b00) >>> 16), c32 = c32 + ((c16 = c16 + a16 * b00) >>> 16), c16 = c16 & 65535, c32 = c32 + ((c16 = c16 + a00 * b16) >>> 16), value = value + ((c32 = c32 + a32 * b00) >>> 16), c32 = c32 & 65535, value = value + ((c32 = c32 + a16 * b16) >>> 16), c32 = c32 & 65535, value = value + ((c32 = c32 + a00 * b32) >>> 16), value = value + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48), fromBits((c16 = c16 & 65535) << 16 | (c00 = c00 & 65535), (value = value & 65535) <<
          16 | (c32 = c32 & 65535), this.unsigned);
      };
      LongPrototype.mul = LongPrototype.multiply;
      LongPrototype.divide = function (divisor) {
        if (isLong(divisor) || (divisor = fromValue(divisor)), divisor.isZero()) {
          throw Error("division by zero");
        }
        var approx;
        var rem;
        var res;
        if (G) {
          return this.unsigned || -2147483648 !== this.high || -1 !== divisor.low || -1 !== divisor.high ? fromBits((this.unsigned ? G.div_u : G.div_s)(this.low, this.high, divisor.low, divisor.high), G.get_high(), this.unsigned) : this;
        }
        if (this.isZero()) {
          return this.unsigned ? UZERO : ZERO;
        }
        if (this.unsigned) {
          if (divisor.unsigned || (divisor = divisor.toUnsigned()), divisor.gt(this)) {
            return UZERO;
          }
          if (divisor.gt(this.shru(1))) {
            return UONE;
          }
          res = UZERO;
        } else {
          if (this.eq(MIN_VALUE)) {
            return divisor.eq(a) || divisor.eq(NEG_ONE) ? MIN_VALUE : divisor.eq(MIN_VALUE) ? a : (approx = this.shr(1).div(divisor).shl(1)).eq(ZERO) ? divisor.isNegative() ? a : NEG_ONE : (rem = this.sub(divisor.mul(approx)), res = approx.add(rem.div(divisor)));
          }
          if (divisor.eq(MIN_VALUE)) {
            return this.unsigned ? UZERO : ZERO;
          }
          if (this.isNegative()) {
            return divisor.isNegative() ? this.neg().div(divisor.neg()) : this.neg().div(divisor).neg();
          }
          if (divisor.isNegative()) {
            return this.div(divisor.neg()).neg();
          }
          res = ZERO;
        }
        rem = this;
        for (; rem.gte(divisor);) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2);
          var delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48);
          var d = fromNumber(approx);
          var approxRem = d.mul(divisor);
          for (; approxRem.isNegative() || approxRem.gt(rem);) {
            approxRem = (d = fromNumber(approx = approx - delta, this.unsigned)).mul(divisor);
          }
          if (d.isZero()) {
            d = a;
          }
          res = res.add(d);
          rem = rem.sub(approxRem);
        }
        return res;
      };
      LongPrototype.div = LongPrototype.divide;
      LongPrototype.modulo = function (other) {
        return isLong(other) || (other = fromValue(other)), G ? fromBits((this.unsigned ? G.rem_u : G.rem_s)(this.low, this.high, other.low, other.high), G.get_high(), this.unsigned) : this.sub(this.div(other).mul(other));
      };
      LongPrototype.mod = LongPrototype.modulo;
      LongPrototype.rem = LongPrototype.modulo;
      LongPrototype.not = function () {
        return fromBits(~this.low, ~this.high, this.unsigned);
      };
      LongPrototype.and = function (other) {
        return isLong(other) || (other = fromValue(other)), fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      LongPrototype.or = function (other) {
        return isLong(other) || (other = fromValue(other)), fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      LongPrototype.xor = function (other) {
        return isLong(other) || (other = fromValue(other)), fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      LongPrototype.shiftLeft = function (numBits) {
        return isLong(numBits) && (numBits = numBits.toInt()), 0 == (numBits = numBits & 63) ? this : numBits < 32 ? fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned) : fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      LongPrototype.shl = LongPrototype.shiftLeft;
      LongPrototype.shiftRight = function (numBits) {
        return isLong(numBits) && (numBits = numBits.toInt()), 0 == (numBits = numBits & 63) ? this : numBits < 32 ? fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned) : fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      LongPrototype.shr = LongPrototype.shiftRight;
      LongPrototype.shiftRightUnsigned = function (numBits) {
        if (isLong(numBits) && (numBits = numBits.toInt()), 0 === (numBits = numBits & 63)) {
          return this;
        }
        var high = this.high;
        return numBits < 32 ? fromBits(this.low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned) : fromBits(32 === numBits ? high : high >>> numBits - 32, 0, this.unsigned);
      };
      LongPrototype.shru = LongPrototype.shiftRightUnsigned;
      LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
      LongPrototype.toSigned = function () {
        return this.unsigned ? fromBits(this.low, this.high, false) : this;
      };
      LongPrototype.toUnsigned = function () {
        return this.unsigned ? this : fromBits(this.low, this.high, true);
      };
      LongPrototype.toBytes = function (le) {
        return le ? this.toBytesLE() : this.toBytesBE();
      };
      LongPrototype.toBytesLE = function () {
        var hi = this.high;
        var lo = this.low;
        return [255 & lo, lo >>> 8 & 255, lo >>> 16 & 255, lo >>> 24, 255 & hi, hi >>> 8 & 255, hi >>> 16 & 255, hi >>> 24];
      };
      LongPrototype.toBytesBE = function () {
        var hi = this.high;
        var lo = this.low;
        return [hi >>> 24, hi >>> 16 & 255, hi >>> 8 & 255, 255 & hi, lo >>> 24, lo >>> 16 & 255, lo >>> 8 & 255, 255 & lo];
      };
      Long.fromBytes = function (value, radix, guard) {
        return guard ? Long.fromBytesLE(value, radix) : Long.fromBytesBE(value, radix);
      };
      Long.fromBytesLE = function (value, unsigned) {
        return new Long(value[0] | value[1] << 8 | value[2] << 16 | value[3] << 24, value[4] | value[5] << 8 | value[6] << 16 | value[7] << 24, unsigned);
      };
      Long.fromBytesBE = function (descriptorUUID, value) {
        return new Long(descriptorUUID[4] << 24 | descriptorUUID[5] << 16 | descriptorUUID[6] << 8 | descriptorUUID[7], descriptorUUID[0] << 24 | descriptorUUID[1] << 16 | descriptorUUID[2] << 8 | descriptorUUID[3], value);
      };
    },
    "./node_modules/node-libs-browser/node_modules/buffer/index.js": function (ecurve, Buffer, require) {
      (function (B) {
        function kMaxLength() {
          return self.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
        }
        function createBuffer(that, length) {
          if (kMaxLength() < length) {
            throw new RangeError("Invalid typed array length");
          }
          return self.TYPED_ARRAY_SUPPORT ? (that = new Uint8Array(length)).__proto__ = self.prototype : (null === that && (that = new self(length)), that.length = length), that;
        }
        function self(arg, options, val) {
          if (!(self.TYPED_ARRAY_SUPPORT || this instanceof self)) {
            return new self(arg, options, val);
          }
          if ("number" == typeof arg) {
            if ("string" == typeof options) {
              throw new Error("If encoding is specified then the first argument must be a string");
            }
            return allocUnsafe(this, arg);
          }
          return parse(this, arg, options, val);
        }
        function parse(a, val, index, callback) {
          if ("number" == typeof val) {
            throw new TypeError('"value" argument must not be a number');
          }
          return "undefined" != typeof ArrayBuffer && val instanceof ArrayBuffer ? function (that, array, byteOffset, length) {
            if (array.byteLength, byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError("'offset' is out of bounds");
            }
            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError("'length' is out of bounds");
            }
            array = void 0 === byteOffset && void 0 === length ? new Uint8Array(array) : void 0 === length ? new Uint8Array(array, byteOffset) : new Uint8Array(array, byteOffset, length);
            if (self.TYPED_ARRAY_SUPPORT) {
              (that = array).__proto__ = self.prototype;
            } else {
              that = fromArrayLike(that, array);
            }
            return that;
          }(a, val, index, callback) : "string" == typeof val ? function (that, data, value) {
            if (!("string" == typeof value && "" !== value)) {
              value = "utf8";
            }
            if (!self.isEncoding(value)) {
              throw new TypeError('"encoding" must be a valid string encoding');
            }
            var length = 0 | byteLength(data, value);
            var actual = (that = createBuffer(that, length)).write(data, value);
            if (actual !== length) {
              that = that.slice(0, actual);
            }
            return that;
          }(a, val, index) : function (that, obj) {
            if (self.isBuffer(obj)) {
              var len = 0 | checked(obj.length);
              return 0 === (that = createBuffer(that, len)).length ? that : (obj.copy(that, 0, 0, len), that);
            }
            if (obj) {
              if ("undefined" != typeof ArrayBuffer && obj.buffer instanceof ArrayBuffer || "length" in obj) {
                return "number" != typeof obj.length || (n = obj.length) != n ? createBuffer(that, 0) : fromArrayLike(that, obj);
              }
              if ("Buffer" === obj.type && assert(obj.data)) {
                return fromArrayLike(that, obj.data);
              }
            }
            var n;
            throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
          }(a, val);
        }
        function assertSize(length) {
          if ("number" != typeof length) {
            throw new TypeError('"size" argument must be a number');
          }
          if (length < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }
        function allocUnsafe(that, size) {
          if (assertSize(size), that = createBuffer(that, size < 0 ? 0 : 0 | checked(size)), !self.TYPED_ARRAY_SUPPORT) {
            var i = 0;
            for (; i < size; ++i) {
              that[i] = 0;
            }
          }
          return that;
        }
        function fromArrayLike(that, obj) {
          var length = obj.length < 0 ? 0 : 0 | checked(obj.length);
          that = createBuffer(that, length);
          var i = 0;
          for (; i < length; i = i + 1) {
            that[i] = 255 & obj[i];
          }
          return that;
        }
        function checked(length) {
          if (length >= kMaxLength()) {
            throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
          }
          return 0 | length;
        }
        function byteLength(string, encoding) {
          if (self.isBuffer(string)) {
            return string.length;
          }
          if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
            return string.byteLength;
          }
          if ("string" != typeof string) {
            string = "" + string;
          }
          var length = string.length;
          if (0 === length) {
            return 0;
          }
          var n = false;
          for (; ;) {
            switch (encoding) {
              case "ascii":
              case "latin1":
              case "binary":
                return length;
              case "utf8":
              case "utf-8":
              case void 0:
                return utf8ToBytes(string).length;
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return 2 * length;
              case "hex":
                return length >>> 1;
              case "base64":
                return replace(string).length;
              default:
                if (n) {
                  return utf8ToBytes(string).length;
                }
                encoding = ("" + encoding).toLowerCase();
                n = true;
            }
          }
        }
        function write(encoding, start, value) {
          var n = false;
          if ((void 0 === start || start < 0) && (start = 0), start > this.length) {
            return "";
          }
          if ((void 0 === value || value > this.length) && (value = this.length), value <= 0) {
            return "";
          }
          if ((value = value >>> 0) <= (start = start >>> 0)) {
            return "";
          }
          if (!encoding) {
            encoding = "utf8";
          }
          for (; ;) {
            switch (encoding) {
              case "hex":
                return map(this, start, value);
              case "utf8":
              case "utf-8":
                return cb(this, start, value);
              case "ascii":
                return push(this, start, value);
              case "latin1":
              case "binary":
                return update(this, start, value);
              case "base64":
                return read(this, start, value);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return next(this, start, value);
              default:
                if (n) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                encoding = (encoding + "").toLowerCase();
                n = true;
            }
          }
        }
        function swap(data, i, n) {
          var _id = data[i];
          data[i] = data[n];
          data[n] = _id;
        }
        function set(d, e, r, value, isInteger) {
          if (0 === d.length) {
            return -1;
          }
          if ("string" == typeof r ? (value = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = isInteger ? 0 : d.length - 1), r < 0 && (r = d.length + r), r >= d.length) {
            if (isInteger) {
              return -1;
            }
            r = d.length - 1;
          } else {
            if (r < 0) {
              if (!isInteger) {
                return -1;
              }
              r = 0;
            }
          }
          if ("string" == typeof e && (e = self.from(e, value)), self.isBuffer(e)) {
            return 0 === e.length ? -1 : toString(d, e, r, value, isInteger);
          }
          if ("number" == typeof e) {
            return e = e & 255, self.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? isInteger ? Uint8Array.prototype.indexOf.call(d, e, r) : Uint8Array.prototype.lastIndexOf.call(d, e, r) : toString(d, [e], r, value, isInteger);
          }
          throw new TypeError("val must be string, number or Buffer");
        }
        function toString(value, obj, start, data, p) {
          function get(d, i) {
            return 1 === x ? d[i] : d.readUInt16BE(i * x);
          }
          var d;
          var x = 1;
          var len = value.length;
          var count = obj.length;
          if (void 0 !== data && ("ucs2" === (data = String(data).toLowerCase()) || "ucs-2" === data || "utf16le" === data || "utf-16le" === data)) {
            if (value.length < 2 || obj.length < 2) {
              return -1;
            }
            x = 2;
            len = len / 2;
            count = count / 2;
            start = start / 2;
          }
          if (p) {
            var b = -1;
            d = start;
            for (; d < len; d++) {
              if (get(value, d) === get(obj, -1 === b ? 0 : d - b)) {
                if (-1 === b && (b = d), d - b + 1 === count) {
                  return b * x;
                }
              } else {
                if (-1 !== b) {
                  d = d - (d - b);
                }
                b = -1;
              }
            }
          } else {
            if (start + count > len) {
              start = len - count;
            }
            d = start;
            for (; d >= 0; d--) {
              var c = true;
              var key = 0;
              for (; key < count; key++) {
                if (get(value, d + key) !== get(obj, key)) {
                  c = false;
                  break;
                }
              }
              if (c) {
                return d;
              }
            }
          }
          return -1;
        }
        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var width = buf.length - offset;
          if (length) {
            if ((length = Number(length)) > width) {
              length = width;
            }
          } else {
            length = width;
          }
          var strLen = string.length;
          if (strLen % 2 != 0) {
            throw new TypeError("Invalid hex string");
          }
          if (length > strLen / 2) {
            length = strLen / 2;
          }
          var i = 0;
          for (; i < length; ++i) {
            var byte = parseInt(string.substr(2 * i, 2), 16);
            if (isNaN(byte)) {
              return i;
            }
            buf[offset + i] = byte;
          }
          return i;
        }
        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }
        function callback(buf, string, offset, length) {
          return blitBuffer(function (remaining) {
            var result = [];
            var i = 0;
            for (; i < remaining.length; ++i) {
              result.push(255 & remaining.charCodeAt(i));
            }
            return result;
          }(string), buf, offset, length);
        }
        function asciiWrite(buf, string, offset, length) {
          return callback(buf, string, offset, length);
        }
        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(replace(string), buf, offset, length);
        }
        function init(buf, string, offset, length) {
          return blitBuffer(function (name, linksCount) {
            var i;
            var j;
            var m;
            var result = [];
            var k = 0;
            for (; k < name.length && !((linksCount = linksCount - 2) < 0); ++k) {
              i = name.charCodeAt(k);
              j = i >> 8;
              m = i % 256;
              result.push(m);
              result.push(j);
            }
            return result;
          }(string, buf.length - offset), buf, offset, length);
        }
        function read(buf, start, end) {
          return 0 === start && end === buf.length ? base64.fromByteArray(buf) : base64.fromByteArray(buf.slice(start, end));
        }
        function cb(buf, s, e) {
          e = Math.min(buf.length, e);
          var n = [];
          var o = s;
          for (; o < e;) {
            var buf2;
            var toLine;
            var fromLine;
            var end;
            var v = buf[o];
            var i = null;
            var headerRowHtml = v > 239 ? 4 : v > 223 ? 3 : v > 191 ? 2 : 1;
            if (o + headerRowHtml <= e) {
              switch (headerRowHtml) {
                case 1:
                  if (v < 128) {
                    i = v;
                  }
                  break;
                case 2:
                  if (128 == (192 & (buf2 = buf[o + 1])) && (end = (31 & v) << 6 | 63 & buf2) > 127) {
                    i = end;
                  }
                  break;
                case 3:
                  buf2 = buf[o + 1];
                  toLine = buf[o + 2];
                  if (128 == (192 & buf2) && 128 == (192 & toLine) && (end = (15 & v) << 12 | (63 & buf2) << 6 | 63 & toLine) > 2047 && (end < 55296 || end > 57343)) {
                    i = end;
                  }
                  break;
                case 4:
                  buf2 = buf[o + 1];
                  toLine = buf[o + 2];
                  fromLine = buf[o + 3];
                  if (128 == (192 & buf2) && 128 == (192 & toLine) && 128 == (192 & fromLine) && (end = (15 & v) << 18 | (63 & buf2) << 12 | (63 & toLine) << 6 | 63 & fromLine) > 65535 && end < 1114112) {
                    i = end;
                  }
              }
            }
            if (null === i) {
              i = 65533;
              headerRowHtml = 1;
            } else {
              if (i > 65535) {
                i = i - 65536;
                n.push(i >>> 10 & 1023 | 55296);
                i = 56320 | 1023 & i;
              }
            }
            n.push(i);
            o = o + headerRowHtml;
          }
          return function (a) {
            var count = a.length;
            if (count <= skip) {
              return String.fromCharCode.apply(String, a);
            }
            var res = "";
            var i = 0;
            for (; i < count;) {
              res = res + String.fromCharCode.apply(String, a.slice(i, i = i + skip));
            }
            return res;
          }(n);
        }
        function push(g, x, s) {
          var logData = "";
          s = Math.min(g.length, s);
          var j = x;
          for (; j < s; ++j) {
            logData = logData + String.fromCharCode(127 & g[j]);
          }
          return logData;
        }
        function update(e, def, scale) {
          var resp = "";
          scale = Math.min(e.length, scale);
          var s = def;
          for (; s < scale; ++s) {
            resp = resp + String.fromCharCode(e[s]);
          }
          return resp;
        }
        function map(array, index, offset) {
          var length = array.length;
          if (!index || index < 0) {
            index = 0;
          }
          if (!offset || offset < 0 || offset > length) {
            offset = length;
          }
          var loader = "";
          var i = index;
          for (; i < offset; ++i) {
            loader = loader + test(array[i]);
          }
          return loader;
        }
        function next(t, e, number) {
          var result = t.slice(e, number);
          var token = "";
          var i = 0;
          for (; i < result.length; i = i + 2) {
            token = token + String.fromCharCode(result[i] + 256 * result[i + 1]);
          }
          return token;
        }
        function checkOffset(offset, ext, length) {
          if (offset % 1 != 0 || offset < 0) {
            throw new RangeError("offset is not uint");
          }
          if (offset + ext > length) {
            throw new RangeError("Trying to access beyond buffer length");
          }
        }
        function checkInt(buffer, value, offset, ext, max, min) {
          if (!self.isBuffer(buffer)) {
            throw new TypeError('"buffer" argument must be a Buffer instance');
          }
          if (value > max || value < min) {
            throw new RangeError('"value" argument is out of bounds');
          }
          if (offset + ext > buffer.length) {
            throw new RangeError("Index out of range");
          }
        }
        function objectWriteUInt16(buf, value, offset, littleEndian) {
          if (value < 0) {
            value = 65535 + value + 1;
          }
          var i = 0;
          var cell_amount = Math.min(buf.length - offset, 2);
          for (; i < cell_amount; ++i) {
            buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> 8 * (littleEndian ? i : 1 - i);
          }
        }
        function objectWriteUInt32(buf, value, offset, littleEndian) {
          if (value < 0) {
            value = 4294967295 + value + 1;
          }
          var i = 0;
          var cell_amount = Math.min(buf.length - offset, 4);
          for (; i < cell_amount; ++i) {
            buf[offset + i] = value >>> 8 * (littleEndian ? i : 3 - i) & 255;
          }
        }
        function log(text, pid, index, level, options, blobs) {
          if (index + level > text.length) {
            throw new RangeError("Index out of range");
          }
          if (index < 0) {
            throw new RangeError("Index out of range");
          }
        }
        function writeFloat(value, buffer, val, littleEndian, noAssert) {
          return noAssert || log(value, 0, val, 4), exports.write(value, buffer, val, littleEndian, 23, 4), val + 4;
        }
        function writeDouble(val, buffer, n, value, noAssert) {
          return noAssert || log(val, 0, n, 8), exports.write(val, buffer, n, value, 52, 8), n + 8;
        }
        function test(vItem) {
          return vItem < 16 ? "0" + vItem.toString(16) : vItem.toString(16);
        }
        function utf8ToBytes(string, units) {
          var i;
          units = units || 1 / 0;
          var length = string.length;
          var m = null;
          var bytes = [];
          var index = 0;
          for (; index < length; ++index) {
            if ((i = string.charCodeAt(index)) > 55295 && i < 57344) {
              if (!m) {
                if (i > 56319) {
                  if ((units = units - 3) > -1) {
                    bytes.push(239, 191, 189);
                  }
                  continue;
                }
                if (index + 1 === length) {
                  if ((units = units - 3) > -1) {
                    bytes.push(239, 191, 189);
                  }
                  continue;
                }
                m = i;
                continue;
              }
              if (i < 56320) {
                if ((units = units - 3) > -1) {
                  bytes.push(239, 191, 189);
                }
                m = i;
                continue;
              }
              i = 65536 + (m - 55296 << 10 | i - 56320);
            } else {
              if (m && (units = units - 3) > -1) {
                bytes.push(239, 191, 189);
              }
            }
            if (m = null, i < 128) {
              if ((units = units - 1) < 0) {
                break;
              }
              bytes.push(i);
            } else {
              if (i < 2048) {
                if ((units = units - 2) < 0) {
                  break;
                }
                bytes.push(i >> 6 | 192, 63 & i | 128);
              } else {
                if (i < 65536) {
                  if ((units = units - 3) < 0) {
                    break;
                  }
                  bytes.push(i >> 12 | 224, i >> 6 & 63 | 128, 63 & i | 128);
                } else {
                  if (!(i < 1114112)) {
                    throw new Error("Invalid code point");
                  }
                  if ((units = units - 4) < 0) {
                    break;
                  }
                  bytes.push(i >> 18 | 240, i >> 12 & 63 | 128, i >> 6 & 63 | 128, 63 & i | 128);
                }
              }
            }
          }
          return bytes;
        }
        function replace(str) {
          return base64.toByteArray(function (result) {
            if ((result = function (str) {
              return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
            }(result).replace(global, "")).length < 2) {
              return "";
            }
            for (; result.length % 4 != 0;) {
              result = result + "=";
            }
            return result;
          }(str));
        }
        function blitBuffer(src, dst, offset, length) {
          var i = 0;
          for (; i < length && !(i + offset >= dst.length || i >= src.length); ++i) {
            dst[i + offset] = src[i];
          }
          return i;
        }
        var base64 = require("./node_modules/base64-js/index.js");
        var exports = require("./node_modules/ieee754/index.js");
        var assert = require("./node_modules/isarray/index.js");
        Buffer.Buffer = self;
        Buffer.SlowBuffer = function (length) {
          if (+length != length) {
            length = 0;
          }
          return self.alloc(+length);
        };
        Buffer.INSPECT_MAX_BYTES = 50;
        self.TYPED_ARRAY_SUPPORT = void 0 !== B.TYPED_ARRAY_SUPPORT ? B.TYPED_ARRAY_SUPPORT : function () {
          try {
            var arr = new Uint8Array(1);
            return arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function () {
                return 42;
              }
            }, 42 === arr.foo() && "function" == typeof arr.subarray && 0 === arr.subarray(1, 1).byteLength;
          } catch (e) {
            return false;
          }
        }();
        Buffer.kMaxLength = kMaxLength();
        self.poolSize = 8192;
        self._augment = function (el) {
          return el.__proto__ = self.prototype, el;
        };
        self.from = function (value, name, options) {
          return parse(null, value, name, options);
        };
        if (self.TYPED_ARRAY_SUPPORT) {
          self.prototype.__proto__ = Uint8Array.prototype;
          self.__proto__ = Uint8Array;
          if ("undefined" != typeof Symbol && Symbol.species && self[Symbol.species] === self) {
            Object.defineProperty(self, Symbol.species, {
              value: null,
              configurable: true
            });
          }
        }
        self.alloc = function (value, name, id) {
          return function (length, size, a, index) {
            return assertSize(size), size <= 0 ? createBuffer(length, size) : void 0 !== a ? "string" == typeof index ? createBuffer(length, size).fill(a, index) : createBuffer(length, size).fill(a) : createBuffer(length, size);
          }(null, value, name, id);
        };
        self.allocUnsafe = function (value) {
          return allocUnsafe(null, value);
        };
        self.allocUnsafeSlow = function (value) {
          return allocUnsafe(null, value);
        };
        self.isBuffer = function (obj) {
          return !(null == obj || !obj._isBuffer);
        };
        self.compare = function (x, obj) {
          if (!self.isBuffer(x) || !self.isBuffer(obj)) {
            throw new TypeError("Arguments must be Buffers");
          }
          if (x === obj) {
            return 0;
          }
          var i = x.length;
          var max = obj.length;
          var k = 0;
          var h = Math.min(i, max);
          for (; k < h; ++k) {
            if (x[k] !== obj[k]) {
              i = x[k];
              max = obj[k];
              break;
            }
          }
          return i < max ? -1 : max < i ? 1 : 0;
        };
        self.isEncoding = function (obj) {
          switch (String(obj).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return true;
            default:
              return false;
          }
        };
        self.concat = function (str, a) {
          if (!assert(str)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }
          if (0 === str.length) {
            return self.alloc(0);
          }
          var i;
          if (void 0 === a) {
            a = 0;
            i = 0;
            for (; i < str.length; ++i) {
              a = a + str[i].length;
            }
          }
          var main = self.allocUnsafe(a);
          var b = 0;
          i = 0;
          for (; i < str.length; ++i) {
            var data = str[i];
            if (!self.isBuffer(data)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }
            data.copy(main, b);
            b = b + data.length;
          }
          return main;
        };
        self.byteLength = byteLength;
        self.prototype._isBuffer = true;
        self.prototype.swap16 = function () {
          var i = this.length;
          if (i % 2 != 0) {
            throw new RangeError("Buffer size must be a multiple of 16-bits");
          }
          var l = 0;
          for (; l < i; l = l + 2) {
            swap(this, l, l + 1);
          }
          return this;
        };
        self.prototype.swap32 = function () {
          var l = this.length;
          if (l % 4 != 0) {
            throw new RangeError("Buffer size must be a multiple of 32-bits");
          }
          var i = 0;
          for (; i < l; i = i + 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }
          return this;
        };
        self.prototype.swap64 = function () {
          var l = this.length;
          if (l % 8 != 0) {
            throw new RangeError("Buffer size must be a multiple of 64-bits");
          }
          var i = 0;
          for (; i < l; i = i + 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }
          return this;
        };
        self.prototype.toString = function () {
          var txt = 0 | this.length;
          return 0 === txt ? "" : 0 === arguments.length ? cb(this, 0, txt) : write.apply(this, arguments);
        };
        self.prototype.equals = function (other) {
          if (!self.isBuffer(other)) {
            throw new TypeError("Argument must be a Buffer");
          }
          return this === other || 0 === self.compare(this, other);
        };
        self.prototype.inspect = function () {
          var pix_color = "";
          var max = Buffer.INSPECT_MAX_BYTES;
          return this.length > 0 && (pix_color = this.toString("hex", 0, max).match(/.{2}/g).join(" "), this.length > max && (pix_color = pix_color + " ... ")), "<Buffer " + pix_color + ">";
        };
        self.prototype.compare = function (b, t, c, n, i) {
          if (!self.isBuffer(b)) {
            throw new TypeError("Argument must be a Buffer");
          }
          if (void 0 === t && (t = 0), void 0 === c && (c = b ? b.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || c > b.length || n < 0 || i > this.length) {
            throw new RangeError("out of range index");
          }
          if (n >= i && t >= c) {
            return 0;
          }
          if (n >= i) {
            return -1;
          }
          if (t >= c) {
            return 1;
          }
          if (this === b) {
            return 0;
          }
          var r = (i = i >>> 0) - (n = n >>> 0);
          var p = (c = c >>> 0) - (t = t >>> 0);
          var m = Math.min(r, p);
          var a = this.slice(n, i);
          var e = b.slice(t, c);
          var j = 0;
          for (; j < m; ++j) {
            if (a[j] !== e[j]) {
              r = a[j];
              p = e[j];
              break;
            }
          }
          return r < p ? -1 : p < r ? 1 : 0;
        };
        self.prototype.includes = function (item, key, encoding) {
          return -1 !== this.indexOf(item, key, encoding);
        };
        self.prototype.indexOf = function (name, item, value) {
          return set(this, name, item, value, true);
        };
        self.prototype.lastIndexOf = function (v, a, obj) {
          return set(this, v, a, obj, false);
        };
        self.prototype.write = function (string, offset, length, encoding) {
          if (void 0 === offset) {
            encoding = "utf8";
            length = this.length;
            offset = 0;
          } else {
            if (void 0 === length && "string" == typeof offset) {
              encoding = offset;
              length = this.length;
              offset = 0;
            } else {
              if (!isFinite(offset)) {
                throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
              }
              offset = offset | 0;
              if (isFinite(length)) {
                length = length | 0;
                if (void 0 === encoding) {
                  encoding = "utf8";
                }
              } else {
                encoding = length;
                length = void 0;
              }
            }
          }
          var remaining = this.length - offset;
          if ((void 0 === length || length > remaining) && (length = remaining), string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError("Attempt to write outside buffer bounds");
          }
          if (!encoding) {
            encoding = "utf8";
          }
          var i = false;
          for (; ;) {
            switch (encoding) {
              case "hex":
                return hexWrite(this, string, offset, length);
              case "utf8":
              case "utf-8":
                return utf8Write(this, string, offset, length);
              case "ascii":
                return callback(this, string, offset, length);
              case "latin1":
              case "binary":
                return asciiWrite(this, string, offset, length);
              case "base64":
                return ucs2Write(this, string, offset, length);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return init(this, string, offset, length);
              default:
                if (i) {
                  throw new TypeError("Unknown encoding: " + encoding);
                }
                encoding = ("" + encoding).toLowerCase();
                i = true;
            }
          }
        };
        self.prototype.toJSON = function () {
          return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };
        var skip = 4096;
        self.prototype.slice = function (start, end) {
          var newBuf;
          var len = this.length;
          if ((start = ~~start) < 0 ? (start = start + len) < 0 && (start = 0) : start > len && (start = len), (end = void 0 === end ? len : ~~end) < 0 ? (end = end + len) < 0 && (end = 0) : end > len && (end = len), end < start && (end = start), self.TYPED_ARRAY_SUPPORT) {
            (newBuf = this.subarray(start, end)).__proto__ = self.prototype;
          } else {
            var sliceLen = end - start;
            newBuf = new self(sliceLen, void 0);
            var i = 0;
            for (; i < sliceLen; ++i) {
              newBuf[i] = this[i + start];
            }
          }
          return newBuf;
        };
        self.prototype.readUIntLE = function (offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }
          var val = this[offset];
          var mul = 1;
          var i = 0;
          for (; ++i < byteLength && (mul = mul * 256);) {
            val = val + this[offset + i] * mul;
          }
          return val;
        };
        self.prototype.readUIntBE = function (offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }
          var val = this[offset + --byteLength];
          var mul = 1;
          for (; byteLength > 0 && (mul = mul * 256);) {
            val = val + this[offset + --byteLength] * mul;
          }
          return val;
        };
        self.prototype.readUInt8 = function (offset, limit) {
          return limit || checkOffset(offset, 1, this.length), this[offset];
        };
        self.prototype.readUInt16LE = function (offset, limit) {
          return limit || checkOffset(offset, 2, this.length), this[offset] | this[offset + 1] << 8;
        };
        self.prototype.readUInt16BE = function (offset, limit) {
          return limit || checkOffset(offset, 2, this.length), this[offset] << 8 | this[offset + 1];
        };
        self.prototype.readUInt32LE = function (offset, limit) {
          return limit || checkOffset(offset, 4, this.length), (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + 16777216 * this[offset + 3];
        };
        self.prototype.readUInt32BE = function (offset, limit) {
          return limit || checkOffset(offset, 4, this.length), 16777216 * this[offset] + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };
        self.prototype.readIntLE = function (offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }
          var val = this[offset];
          var mul = 1;
          var i = 0;
          for (; ++i < byteLength && (mul = mul * 256);) {
            val = val + this[offset + i] * mul;
          }
          return val >= (mul = mul * 128) && (val = val - Math.pow(2, 8 * byteLength)), val;
        };
        self.prototype.readIntBE = function (offset, byteLength, noAssert) {
          offset = offset | 0;
          byteLength = byteLength | 0;
          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];
          for (; i > 0 && (mul = mul * 256);) {
            val = val + this[offset + --i] * mul;
          }
          return val >= (mul = mul * 128) && (val = val - Math.pow(2, 8 * byteLength)), val;
        };
        self.prototype.readInt8 = function (offset, limit) {
          return limit || checkOffset(offset, 1, this.length), 128 & this[offset] ? -1 * (255 - this[offset] + 1) : this[offset];
        };
        self.prototype.readInt16LE = function (offset, noAssert) {
          if (!noAssert) {
            checkOffset(offset, 2, this.length);
          }
          var r = this[offset] | this[offset + 1] << 8;
          return 32768 & r ? 4294901760 | r : r;
        };
        self.prototype.readInt16BE = function (offset, noAssert) {
          if (!noAssert) {
            checkOffset(offset, 2, this.length);
          }
          var r = this[offset + 1] | this[offset] << 8;
          return 32768 & r ? 4294901760 | r : r;
        };
        self.prototype.readInt32LE = function (offset, limit) {
          return limit || checkOffset(offset, 4, this.length), this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };
        self.prototype.readInt32BE = function (offset, limit) {
          return limit || checkOffset(offset, 4, this.length), this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };
        self.prototype.readFloatLE = function (offset, limit) {
          return limit || checkOffset(offset, 4, this.length), exports.read(this, offset, true, 23, 4);
        };
        self.prototype.readFloatBE = function (offset, limit) {
          return limit || checkOffset(offset, 4, this.length), exports.read(this, offset, false, 23, 4);
        };
        self.prototype.readDoubleLE = function (offset, limit) {
          return limit || checkOffset(offset, 8, this.length), exports.read(this, offset, true, 52, 8);
        };
        self.prototype.readDoubleBE = function (offset, limit) {
          return limit || checkOffset(offset, 8, this.length), exports.read(this, offset, false, 52, 8);
        };
        self.prototype.writeUIntLE = function (value, offset, byteLength, noAssert) {
          if (!(value = +value, offset = offset | 0, byteLength = byteLength | 0, noAssert)) {
            checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
          }
          var mul = 1;
          var i = 0;
          this[offset] = 255 & value;
          for (; ++i < byteLength && (mul = mul * 256);) {
            this[offset + i] = value / mul & 255;
          }
          return offset + byteLength;
        };
        self.prototype.writeUIntBE = function (value, offset, byteLength, noAssert) {
          if (!(value = +value, offset = offset | 0, byteLength = byteLength | 0, noAssert)) {
            checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength) - 1, 0);
          }
          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = 255 & value;
          for (; --i >= 0 && (mul = mul * 256);) {
            this[offset + i] = value / mul & 255;
          }
          return offset + byteLength;
        };
        self.prototype.writeUInt8 = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 1, 255, 0), self.TYPED_ARRAY_SUPPORT || (value = Math.floor(value)), this[offset] = 255 & value, offset + 1;
        };
        self.prototype.writeUInt16LE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 2, 65535, 0), self.TYPED_ARRAY_SUPPORT ? (this[offset] = 255 & value, this[offset + 1] = value >>> 8) : objectWriteUInt16(this, value, offset, true), offset + 2;
        };
        self.prototype.writeUInt16BE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 2, 65535, 0), self.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 8, this[offset + 1] = 255 & value) : objectWriteUInt16(this, value, offset, false), offset + 2;
        };
        self.prototype.writeUInt32LE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 4, 4294967295, 0), self.TYPED_ARRAY_SUPPORT ? (this[offset + 3] = value >>> 24, this[offset + 2] = value >>> 16, this[offset + 1] = value >>> 8, this[offset] = 255 & value) : objectWriteUInt32(this, value, offset, true), offset + 4;
        };
        self.prototype.writeUInt32BE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 4, 4294967295, 0), self.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 24, this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 255 & value) : objectWriteUInt32(this, value, offset, false), offset + 4;
        };
        self.prototype.writeIntLE = function (value, offset, byteLength, noAssert) {
          if (value = +value, offset = offset | 0, !noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }
          var i = 0;
          var mul = 1;
          var a = 0;
          this[offset] = 255 & value;
          for (; ++i < byteLength && (mul = mul * 256);) {
            if (value < 0 && 0 === a && 0 !== this[offset + i - 1]) {
              a = 1;
            }
            this[offset + i] = (value / mul >> 0) - a & 255;
          }
          return offset + byteLength;
        };
        self.prototype.writeIntBE = function (value, offset, byteLength, noAssert) {
          if (value = +value, offset = offset | 0, !noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }
          var i = byteLength - 1;
          var mul = 1;
          var a = 0;
          this[offset + i] = 255 & value;
          for (; --i >= 0 && (mul = mul * 256);) {
            if (value < 0 && 0 === a && 0 !== this[offset + i + 1]) {
              a = 1;
            }
            this[offset + i] = (value / mul >> 0) - a & 255;
          }
          return offset + byteLength;
        };
        self.prototype.writeInt8 = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 1, 127, -128), self.TYPED_ARRAY_SUPPORT || (value = Math.floor(value)), value < 0 && (value = 255 + value + 1), this[offset] = 255 & value, offset + 1;
        };
        self.prototype.writeInt16LE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 2, 32767, -32768), self.TYPED_ARRAY_SUPPORT ? (this[offset] = 255 & value, this[offset + 1] = value >>> 8) : objectWriteUInt16(this, value, offset, true), offset + 2;
        };
        self.prototype.writeInt16BE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 2, 32767, -32768), self.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 8, this[offset + 1] = 255 & value) : objectWriteUInt16(this, value, offset, false), offset + 2;
        };
        self.prototype.writeInt32LE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648), self.TYPED_ARRAY_SUPPORT ? (this[offset] = 255 & value, this[offset + 1] = value >>> 8, this[offset + 2] = value >>> 16, this[offset + 3] = value >>> 24) : objectWriteUInt32(this, value, offset, true), offset + 4;
        };
        self.prototype.writeInt32BE = function (value, offset, noAssert) {
          return value = +value, offset = offset | 0, noAssert || checkInt(this, value, offset, 4, 2147483647, -2147483648), value < 0 && (value = 4294967295 + value + 1), self.TYPED_ARRAY_SUPPORT ? (this[offset] = value >>> 24, this[offset + 1] = value >>> 16, this[offset + 2] = value >>> 8, this[offset + 3] = 255 & value) : objectWriteUInt32(this, value, offset, false), offset + 4;
        };
        self.prototype.writeFloatLE = function (value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };
        self.prototype.writeFloatBE = function (value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };
        self.prototype.writeDoubleLE = function (value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };
        self.prototype.writeDoubleBE = function (value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        };
        self.prototype.copy = function (target, targetStart, start, end) {
          if (start || (start = 0), end || 0 === end || (end = this.length), targetStart >= target.length && (targetStart = target.length), targetStart || (targetStart = 0), end > 0 && end < start && (end = start), end === start) {
            return 0;
          }
          if (0 === target.length || 0 === this.length) {
            return 0;
          }
          if (targetStart < 0) {
            throw new RangeError("targetStart out of bounds");
          }
          if (start < 0 || start >= this.length) {
            throw new RangeError("sourceStart out of bounds");
          }
          if (end < 0) {
            throw new RangeError("sourceEnd out of bounds");
          }
          if (end > this.length) {
            end = this.length;
          }
          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }
          var i;
          var len = end - start;
          if (this === target && start < targetStart && targetStart < end) {
            i = len - 1;
            for (; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            if (len < 1E3 || !self.TYPED_ARRAY_SUPPORT) {
              i = 0;
              for (; i < len; ++i) {
                target[i + targetStart] = this[i + start];
              }
            } else {
              Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
            }
          }
          return len;
        };
        self.prototype.fill = function (val, start, end, value) {
          if ("string" == typeof val) {
            if ("string" == typeof start ? (value = start, start = 0, end = this.length) : "string" == typeof end && (value = end, end = this.length), 1 === val.length) {
              var resolveValue = val.charCodeAt(0);
              if (resolveValue < 256) {
                val = resolveValue;
              }
            }
            if (void 0 !== value && "string" != typeof value) {
              throw new TypeError("encoding must be a string");
            }
            if ("string" == typeof value && !self.isEncoding(value)) {
              throw new TypeError("Unknown encoding: " + value);
            }
          } else {
            if ("number" == typeof val) {
              val = val & 255;
            }
          }
          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError("Out of range index");
          }
          if (end <= start) {
            return this;
          }
          var i;
          if (start = start >>> 0, end = void 0 === end ? this.length : end >>> 0, val || (val = 0), "number" == typeof val) {
            i = start;
            for (; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var colorPool = self.isBuffer(val) ? val : utf8ToBytes((new self(val, value)).toString());
            var colorPoolSize = colorPool.length;
            i = 0;
            for (; i < end - start; ++i) {
              this[i + start] = colorPool[i % colorPoolSize];
            }
          }
          return this;
        };
        var global = /[^+\/0-9A-Za-z-_]/g;
      }).call(this, require("./node_modules/webpack/buildin/global.js"));
    },
    "./node_modules/node-libs-browser/node_modules/events/events.js": function (module, selector, convertToImages) {
      function self() {
        self.init.call(this);
      }
      function $getMaxListeners(that) {
        return void 0 === that._maxListeners ? self.defaultMaxListeners : that._maxListeners;
      }
      function on(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        var result;
        if ("function" != typeof listener) {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
        if (void 0 === (events = target._events) ? (events = target._events = Object.create(null), target._eventsCount = 0) : (void 0 !== events.newListener && (target.emit("newListener", type, listener.listener ? listener.listener : listener), events = target._events), existing = events[type]), void 0 === existing) {
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if ("function" == typeof existing ? existing = events[type] = prepend ? [listener, existing] : [existing, listener] : prepend ? existing.unshift(listener) : existing.push(listener), (m = $getMaxListeners(target)) > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            result = w;
            if (console && console.warn) {
              console.warn(result);
            }
          }
        }
        return target;
      }
      function cb() {
        var e = [];
        var i = 0;
        for (; i < arguments.length; i++) {
          e.push(arguments[i]);
        }
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          fn(this.listener, this.target, e);
        }
      }
      function off(type, name, listener) {
        var state = {
          fired: false,
          wrapFn: void 0,
          target: type,
          type: name,
          listener: listener
        };
        var wrapped = cb.bind(state);
        return wrapped.listener = listener, state.wrapFn = wrapped, wrapped;
      }
      function listeners(obj, type, exists) {
        var events = obj._events;
        if (void 0 === events) {
          return [];
        }
        var evlistener = events[type];
        return void 0 === evlistener ? [] : "function" == typeof evlistener ? exists ? [evlistener.listener || evlistener] : [evlistener] : exists ? function (arr) {
          var testvectors = new Array(arr.length);
          var i = 0;
          for (; i < testvectors.length; ++i) {
            testvectors[i] = arr[i].listener || arr[i];
          }
          return testvectors;
        }(evlistener) : arrayClone(evlistener, evlistener.length);
      }
      function listenerCount(type) {
        var e = this._events;
        if (void 0 !== e) {
          var l = e[type];
          if ("function" == typeof l) {
            return 1;
          }
          if (void 0 !== l) {
            return l.length;
          }
        }
        return 0;
      }
      function arrayClone(arr, n) {
        var copy = new Array(n);
        var i = 0;
        for (; i < n; ++i) {
          copy[i] = arr[i];
        }
        return copy;
      }
      var findHandlers;
      var overrides = "object" == typeof Reflect ? Reflect : null;
      var fn = overrides && "function" == typeof overrides.apply ? overrides.apply : function (target, obj, dest) {
        return Function.prototype.apply.call(target, obj, dest);
      };
      findHandlers = overrides && "function" == typeof overrides.ownKeys ? overrides.ownKeys : Object.getOwnPropertySymbols ? function (value) {
        return Object.getOwnPropertyNames(value).concat(Object.getOwnPropertySymbols(value));
      } : function (e) {
        return Object.getOwnPropertyNames(e);
      };
      var isNumber = Number.isNaN || function (value) {
        return value != value;
      };
      module.exports = self;
      self.EventEmitter = self;
      self.prototype._events = void 0;
      self.prototype._eventsCount = 0;
      self.prototype._maxListeners = void 0;
      var bottomAlign = 10;
      Object.defineProperty(self, "defaultMaxListeners", {
        enumerable: true,
        get: function () {
          return bottomAlign;
        },
        set: function (value) {
          if ("number" != typeof value || value < 0 || isNumber(value)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + value + ".");
          }
          bottomAlign = value;
        }
      });
      self.init = function () {
        if (!(void 0 !== this._events && this._events !== Object.getPrototypeOf(this)._events)) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      self.prototype.setMaxListeners = function (n) {
        if ("number" != typeof n || n < 0 || isNumber(n)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
        }
        return this._maxListeners = n, this;
      };
      self.prototype.getMaxListeners = function () {
        return $getMaxListeners(this);
      };
      self.prototype.emit = function (name) {
        var args = [];
        var i = 1;
        for (; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var selected = "error" === name;
        var events = this._events;
        if (void 0 !== events) {
          selected = selected && void 0 === events.error;
        } else {
          if (!selected) {
            return false;
          }
        }
        if (selected) {
          var c;
          if (args.length > 0 && (c = args[0]), c instanceof Error) {
            throw c;
          }
          var e = new Error("Unhandled error." + (c ? " (" + c.message + ")" : ""));
          throw e.context = c, e;
        }
        var handler = events[name];
        if (void 0 === handler) {
          return false;
        }
        if ("function" == typeof handler) {
          fn(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          i = 0;
          for (; i < len; ++i) {
            fn(listeners[i], this, args);
          }
        }
        return true;
      };
      self.prototype.addListener = function (name, fn) {
        return on(this, name, fn, false);
      };
      self.prototype.on = self.prototype.addListener;
      self.prototype.prependListener = function (name, fn) {
        return on(this, name, fn, true);
      };
      self.prototype.once = function (name, fn) {
        if ("function" != typeof fn) {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof fn);
        }
        return this.on(name, off(this, name, fn)), this;
      };
      self.prototype.prependOnceListener = function (name, fn) {
        if ("function" != typeof fn) {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof fn);
        }
        return this.prependListener(name, off(this, name, fn)), this;
      };
      self.prototype.removeListener = function (name, fn) {
        var list;
        var events;
        var firstsingleletterword;
        var i;
        var originalListener;
        if ("function" != typeof fn) {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof fn);
        }
        if (void 0 === (events = this._events)) {
          return this;
        }
        if (void 0 === (list = events[name])) {
          return this;
        }
        if (list === fn || list.listener === fn) {
          if (0 == --this._eventsCount) {
            this._events = Object.create(null);
          } else {
            delete events[name];
            if (events.removeListener) {
              this.emit("removeListener", name, list.listener || fn);
            }
          }
        } else {
          if ("function" != typeof list) {
            firstsingleletterword = -1;
            i = list.length - 1;
            for (; i >= 0; i--) {
              if (list[i] === fn || list[i].listener === fn) {
                originalListener = list[i].listener;
                firstsingleletterword = i;
                break;
              }
            }
            if (firstsingleletterword < 0) {
              return this;
            }
            if (0 === firstsingleletterword) {
              list.shift();
            } else {
              (function (array, i) {
                for (; i + 1 < array.length; i++) {
                  array[i] = array[i + 1];
                }
                array.pop();
              })(list, firstsingleletterword);
            }
            if (1 === list.length) {
              events[name] = list[0];
            }
            if (void 0 !== events.removeListener) {
              this.emit("removeListener", name, originalListener || fn);
            }
          }
        }
        return this;
      };
      self.prototype.off = self.prototype.removeListener;
      self.prototype.removeAllListeners = function (name) {
        var event;
        var value;
        var i;
        if (void 0 === (value = this._events)) {
          return this;
        }
        if (void 0 === value.removeListener) {
          return 0 === arguments.length ? (this._events = Object.create(null), this._eventsCount = 0) : void 0 !== value[name] && (0 == --this._eventsCount ? this._events = Object.create(null) : delete value[name]), this;
        }
        if (0 === arguments.length) {
          var key;
          var parameterNames = Object.keys(value);
          i = 0;
          for (; i < parameterNames.length; ++i) {
            if ("removeListener" !== (key = parameterNames[i])) {
              this.removeAllListeners(key);
            }
          }
          return this.removeAllListeners("removeListener"), this._events = Object.create(null), this._eventsCount = 0, this;
        }
        if ("function" == typeof (event = value[name])) {
          this.removeListener(name, event);
        } else {
          if (void 0 !== event) {
            i = event.length - 1;
            for (; i >= 0; i--) {
              this.removeListener(name, event[i]);
            }
          }
        }
        return this;
      };
      self.prototype.listeners = function (next) {
        return listeners(this, next, true);
      };
      self.prototype.rawListeners = function (next) {
        return listeners(this, next, false);
      };
      self.listenerCount = function (emitter, type) {
        return "function" == typeof emitter.listenerCount ? emitter.listenerCount(type) : listenerCount.call(emitter, type);
      };
      self.prototype.listenerCount = listenerCount;
      self.prototype.eventNames = function () {
        return this._eventsCount > 0 ? findHandlers(this._events) : [];
      };
    },
    "./node_modules/node-libs-browser/node_modules/timers-browserify/main.js": function (module, exports, __webpack_require__) {
      (function (root) {
        function Timeout(id, clearFn) {
          this._id = id;
          this._clearFn = clearFn;
        }
        var target = void 0 !== root && root || "undefined" != typeof self && self || window;
        var apply = Function.prototype.apply;
        exports.setTimeout = function () {
          return new Timeout(apply.call(setTimeout, target, arguments), clearTimeout);
        };
        exports.setInterval = function () {
          return new Timeout(apply.call(setInterval, target, arguments), clearInterval);
        };
        exports.clearTimeout = exports.clearInterval = function (n) {
          if (n) {
            n.close();
          }
        };
        Timeout.prototype.unref = Timeout.prototype.ref = function () {
        };
        Timeout.prototype.close = function () {
          this._clearFn.call(target, this._id);
        };
        exports.enroll = function (item, msecs) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = msecs;
        };
        exports.unenroll = function (item) {
          clearTimeout(item._idleTimeoutId);
          item._idleTimeout = -1;
        };
        exports._unrefActive = exports.active = function (item) {
          clearTimeout(item._idleTimeoutId);
          var msecs = item._idleTimeout;
          if (msecs >= 0) {
            item._idleTimeoutId = setTimeout(function () {
              if (item._onTimeout) {
                item._onTimeout();
              }
            }, msecs);
          }
        };
        __webpack_require__("./node_modules/setimmediate/setImmediate.js");
        exports.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== root && root.setImmediate || this && this.setImmediate;
        exports.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== root && root.clearImmediate || this && this.clearImmediate;
      }).call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"));
    },
    "./node_modules/node-libs-browser/node_modules/util/node_modules/inherits/inherits_browser.js": function (mixin, doPost) {
      if ("function" == typeof Object.create) {
        mixin.exports = function (obj, name) {
          obj.super_ = name;
          obj.prototype = Object.create(name.prototype, {
            constructor: {
              value: obj,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        mixin.exports = function (obj, name) {
          obj.super_ = name;
          var f = function () {
          };
          f.prototype = name.prototype;
          obj.prototype = new f;
          obj.prototype.constructor = obj;
        };
      }
    },
    "./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        return value && "object" == typeof value && "function" == typeof value.copy && "function" == typeof value.fill && "function" == typeof value.readUInt8;
      };
    },
    "./node_modules/node-libs-browser/node_modules/util/util.js": function (module, exports, __webpack_require__) {
      (function (process) {
        function inspect(obj, val) {
          var ctx = {
            seen: [],
            stylize: stylizeNoColor
          };
          return arguments.length >= 3 && (ctx.depth = arguments[2]), arguments.length >= 4 && (ctx.colors = arguments[3]), isBoolean(val) ? ctx.showHidden = val : val && exports._extend(ctx, val), isUndefined(ctx.showHidden) && (ctx.showHidden = false), isUndefined(ctx.depth) && (ctx.depth = 2), isUndefined(ctx.colors) && (ctx.colors = false), isUndefined(ctx.customInspect) && (ctx.customInspect = true), ctx.colors && (ctx.stylize = stylizeWithColor), formatValue(ctx, obj, ctx.depth);
        }
        function stylizeWithColor(str, styleType) {
          var style = inspect.styles[styleType];
          return style ? "\u001b[" + inspect.colors[style][0] + "m" + str + "\u001b[" + inspect.colors[style][1] + "m" : str;
        }
        function stylizeNoColor(str, styleType) {
          return str;
        }
        function formatValue(ctx, value, recurseTimes) {
          if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && (!value.constructor || value.constructor.prototype !== value)) {
            var ret = value.inspect(recurseTimes, ctx);
            return isString(ret) || (ret = formatValue(ctx, ret, recurseTimes)), ret;
          }
          var primitive = function (ctx, value) {
            if (isUndefined(value)) {
              return ctx.stylize("undefined", "undefined");
            }
            if (isString(value)) {
              var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
              return ctx.stylize(simple, "string");
            }
            if (isNumber(value)) {
              return ctx.stylize("" + value, "number");
            }
            if (isBoolean(value)) {
              return ctx.stylize("" + value, "boolean");
            }
            if (isNull(value)) {
              return ctx.stylize("null", "null");
            }
          }(ctx, value);
          if (primitive) {
            return primitive;
          }
          var keys = Object.keys(value);
          var visibleKeys = function (node_ids) {
            var subwikiListsCache = {};
            return node_ids.forEach(function (wikiId, canCreateDiscussions) {
              subwikiListsCache[wikiId] = true;
            }), subwikiListsCache;
          }(keys);
          if (ctx.showHidden && (keys = Object.getOwnPropertyNames(value)), isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
            return formatError(value);
          }
          if (0 === keys.length) {
            if (isFunction(value)) {
              var opt_by = value.name ? ": " + value.name : "";
              return ctx.stylize("[Function" + opt_by + "]", "special");
            }
            if (isRegExp(value)) {
              return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
            }
            if (isDate(value)) {
              return ctx.stylize(Date.prototype.toString.call(value), "date");
            }
            if (isError(value)) {
              return formatError(value);
            }
          }
          var end;
          var result = "";
          var array = false;
          var enc = ["{", "}"];
          if (isArray(value) && (array = true, enc = ["[", "]"]), isFunction(value)) {
            result = " [Function" + (value.name ? ": " + value.name : "") + "]";
          }
          return isRegExp(value) && (result = " " + RegExp.prototype.toString.call(value)), isDate(value) && (result = " " + Date.prototype.toUTCString.call(value)), isError(value) && (result = " " + formatError(value)), 0 !== keys.length || array && 0 != value.length ? recurseTimes < 0 ? isRegExp(value) ? ctx.stylize(RegExp.prototype.toString.call(value), "regexp") : ctx.stylize("[Object]", "special") : (ctx.seen.push(value), end = array ? function (ctx, value, recurseTimes, visibleKeys, node_ids) {
            var output = [];
            var i = 0;
            var valueLength = value.length;
            for (; i < valueLength; ++i) {
              if (hasOwnProperty(value, String(i))) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
              } else {
                output.push("");
              }
            }
            return node_ids.forEach(function (key) {
              if (!key.match(/^\d+$/)) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
              }
            }), output;
          }(ctx, value, recurseTimes, visibleKeys, keys) : keys.map(function (key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          }), ctx.seen.pop(), function (after, str, words) {
            if (after.reduce(function (outputByteCount, t) {
              return t.indexOf("\n") >= 0 && 0, outputByteCount + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
            }, 0) > 60) {
              return words[0] + ("" === str ? "" : str + "\n ") + " " + after.join(",\n  ") + " " + words[1];
            }
            return words[0] + str + " " + after.join(", ") + " " + words[1];
          }(end, result, enc)) : enc[0] + result + enc[1];
        }
        function formatError(value) {
          return "[" + Error.prototype.toString.call(value) + "]";
        }
        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, obj) {
          var name;
          var str;
          var desc;
          if ((desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
          }).get ? str = desc.set ? ctx.stylize("[Getter/Setter]", "special") : ctx.stylize("[Getter]", "special") : desc.set && (str = ctx.stylize("[Setter]", "special")), hasOwnProperty(visibleKeys, key) || (name = "[" + key + "]"), str || (ctx.seen.indexOf(desc.value) < 0 ? (str = isNull(recurseTimes) ? formatValue(ctx, desc.value, null) : formatValue(ctx, desc.value, recurseTimes - 1)).indexOf("\n") > -1 && (str = obj ? str.split("\n").map(function (canCreateDiscussions) {
            return "  " + canCreateDiscussions;
          }).join("\n").substr(2) : "\n" + str.split("\n").map(function (canCreateDiscussions) {
            return "   " + canCreateDiscussions;
          }).join("\n")) : str = ctx.stylize("[Circular]", "special")), isUndefined(name)) {
            if (obj && key.match(/^\d+$/)) {
              return str;
            }
            if ((name = JSON.stringify("" + key)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
              name = name.substr(1, name.length - 2);
              name = ctx.stylize(name, "name");
            } else {
              name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
              name = ctx.stylize(name, "string");
            }
          }
          return name + ": " + str;
        }
        function isArray(value) {
          return Array.isArray(value);
        }
        function isBoolean(val) {
          return "boolean" == typeof val;
        }
        function isNull(obj) {
          return null === obj;
        }
        function isNumber(value) {
          return "number" == typeof value;
        }
        function isString(val) {
          return "string" == typeof val;
        }
        function isUndefined(value) {
          return void 0 === value;
        }
        function isRegExp(re) {
          return isObject(re) && "[object RegExp]" === objectToString(re);
        }
        function isObject(arg) {
          return "object" == typeof arg && null !== arg;
        }
        function isDate(value) {
          return isObject(value) && "[object Date]" === objectToString(value);
        }
        function isError(value) {
          return isObject(value) && ("[object Error]" === objectToString(value) || value instanceof Error);
        }
        function isFunction(value) {
          return "function" == typeof value;
        }
        function objectToString(value) {
          return Object.prototype.toString.call(value);
        }
        function getDate(cmp) {
          return cmp < 10 ? "0" + cmp.toString(10) : cmp.toString(10);
        }
        function timestamp() {
          var d = new Date;
          var CredentialScope = [getDate(d.getHours()), getDate(d.getMinutes()), getDate(d.getSeconds())].join(":");
          return [d.getDate(), months[d.getMonth()], CredentialScope].join(" ");
        }
        function hasOwnProperty(obj, name) {
          return Object.prototype.hasOwnProperty.call(obj, name);
        }
        function resolve(reason, baseReject) {
          if (!reason) {
            var err = new Error("Promise was rejected with a falsy value");
            err.reason = reason;
            reason = err;
          }
          return baseReject(reason);
        }
        var apply = Object.getOwnPropertyDescriptors || function (value) {
          var keys = Object.keys(value);
          var storage = {};
          var i = 0;
          for (; i < keys.length; i++) {
            storage[keys[i]] = Object.getOwnPropertyDescriptor(value, keys[i]);
          }
          return storage;
        };
        var o = /%[sdj%]/g;
        exports.format = function (e) {
          if (!isString(e)) {
            var parts = [];
            var j = 0;
            for (; j < arguments.length; j++) {
              parts.push(inspect(arguments[j]));
            }
            return parts.join(" ");
          }
          j = 1;
          var values = arguments;
          var i = values.length;
          var s = String(e).replace(o, function (match) {
            if ("%%" === match) {
              return "%";
            }
            if (j >= i) {
              return match;
            }
            switch (match) {
              case "%s":
                return String(values[j++]);
              case "%d":
                return Number(values[j++]);
              case "%j":
                try {
                  return JSON.stringify(values[j++]);
                } catch (e) {
                  return "[Circular]";
                }
              default:
                return match;
            }
          });
          var value = values[j];
          for (; j < i; value = values[++j]) {
            if (isNull(value) || !isObject(value)) {
              s = s + (" " + value);
            } else {
              s = s + (" " + inspect(value));
            }
          }
          return s;
        };
        exports.deprecate = function (fn, msg) {
          if (void 0 !== process && true === process.noDeprecation) {
            return fn;
          }
          if (void 0 === process) {
            return function () {
              return exports.deprecate(fn, msg).apply(this, arguments);
            };
          }
          var o = false;
          return function () {
            if (!o) {
              if (process.throwDeprecation) {
                throw new Error(msg);
              }
              if (process.traceDeprecation) {
                console.trace(msg);
              } else {
                console.error(msg);
              }
              o = true;
            }
            return fn.apply(this, arguments);
          };
        };
        var value;
        var processedOptions = {};
        exports.debuglog = function (name) {
          if (isUndefined(value) && (value = process.env.NODE_DEBUG || ""), name = name.toUpperCase(), !processedOptions[name]) {
            if ((new RegExp("\\b" + name + "\\b", "i")).test(value)) {
              var pid = process.pid;
              processedOptions[name] = function () {
                var msg = exports.format.apply(exports, arguments);
                console.error("%s %d: %s", name, pid, msg);
              };
            } else {
              processedOptions[name] = function () {
              };
            }
          }
          return processedOptions[name];
        };
        exports.inspect = inspect;
        inspect.colors = {
          bold: [1, 22],
          italic: [3, 23],
          underline: [4, 24],
          inverse: [7, 27],
          white: [37, 39],
          grey: [90, 39],
          black: [30, 39],
          blue: [34, 39],
          cyan: [36, 39],
          green: [32, 39],
          magenta: [35, 39],
          red: [31, 39],
          yellow: [33, 39]
        };
        inspect.styles = {
          special: "cyan",
          number: "yellow",
          boolean: "yellow",
          undefined: "grey",
          null: "bold",
          string: "green",
          date: "magenta",
          regexp: "red"
        };
        exports.isArray = isArray;
        exports.isBoolean = isBoolean;
        exports.isNull = isNull;
        exports.isNullOrUndefined = function (val) {
          return null == val;
        };
        exports.isNumber = isNumber;
        exports.isString = isString;
        exports.isSymbol = function (x) {
          return "symbol" == typeof x;
        };
        exports.isUndefined = isUndefined;
        exports.isRegExp = isRegExp;
        exports.isObject = isObject;
        exports.isDate = isDate;
        exports.isError = isError;
        exports.isFunction = isFunction;
        exports.isPrimitive = function (val) {
          return null === val || "boolean" == typeof val || "number" == typeof val || "string" == typeof val || "symbol" == typeof val || void 0 === val;
        };
        exports.isBuffer = __webpack_require__("./node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js");
        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        exports.log = function () {
          console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
        };
        exports.inherits = __webpack_require__("./node_modules/node-libs-browser/node_modules/util/node_modules/inherits/inherits_browser.js");
        exports._extend = function (origin, target) {
          if (!target || !isObject(target)) {
            return origin;
          }
          var keys = Object.keys(target);
          var i = keys.length;
          for (; i--;) {
            origin[keys[i]] = target[keys[i]];
          }
          return origin;
        };
        var type = "undefined" != typeof Symbol ? Symbol("util.promisify.custom") : void 0;
        exports.promisify = function (data) {
          function fn() {
            var matcher;
            var finalCallback;
            var ret = new Promise(function (res, callback) {
              matcher = res;
              finalCallback = callback;
            });
            var optArgs = [];
            var i = 0;
            for (; i < arguments.length; i++) {
              optArgs.push(arguments[i]);
            }
            optArgs.push(function (err, obj) {
              if (err) {
                finalCallback(err);
              } else {
                matcher(obj);
              }
            });
            try {
              data.apply(this, optArgs);
            } catch (err) {
              finalCallback(err);
            }
            return ret;
          }
          if ("function" != typeof data) {
            throw new TypeError('The "original" argument must be of type Function');
          }
          if (type && data[type]) {
            if ("function" != typeof (fn = data[type])) {
              throw new TypeError('The "util.promisify.custom" argument must be of type Function');
            }
            return Object.defineProperty(fn, type, {
              value: fn,
              enumerable: false,
              writable: false,
              configurable: true
            }), fn;
          }
          return Object.setPrototypeOf(fn, Object.getPrototypeOf(data)), type && Object.defineProperty(fn, type, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
          }), Object.defineProperties(fn, apply(data));
        };
        exports.promisify.custom = type;
        exports.callbackify = function (t) {
          function fn() {
            var r = [];
            var i = 0;
            for (; i < arguments.length; i++) {
              r.push(arguments[i]);
            }
            var listener = r.pop();
            if ("function" != typeof listener) {
              throw new TypeError("The last argument must be of type Function");
            }
            var eventTarget = this;
            var done = function () {
              return listener.apply(eventTarget, arguments);
            };
            t.apply(this, r).then(function (ex) {
              process.nextTick(done, null, ex);
            }, function (status) {
              process.nextTick(resolve, status, done);
            });
          }
          if ("function" != typeof t) {
            throw new TypeError('The "original" argument must be of type Function');
          }
          return Object.setPrototypeOf(fn, Object.getPrototypeOf(t)), Object.defineProperties(fn, apply(t)), fn;
        };
      }).call(this, __webpack_require__("./node_modules/process/browser.js"));
    },
    "./node_modules/once/once.js": function (module, id, require) {
      function once(callback) {
        var f = function () {
          return f.called ? f.value : (f.called = true, f.value = callback.apply(this, arguments));
        };
        return f.called = false, f;
      }
      function onceStrict(fn) {
        var f = function () {
          if (f.called) {
            throw new Error(f.onceError);
          }
          return f.called = true, f.value = fn.apply(this, arguments);
        };
        var name = fn.name || "Function wrapped with `once`";
        return f.onceError = name + " shouldn't be called more than once", f.called = false, f;
      }
      var wrappy = require("./node_modules/wrappy/wrappy.js");
      module.exports = wrappy(once);
      module.exports.strict = wrappy(onceStrict);
      once.proto = once(function () {
        Object.defineProperty(Function.prototype, "once", {
          value: function () {
            return once(this);
          },
          configurable: true
        });
        Object.defineProperty(Function.prototype, "onceStrict", {
          value: function () {
            return onceStrict(this);
          },
          configurable: true
        });
      });
    },
    "./node_modules/pako/index.js": function (mixin, doPost, $parse) {
      var on = {};
      (0, $parse("./node_modules/pako/lib/utils/common.js").assign)(on, $parse("./node_modules/pako/lib/deflate.js"), $parse("./node_modules/pako/lib/inflate.js"), $parse("./node_modules/pako/lib/zlib/constants.js"));
      mixin.exports = on;
    },
    "./node_modules/pako/lib/deflate.js": function (module, exports, require) {
      function Deflate(options) {
        if (!(this instanceof Deflate)) {
          return new Deflate(options);
        }
        this.options = utils.assign({
          level: portalLevel,
          method: pre5,
          chunkSize: 16384,
          windowBits: 15,
          memLevel: 8,
          strategy: strat,
          to: ""
        }, options || {});
        var opt = this.options;
        if (opt.raw && opt.windowBits > 0) {
          opt.windowBits = -opt.windowBits;
        } else {
          if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
            opt.windowBits += 16;
          }
        }
        this.err = 0;
        this.msg = "";
        this.ended = false;
        this.chunks = [];
        this.strm = new zstream;
        this.strm.avail_out = 0;
        var status = zlib_deflate.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
        if (status !== Z_OK) {
          throw new Error(msg[status]);
        }
        if (opt.header && zlib_deflate.deflateSetHeader(this.strm, opt.header), opt.dictionary) {
          var dict;
          if (dict = "string" == typeof opt.dictionary ? strings.string2buf(opt.dictionary) : "[object ArrayBuffer]" === toString.call(opt.dictionary) ? new Uint8Array(opt.dictionary) : opt.dictionary, (status = zlib_deflate.deflateSetDictionary(this.strm, dict)) !== Z_OK) {
            throw new Error(msg[status]);
          }
          this._dict_set = true;
        }
      }
      function deflate(input, options) {
        var deflator = new Deflate(options);
        if (deflator.push(input, true), deflator.err) {
          throw deflator.msg || msg[deflator.err];
        }
        return deflator.result;
      }
      var zlib_deflate = require("./node_modules/pako/lib/zlib/deflate.js");
      var utils = require("./node_modules/pako/lib/utils/common.js");
      var strings = require("./node_modules/pako/lib/utils/strings.js");
      var msg = require("./node_modules/pako/lib/zlib/messages.js");
      var zstream = require("./node_modules/pako/lib/zlib/zstream.js");
      var toString = Object.prototype.toString;
      var Z_OK = 0;
      var portalLevel = -1;
      var strat = 0;
      var pre5 = 8;
      Deflate.prototype.push = function (data, mode) {
        var status;
        var _mode;
        var strm = this.strm;
        var chunkSize = this.options.chunkSize;
        if (this.ended) {
          return false;
        }
        _mode = mode === ~~mode ? mode : true === mode ? 4 : 0;
        if ("string" == typeof data) {
          strm.input = strings.string2buf(data);
        } else {
          if ("[object ArrayBuffer]" === toString.call(data)) {
            strm.input = new Uint8Array(data);
          } else {
            strm.input = data;
          }
        }
        strm.next_in = 0;
        strm.avail_in = strm.input.length;
        do {
          if (0 === strm.avail_out && (strm.output = new utils.Buf8(chunkSize), strm.next_out = 0, strm.avail_out = chunkSize), 1 !== (status = zlib_deflate.deflate(strm, _mode)) && status !== Z_OK) {
            return this.onEnd(status), this.ended = true, false;
          }
          if (!(0 !== strm.avail_out && (0 !== strm.avail_in || 4 !== _mode && 2 !== _mode))) {
            if ("string" === this.options.to) {
              this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));
            } else {
              this.onData(utils.shrinkBuf(strm.output, strm.next_out));
            }
          }
        } while ((strm.avail_in > 0 || 0 === strm.avail_out) && 1 !== status);
        return 4 === _mode ? (status = zlib_deflate.deflateEnd(this.strm), this.onEnd(status), this.ended = true, status === Z_OK) : 2 !== _mode || (this.onEnd(Z_OK), strm.avail_out = 0, true);
      };
      Deflate.prototype.onData = function (data) {
        this.chunks.push(data);
      };
      Deflate.prototype.onEnd = function (status) {
        if (status === Z_OK) {
          if ("string" === this.options.to) {
            this.result = this.chunks.join("");
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }
        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      exports.Deflate = Deflate;
      exports.deflate = deflate;
      exports.deflateRaw = function (input, options) {
        return (options = options || {}).raw = true, deflate(input, options);
      };
      exports.gzip = function (input, options) {
        return (options = options || {}).gzip = true, deflate(input, options);
      };
    },
    "./node_modules/pako/lib/inflate.js": function (module, exports, require) {
      function Inflate(options) {
        if (!(this instanceof Inflate)) {
          return new Inflate(options);
        }
        this.options = utils.assign({
          chunkSize: 16384,
          windowBits: 0,
          to: ""
        }, options || {});
        var opt = this.options;
        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
          opt.windowBits = -opt.windowBits;
          if (0 === opt.windowBits) {
            opt.windowBits = -15;
          }
        }
        if (!(!(opt.windowBits >= 0 && opt.windowBits < 16) || options && options.windowBits)) {
          opt.windowBits += 32;
        }
        if (opt.windowBits > 15 && opt.windowBits < 48 && 0 == (15 & opt.windowBits)) {
          opt.windowBits |= 15;
        }
        this.err = 0;
        this.msg = "";
        this.ended = false;
        this.chunks = [];
        this.strm = new ZStream;
        this.strm.avail_out = 0;
        var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);
        if (status !== c.Z_OK) {
          throw new Error(msg[status]);
        }
        if (this.header = new gzheader, zlib_inflate.inflateGetHeader(this.strm, this.header), opt.dictionary && ("string" == typeof opt.dictionary ? opt.dictionary = strings.string2buf(opt.dictionary) : "[object ArrayBuffer]" === toString.call(opt.dictionary) && (opt.dictionary = new Uint8Array(opt.dictionary)), opt.raw && (status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary)) !== c.Z_OK)) {
          throw new Error(msg[status]);
        }
      }
      function inflate(input, options) {
        var inflator = new Inflate(options);
        if (inflator.push(input, true), inflator.err) {
          throw inflator.msg || msg[inflator.err];
        }
        return inflator.result;
      }
      var zlib_inflate = require("./node_modules/pako/lib/zlib/inflate.js");
      var utils = require("./node_modules/pako/lib/utils/common.js");
      var strings = require("./node_modules/pako/lib/utils/strings.js");
      var c = require("./node_modules/pako/lib/zlib/constants.js");
      var msg = require("./node_modules/pako/lib/zlib/messages.js");
      var ZStream = require("./node_modules/pako/lib/zlib/zstream.js");
      var gzheader = require("./node_modules/pako/lib/zlib/gzheader.js");
      var toString = Object.prototype.toString;
      Inflate.prototype.push = function (data, e) {
        var status;
        var _mode;
        var next_out_utf8;
        var tail;
        var newData;
        var strm = this.strm;
        var chunkSize = this.options.chunkSize;
        var dictionary = this.options.dictionary;
        var OK = false;
        if (this.ended) {
          return false;
        }
        _mode = e === ~~e ? e : true === e ? c.Z_FINISH : c.Z_NO_FLUSH;
        if ("string" == typeof data) {
          strm.input = strings.binstring2buf(data);
        } else {
          if ("[object ArrayBuffer]" === toString.call(data)) {
            strm.input = new Uint8Array(data);
          } else {
            strm.input = data;
          }
        }
        strm.next_in = 0;
        strm.avail_in = strm.input.length;
        do {
          if (0 === strm.avail_out && (strm.output = new utils.Buf8(chunkSize), strm.next_out = 0, strm.avail_out = chunkSize), (status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH)) === c.Z_NEED_DICT && dictionary && (status = zlib_inflate.inflateSetDictionary(this.strm, dictionary)), status === c.Z_BUF_ERROR && true === OK && (status = c.Z_OK, OK = false), status !== c.Z_STREAM_END && status !== c.Z_OK) {
            return this.onEnd(status), this.ended = true, false;
          }
          if (strm.next_out) {
            if (!(0 !== strm.avail_out && status !== c.Z_STREAM_END && (0 !== strm.avail_in || _mode !== c.Z_FINISH && _mode !== c.Z_SYNC_FLUSH))) {
              if ("string" === this.options.to) {
                next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                tail = strm.next_out - next_out_utf8;
                newData = strings.buf2string(strm.output, next_out_utf8);
                strm.next_out = tail;
                strm.avail_out = chunkSize - tail;
                if (tail) {
                  utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                }
                this.onData(newData);
              } else {
                this.onData(utils.shrinkBuf(strm.output, strm.next_out));
              }
            }
          }
          if (0 === strm.avail_in && 0 === strm.avail_out) {
            OK = true;
          }
        } while ((strm.avail_in > 0 || 0 === strm.avail_out) && status !== c.Z_STREAM_END);
        return status === c.Z_STREAM_END && (_mode = c.Z_FINISH), _mode === c.Z_FINISH ? (status = zlib_inflate.inflateEnd(this.strm), this.onEnd(status), this.ended = true, status === c.Z_OK) : _mode !== c.Z_SYNC_FLUSH || (this.onEnd(c.Z_OK), strm.avail_out = 0, true);
      };
      Inflate.prototype.onData = function (data) {
        this.chunks.push(data);
      };
      Inflate.prototype.onEnd = function (status) {
        if (status === c.Z_OK) {
          if ("string" === this.options.to) {
            this.result = this.chunks.join("");
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }
        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      exports.Inflate = Inflate;
      exports.inflate = inflate;
      exports.inflateRaw = function (input, options) {
        return (options = options || {}).raw = true, inflate(input, options);
      };
      exports.ungzip = inflate;
    },
    "./node_modules/pako/lib/utils/common.js": function (module, exports, __weex_require__) {
      function getOwnPropertyDescriptor(object, prop) {
        return Object.prototype.hasOwnProperty.call(object, prop);
      }
      var TYPED_OK = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
      exports.assign = function (obj) {
        var keysToSend = Array.prototype.slice.call(arguments, 1);
        for (; keysToSend.length;) {
          var object = keysToSend.shift();
          if (object) {
            if ("object" != typeof object) {
              throw new TypeError(object + "must be non-object");
            }
            var name;
            for (name in object) {
              if (getOwnPropertyDescriptor(object, name)) {
                obj[name] = object[name];
              }
            }
          }
        }
        return obj;
      };
      exports.shrinkBuf = function (buffer, length) {
        return buffer.length === length ? buffer : buffer.subarray ? buffer.subarray(0, length) : (buffer.length = length, buffer);
      };
      var i = {
        arraySet: function (dest, src, src_offs, len, value) {
          if (src.subarray && dest.subarray) {
            dest.set(src.subarray(src_offs, src_offs + len), value);
          } else {
            var i = 0;
            for (; i < len; i++) {
              dest[value + i] = src[src_offs + i];
            }
          }
        },
        flattenChunks: function (chunks) {
          var k;
          var ref3;
          var outputByteCount;
          var a;
          var c;
          var result;
          outputByteCount = 0;
          k = 0;
          ref3 = chunks.length;
          for (; k < ref3; k++) {
            outputByteCount = outputByteCount + chunks[k].length;
          }
          result = new Uint8Array(outputByteCount);
          a = 0;
          k = 0;
          ref3 = chunks.length;
          for (; k < ref3; k++) {
            c = chunks[k];
            result.set(c, a);
            a = a + c.length;
          }
          return result;
        }
      };
      var s = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          var i = 0;
          for (; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        flattenChunks: function (chunks) {
          return [].concat.apply([], chunks);
        }
      };
      exports.setTyped = function (on) {
        if (on) {
          exports.Buf8 = Uint8Array;
          exports.Buf16 = Uint16Array;
          exports.Buf32 = Int32Array;
          exports.assign(exports, i);
        } else {
          exports.Buf8 = Array;
          exports.Buf16 = Array;
          exports.Buf32 = Array;
          exports.assign(exports, s);
        }
      };
      exports.setTyped(TYPED_OK);
    },
    "./node_modules/pako/lib/utils/strings.js": function (module, exports, __webpack_require__) {
      function buf2binstring(buf, len) {
        if (len < 65534 && (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK)) {
          return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
        }
        var result = "";
        var i = 0;
        for (; i < len; i++) {
          result = result + String.fromCharCode(buf[i]);
        }
        return result;
      }
      var utils = __webpack_require__("./node_modules/pako/lib/utils/common.js");
      var STR_APPLY_OK = true;
      var STR_APPLY_UIA_OK = true;
      try {
        String.fromCharCode.apply(null, [0]);
      } catch (e) {
        STR_APPLY_OK = false;
      }
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (e) {
        STR_APPLY_UIA_OK = false;
      }
      var _utf8len = new utils.Buf8(256);
      var i = 0;
      for (; i < 256; i++) {
        _utf8len[i] = i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1;
      }
      _utf8len[254] = _utf8len[254] = 1;
      exports.string2buf = function (str) {
        var buf;
        var c;
        var o;
        var i;
        var unsavedStart;
        var length = str.length;
        var buf_len = 0;
        i = 0;
        for (; i < length; i++) {
          if (55296 == (64512 & (c = str.charCodeAt(i))) && i + 1 < length && 56320 == (64512 & (o = str.charCodeAt(i + 1)))) {
            c = 65536 + (c - 55296 << 10) + (o - 56320);
            i++;
          }
          buf_len = buf_len + (c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4);
        }
        buf = new utils.Buf8(buf_len);
        unsavedStart = 0;
        i = 0;
        for (; unsavedStart < buf_len; i++) {
          if (55296 == (64512 & (c = str.charCodeAt(i))) && i + 1 < length && 56320 == (64512 & (o = str.charCodeAt(i + 1)))) {
            c = 65536 + (c - 55296 << 10) + (o - 56320);
            i++;
          }
          if (c < 128) {
            buf[unsavedStart++] = c;
          } else {
            if (c < 2048) {
              buf[unsavedStart++] = 192 | c >>> 6;
              buf[unsavedStart++] = 128 | 63 & c;
            } else {
              if (c < 65536) {
                buf[unsavedStart++] = 224 | c >>> 12;
                buf[unsavedStart++] = 128 | c >>> 6 & 63;
                buf[unsavedStart++] = 128 | 63 & c;
              } else {
                buf[unsavedStart++] = 240 | c >>> 18;
                buf[unsavedStart++] = 128 | c >>> 12 & 63;
                buf[unsavedStart++] = 128 | c >>> 6 & 63;
                buf[unsavedStart++] = 128 | 63 & c;
              }
            }
          }
        }
        return buf;
      };
      exports.buf2binstring = function (buf) {
        return buf2binstring(buf, buf.length);
      };
      exports.binstring2buf = function (str) {
        var buf = new utils.Buf8(str.length);
        var i = 0;
        var l = buf.length;
        for (; i < l; i++) {
          buf[i] = str.charCodeAt(i);
        }
        return buf;
      };
      exports.buf2string = function (buf, max) {
        var i;
        var out;
        var c;
        var c_len;
        var len = max || buf.length;
        var utf16buf = new Array(2 * len);
        out = 0;
        i = 0;
        for (; i < len;) {
          if ((c = buf[i++]) < 128) {
            utf16buf[out++] = c;
          } else {
            if ((c_len = _utf8len[c]) > 4) {
              utf16buf[out++] = 65533;
              i = i + (c_len - 1);
            } else {
              c = c & (2 === c_len ? 31 : 3 === c_len ? 15 : 7);
              for (; c_len > 1 && i < len;) {
                c = c << 6 | 63 & buf[i++];
                c_len--;
              }
              if (c_len > 1) {
                utf16buf[out++] = 65533;
              } else {
                if (c < 65536) {
                  utf16buf[out++] = c;
                } else {
                  c = c - 65536;
                  utf16buf[out++] = 55296 | c >> 10 & 1023;
                  utf16buf[out++] = 56320 | 1023 & c;
                }
              }
            }
          }
        }
        return buf2binstring(utf16buf, out);
      };
      exports.utf8border = function (buf, max) {
        var pos;
        if ((max = max || buf.length) > buf.length) {
          max = buf.length;
        }
        pos = max - 1;
        for (; pos >= 0 && 128 == (192 & buf[pos]);) {
          pos--;
        }
        return pos < 0 ? max : 0 === pos ? max : pos + _utf8len[buf[pos]] > max ? pos : max;
      };
    },
    "./node_modules/pako/lib/zlib/adler32.js": function (module, data, urlPartConfig) {
      module.exports = function (value, name, a, n) {
        var sum1 = 65535 & value | 0;
        var sum2 = value >>> 16 & 65535 | 0;
        var rv = 0;
        for (; 0 !== a;) {
          a = a - (rv = a > 2E3 ? 2E3 : a);
          do {
            sum2 = sum2 + (sum1 = sum1 + name[n++] | 0) | 0;
          } while (--rv);
          sum1 = sum1 % 65521;
          sum2 = sum2 % 65521;
        }
        return sum1 | sum2 << 16 | 0;
      };
    },
    "./node_modules/pako/lib/zlib/constants.js": function (module, selector, convertToImages) {
      module.exports = {
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        Z_BUF_ERROR: -5,
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,
        Z_BINARY: 0,
        Z_TEXT: 1,
        Z_UNKNOWN: 2,
        Z_DEFLATED: 8
      };
    },
    "./node_modules/pako/lib/zlib/crc32.js": function (module, data, urlPartConfig) {
      var currentRelations = function () {
        var v;
        var htmlAttrs = [];
        var k = 0;
        for (; k < 256; k++) {
          v = k;
          var n = 0;
          for (; n < 8; n++) {
            v = 1 & v ? 3988292384 ^ v >>> 1 : v >>> 1;
          }
          htmlAttrs[k] = v;
        }
        return htmlAttrs;
      }();
      module.exports = function (value, name, v, k) {
        var addedRelations = currentRelations;
        var t = k + v;
        value = value ^ -1;
        var s = k;
        for (; s < t; s++) {
          value = value >>> 8 ^ addedRelations[255 & (value ^ name[s])];
        }
        return -1 ^ value;
      };
    },
    "./node_modules/pako/lib/zlib/deflate.js": function (module, exports, require) {
      function err(strm, errorCode) {
        return strm.msg = msg[errorCode], errorCode;
      }
      function rank(f) {
        return (f << 1) - (f > 4 ? 9 : 0);
      }
      function zero(a) {
        var i = a.length;
        for (; --i >= 0;) {
          a[i] = 0;
        }
      }
      function flush_pending(strm) {
        var s = strm.state;
        var len = s.pending;
        if (len > strm.avail_out) {
          len = strm.avail_out;
        }
        if (0 !== len) {
          utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
          strm.next_out += len;
          s.pending_out += len;
          strm.total_out += len;
          strm.avail_out -= len;
          s.pending -= len;
          if (0 === s.pending) {
            s.pending_out = 0;
          }
        }
      }
      function flush_block_only(s, last) {
        trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
        s.block_start = s.strstart;
        flush_pending(s.strm);
      }
      function put_byte(s, b) {
        s.pending_buf[s.pending++] = b;
      }
      function putShortMSB(s, b) {
        s.pending_buf[s.pending++] = b >>> 8 & 255;
        s.pending_buf[s.pending++] = 255 & b;
      }
      function longest_match(s, cur_match) {
        var match;
        var len;
        var chain_length = s.max_chain_length;
        var scan = s.strstart;
        var best_len = s.prev_length;
        var nice_match = s.nice_match;
        var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
        var _win = s.window;
        var wmask = s.w_mask;
        var prev = s.prev;
        var strend = s.strstart + MAX_MATCH;
        var scan_end1 = _win[scan + best_len - 1];
        var scan_end = _win[scan + best_len];
        if (s.prev_length >= s.good_match) {
          chain_length = chain_length >> 2;
        }
        if (nice_match > s.lookahead) {
          nice_match = s.lookahead;
        }
        do {
          if (_win[(match = cur_match) + best_len] === scan_end && _win[match + best_len - 1] === scan_end1 && _win[match] === _win[scan] && _win[++match] === _win[scan + 1]) {
            scan = scan + 2;
            match++;
            do {
            } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
            if (len = MAX_MATCH - (strend - scan), scan = strend - MAX_MATCH, len > best_len) {
              if (s.match_start = cur_match, best_len = len, len >= nice_match) {
                break;
              }
              scan_end1 = _win[scan + best_len - 1];
              scan_end = _win[scan + best_len];
            }
          }
        } while ((cur_match = prev[cur_match & wmask]) > limit && 0 != --chain_length);
        return best_len <= s.lookahead ? best_len : s.lookahead;
      }
      function fill_window(s) {
        var p;
        var n;
        var m;
        var more;
        var str;
        var strm;
        var buf;
        var start;
        var max_len;
        var len;
        var _w_size = s.w_size;
        do {
          if (more = s.window_size - s.lookahead - s.strstart, s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
            utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
            s.match_start -= _w_size;
            s.strstart -= _w_size;
            s.block_start -= _w_size;
            p = n = s.hash_size;
            do {
              m = s.head[--p];
              s.head[p] = m >= _w_size ? m - _w_size : 0;
            } while (--n);
            p = n = _w_size;
            do {
              m = s.prev[--p];
              s.prev[p] = m >= _w_size ? m - _w_size : 0;
            } while (--n);
            more = more + _w_size;
          }
          if (0 === s.strm.avail_in) {
            break;
          }
          if (strm = s.strm, buf = s.window, start = s.strstart + s.lookahead, max_len = more, len = void 0, (len = strm.avail_in) > max_len && (len = max_len), n = 0 === len ? 0 : (strm.avail_in -= len, utils.arraySet(buf, strm.input, strm.next_in, len, start), 1 === strm.state.wrap ? strm.adler = adler32(strm.adler, buf, len, start) : 2 === strm.state.wrap && (strm.adler = crc32(strm.adler, buf, len, start)), strm.next_in += len, strm.total_in += len, len), s.lookahead += n, s.lookahead + s.insert >=
            MIN_MATCH) {
            str = s.strstart - s.insert;
            s.ins_h = s.window[str];
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
            for (; s.insert && (s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask, s.prev[str & s.w_mask] = s.head[s.ins_h], s.head[s.ins_h] = str, str++, s.insert--, !(s.lookahead + s.insert < MIN_MATCH));) {
            }
          }
        } while (s.lookahead < MIN_LOOKAHEAD && 0 !== s.strm.avail_in);
      }
      function deflate_fast(s, flush) {
        var hash_head;
        var sp0;
        for (; ;) {
          if (s.lookahead < MIN_LOOKAHEAD) {
            if (fill_window(s), s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
              return NeedMore;
            }
            if (0 === s.lookahead) {
              break;
            }
          }
          if (hash_head = 0, s.lookahead >= MIN_MATCH && (s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask, hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h], s.head[s.ins_h] = s.strstart), 0 !== hash_head && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD && (s.match_length = longest_match(s, hash_head)), s.match_length >= MIN_MATCH) {
            if (sp0 = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH), s.lookahead -= s.match_length, s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
              s.match_length--;
              do {
                s.strstart++;
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
              } while (0 != --s.match_length);
              s.strstart++;
            } else {
              s.strstart += s.match_length;
              s.match_length = 0;
              s.ins_h = s.window[s.strstart];
              s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
            }
          } else {
            sp0 = trees._tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
          }
          if (sp0 && (flush_block_only(s, false), 0 === s.strm.avail_out)) {
            return NeedMore;
          }
        }
        return s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1, flush === Z_FINISH ? (flush_block_only(s, true), 0 === s.strm.avail_out ? quarter : currentPeriod) : s.last_lit && (flush_block_only(s, false), 0 === s.strm.avail_out) ? NeedMore : all;
      }
      function deflate_slow(s, flush) {
        var hash_head;
        var sp0;
        var max_insert;
        for (; ;) {
          if (s.lookahead < MIN_LOOKAHEAD) {
            if (fill_window(s), s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
              return NeedMore;
            }
            if (0 === s.lookahead) {
              break;
            }
          }
          if (hash_head = 0, s.lookahead >= MIN_MATCH && (s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask, hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h], s.head[s.ins_h] = s.strstart), s.prev_length = s.match_length, s.prev_match = s.match_start, s.match_length = MIN_MATCH - 1, 0 !== hash_head && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD && (s.match_length = longest_match(s, hash_head), s.match_length <=
            5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096) && (s.match_length = MIN_MATCH - 1)), s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
            max_insert = s.strstart + s.lookahead - MIN_MATCH;
            sp0 = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
            s.lookahead -= s.prev_length - 1;
            s.prev_length -= 2;
            do {
              if (++s.strstart <= max_insert) {
                s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
              }
            } while (0 != --s.prev_length);
            if (s.match_available = 0, s.match_length = MIN_MATCH - 1, s.strstart++, sp0 && (flush_block_only(s, false), 0 === s.strm.avail_out)) {
              return NeedMore;
            }
          } else {
            if (s.match_available) {
              if ((sp0 = trees._tr_tally(s, 0, s.window[s.strstart - 1])) && flush_block_only(s, false), s.strstart++, s.lookahead--, 0 === s.strm.avail_out) {
                return NeedMore;
              }
            } else {
              s.match_available = 1;
              s.strstart++;
              s.lookahead--;
            }
          }
        }
        return s.match_available && (sp0 = trees._tr_tally(s, 0, s.window[s.strstart - 1]), s.match_available = 0), s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1, flush === Z_FINISH ? (flush_block_only(s, true), 0 === s.strm.avail_out ? quarter : currentPeriod) : s.last_lit && (flush_block_only(s, false), 0 === s.strm.avail_out) ? NeedMore : all;
      }
      function Config(good_length, max_lazy, nice_length, max_chain, func) {
        this.good_length = good_length;
        this.max_lazy = max_lazy;
        this.nice_length = nice_length;
        this.max_chain = max_chain;
        this.func = func;
      }
      function DeflateState() {
        this.strm = null;
        this.status = 0;
        this.pending_buf = null;
        this.pending_buf_size = 0;
        this.pending_out = 0;
        this.pending = 0;
        this.wrap = 0;
        this.gzhead = null;
        this.gzindex = 0;
        this.method = Z_DEFLATED;
        this.last_flush = -1;
        this.w_size = 0;
        this.w_bits = 0;
        this.w_mask = 0;
        this.window = null;
        this.window_size = 0;
        this.prev = null;
        this.head = null;
        this.ins_h = 0;
        this.hash_size = 0;
        this.hash_bits = 0;
        this.hash_mask = 0;
        this.hash_shift = 0;
        this.block_start = 0;
        this.match_length = 0;
        this.prev_match = 0;
        this.match_available = 0;
        this.strstart = 0;
        this.match_start = 0;
        this.lookahead = 0;
        this.prev_length = 0;
        this.max_chain_length = 0;
        this.max_lazy_match = 0;
        this.level = 0;
        this.strategy = 0;
        this.good_match = 0;
        this.nice_match = 0;
        this.dyn_ltree = new utils.Buf16(2 * L);
        this.dyn_dtree = new utils.Buf16(2 * (2 * C + 1));
        this.bl_tree = new utils.Buf16(2 * (2 * M + 1));
        zero(this.dyn_ltree);
        zero(this.dyn_dtree);
        zero(this.bl_tree);
        this.l_desc = null;
        this.d_desc = null;
        this.bl_desc = null;
        this.bl_count = new utils.Buf16(MAX_BITS + 1);
        this.heap = new utils.Buf16(2 * E + 1);
        zero(this.heap);
        this.heap_len = 0;
        this.heap_max = 0;
        this.depth = new utils.Buf16(2 * E + 1);
        zero(this.depth);
        this.l_buf = 0;
        this.lit_bufsize = 0;
        this.last_lit = 0;
        this.d_buf = 0;
        this.opt_len = 0;
        this.static_len = 0;
        this.matches = 0;
        this.insert = 0;
        this.bi_buf = 0;
        this.bi_valid = 0;
      }
      function deflateResetKeep(strm) {
        var s;
        return strm && strm.state ? (strm.total_in = strm.total_out = 0, strm.data_type = Z_UNKNOWN, (s = strm.state).pending = 0, s.pending_out = 0, s.wrap < 0 && (s.wrap = -s.wrap), s.status = s.wrap ? INIT_STATE : BUSY_STATE, strm.adler = 2 === s.wrap ? 0 : 1, s.last_flush = Z_NO_FLUSH, trees._tr_init(s), Z_OK) : err(strm, Z_STREAM_ERROR);
      }
      function lm_init(strm) {
        var s;
        var ret = deflateResetKeep(strm);
        return ret === Z_OK && ((s = strm.state).window_size = 2 * s.w_size, zero(s.head), s.max_lazy_match = configuration_table[s.level].max_lazy, s.good_match = configuration_table[s.level].good_length, s.nice_match = configuration_table[s.level].nice_length, s.max_chain_length = configuration_table[s.level].max_chain, s.strstart = 0, s.block_start = 0, s.lookahead = 0, s.insert = 0, s.match_length = s.prev_length = MIN_MATCH - 1, s.match_available = 0, s.ins_h = 0), ret;
      }
      function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
        if (!strm) {
          return Z_STREAM_ERROR;
        }
        var wrap = 1;
        if (level === Beginner && (level = 6), windowBits < 0 ? (wrap = 0, windowBits = -windowBits) : windowBits > 15 && (wrap = 2, windowBits = windowBits - 16), memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
          return err(strm, Z_STREAM_ERROR);
        }
        if (8 === windowBits) {
          windowBits = 9;
        }
        var s = new DeflateState;
        return strm.state = s, s.strm = strm, s.wrap = wrap, s.gzhead = null, s.w_bits = windowBits, s.w_size = 1 << s.w_bits, s.w_mask = s.w_size - 1, s.hash_bits = memLevel + 7, s.hash_size = 1 << s.hash_bits, s.hash_mask = s.hash_size - 1, s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH), s.window = new utils.Buf8(2 * s.w_size), s.head = new utils.Buf16(s.hash_size), s.prev = new utils.Buf16(s.w_size), s.lit_bufsize = 1 << memLevel + 6, s.pending_buf_size = 4 * s.lit_bufsize, s.pending_buf =
          new utils.Buf8(s.pending_buf_size), s.d_buf = 1 * s.lit_bufsize, s.l_buf = 3 * s.lit_bufsize, s.level = level, s.strategy = strategy, s.method = method, lm_init(strm);
      }
      var configuration_table;
      var utils = require("./node_modules/pako/lib/utils/common.js");
      var trees = require("./node_modules/pako/lib/zlib/trees.js");
      var adler32 = require("./node_modules/pako/lib/zlib/adler32.js");
      var crc32 = require("./node_modules/pako/lib/zlib/crc32.js");
      var msg = require("./node_modules/pako/lib/zlib/messages.js");
      var Z_NO_FLUSH = 0;
      var undefined = 1;
      var Z_TREES = 3;
      var Z_FINISH = 4;
      var Z_BLOCK = 5;
      var Z_OK = 0;
      var m = 1;
      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3;
      var Z_BUF_ERROR = -5;
      var Beginner = -1;
      var Z_FILTERED = 1;
      var Z_HUFFMAN_ONLY = 2;
      var Z_RLE = 3;
      var Z_FIXED = 4;
      var Z_DEFAULT_STRATEGY = 0;
      var Z_UNKNOWN = 2;
      var Z_DEFLATED = 8;
      var MAX_MEM_LEVEL = 9;
      var MAX_WBITS = 15;
      var DEF_MEM_LEVEL = 8;
      var E = 286;
      var C = 30;
      var M = 19;
      var L = 2 * E + 1;
      var MAX_BITS = 15;
      var MIN_MATCH = 3;
      var MAX_MATCH = 258;
      var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
      var PRESET_DICT = 32;
      var INIT_STATE = 42;
      var EXTRA_STATE = 69;
      var NAME_STATE = 73;
      var COMMENT_STATE = 91;
      var HCRC_STATE = 103;
      var BUSY_STATE = 113;
      var FINISH_STATE = 666;
      var NeedMore = 1;
      var all = 2;
      var quarter = 3;
      var currentPeriod = 4;
      var OS_CODE = 3;
      configuration_table = [new Config(0, 0, 0, 0, function (s, flush) {
        var max_block_size = 65535;
        if (max_block_size > s.pending_buf_size - 5) {
          max_block_size = s.pending_buf_size - 5;
        }
        for (; ;) {
          if (s.lookahead <= 1) {
            if (fill_window(s), 0 === s.lookahead && flush === Z_NO_FLUSH) {
              return NeedMore;
            }
            if (0 === s.lookahead) {
              break;
            }
          }
          s.strstart += s.lookahead;
          s.lookahead = 0;
          var max_start = s.block_start + max_block_size;
          if ((0 === s.strstart || s.strstart >= max_start) && (s.lookahead = s.strstart - max_start, s.strstart = max_start, flush_block_only(s, false), 0 === s.strm.avail_out)) {
            return NeedMore;
          }
          if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD && (flush_block_only(s, false), 0 === s.strm.avail_out)) {
            return NeedMore;
          }
        }
        return s.insert = 0, flush === Z_FINISH ? (flush_block_only(s, true), 0 === s.strm.avail_out ? quarter : currentPeriod) : (s.strstart > s.block_start && (flush_block_only(s, false), s.strm.avail_out), NeedMore);
      }), new Config(4, 4, 8, 4, deflate_fast), new Config(4, 5, 16, 8, deflate_fast), new Config(4, 6, 32, 32, deflate_fast), new Config(4, 4, 16, 16, deflate_slow), new Config(8, 16, 32, 32, deflate_slow), new Config(8, 16, 128, 128, deflate_slow), new Config(8, 32, 128, 256, deflate_slow), new Config(32, 128, 258, 1024, deflate_slow), new Config(32, 258, 258, 4096, deflate_slow)];
      exports.deflateInit = function (strm, level) {
        return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
      };
      exports.deflateInit2 = deflateInit2;
      exports.deflateReset = lm_init;
      exports.deflateResetKeep = deflateResetKeep;
      exports.deflateSetHeader = function (res, head) {
        return res && res.state ? 2 !== res.state.wrap ? Z_STREAM_ERROR : (res.state.gzhead = head, Z_OK) : Z_STREAM_ERROR;
      };
      exports.deflate = function (strm, flush) {
        var old_flush;
        var s;
        var beg;
        var OS_CODE;
        if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
          return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
        }
        if (s = strm.state, !strm.output || !strm.input && 0 !== strm.avail_in || s.status === FINISH_STATE && flush !== Z_FINISH) {
          return err(strm, 0 === strm.avail_out ? Z_BUF_ERROR : Z_STREAM_ERROR);
        }
        if (s.strm = strm, old_flush = s.last_flush, s.last_flush = flush, s.status === INIT_STATE) {
          if (2 === s.wrap) {
            strm.adler = 0;
            put_byte(s, 31);
            put_byte(s, 139);
            put_byte(s, 8);
            if (s.gzhead) {
              put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (s.gzhead.extra ? 4 : 0) + (s.gzhead.name ? 8 : 0) + (s.gzhead.comment ? 16 : 0));
              put_byte(s, 255 & s.gzhead.time);
              put_byte(s, s.gzhead.time >> 8 & 255);
              put_byte(s, s.gzhead.time >> 16 & 255);
              put_byte(s, s.gzhead.time >> 24 & 255);
              put_byte(s, 9 === s.level ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
              put_byte(s, 255 & s.gzhead.os);
              if (s.gzhead.extra && s.gzhead.extra.length) {
                put_byte(s, 255 & s.gzhead.extra.length);
                put_byte(s, s.gzhead.extra.length >> 8 & 255);
              }
              if (s.gzhead.hcrc) {
                strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
              }
              s.gzindex = 0;
              s.status = EXTRA_STATE;
            } else {
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 0);
              put_byte(s, 9 === s.level ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
              put_byte(s, OS_CODE);
              s.status = BUSY_STATE;
            }
          } else {
            var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
            header = header | (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 0 : s.level < 6 ? 1 : 6 === s.level ? 2 : 3) << 6;
            if (0 !== s.strstart) {
              header = header | PRESET_DICT;
            }
            header = header + (31 - header % 31);
            s.status = BUSY_STATE;
            putShortMSB(s, header);
            if (0 !== s.strstart) {
              putShortMSB(s, strm.adler >>> 16);
              putShortMSB(s, 65535 & strm.adler);
            }
            strm.adler = 1;
          }
        }
        if (s.status === EXTRA_STATE) {
          if (s.gzhead.extra) {
            beg = s.pending;
            for (; s.gzindex < (65535 & s.gzhead.extra.length) && (s.pending !== s.pending_buf_size || (s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg)), flush_pending(strm), beg = s.pending, s.pending !== s.pending_buf_size));) {
              put_byte(s, 255 & s.gzhead.extra[s.gzindex]);
              s.gzindex++;
            }
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            if (s.gzindex === s.gzhead.extra.length) {
              s.gzindex = 0;
              s.status = NAME_STATE;
            }
          } else {
            s.status = NAME_STATE;
          }
        }
        if (s.status === NAME_STATE) {
          if (s.gzhead.name) {
            beg = s.pending;
            do {
              if (s.pending === s.pending_buf_size && (s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg)), flush_pending(strm), beg = s.pending, s.pending === s.pending_buf_size)) {
                OS_CODE = 1;
                break;
              }
              OS_CODE = s.gzindex < s.gzhead.name.length ? 255 & s.gzhead.name.charCodeAt(s.gzindex++) : 0;
              put_byte(s, OS_CODE);
            } while (0 !== OS_CODE);
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            if (0 === OS_CODE) {
              s.gzindex = 0;
              s.status = COMMENT_STATE;
            }
          } else {
            s.status = COMMENT_STATE;
          }
        }
        if (s.status === COMMENT_STATE) {
          if (s.gzhead.comment) {
            beg = s.pending;
            do {
              if (s.pending === s.pending_buf_size && (s.gzhead.hcrc && s.pending > beg && (strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg)), flush_pending(strm), beg = s.pending, s.pending === s.pending_buf_size)) {
                OS_CODE = 1;
                break;
              }
              OS_CODE = s.gzindex < s.gzhead.comment.length ? 255 & s.gzhead.comment.charCodeAt(s.gzindex++) : 0;
              put_byte(s, OS_CODE);
            } while (0 !== OS_CODE);
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            if (0 === OS_CODE) {
              s.status = HCRC_STATE;
            }
          } else {
            s.status = HCRC_STATE;
          }
        }
        if (s.status === HCRC_STATE && (s.gzhead.hcrc ? (s.pending + 2 > s.pending_buf_size && flush_pending(strm), s.pending + 2 <= s.pending_buf_size && (put_byte(s, 255 & strm.adler), put_byte(s, strm.adler >> 8 & 255), strm.adler = 0, s.status = BUSY_STATE)) : s.status = BUSY_STATE), 0 !== s.pending) {
          if (flush_pending(strm), 0 === strm.avail_out) {
            return s.last_flush = -1, Z_OK;
          }
        } else {
          if (0 === strm.avail_in && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
            return err(strm, Z_BUF_ERROR);
          }
        }
        if (s.status === FINISH_STATE && 0 !== strm.avail_in) {
          return err(strm, Z_BUF_ERROR);
        }
        if (0 !== strm.avail_in || 0 !== s.lookahead || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
          var period = s.strategy === Z_HUFFMAN_ONLY ? function (s, flush) {
            var sp0;
            for (; ;) {
              if (0 === s.lookahead && (fill_window(s), 0 === s.lookahead)) {
                if (flush === Z_NO_FLUSH) {
                  return NeedMore;
                }
                break;
              }
              if (s.match_length = 0, sp0 = trees._tr_tally(s, 0, s.window[s.strstart]), s.lookahead--, s.strstart++, sp0 && (flush_block_only(s, false), 0 === s.strm.avail_out)) {
                return NeedMore;
              }
            }
            return s.insert = 0, flush === Z_FINISH ? (flush_block_only(s, true), 0 === s.strm.avail_out ? quarter : currentPeriod) : s.last_lit && (flush_block_only(s, false), 0 === s.strm.avail_out) ? NeedMore : all;
          }(s, flush) : s.strategy === Z_RLE ? function (s, flush) {
            var sp0;
            var obj;
            var scan;
            var strend;
            var window = s.window;
            for (; ;) {
              if (s.lookahead <= MAX_MATCH) {
                if (fill_window(s), s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
                  return NeedMore;
                }
                if (0 === s.lookahead) {
                  break;
                }
              }
              if (s.match_length = 0, s.lookahead >= MIN_MATCH && s.strstart > 0 && (obj = window[scan = s.strstart - 1]) === window[++scan] && obj === window[++scan] && obj === window[++scan]) {
                strend = s.strstart + MAX_MATCH;
                do {
                } while (obj === window[++scan] && obj === window[++scan] && obj === window[++scan] && obj === window[++scan] && obj === window[++scan] && obj === window[++scan] && obj === window[++scan] && obj === window[++scan] && scan < strend);
                s.match_length = MAX_MATCH - (strend - scan);
                if (s.match_length > s.lookahead) {
                  s.match_length = s.lookahead;
                }
              }
              if (s.match_length >= MIN_MATCH ? (sp0 = trees._tr_tally(s, 1, s.match_length - MIN_MATCH), s.lookahead -= s.match_length, s.strstart += s.match_length, s.match_length = 0) : (sp0 = trees._tr_tally(s, 0, s.window[s.strstart]), s.lookahead--, s.strstart++), sp0 && (flush_block_only(s, false), 0 === s.strm.avail_out)) {
                return NeedMore;
              }
            }
            return s.insert = 0, flush === Z_FINISH ? (flush_block_only(s, true), 0 === s.strm.avail_out ? quarter : currentPeriod) : s.last_lit && (flush_block_only(s, false), 0 === s.strm.avail_out) ? NeedMore : all;
          }(s, flush) : configuration_table[s.level].func(s, flush);
          if (period !== quarter && period !== currentPeriod || (s.status = FINISH_STATE), period === NeedMore || period === quarter) {
            return 0 === strm.avail_out && (s.last_flush = -1), Z_OK;
          }
          if (period === all && (flush === undefined ? trees._tr_align(s) : flush !== Z_BLOCK && (trees._tr_stored_block(s, 0, 0, false), flush === Z_TREES && (zero(s.head), 0 === s.lookahead && (s.strstart = 0, s.block_start = 0, s.insert = 0))), flush_pending(strm), 0 === strm.avail_out)) {
            return s.last_flush = -1, Z_OK;
          }
        }
        return flush !== Z_FINISH ? Z_OK : s.wrap <= 0 ? m : (2 === s.wrap ? (put_byte(s, 255 & strm.adler), put_byte(s, strm.adler >> 8 & 255), put_byte(s, strm.adler >> 16 & 255), put_byte(s, strm.adler >> 24 & 255), put_byte(s, 255 & strm.total_in), put_byte(s, strm.total_in >> 8 & 255), put_byte(s, strm.total_in >> 16 & 255), put_byte(s, strm.total_in >> 24 & 255)) : (putShortMSB(s, strm.adler >>> 16), putShortMSB(s, 65535 & strm.adler)), flush_pending(strm), s.wrap > 0 && (s.wrap = -s.wrap),
          0 !== s.pending ? Z_OK : m);
      };
      exports.deflateEnd = function (strm) {
        var status;
        return strm && strm.state ? (status = strm.state.status) !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE ? err(strm, Z_STREAM_ERROR) : (strm.state = null, status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK) : Z_STREAM_ERROR;
      };
      exports.deflateSetDictionary = function (strm, dictionary) {
        var s;
        var str;
        var i;
        var wrap;
        var have;
        var next;
        var input;
        var tmpDict;
        var dictLength = dictionary.length;
        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }
        if (2 === (wrap = (s = strm.state).wrap) || 1 === wrap && s.status !== INIT_STATE || s.lookahead) {
          return Z_STREAM_ERROR;
        }
        if (1 === wrap) {
          strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
        }
        s.wrap = 0;
        if (dictLength >= s.w_size) {
          if (0 === wrap) {
            zero(s.head);
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
          tmpDict = new utils.Buf8(s.w_size);
          utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
          dictionary = tmpDict;
          dictLength = s.w_size;
        }
        have = strm.avail_in;
        next = strm.next_in;
        input = strm.input;
        strm.avail_in = dictLength;
        strm.next_in = 0;
        strm.input = dictionary;
        fill_window(s);
        for (; s.lookahead >= MIN_MATCH;) {
          str = s.strstart;
          i = s.lookahead - (MIN_MATCH - 1);
          do {
            s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
          } while (--i);
          s.strstart = str;
          s.lookahead = MIN_MATCH - 1;
          fill_window(s);
        }
        return s.strstart += s.lookahead, s.block_start = s.strstart, s.insert = s.lookahead, s.lookahead = 0, s.match_length = s.prev_length = MIN_MATCH - 1, s.match_available = 0, strm.next_in = next, strm.input = input, strm.avail_in = have, s.wrap = wrap, Z_OK;
      };
      exports.deflateInfo = "pako deflate (from Nodeca project)";
    },
    "./node_modules/pako/lib/zlib/gzheader.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        this.text = 0;
        this.time = 0;
        this.xflags = 0;
        this.os = 0;
        this.extra = null;
        this.extra_len = 0;
        this.name = "";
        this.comment = "";
        this.hcrc = 0;
        this.done = false;
      };
    },
    "./node_modules/pako/lib/zlib/inffast.js": function (module, data, urlPartConfig) {
      module.exports = function (value, name) {
        var state;
        var _in;
        var last;
        var _out;
        var beg;
        var end;
        var dmax;
        var wsize;
        var whave;
        var wnext;
        var s_window;
        var hold;
        var bits;
        var lcode;
        var dcode;
        var lmask;
        var dmask;
        var here;
        var op;
        var len;
        var dist;
        var from;
        var from_source;
        var input;
        var output;
        state = value.state;
        _in = value.next_in;
        input = value.input;
        last = _in + (value.avail_in - 5);
        _out = value.next_out;
        output = value.output;
        beg = _out - (name - value.avail_out);
        end = _out + (value.avail_out - 257);
        dmax = state.dmax;
        wsize = state.wsize;
        whave = state.whave;
        wnext = state.wnext;
        s_window = state.window;
        hold = state.hold;
        bits = state.bits;
        lcode = state.lencode;
        dcode = state.distcode;
        lmask = (1 << state.lenbits) - 1;
        dmask = (1 << state.distbits) - 1;
        e: do {
          if (bits < 15) {
            hold = hold + (input[_in++] << bits);
            bits = bits + 8;
            hold = hold + (input[_in++] << bits);
            bits = bits + 8;
          }
          here = lcode[hold & lmask];
          t: for (; ;) {
            if (hold = hold >>> (op = here >>> 24), bits = bits - op, 0 === (op = here >>> 16 & 255)) {
              output[_out++] = 65535 & here;
            } else {
              if (!(16 & op)) {
                if (0 == (64 & op)) {
                  here = lcode[(65535 & here) + (hold & (1 << op) - 1)];
                  continue t;
                }
                if (32 & op) {
                  state.mode = 12;
                  break e;
                }
                value.msg = "invalid literal/length code";
                state.mode = 30;
                break e;
              }
              len = 65535 & here;
              if (op = op & 15) {
                if (bits < op) {
                  hold = hold + (input[_in++] << bits);
                  bits = bits + 8;
                }
                len = len + (hold & (1 << op) - 1);
                hold = hold >>> op;
                bits = bits - op;
              }
              if (bits < 15) {
                hold = hold + (input[_in++] << bits);
                bits = bits + 8;
                hold = hold + (input[_in++] << bits);
                bits = bits + 8;
              }
              here = dcode[hold & dmask];
              r: for (; ;) {
                if (hold = hold >>> (op = here >>> 24), bits = bits - op, !(16 & (op = here >>> 16 & 255))) {
                  if (0 == (64 & op)) {
                    here = dcode[(65535 & here) + (hold & (1 << op) - 1)];
                    continue r;
                  }
                  value.msg = "invalid distance code";
                  state.mode = 30;
                  break e;
                }
                if (dist = 65535 & here, bits < (op = op & 15) && (hold = hold + (input[_in++] << bits), (bits = bits + 8) < op && (hold = hold + (input[_in++] << bits), bits = bits + 8)), (dist = dist + (hold & (1 << op) - 1)) > dmax) {
                  value.msg = "invalid distance too far back";
                  state.mode = 30;
                  break e;
                }
                if (hold = hold >>> op, bits = bits - op, dist > (op = _out - beg)) {
                  if ((op = dist - op) > whave && state.sane) {
                    value.msg = "invalid distance too far back";
                    state.mode = 30;
                    break e;
                  }
                  if (from = 0, from_source = s_window, 0 === wnext) {
                    if (from = from + (wsize - op), op < len) {
                      len = len - op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;
                      from_source = output;
                    }
                  } else {
                    if (wnext < op) {
                      if (from = from + (wsize + wnext - op), (op = op - wnext) < len) {
                        len = len - op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        if (from = 0, wnext < len) {
                          len = len - (op = wnext);
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      if (from = from + (wnext - op), op < len) {
                        len = len - op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    }
                  }
                  for (; len > 2;) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len = len - 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                } else {
                  from = _out - dist;
                  do {
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len = len - 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
                break;
              }
            }
            break;
          }
        } while (_in < last && _out < end);
        _in = _in - (len = bits >> 3);
        hold = hold & (1 << (bits = bits - (len << 3))) - 1;
        value.next_in = _in;
        value.next_out = _out;
        value.avail_in = _in < last ? last - _in + 5 : 5 - (_in - last);
        value.avail_out = _out < end ? end - _out + 257 : 257 - (_out - end);
        state.hold = hold;
        state.bits = bits;
      };
    },
    "./node_modules/pako/lib/zlib/inflate.js": function (module, exports, require) {
      function ZSWAP32(q) {
        return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((65280 & q) << 8) + ((255 & q) << 24);
      }
      function InflateState() {
        this.mode = 0;
        this.last = false;
        this.wrap = 0;
        this.havedict = false;
        this.flags = 0;
        this.dmax = 0;
        this.check = 0;
        this.total = 0;
        this.head = null;
        this.wbits = 0;
        this.wsize = 0;
        this.whave = 0;
        this.wnext = 0;
        this.window = null;
        this.hold = 0;
        this.bits = 0;
        this.length = 0;
        this.offset = 0;
        this.extra = 0;
        this.lencode = null;
        this.distcode = null;
        this.lenbits = 0;
        this.distbits = 0;
        this.ncode = 0;
        this.nlen = 0;
        this.ndist = 0;
        this.have = 0;
        this.next = null;
        this.lens = new utils.Buf16(320);
        this.work = new utils.Buf16(288);
        this.lendyn = null;
        this.distdyn = null;
        this.sane = 0;
        this.back = 0;
        this.was = 0;
      }
      function inflateResetKeep(strm) {
        var state;
        return strm && strm.state ? (state = strm.state, strm.total_in = strm.total_out = state.total = 0, strm.msg = "", state.wrap && (strm.adler = 1 & state.wrap), state.mode = HEAD, state.last = 0, state.havedict = 0, state.dmax = 32768, state.head = null, state.hold = 0, state.bits = 0, state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS), state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS), state.sane = 1, state.back = -1, undefined) : Z_STREAM_ERROR;
      }
      function inflateReset(strm) {
        var state;
        return strm && strm.state ? ((state = strm.state).wsize = 0, state.whave = 0, state.wnext = 0, inflateResetKeep(strm)) : Z_STREAM_ERROR;
      }
      function inflateReset2(strm, windowBits) {
        var wrap;
        var state;
        return strm && strm.state ? (state = strm.state, windowBits < 0 ? (wrap = 0, windowBits = -windowBits) : (wrap = 1 + (windowBits >> 4), windowBits < 48 && (windowBits = windowBits & 15)), windowBits && (windowBits < 8 || windowBits > 15) ? Z_STREAM_ERROR : (null !== state.window && state.wbits !== windowBits && (state.window = null), state.wrap = wrap, state.wbits = windowBits, inflateReset(strm))) : Z_STREAM_ERROR;
      }
      function inflateInit2(strm, windowBits) {
        var ret;
        var state;
        return strm ? (state = new InflateState, strm.state = state, state.window = null, (ret = inflateReset2(strm, windowBits)) !== undefined && (strm.state = null), ret) : Z_STREAM_ERROR;
      }
      function fixedtables(state) {
        if (ce) {
          var sym;
          lenfix = new utils.Buf32(512);
          distfix = new utils.Buf32(32);
          sym = 0;
          for (; sym < 144;) {
            state.lens[sym++] = 8;
          }
          for (; sym < 256;) {
            state.lens[sym++] = 9;
          }
          for (; sym < 280;) {
            state.lens[sym++] = 7;
          }
          for (; sym < 288;) {
            state.lens[sym++] = 8;
          }
          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
            bits: 9
          });
          sym = 0;
          for (; sym < 32;) {
            state.lens[sym++] = 5;
          }
          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
            bits: 5
          });
          ce = false;
        }
        state.lencode = lenfix;
        state.lenbits = 9;
        state.distcode = distfix;
        state.distbits = 5;
      }
      function updatewindow(strm, src, end, copy) {
        var dist;
        var state = strm.state;
        return null === state.window && (state.wsize = 1 << state.wbits, state.wnext = 0, state.whave = 0, state.window = new utils.Buf8(state.wsize)), copy >= state.wsize ? (utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0), state.wnext = 0, state.whave = state.wsize) : ((dist = state.wsize - state.wnext) > copy && (dist = copy), utils.arraySet(state.window, src, end - copy, dist, state.wnext), (copy = copy - dist) ? (utils.arraySet(state.window, src, end - copy, copy, 0), state.wnext =
          copy, state.whave = state.wsize) : (state.wnext += dist, state.wnext === state.wsize && (state.wnext = 0), state.whave < state.wsize && (state.whave += dist))), 0;
      }
      var utils = require("./node_modules/pako/lib/utils/common.js");
      var adler32 = require("./node_modules/pako/lib/zlib/adler32.js");
      var crc32 = require("./node_modules/pako/lib/zlib/crc32.js");
      var inflate_fast = require("./node_modules/pako/lib/zlib/inffast.js");
      var inflate_table = require("./node_modules/pako/lib/zlib/inftrees.js");
      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var Z_FINISH = 4;
      var Z_BLOCK = 5;
      var Z_TREES = 6;
      var undefined = 0;
      var TorrenTopia = 1;
      var g = 2;
      var Z_STREAM_ERROR = -2;
      var canUrl = -3;
      var ranges = -4;
      var enable_move_colors = -5;
      var w = 8;
      var HEAD = 1;
      var FLAGS = 2;
      var TIME = 3;
      var OS = 4;
      var EXLEN = 5;
      var EXTRA = 6;
      var NAME = 7;
      var COMMENT = 8;
      var HCRC = 9;
      var DICTID = 10;
      var DICT = 11;
      var TYPE = 12;
      var TYPEDO = 13;
      var STORED = 14;
      var COPY_ = 15;
      var COPY = 16;
      var TABLE = 17;
      var LENLENS = 18;
      var CODELENS = 19;
      var LEN_ = 20;
      var LEN = 21;
      var LENEXT = 22;
      var DIST = 23;
      var DISTEXT = 24;
      var MATCH = 25;
      var LIT = 26;
      var CHECK = 27;
      var LENGTH = 28;
      var DONE = 29;
      var BAD = 30;
      var MEM = 31;
      var SYNC = 32;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592;
      var DEF_WBITS = 15;
      var lenfix;
      var distfix;
      var ce = true;
      exports.inflateReset = inflateReset;
      exports.inflateReset2 = inflateReset2;
      exports.inflateResetKeep = inflateResetKeep;
      exports.inflateInit = function (strm) {
        return inflateInit2(strm, DEF_WBITS);
      };
      exports.inflateInit2 = inflateInit2;
      exports.inflate = function (strm, flush) {
        var state;
        var input;
        var output;
        var next;
        var put;
        var have;
        var left;
        var hold;
        var bits;
        var _in;
        var _out;
        var copy;
        var from;
        var from_source;
        var here_bits;
        var right;
        var here_val;
        var last_bits;
        var last_op;
        var last_val;
        var len;
        var ret;
        var opts;
        var n;
        var here = 0;
        var hbuf = new utils.Buf8(4);
        var order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        if (!strm || !strm.state || !strm.output || !strm.input && 0 !== strm.avail_in) {
          return Z_STREAM_ERROR;
        }
        if ((state = strm.state).mode === TYPE) {
          state.mode = TYPEDO;
        }
        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits;
        _in = have;
        _out = left;
        ret = undefined;
        e: for (; ;) {
          switch (state.mode) {
            case HEAD:
              if (0 === state.wrap) {
                state.mode = TYPEDO;
                break;
              }
              for (; bits < 16;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (2 & state.wrap && 35615 === hold) {
                state.check = 0;
                hbuf[0] = 255 & hold;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
                hold = 0;
                bits = 0;
                state.mode = FLAGS;
                break;
              }
              if (state.flags = 0, state.head && (state.head.done = false), !(1 & state.wrap) || (((255 & hold) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state.mode = BAD;
                break;
              }
              if ((15 & hold) !== w) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              if (bits = bits - 4, len = 8 + (15 & (hold = hold >>> 4)), 0 === state.wbits) {
                state.wbits = len;
              } else {
                if (len > state.wbits) {
                  strm.msg = "invalid window size";
                  state.mode = BAD;
                  break;
                }
              }
              state.dmax = 1 << len;
              strm.adler = state.check = 1;
              state.mode = 512 & hold ? DICTID : TYPE;
              hold = 0;
              bits = 0;
              break;
            case FLAGS:
              for (; bits < 16;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (state.flags = hold, (255 & state.flags) !== w) {
                strm.msg = "unknown compression method";
                state.mode = BAD;
                break;
              }
              if (57344 & state.flags) {
                strm.msg = "unknown header flags set";
                state.mode = BAD;
                break;
              }
              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }
              if (512 & state.flags) {
                hbuf[0] = 255 & hold;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = TIME;
            case TIME:
              for (; bits < 32;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (state.head) {
                state.head.time = hold;
              }
              if (512 & state.flags) {
                hbuf[0] = 255 & hold;
                hbuf[1] = hold >>> 8 & 255;
                hbuf[2] = hold >>> 16 & 255;
                hbuf[3] = hold >>> 24 & 255;
                state.check = crc32(state.check, hbuf, 4, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = OS;
            case OS:
              for (; bits < 16;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (state.head) {
                state.head.xflags = 255 & hold;
                state.head.os = hold >> 8;
              }
              if (512 & state.flags) {
                hbuf[0] = 255 & hold;
                hbuf[1] = hold >>> 8 & 255;
                state.check = crc32(state.check, hbuf, 2, 0);
              }
              hold = 0;
              bits = 0;
              state.mode = EXLEN;
            case EXLEN:
              if (1024 & state.flags) {
                for (; bits < 16;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                state.length = hold;
                if (state.head) {
                  state.head.extra_len = hold;
                }
                if (512 & state.flags) {
                  hbuf[0] = 255 & hold;
                  hbuf[1] = hold >>> 8 & 255;
                  state.check = crc32(state.check, hbuf, 2, 0);
                }
                hold = 0;
                bits = 0;
              } else {
                if (state.head) {
                  state.head.extra = null;
                }
              }
              state.mode = EXTRA;
            case EXTRA:
              if (1024 & state.flags && ((copy = state.length) > have && (copy = have), copy && (state.head && (len = state.head.extra_len - state.length, state.head.extra || (state.head.extra = new Array(state.head.extra_len)), utils.arraySet(state.head.extra, input, next, copy, len)), 512 & state.flags && (state.check = crc32(state.check, input, copy, next)), have = have - copy, next = next + copy, state.length -= copy), state.length)) {
                break e;
              }
              state.length = 0;
              state.mode = NAME;
            case NAME:
              if (2048 & state.flags) {
                if (0 === have) {
                  break e;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (512 & state.flags && (state.check = crc32(state.check, input, copy, next)), have = have - copy, next = next + copy, len) {
                  break e;
                }
              } else {
                if (state.head) {
                  state.head.name = null;
                }
              }
              state.length = 0;
              state.mode = COMMENT;
            case COMMENT:
              if (4096 & state.flags) {
                if (0 === have) {
                  break e;
                }
                copy = 0;
                do {
                  len = input[next + copy++];
                  if (state.head && len && state.length < 65536) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);
                if (512 & state.flags && (state.check = crc32(state.check, input, copy, next)), have = have - copy, next = next + copy, len) {
                  break e;
                }
              } else {
                if (state.head) {
                  state.head.comment = null;
                }
              }
              state.mode = HCRC;
            case HCRC:
              if (512 & state.flags) {
                for (; bits < 16;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                if (hold !== (65535 & state.check)) {
                  strm.msg = "header crc mismatch";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }
              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;
            case DICTID:
              for (; bits < 32;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              strm.adler = state.check = ZSWAP32(hold);
              hold = 0;
              bits = 0;
              state.mode = DICT;
            case DICT:
              if (0 === state.havedict) {
                return strm.next_out = put, strm.avail_out = left, strm.next_in = next, strm.avail_in = have, state.hold = hold, state.bits = bits, g;
              }
              strm.adler = state.check = 1;
              state.mode = TYPE;
            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break e;
              }
            case TYPEDO:
              if (state.last) {
                hold = hold >>> (7 & bits);
                bits = bits - (7 & bits);
                state.mode = CHECK;
                break;
              }
              for (; bits < 3;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              switch (state.last = 1 & hold, bits = bits - 1, 3 & (hold = hold >>> 1)) {
                case 0:
                  state.mode = STORED;
                  break;
                case 1:
                  if (fixedtables(state), state.mode = LEN_, flush === Z_TREES) {
                    hold = hold >>> 2;
                    bits = bits - 2;
                    break e;
                  }
                  break;
                case 2:
                  state.mode = TABLE;
                  break;
                case 3:
                  strm.msg = "invalid block type";
                  state.mode = BAD;
              }hold = hold >>> 2;
              bits = bits - 2;
              break;
            case STORED:
              hold = hold >>> (7 & bits);
              bits = bits - (7 & bits);
              for (; bits < 32;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if ((65535 & hold) != (hold >>> 16 ^ 65535)) {
                strm.msg = "invalid stored block lengths";
                state.mode = BAD;
                break;
              }
              if (state.length = 65535 & hold, hold = 0, bits = 0, state.mode = COPY_, flush === Z_TREES) {
                break e;
              }
            case COPY_:
              state.mode = COPY;
            case COPY:
              if (copy = state.length) {
                if (copy > have && (copy = have), copy > left && (copy = left), 0 === copy) {
                  break e;
                }
                utils.arraySet(output, input, next, copy, put);
                have = have - copy;
                next = next + copy;
                left = left - copy;
                put = put + copy;
                state.length -= copy;
                break;
              }
              state.mode = TYPE;
              break;
            case TABLE:
              for (; bits < 14;) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (state.nlen = 257 + (31 & hold), hold = hold >>> 5, bits = bits - 5, state.ndist = 1 + (31 & hold), hold = hold >>> 5, bits = bits - 5, state.ncode = 4 + (15 & hold), hold = hold >>> 4, bits = bits - 4, state.nlen > 286 || state.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = LENLENS;
            case LENLENS:
              for (; state.have < state.ncode;) {
                for (; bits < 3;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                state.lens[order[state.have++]] = 7 & hold;
                hold = hold >>> 3;
                bits = bits - 3;
              }
              for (; state.have < 19;) {
                state.lens[order[state.have++]] = 0;
              }
              if (state.lencode = state.lendyn, state.lenbits = 7, opts = {
                bits: state.lenbits
              }, ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts), state.lenbits = opts.bits, ret) {
                strm.msg = "invalid code lengths set";
                state.mode = BAD;
                break;
              }
              state.have = 0;
              state.mode = CODELENS;
            case CODELENS:
              for (; state.have < state.nlen + state.ndist;) {
                for (; right = (here = state.lencode[hold & (1 << state.lenbits) - 1]) >>> 16 & 255, here_val = 65535 & here, !((here_bits = here >>> 24) <= bits);) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                if (here_val < 16) {
                  hold = hold >>> here_bits;
                  bits = bits - here_bits;
                  state.lens[state.have++] = here_val;
                } else {
                  if (16 === here_val) {
                    n = here_bits + 2;
                    for (; bits < n;) {
                      if (0 === have) {
                        break e;
                      }
                      have--;
                      hold = hold + (input[next++] << bits);
                      bits = bits + 8;
                    }
                    if (hold = hold >>> here_bits, bits = bits - here_bits, 0 === state.have) {
                      strm.msg = "invalid bit length repeat";
                      state.mode = BAD;
                      break;
                    }
                    len = state.lens[state.have - 1];
                    copy = 3 + (3 & hold);
                    hold = hold >>> 2;
                    bits = bits - 2;
                  } else {
                    if (17 === here_val) {
                      n = here_bits + 3;
                      for (; bits < n;) {
                        if (0 === have) {
                          break e;
                        }
                        have--;
                        hold = hold + (input[next++] << bits);
                        bits = bits + 8;
                      }
                      bits = bits - here_bits;
                      len = 0;
                      copy = 3 + (7 & (hold = hold >>> here_bits));
                      hold = hold >>> 3;
                      bits = bits - 3;
                    } else {
                      n = here_bits + 7;
                      for (; bits < n;) {
                        if (0 === have) {
                          break e;
                        }
                        have--;
                        hold = hold + (input[next++] << bits);
                        bits = bits + 8;
                      }
                      bits = bits - here_bits;
                      len = 0;
                      copy = 11 + (127 & (hold = hold >>> here_bits));
                      hold = hold >>> 7;
                      bits = bits - 7;
                    }
                  }
                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = "invalid bit length repeat";
                    state.mode = BAD;
                    break;
                  }
                  for (; copy--;) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              if (state.mode === BAD) {
                break;
              }
              if (0 === state.lens[256]) {
                strm.msg = "invalid code -- missing end-of-block";
                state.mode = BAD;
                break;
              }
              if (state.lenbits = 9, opts = {
                bits: state.lenbits
              }, ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts), state.lenbits = opts.bits, ret) {
                strm.msg = "invalid literal/lengths set";
                state.mode = BAD;
                break;
              }
              if (state.distbits = 6, state.distcode = state.distdyn, opts = {
                bits: state.distbits
              }, ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts), state.distbits = opts.bits, ret) {
                strm.msg = "invalid distances set";
                state.mode = BAD;
                break;
              }
              if (state.mode = LEN_, flush === Z_TREES) {
                break e;
              }
            case LEN_:
              state.mode = LEN;
            case LEN:
              if (have >= 6 && left >= 258) {
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                inflate_fast(strm, _out);
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                if (state.mode === TYPE) {
                  state.back = -1;
                }
                break;
              }
              state.back = 0;
              for (; right = (here = state.lencode[hold & (1 << state.lenbits) - 1]) >>> 16 & 255, here_val = 65535 & here, !((here_bits = here >>> 24) <= bits);) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (right && 0 == (240 & right)) {
                last_bits = here_bits;
                last_op = right;
                last_val = here_val;
                for (; right = (here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)]) >>> 16 & 255, here_val = 65535 & here, !(last_bits + (here_bits = here >>> 24) <= bits);) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                hold = hold >>> last_bits;
                bits = bits - last_bits;
                state.back += last_bits;
              }
              if (hold = hold >>> here_bits, bits = bits - here_bits, state.back += here_bits, state.length = here_val, 0 === right) {
                state.mode = LIT;
                break;
              }
              if (32 & right) {
                state.back = -1;
                state.mode = TYPE;
                break;
              }
              if (64 & right) {
                strm.msg = "invalid literal/length code";
                state.mode = BAD;
                break;
              }
              state.extra = 15 & right;
              state.mode = LENEXT;
            case LENEXT:
              if (state.extra) {
                n = state.extra;
                for (; bits < n;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                state.length += hold & (1 << state.extra) - 1;
                hold = hold >>> state.extra;
                bits = bits - state.extra;
                state.back += state.extra;
              }
              state.was = state.length;
              state.mode = DIST;
            case DIST:
              for (; right = (here = state.distcode[hold & (1 << state.distbits) - 1]) >>> 16 & 255, here_val = 65535 & here, !((here_bits = here >>> 24) <= bits);) {
                if (0 === have) {
                  break e;
                }
                have--;
                hold = hold + (input[next++] << bits);
                bits = bits + 8;
              }
              if (0 == (240 & right)) {
                last_bits = here_bits;
                last_op = right;
                last_val = here_val;
                for (; right = (here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)]) >>> 16 & 255, here_val = 65535 & here, !(last_bits + (here_bits = here >>> 24) <= bits);) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                hold = hold >>> last_bits;
                bits = bits - last_bits;
                state.back += last_bits;
              }
              if (hold = hold >>> here_bits, bits = bits - here_bits, state.back += here_bits, 64 & right) {
                strm.msg = "invalid distance code";
                state.mode = BAD;
                break;
              }
              state.offset = here_val;
              state.extra = 15 & right;
              state.mode = DISTEXT;
            case DISTEXT:
              if (state.extra) {
                n = state.extra;
                for (; bits < n;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                state.offset += hold & (1 << state.extra) - 1;
                hold = hold >>> state.extra;
                bits = bits - state.extra;
                state.back += state.extra;
              }
              if (state.offset > state.dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
              state.mode = MATCH;
            case MATCH:
              if (0 === left) {
                break e;
              }
              if (copy = _out - left, state.offset > copy) {
                if ((copy = state.offset - copy) > state.whave && state.sane) {
                  strm.msg = "invalid distance too far back";
                  state.mode = BAD;
                  break;
                }
                if (copy > state.wnext) {
                  copy = copy - state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }
                if (copy > state.length) {
                  copy = state.length;
                }
                from_source = state.window;
              } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }
              if (copy > left) {
                copy = left;
              }
              left = left - copy;
              state.length -= copy;
              do {
                output[put++] = from_source[from++];
              } while (--copy);
              if (0 === state.length) {
                state.mode = LEN;
              }
              break;
            case LIT:
              if (0 === left) {
                break e;
              }
              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;
            case CHECK:
              if (state.wrap) {
                for (; bits < 32;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold | input[next++] << bits;
                  bits = bits + 8;
                }
                if (_out = _out - left, strm.total_out += _out, state.total += _out, _out && (strm.adler = state.check = state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out)), _out = left, (state.flags ? hold : ZSWAP32(hold)) !== state.check) {
                  strm.msg = "incorrect data check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = LENGTH;
            case LENGTH:
              if (state.wrap && state.flags) {
                for (; bits < 32;) {
                  if (0 === have) {
                    break e;
                  }
                  have--;
                  hold = hold + (input[next++] << bits);
                  bits = bits + 8;
                }
                if (hold !== (4294967295 & state.total)) {
                  strm.msg = "incorrect length check";
                  state.mode = BAD;
                  break;
                }
                hold = 0;
                bits = 0;
              }
              state.mode = DONE;
            case DONE:
              ret = TorrenTopia;
              break e;
            case BAD:
              ret = canUrl;
              break e;
            case MEM:
              return ranges;
            case SYNC:
            default:
              return Z_STREAM_ERROR;
          }
        }
        return strm.next_out = put, strm.avail_out = left, strm.next_in = next, strm.avail_in = have, state.hold = hold, state.bits = bits, (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) && updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out) ? (state.mode = MEM, ranges) : (_in = _in - strm.avail_in, _out = _out - strm.avail_out, strm.total_in += _in, strm.total_out += _out, state.total += _out, state.wrap && _out && (strm.adler =
          state.check = state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out)), strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0), (0 === _in && 0 === _out || flush === Z_FINISH) && ret === undefined && (ret = enable_move_colors), ret);
      };
      exports.inflateEnd = function (strm) {
        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }
        var s = strm.state;
        return s.window && (s.window = null), strm.state = null, undefined;
      };
      exports.inflateGetHeader = function (options, head) {
        var state;
        return options && options.state ? 0 == (2 & (state = options.state).wrap) ? Z_STREAM_ERROR : (state.head = head, head.done = false, undefined) : Z_STREAM_ERROR;
      };
      exports.inflateSetDictionary = function (strm, dictionary) {
        var state;
        var dictLength = dictionary.length;
        return strm && strm.state ? 0 !== (state = strm.state).wrap && state.mode !== DICT ? Z_STREAM_ERROR : state.mode === DICT && adler32(1, dictionary, dictLength, 0) !== state.check ? canUrl : updatewindow(strm, dictionary, dictLength, dictLength) ? (state.mode = MEM, ranges) : (state.havedict = 1, undefined) : Z_STREAM_ERROR;
      };
      exports.inflateInfo = "pako inflate (from Nodeca project)";
    },
    "./node_modules/pako/lib/zlib/inftrees.js": function (blob, type, factory) {
      var exports = factory("./node_modules/pako/lib/utils/common.js");
      var loaders = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
      var topRight = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
      var errorMessage = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
      var definition = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
      blob.exports = function (obj, name, s, index, table, pos, value, that) {
        var incr;
        var indentation;
        var low;
        var mask;
        var next;
        var min;
        var num;
        var rw;
        var child;
        var bits = that.bits;
        var type = 0;
        var i = 0;
        var end = 0;
        var l = 0;
        var t = 0;
        var size = 0;
        var index = 0;
        var y = 0;
        var mag = 0;
        var huff = 0;
        var content = null;
        var key = 0;
        var data = new exports.Buf16(16);
        var out = new exports.Buf16(16);
        var region = null;
        var output = 0;
        type = 0;
        for (; type <= 15; type++) {
          data[type] = 0;
        }
        i = 0;
        for (; i < index; i++) {
          data[name[s + i]]++;
        }
        t = bits;
        l = 15;
        for (; l >= 1 && 0 === data[l]; l--) {
        }
        if (t > l && (t = l), 0 === l) {
          return table[pos++] = 20971520, table[pos++] = 20971520, that.bits = 1, 0;
        }
        end = 1;
        for (; end < l && 0 === data[end]; end++) {
        }
        if (t < end) {
          t = end;
        }
        y = 1;
        type = 1;
        for (; type <= 15; type++) {
          if (y = y << 1, (y = y - data[type]) < 0) {
            return -1;
          }
        }
        if (y > 0 && (0 === obj || 1 !== l)) {
          return -1;
        }
        out[1] = 0;
        type = 1;
        for (; type < 15; type++) {
          out[type + 1] = out[type] + data[type];
        }
        i = 0;
        for (; i < index; i++) {
          if (0 !== name[s + i]) {
            value[out[name[s + i]]++] = i;
          }
        }
        if (0 === obj ? (content = region = value, min = 19) : 1 === obj ? (content = loaders, key = key - 257, region = topRight, output = output - 257, min = 256) : (content = errorMessage, region = definition, min = -1), huff = 0, i = 0, type = end, next = pos, size = t, index = 0, low = -1, mask = (mag = 1 << t) - 1, 1 === obj && mag > 852 || 2 === obj && mag > 592) {
          return 1;
        }
        for (; ;) {
          num = type - index;
          if (value[i] < min) {
            rw = 0;
            child = value[i];
          } else {
            if (value[i] > min) {
              rw = region[output + value[i]];
              child = content[key + value[i]];
            } else {
              rw = 96;
              child = 0;
            }
          }
          incr = 1 << type - index;
          end = indentation = 1 << size;
          do {
            table[next + (huff >> index) + (indentation = indentation - incr)] = num << 24 | rw << 16 | child | 0;
          } while (0 !== indentation);
          incr = 1 << type - 1;
          for (; huff & incr;) {
            incr = incr >> 1;
          }
          if (0 !== incr ? (huff = huff & incr - 1, huff = huff + incr) : huff = 0, i++, 0 == --data[type]) {
            if (type === l) {
              break;
            }
            type = name[s + value[i]];
          }
          if (type > t && (huff & mask) !== low) {
            if (0 === index) {
              index = t;
            }
            next = next + end;
            y = 1 << (size = type - index);
            for (; size + index < l && !((y = y - data[size + index]) <= 0);) {
              size++;
              y = y << 1;
            }
            if (mag = mag + (1 << size), 1 === obj && mag > 852 || 2 === obj && mag > 592) {
              return 1;
            }
            table[low = huff & mask] = t << 24 | size << 16 | next - pos | 0;
          }
        }
        return 0 !== huff && (table[next + huff] = type - index << 24 | 64 << 16 | 0), that.bits = t, 0;
      };
    },
    "./node_modules/pako/lib/zlib/messages.js": function (module, selector, convertToImages) {
      module.exports = {
        2: "need dictionary",
        1: "stream end",
        0: "",
        "-1": "file error",
        "-2": "stream error",
        "-3": "data error",
        "-4": "insufficient memory",
        "-5": "buffer error",
        "-6": "incompatible version"
      };
    },
    "./node_modules/pako/lib/zlib/trees.js": function (module, exports, __webpack_require__) {
      function zero(buf) {
        var l = buf.length;
        for (; --l >= 0;) {
          buf[l] = 0;
        }
      }
      function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
        this.static_tree = static_tree;
        this.extra_bits = extra_bits;
        this.extra_base = extra_base;
        this.elems = elems;
        this.max_length = max_length;
        this.has_stree = static_tree && static_tree.length;
      }
      function TreeDesc(dyn_tree, stat_desc) {
        this.dyn_tree = dyn_tree;
        this.max_code = 0;
        this.stat_desc = stat_desc;
      }
      function d_code(dist) {
        return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
      }
      function put_short(s, w) {
        s.pending_buf[s.pending++] = 255 & w;
        s.pending_buf[s.pending++] = w >>> 8 & 255;
      }
      function send_bits(s, value, length) {
        if (s.bi_valid > Buf_size - length) {
          s.bi_buf |= value << s.bi_valid & 65535;
          put_short(s, s.bi_buf);
          s.bi_buf = value >> Buf_size - s.bi_valid;
          s.bi_valid += length - Buf_size;
        } else {
          s.bi_buf |= value << s.bi_valid & 65535;
          s.bi_valid += length;
        }
      }
      function send_code(s, c, tree) {
        send_bits(s, tree[2 * c], tree[2 * c + 1]);
      }
      function bi_reverse(code, len) {
        var current = 0;
        do {
          current = current | 1 & code;
          code = code >>> 1;
          current = current << 1;
        } while (--len > 0);
        return current >>> 1;
      }
      function gen_codes(tree, max_code, bl_count) {
        var bits;
        var n;
        var next_code = new Array(MAX_BITS + 1);
        var code = 0;
        bits = 1;
        for (; bits <= MAX_BITS; bits++) {
          next_code[bits] = code = code + bl_count[bits - 1] << 1;
        }
        n = 0;
        for (; n <= max_code; n++) {
          var len = tree[2 * n + 1];
          if (0 !== len) {
            tree[2 * n] = bi_reverse(next_code[len]++, len);
          }
        }
      }
      function init_block(s) {
        var i;
        i = 0;
        for (; i < L_CODES; i++) {
          s.dyn_ltree[2 * i] = 0;
        }
        i = 0;
        for (; i < D_CODES; i++) {
          s.dyn_dtree[2 * i] = 0;
        }
        i = 0;
        for (; i < BL_CODES; i++) {
          s.bl_tree[2 * i] = 0;
        }
        s.dyn_ltree[2 * END_BLOCK] = 1;
        s.opt_len = s.static_len = 0;
        s.last_lit = s.matches = 0;
      }
      function bi_windup(s) {
        if (s.bi_valid > 8) {
          put_short(s, s.bi_buf);
        } else {
          if (s.bi_valid > 0) {
            s.pending_buf[s.pending++] = s.bi_buf;
          }
        }
        s.bi_buf = 0;
        s.bi_valid = 0;
      }
      function smaller(tree, n, m, depth) {
        var _n2 = 2 * n;
        var _m2 = 2 * m;
        return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
      }
      function pqdownheap(s, tree, k) {
        var v = s.heap[k];
        var j = k << 1;
        for (; j <= s.heap_len && (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth) && j++, !smaller(tree, v, s.heap[j], s.depth));) {
          s.heap[k] = s.heap[j];
          k = j;
          j = j << 1;
        }
        s.heap[k] = v;
      }
      function compress_block(s, ltree, dtree) {
        var dist;
        var lc;
        var code;
        var extra;
        var lx = 0;
        if (0 !== s.last_lit) {
          do {
            dist = s.pending_buf[s.d_buf + 2 * lx] << 8 | s.pending_buf[s.d_buf + 2 * lx + 1];
            lc = s.pending_buf[s.l_buf + lx];
            lx++;
            if (0 === dist) {
              send_code(s, lc, ltree);
            } else {
              send_code(s, (code = _length_code[lc]) + LITERALS + 1, ltree);
              if (0 !== (extra = extra_lbits[code])) {
                send_bits(s, lc = lc - base_length[code], extra);
              }
              send_code(s, code = d_code(--dist), dtree);
              if (0 !== (extra = extra_dbits[code])) {
                send_bits(s, dist = dist - base_dist[code], extra);
              }
            }
          } while (lx < s.last_lit);
        }
        send_code(s, END_BLOCK, ltree);
      }
      function build_tree(s, desc) {
        var n;
        var m;
        var node;
        var tree = desc.dyn_tree;
        var stree = desc.stat_desc.static_tree;
        var has_stree = desc.stat_desc.has_stree;
        var elems = desc.stat_desc.elems;
        var max_code = -1;
        s.heap_len = 0;
        s.heap_max = HEAP_SIZE;
        n = 0;
        for (; n < elems; n++) {
          if (0 !== tree[2 * n]) {
            s.heap[++s.heap_len] = max_code = n;
            s.depth[n] = 0;
          } else {
            tree[2 * n + 1] = 0;
          }
        }
        for (; s.heap_len < 2;) {
          tree[2 * (node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0)] = 1;
          s.depth[node] = 0;
          s.opt_len--;
          if (has_stree) {
            s.static_len -= stree[2 * node + 1];
          }
        }
        desc.max_code = max_code;
        n = s.heap_len >> 1;
        for (; n >= 1; n--) {
          pqdownheap(s, tree, n);
        }
        node = elems;
        do {
          n = s.heap[1];
          s.heap[1] = s.heap[s.heap_len--];
          pqdownheap(s, tree, 1);
          m = s.heap[1];
          s.heap[--s.heap_max] = n;
          s.heap[--s.heap_max] = m;
          tree[2 * node] = tree[2 * n] + tree[2 * m];
          s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
          tree[2 * n + 1] = tree[2 * m + 1] = node;
          s.heap[1] = node++;
          pqdownheap(s, tree, 1);
        } while (s.heap_len >= 2);
        s.heap[--s.heap_max] = s.heap[1];
        (function (s, desc) {
          var h;
          var n;
          var r;
          var bits;
          var xbits;
          var f;
          var tree = desc.dyn_tree;
          var max_code = desc.max_code;
          var stree = desc.stat_desc.static_tree;
          var has_stree = desc.stat_desc.has_stree;
          var extra = desc.stat_desc.extra_bits;
          var base = desc.stat_desc.extra_base;
          var max_length = desc.stat_desc.max_length;
          var idx_last = 0;
          bits = 0;
          for (; bits <= MAX_BITS; bits++) {
            s.bl_count[bits] = 0;
          }
          tree[2 * s.heap[s.heap_max] + 1] = 0;
          h = s.heap_max + 1;
          for (; h < HEAP_SIZE; h++) {
            if ((bits = tree[2 * tree[2 * (n = s.heap[h]) + 1] + 1] + 1) > max_length) {
              bits = max_length;
              idx_last++;
            }
            tree[2 * n + 1] = bits;
            if (!(n > max_code)) {
              s.bl_count[bits]++;
              xbits = 0;
              if (n >= base) {
                xbits = extra[n - base];
              }
              f = tree[2 * n];
              s.opt_len += f * (bits + xbits);
              if (has_stree) {
                s.static_len += f * (stree[2 * n + 1] + xbits);
              }
            }
          }
          if (0 !== idx_last) {
            do {
              bits = max_length - 1;
              for (; 0 === s.bl_count[bits];) {
                bits--;
              }
              s.bl_count[bits]--;
              s.bl_count[bits + 1] += 2;
              s.bl_count[max_length]--;
              idx_last = idx_last - 2;
            } while (idx_last > 0);
            bits = max_length;
            for (; 0 !== bits; bits--) {
              n = s.bl_count[bits];
              for (; 0 !== n;) {
                if (!((r = s.heap[--h]) > max_code)) {
                  if (tree[2 * r + 1] !== bits) {
                    s.opt_len += (bits - tree[2 * r + 1]) * tree[2 * r];
                    tree[2 * r + 1] = bits;
                  }
                  n--;
                }
              }
            }
          }
        })(s, desc);
        gen_codes(tree, max_code, s.bl_count);
      }
      function scan_tree(s, tree, max_code) {
        var n;
        var letterCandidate;
        var initialLetter = -1;
        var node = tree[1];
        var queueIndex = 0;
        var len = 7;
        var numberOfQueueItems = 4;
        if (0 === node) {
          len = 138;
          numberOfQueueItems = 3;
        }
        tree[2 * (max_code + 1) + 1] = 65535;
        n = 0;
        for (; n <= max_code; n++) {
          letterCandidate = node;
          node = tree[2 * (n + 1) + 1];
          if (!(++queueIndex < len && letterCandidate === node)) {
            if (queueIndex < numberOfQueueItems) {
              s.bl_tree[2 * letterCandidate] += queueIndex;
            } else {
              if (0 !== letterCandidate) {
                if (letterCandidate !== initialLetter) {
                  s.bl_tree[2 * letterCandidate]++;
                }
                s.bl_tree[2 * REPZ_11_138]++;
              } else {
                if (queueIndex <= 10) {
                  s.bl_tree[2 * REP_3_6]++;
                } else {
                  s.bl_tree[2 * REPZ_3_10]++;
                }
              }
            }
            queueIndex = 0;
            initialLetter = letterCandidate;
            if (0 === node) {
              len = 138;
              numberOfQueueItems = 3;
            } else {
              if (letterCandidate === node) {
                len = 6;
                numberOfQueueItems = 3;
              } else {
                len = 7;
                numberOfQueueItems = 4;
              }
            }
          }
        }
      }
      function send_tree(s, tree, max_code) {
        var n;
        var curlen;
        var prevlen = -1;
        var nextlen = tree[1];
        var count = 0;
        var max_count = 7;
        var eventRepeat = 4;
        if (0 === nextlen) {
          max_count = 138;
          eventRepeat = 3;
        }
        n = 0;
        for (; n <= max_code; n++) {
          if (curlen = nextlen, nextlen = tree[2 * (n + 1) + 1], !(++count < max_count && curlen === nextlen)) {
            if (count < eventRepeat) {
              do {
                send_code(s, curlen, s.bl_tree);
              } while (0 != --count);
            } else {
              if (0 !== curlen) {
                if (curlen !== prevlen) {
                  send_code(s, curlen, s.bl_tree);
                  count--;
                }
                send_code(s, REPZ_11_138, s.bl_tree);
                send_bits(s, count - 3, 2);
              } else {
                if (count <= 10) {
                  send_code(s, REP_3_6, s.bl_tree);
                  send_bits(s, count - 3, 3);
                } else {
                  send_code(s, REPZ_3_10, s.bl_tree);
                  send_bits(s, count - 11, 7);
                }
              }
            }
            count = 0;
            prevlen = curlen;
            if (0 === nextlen) {
              max_count = 138;
              eventRepeat = 3;
            } else {
              if (curlen === nextlen) {
                max_count = 6;
                eventRepeat = 3;
              } else {
                max_count = 7;
                eventRepeat = 4;
              }
            }
          }
        }
      }
      function _tr_stored_block(s, buf, stored_len, last) {
        send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
        (function (s, buf, len, zoomAware) {
          bi_windup(s);
          if (zoomAware) {
            put_short(s, len);
            put_short(s, ~len);
          }
          utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
          s.pending += len;
        })(s, buf, stored_len, true);
      }
      var utils = __webpack_require__("./node_modules/pako/lib/utils/common.js");
      var Z_FIXED = 4;
      var i = 0;
      var s = 1;
      var Z_UNKNOWN = 2;
      var STORED_BLOCK = 0;
      var STATIC_TREES = 1;
      var DYN_TREES = 2;
      var LENGTH_CODES = 29;
      var LITERALS = 256;
      var L_CODES = LITERALS + 1 + LENGTH_CODES;
      var D_CODES = 30;
      var BL_CODES = 19;
      var HEAP_SIZE = 2 * L_CODES + 1;
      var MAX_BITS = 15;
      var Buf_size = 16;
      var MAX_BL_BITS = 7;
      var END_BLOCK = 256;
      var REPZ_11_138 = 16;
      var REP_3_6 = 17;
      var REPZ_3_10 = 18;
      var extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
      var extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
      var extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
      var zip_bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
      var static_ltree = new Array(2 * (L_CODES + 2));
      zero(static_ltree);
      var static_dtree = new Array(2 * D_CODES);
      zero(static_dtree);
      var _dist_code = new Array(512);
      zero(_dist_code);
      var _length_code = new Array(256);
      zero(_length_code);
      var base_length = new Array(LENGTH_CODES);
      zero(base_length);
      var static_l_desc;
      var static_d_desc;
      var static_bl_desc;
      var base_dist = new Array(D_CODES);
      zero(base_dist);
      var ee = false;
      exports._tr_init = function (s) {
        if (!ee) {
          !function () {
            var n;
            var bits;
            var length;
            var code;
            var dist;
            var bl_count = new Array(MAX_BITS + 1);
            length = 0;
            code = 0;
            for (; code < LENGTH_CODES - 1; code++) {
              base_length[code] = length;
              n = 0;
              for (; n < 1 << extra_lbits[code]; n++) {
                _length_code[length++] = code;
              }
            }
            _length_code[length - 1] = code;
            dist = 0;
            code = 0;
            for (; code < 16; code++) {
              base_dist[code] = dist;
              n = 0;
              for (; n < 1 << extra_dbits[code]; n++) {
                _dist_code[dist++] = code;
              }
            }
            dist = dist >> 7;
            for (; code < D_CODES; code++) {
              base_dist[code] = dist << 7;
              n = 0;
              for (; n < 1 << extra_dbits[code] - 7; n++) {
                _dist_code[256 + dist++] = code;
              }
            }
            bits = 0;
            for (; bits <= MAX_BITS; bits++) {
              bl_count[bits] = 0;
            }
            n = 0;
            for (; n <= 143;) {
              static_ltree[2 * n + 1] = 8;
              n++;
              bl_count[8]++;
            }
            for (; n <= 255;) {
              static_ltree[2 * n + 1] = 9;
              n++;
              bl_count[9]++;
            }
            for (; n <= 279;) {
              static_ltree[2 * n + 1] = 7;
              n++;
              bl_count[7]++;
            }
            for (; n <= 287;) {
              static_ltree[2 * n + 1] = 8;
              n++;
              bl_count[8]++;
            }
            gen_codes(static_ltree, L_CODES + 1, bl_count);
            n = 0;
            for (; n < D_CODES; n++) {
              static_dtree[2 * n + 1] = 5;
              static_dtree[2 * n] = bi_reverse(n, 5);
            }
            static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
            static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
            static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
          }();
          ee = true;
        }
        s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
        s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
        s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
        s.bi_buf = 0;
        s.bi_valid = 0;
        init_block(s);
      };
      exports._tr_stored_block = _tr_stored_block;
      exports._tr_flush_block = function (s, buf, stored_len, last) {
        var opt_lenb;
        var static_lenb;
        var sp0 = 0;
        if (s.level > 0) {
          if (s.strm.data_type === Z_UNKNOWN) {
            s.strm.data_type = function (s) {
              var n;
              var black_mask = 4093624447;
              n = 0;
              for (; n <= 31; n++, black_mask = black_mask >>> 1) {
                if (1 & black_mask && 0 !== s.dyn_ltree[2 * n]) {
                  return i;
                }
              }
              if (0 !== s.dyn_ltree[18] || 0 !== s.dyn_ltree[20] || 0 !== s.dyn_ltree[26]) {
                return s;
              }
              n = 32;
              for (; n < LITERALS; n++) {
                if (0 !== s.dyn_ltree[2 * n]) {
                  return s;
                }
              }
              return i;
            }(s);
          }
          build_tree(s, s.l_desc);
          build_tree(s, s.d_desc);
          sp0 = function (s) {
            var max_blindex;
            scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
            scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
            build_tree(s, s.bl_desc);
            max_blindex = BL_CODES - 1;
            for (; max_blindex >= 3 && 0 === s.bl_tree[2 * zip_bl_order[max_blindex] + 1]; max_blindex--) {
            }
            return s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4, max_blindex;
          }(s);
          opt_lenb = s.opt_len + 3 + 7 >>> 3;
          if ((static_lenb = s.static_len + 3 + 7 >>> 3) <= opt_lenb) {
            opt_lenb = static_lenb;
          }
        } else {
          opt_lenb = static_lenb = stored_len + 5;
        }
        if (stored_len + 4 <= opt_lenb && -1 !== buf) {
          _tr_stored_block(s, buf, stored_len, last);
        } else {
          if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
            send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
            compress_block(s, static_ltree, static_dtree);
          } else {
            send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
            (function (s, lcodes, dcodes, blcodes) {
              var rank;
              send_bits(s, lcodes - 257, 5);
              send_bits(s, dcodes - 1, 5);
              send_bits(s, blcodes - 4, 4);
              rank = 0;
              for (; rank < blcodes; rank++) {
                send_bits(s, s.bl_tree[2 * zip_bl_order[rank] + 1], 3);
              }
              send_tree(s, s.dyn_ltree, lcodes - 1);
              send_tree(s, s.dyn_dtree, dcodes - 1);
            })(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, sp0 + 1);
            compress_block(s, s.dyn_ltree, s.dyn_dtree);
          }
        }
        init_block(s);
        if (last) {
          bi_windup(s);
        }
      };
      exports._tr_tally = function (s, dist, lc) {
        return s.pending_buf[s.d_buf + 2 * s.last_lit] = dist >>> 8 & 255, s.pending_buf[s.d_buf + 2 * s.last_lit + 1] = 255 & dist, s.pending_buf[s.l_buf + s.last_lit] = 255 & lc, s.last_lit++, 0 === dist ? s.dyn_ltree[2 * lc]++ : (s.matches++, dist--, s.dyn_ltree[2 * (_length_code[lc] + LITERALS + 1)]++, s.dyn_dtree[2 * d_code(dist)]++), s.last_lit === s.lit_bufsize - 1;
      };
      exports._tr_align = function (s) {
        send_bits(s, STATIC_TREES << 1, 3);
        send_code(s, END_BLOCK, static_ltree);
        (function (s) {
          if (16 === s.bi_valid) {
            put_short(s, s.bi_buf);
            s.bi_buf = 0;
            s.bi_valid = 0;
          } else {
            if (s.bi_valid >= 8) {
              s.pending_buf[s.pending++] = 255 & s.bi_buf;
              s.bi_buf >>= 8;
              s.bi_valid -= 8;
            }
          }
        })(s);
      };
    },
    "./node_modules/pako/lib/zlib/zstream.js": function (module, data, urlPartConfig) {
      module.exports = function () {
        this.input = null;
        this.next_in = 0;
        this.avail_in = 0;
        this.total_in = 0;
        this.output = null;
        this.next_out = 0;
        this.avail_out = 0;
        this.total_out = 0;
        this.msg = "";
        this.state = null;
        this.data_type = 2;
        this.adler = 0;
      };
    },
    "./node_modules/process-nextick-args/index.js": function (module, data, decode) {
      (function (Utils) {
        if (void 0 === Utils || !Utils.version || 0 === Utils.version.indexOf("v0.") || 0 === Utils.version.indexOf("v1.") && 0 !== Utils.version.indexOf("v1.8.")) {
          module.exports = {
            nextTick: function (callback, value, obj, t) {
              if ("function" != typeof callback) {
                throw new TypeError('"callback" argument must be a function');
              }
              var args;
              var i;
              var l = arguments.length;
              switch (l) {
                case 0:
                case 1:
                  return Utils.nextTick(callback);
                case 2:
                  return Utils.nextTick(function () {
                    callback.call(null, value);
                  });
                case 3:
                  return Utils.nextTick(function () {
                    callback.call(null, value, obj);
                  });
                case 4:
                  return Utils.nextTick(function () {
                    callback.call(null, value, obj, t);
                  });
                default:
                  args = new Array(l - 1);
                  i = 0;
                  for (; i < args.length;) {
                    args[i++] = arguments[i];
                  }
                  return Utils.nextTick(function () {
                    callback.apply(null, args);
                  });
              }
            }
          };
        } else {
          module.exports = Utils;
        }
      }).call(this, decode("./node_modules/process/browser.js"));
    },
    "./node_modules/process/browser.js": function (mixin, doPost) {
      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          return setTimeout(fun, 0);
        }
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          return cachedSetTimeout = setTimeout, setTimeout(fun, 0);
        }
        try {
          return cachedSetTimeout(fun, 0);
        } catch (t) {
          try {
            return cachedSetTimeout.call(null, fun, 0);
          } catch (t) {
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function cleanUpNextTick() {
        if (d && currentQueue) {
          d = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
      }
      function drainQueue() {
        if (!d) {
          var timeout = runTimeout(cleanUpNextTick);
          d = true;
          var len = queue.length;
          for (; len;) {
            currentQueue = queue;
            queue = [];
            for (; ++queueIndex < len;) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          d = false;
          (function (marker) {
            if (cachedClearTimeout === clearTimeout) {
              return clearTimeout(marker);
            }
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
              return cachedClearTimeout = clearTimeout, clearTimeout(marker);
            }
            try {
              cachedClearTimeout(marker);
            } catch (t) {
              try {
                return cachedClearTimeout.call(null, marker);
              } catch (t) {
                return cachedClearTimeout.call(this, marker);
              }
            }
          })(timeout);
        }
      }
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      function noop() {
      }
      var cachedSetTimeout;
      var cachedClearTimeout;
      var process = mixin.exports = {};
      !function () {
        try {
          cachedSetTimeout = "function" == typeof setTimeout ? setTimeout : defaultSetTimout;
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          cachedClearTimeout = "function" == typeof clearTimeout ? clearTimeout : defaultClearTimeout;
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      }();
      var currentQueue;
      var queue = [];
      var d = false;
      var queueIndex = -1;
      process.nextTick = function (fn) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          var i = 1;
          for (; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fn, args));
        if (!(1 !== queue.length || d)) {
          runTimeout(drainQueue);
        }
      };
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = "";
      process.versions = {};
      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;
      process.listeners = function (type) {
        return [];
      };
      process.binding = function (name) {
        throw new Error("process.binding is not supported");
      };
      process.cwd = function () {
        return "/";
      };
      process.chdir = function (dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function () {
        return 0;
      };
    },
    "./node_modules/punycode/punycode.js": function (t, c, callback) {
      (function (module, exports) {
        var ret;
        !function (i) {
          function error(type) {
            throw new RangeError(errors[type]);
          }
          function map(data, fn) {
            var i = data.length;
            var array = [];
            for (; i--;) {
              array[i] = fn(data[i]);
            }
            return array;
          }
          function mapDomain(value, fn) {
            var jsvalue = value.split("@");
            var label = "";
            return jsvalue.length > 1 && (label = jsvalue[0] + "@", value = jsvalue[1]), label + map((value = value.replace(v, ".")).split("."), fn).join(".");
          }
          function ucs2decode(string) {
            var t;
            var r;
            var output = [];
            var i = 0;
            var stringLength = string.length;
            for (; i < stringLength;) {
              if ((t = string.charCodeAt(i++)) >= 55296 && t <= 56319 && i < stringLength) {
                if (56320 == (64512 & (r = string.charCodeAt(i++)))) {
                  output.push(((1023 & t) << 10) + (1023 & r) + 65536);
                } else {
                  output.push(t);
                  i--;
                }
              } else {
                output.push(t);
              }
            }
            return output;
          }
          function toString(data) {
            return map(data, function (value) {
              var output = "";
              return value > 65535 && (output = output + stringFromCharCode((value = value - 65536) >>> 10 & 1023 | 55296), value = 56320 | 1023 & value), output = output + stringFromCharCode(value);
            }).join("");
          }
          function digitToBasic(digit, flag) {
            return digit + 22 + 75 * (digit < 26) - ((0 != flag) << 5);
          }
          function adapt(delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta = delta + floor(delta / numPoints);
            for (; delta > baseMinusTMin * tMax >> 1; k = k + base) {
              delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          }
          function decode(a) {
            var out;
            var r;
            var n;
            var f;
            var oldi;
            var w;
            var k;
            var digit;
            var t;
            var baseMinusT;
            var b;
            var arg = [];
            var u = a.length;
            var i = 0;
            var delta = Infinity;
            var bias = initialBias;
            if ((r = a.lastIndexOf(x)) < 0) {
              r = 0;
            }
            n = 0;
            for (; n < r; ++n) {
              if (a.charCodeAt(n) >= 128) {
                error("not-basic");
              }
              arg.push(a.charCodeAt(n));
            }
            f = r > 0 ? r + 1 : 0;
            for (; f < u;) {
              oldi = i;
              w = 1;
              k = base;
              for (; f >= u && error("invalid-input"), ((digit = (b = a.charCodeAt(f++)) - 48 < 10 ? b - 22 : b - 65 < 26 ? b - 65 : b - 97 < 26 ? b - 97 : base) >= base || digit > floor((maxInt - i) / w)) && error("overflow"), i = i + digit * w, !(digit < (t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias)); k = k + base) {
                if (w > floor(maxInt / (baseMinusT = base - t))) {
                  error("overflow");
                }
                w = w * baseMinusT;
              }
              bias = adapt(i - oldi, out = arg.length + 1, 0 == oldi);
              if (floor(i / out) > maxInt - delta) {
                error("overflow");
              }
              delta = delta + floor(i / out);
              i = i % out;
              arg.splice(i++, 0, delta);
            }
            return toString(arg);
          }
          function encode(input) {
            var n;
            var delta;
            var handledCPCount;
            var basicLength;
            var bias;
            var j;
            var m;
            var q;
            var k;
            var t;
            var currentValue;
            var inputLength;
            var handledCPCountPlusOne;
            var baseMinusT;
            var qMinusT;
            var output = [];
            inputLength = (input = ucs2decode(input)).length;
            n = Infinity;
            delta = 0;
            bias = initialBias;
            j = 0;
            for (; j < inputLength; ++j) {
              if ((currentValue = input[j]) < 128) {
                output.push(stringFromCharCode(currentValue));
              }
            }
            handledCPCount = basicLength = output.length;
            if (basicLength) {
              output.push(x);
            }
            for (; handledCPCount < inputLength;) {
              m = maxInt;
              j = 0;
              for (; j < inputLength; ++j) {
                if ((currentValue = input[j]) >= n && currentValue < m) {
                  m = currentValue;
                }
              }
              if (m - n > floor((maxInt - delta) / (handledCPCountPlusOne = handledCPCount + 1))) {
                error("overflow");
              }
              delta = delta + (m - n) * handledCPCountPlusOne;
              n = m;
              j = 0;
              for (; j < inputLength; ++j) {
                if ((currentValue = input[j]) < n && ++delta > maxInt && error("overflow"), currentValue == n) {
                  q = delta;
                  k = base;
                  for (; !(q < (t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias)); k = k + base) {
                    qMinusT = q - t;
                    baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                    q = floor(qMinusT / baseMinusT);
                  }
                  output.push(stringFromCharCode(digitToBasic(q, 0)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }
              ++delta;
              ++n;
            }
            return output.join("");
          }
          if (c) {
            c.nodeType;
          }
          if (module) {
            module.nodeType;
          }
          var win = "object" == typeof exports && exports;
          if (win.global !== win && win.window !== win) {
            win.self;
          }
          var punycode;
          var maxInt = 2147483647;
          var base = 36;
          var tMin = 1;
          var tMax = 26;
          var skew = 38;
          var damp = 700;
          var initialBias = 72;
          var Infinity = 128;
          var x = "-";
          var regBigBrackets = /^xn--/;
          var isBlankReg = /[^\x20-\x7E]/;
          var v = /[\x2E\u3002\uFF0E\uFF61]/g;
          var errors = {
            overflow: "Overflow: input needs wider integers to process",
            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
            "invalid-input": "Invalid input"
          };
          var baseMinusTMin = base - tMin;
          var floor = Math.floor;
          var stringFromCharCode = String.fromCharCode;
          punycode = {
            version: "1.4.1",
            ucs2: {
              decode: ucs2decode,
              encode: toString
            },
            decode: decode,
            encode: encode,
            toASCII: function (domain) {
              return mapDomain(domain, function (item) {
                return isBlankReg.test(item) ? "xn--" + encode(item) : item;
              });
            },
            toUnicode: function (domain) {
              return mapDomain(domain, function (string) {
                return regBigBrackets.test(string) ? decode(string.slice(4).toLowerCase()) : string;
              });
            }
          };
          if (!(void 0 === (ret = function () {
            return punycode;
          }.call(c, callback, c, module)))) {
            module.exports = ret;
          }
        }();
      }).call(this, callback("./node_modules/webpack/buildin/module.js")(t), callback("./node_modules/webpack/buildin/global.js"));
    },
    "./node_modules/querystring-es3/decode.js": function (module, data, urlPartConfig) {
      function __hasOwn(object, prop) {
        return Object.prototype.hasOwnProperty.call(object, prop);
      }
      module.exports = function (value, name, data, params) {
        name = name || "&";
        data = data || "=";
        var obj = {};
        if ("string" != typeof value || 0 === value.length) {
          return obj;
        }
        var a = /\+/g;
        value = value.split(name);
        var len = 1E3;
        if (params && "number" == typeof params.maxKeys) {
          len = params.maxKeys;
        }
        var l = value.length;
        if (len > 0 && l > len) {
          l = len;
        }
        var i = 0;
        for (; i < l; ++i) {
          var t;
          var vstr;
          var k;
          var v;
          var m = value[i].replace(a, "%20");
          var x = m.indexOf(data);
          if (x >= 0) {
            t = m.substr(0, x);
            vstr = m.substr(x + 1);
          } else {
            t = m;
            vstr = "";
          }
          k = decodeURIComponent(t);
          v = decodeURIComponent(vstr);
          if (__hasOwn(obj, k)) {
            if (createGeneratorMethods(obj[k])) {
              obj[k].push(v);
            } else {
              obj[k] = [obj[k], v];
            }
          } else {
            obj[k] = v;
          }
        }
        return obj;
      };
      var createGeneratorMethods = Array.isArray || function (value) {
        return "[object Array]" === Object.prototype.toString.call(value);
      };
    },
    "./node_modules/querystring-es3/encode.js": function (module, data, urlPartConfig) {
      function callback(a, fn) {
        if (a.map) {
          return a.map(fn);
        }
        var r = [];
        var i = 0;
        for (; i < a.length; i++) {
          r.push(fn(a[i], i));
        }
        return r;
      }
      var stringifyPrimitive = function (v) {
        switch (typeof v) {
          case "string":
            return v;
          case "boolean":
            return v ? "true" : "false";
          case "number":
            return isFinite(v) ? v : "";
          default:
            return "";
        }
      };
      module.exports = function (obj, name, data, k) {
        return name = name || "&", data = data || "=", null === obj && (obj = void 0), "object" == typeof obj ? callback(s(obj), function (k) {
          var output = encodeURIComponent(stringifyPrimitive(k)) + data;
          return isNaN(obj[k]) ? callback(obj[k], function (name) {
            return output + encodeURIComponent(stringifyPrimitive(name));
          }).join(name) : output + encodeURIComponent(stringifyPrimitive(obj[k]));
        }).join(name) : k ? encodeURIComponent(stringifyPrimitive(k)) + data + encodeURIComponent(stringifyPrimitive(obj)) : "";
      };
      var isNaN = Array.isArray || function (value) {
        return "[object Array]" === Object.prototype.toString.call(value);
      };
      var s = Object.keys || function (value) {
        var bezierArgs = [];
        var x;
        for (x in value) {
          if (Object.prototype.hasOwnProperty.call(value, x)) {
            bezierArgs.push(x);
          }
        }
        return bezierArgs;
      };
    },
    "./node_modules/querystring-es3/index.js": function (database2, options, require) {
      options.decode = options.parse = require("./node_modules/querystring-es3/decode.js");
      options.encode = options.stringify = require("./node_modules/querystring-es3/encode.js");
    },
    "./node_modules/readable-stream/duplex-browser.js": function (module, object, instantiate) {
      module.exports = instantiate("./node_modules/readable-stream/lib/_stream_duplex.js");
    },
    "./node_modules/readable-stream/lib/_stream_duplex.js": function (module, id, require) {
      function Duplex(obj) {
        if (!(this instanceof Duplex)) {
          return new Duplex(obj);
        }
        Event.call(this, obj);
        $.call(this, obj);
        if (obj && false === obj.readable) {
          this.readable = false;
        }
        if (obj && false === obj.writable) {
          this.writable = false;
        }
        this.allowHalfOpen = true;
        if (obj && false === obj.allowHalfOpen) {
          this.allowHalfOpen = false;
        }
        this.once("end", onend);
      }
      function onend() {
        if (!(this.allowHalfOpen || this._writableState.ended)) {
          process.nextTick(p, this);
        }
      }
      function p(p) {
        p.end();
      }
      var process = require("./node_modules/process-nextick-args/index.js");
      var exposeApi = Object.keys || function (value) {
        var bezierArgs = [];
        var x;
        for (x in value) {
          bezierArgs.push(x);
        }
        return bezierArgs;
      };
      module.exports = Duplex;
      var util = require("./node_modules/core-util-is/lib/util.js");
      util.inherits = require("./node_modules/inherits/inherits_browser.js");
      var Event = require("./node_modules/readable-stream/lib/_stream_readable.js");
      var $ = require("./node_modules/readable-stream/lib/_stream_writable.js");
      util.inherits(Duplex, Event);
      var spriteMethods = exposeApi($.prototype);
      var i = 0;
      for (; i < spriteMethods.length; i++) {
        var method = spriteMethods[i];
        if (!Duplex.prototype[method]) {
          Duplex.prototype[method] = $.prototype[method];
        }
      }
      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        enumerable: false,
        get: function () {
          return this._writableState.highWaterMark;
        }
      });
      Object.defineProperty(Duplex.prototype, "destroyed", {
        get: function () {
          return void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed && this._writableState.destroyed);
        },
        set: function (value) {
          if (void 0 !== this._readableState && void 0 !== this._writableState) {
            this._readableState.destroyed = value;
            this._writableState.destroyed = value;
          }
        }
      });
      Duplex.prototype._destroy = function (err, callback) {
        this.push(null);
        this.end();
        process.nextTick(callback, err);
      };
    },
    "./node_modules/readable-stream/lib/_stream_passthrough.js": function (module, id, require) {
      function FilterStream(value) {
        if (!(this instanceof FilterStream)) {
          return new FilterStream(value);
        }
        SchemaType.call(this, value);
      }
      module.exports = FilterStream;
      var SchemaType = require("./node_modules/readable-stream/lib/_stream_transform.js");
      var util = require("./node_modules/core-util-is/lib/util.js");
      util.inherits = require("./node_modules/inherits/inherits_browser.js");
      util.inherits(FilterStream, SchemaType);
      FilterStream.prototype._transform = function (unused, output, callback) {
        callback(null, unused);
      };
    },
    "./node_modules/readable-stream/lib/_stream_readable.js": function (module, id, require) {
      (function (PL$3, process) {
        function ReadableState(options, stream) {
          options = options || {};
          var isISO = stream instanceof (connectionFn = connectionFn || require("./node_modules/readable-stream/lib/_stream_duplex.js"));
          this.objectMode = !!options.objectMode;
          if (isISO) {
            this.objectMode = this.objectMode || !!options.readableObjectMode;
          }
          var hwm = options.highWaterMark;
          var tz = options.readableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16384;
          this.highWaterMark = hwm || 0 === hwm ? hwm : isISO && (tz || 0 === tz) ? tz : defaultHwm;
          this.highWaterMark = Math.floor(this.highWaterMark);
          this.buffer = new type;
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false;
          this.sync = true;
          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false;
          this.destroyed = false;
          this.defaultEncoding = options.defaultEncoding || "utf8";
          this.awaitDrain = 0;
          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;
          if (options.encoding) {
            if (!StringDecoder) {
              StringDecoder = require("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
            }
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }
        function Readable(value) {
          if (connectionFn = connectionFn || require("./node_modules/readable-stream/lib/_stream_duplex.js"), !(this instanceof Readable)) {
            return new Readable(value);
          }
          this._readableState = new ReadableState(value, this);
          this.readable = true;
          if (value) {
            if ("function" == typeof value.read) {
              this._read = value.read;
            }
            if ("function" == typeof value.destroy) {
              this._destroy = value.destroy;
            }
          }
          Transport.call(this);
        }
        function update(stream, value, encoding, done, fn) {
          var ctx;
          var state = stream._readableState;
          if (null === value) {
            state.reading = false;
            (function (stream, state) {
              if (state.ended) {
                return;
              }
              if (state.decoder) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) {
                  state.buffer.push(chunk);
                  state.length += state.objectMode ? 1 : chunk.length;
                }
              }
              state.ended = true;
              emitReadable(stream);
            })(stream, state);
          } else {
            if (!fn) {
              ctx = function (state, data) {
                var err;
                item = data;
                if (!(Buffer.isBuffer(item) || item instanceof Point || "string" == typeof data || void 0 === data || state.objectMode)) {
                  err = new TypeError("Invalid non-string/buffer chunk");
                }
                var item;
                return err;
              }(state, value);
            }
            if (ctx) {
              stream.emit("error", ctx);
            } else {
              if (state.objectMode || value && value.length > 0) {
                if (!("string" == typeof value || state.objectMode || Object.getPrototypeOf(value) === Buffer.prototype)) {
                  value = function (e) {
                    return Buffer.from(e);
                  }(value);
                }
                if (done) {
                  if (state.endEmitted) {
                    stream.emit("error", new Error("stream.unshift() after end event"));
                  } else {
                    readableAddChunk(stream, state, value, true);
                  }
                } else {
                  if (state.ended) {
                    stream.emit("error", new Error("stream.push() after EOF"));
                  } else {
                    state.reading = false;
                    if (state.decoder && !encoding) {
                      value = state.decoder.write(value);
                      if (state.objectMode || 0 !== value.length) {
                        readableAddChunk(stream, state, value, false);
                      } else {
                        maybeReadMore(stream, state);
                      }
                    } else {
                      readableAddChunk(stream, state, value, false);
                    }
                  }
                }
              } else {
                if (!done) {
                  state.reading = false;
                }
              }
            }
          }
          return function (state) {
            return !state.ended && (state.needReadable || state.length < state.highWaterMark || 0 === state.length);
          }(state);
        }
        function readableAddChunk(stream, state, chunk, addToFront) {
          if (state.flowing && 0 === state.length && !state.sync) {
            stream.emit("data", chunk);
            stream.read(0);
          } else {
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) {
              state.buffer.unshift(chunk);
            } else {
              state.buffer.push(chunk);
            }
            if (state.needReadable) {
              emitReadable(stream);
            }
          }
          maybeReadMore(stream, state);
        }
        function howMuchToRead(n, state) {
          return n <= 0 || 0 === state.length && state.ended ? 0 : state.objectMode ? 1 : n != n ? state.flowing && state.length ? state.buffer.head.data.length : state.length : (n > state.highWaterMark && (state.highWaterMark = function (i) {
            return i >= ipos ? i = ipos : (i--, i = i | i >>> 1, i = i | i >>> 2, i = i | i >>> 4, i = i | i >>> 8, i = i | i >>> 16, i++), i;
          }(n)), n <= state.length ? n : state.ended ? state.length : (state.needReadable = true, 0));
        }
        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;
          if (!state.emittedReadable) {
            debug("emitReadable", state.flowing);
            state.emittedReadable = true;
            if (state.sync) {
              _.nextTick(start, stream);
            } else {
              start(stream);
            }
          }
        }
        function start(stream) {
          debug("emit readable");
          stream.emit("readable");
          flow(stream);
        }
        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            _.nextTick(read, stream, state);
          }
        }
        function read(options, state) {
          var i = state.length;
          for (; !state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark && (debug("maybeReadMore read 0"), options.read(0), i !== state.length);) {
            i = state.length;
          }
          state.readingMore = false;
        }
        function onComplete(event) {
          debug("readable nexttick read 0");
          event.read(0);
        }
        function resume(stream, state) {
          if (!state.reading) {
            debug("resume read 0");
            stream.read(0);
          }
          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit("resume");
          flow(stream);
          if (state.flowing && !state.reading) {
            stream.read(0);
          }
        }
        function flow(stream) {
          var state = stream._readableState;
          debug("flow", state.flowing);
          for (; state.flowing && null !== stream.read();) {
          }
        }
        function write(value, options) {
          return 0 === options.length ? null : (options.objectMode ? path = options.buffer.shift() : !value || value >= options.length ? (path = options.decoder ? options.buffer.join("") : 1 === options.buffer.length ? options.buffer.head.data : options.buffer.concat(options.length), options.buffer.clear()) : path = function (e, c, b) {
            var result;
            if (e < c.head.data.length) {
              result = c.head.data.slice(0, e);
              c.head.data = c.head.data.slice(e);
            } else {
              result = e === c.head.data.length ? c.shift() : b ? function (index, current) {
                var node = current.head;
                var count = 1;
                var value = node.data;
                index = index - value.length;
                for (; node = node.next;) {
                  var s = node.data;
                  var i = index > s.length ? s.length : index;
                  if (i === s.length ? value = value + s : value = value + s.slice(0, index), 0 === (index = index - i)) {
                    if (i === s.length) {
                      ++count;
                      if (node.next) {
                        current.head = node.next;
                      } else {
                        current.head = current.tail = null;
                      }
                    } else {
                      current.head = node;
                      node.data = s.slice(i);
                    }
                    break;
                  }
                  ++count;
                }
                return current.length -= count, value;
              }(e, c) : function (n, current) {
                var s = Buffer.allocUnsafe(n);
                var node = current.head;
                var count = 1;
                node.data.copy(s);
                n = n - node.data.length;
                for (; node = node.next;) {
                  var buf = node.data;
                  var i = n > buf.length ? buf.length : n;
                  if (buf.copy(s, s.length - n, 0, i), 0 === (n = n - i)) {
                    if (i === buf.length) {
                      ++count;
                      if (node.next) {
                        current.head = node.next;
                      } else {
                        current.head = current.tail = null;
                      }
                    } else {
                      current.head = node;
                      node.data = buf.slice(i);
                    }
                    break;
                  }
                  ++count;
                }
                return current.length -= count, s;
              }(e, c);
            }
            return result;
          }(value, options.buffer, options.decoder), path);
          var path;
        }
        function endReadable(stream) {
          var state = stream._readableState;
          if (state.length > 0) {
            throw new Error('"endReadable()" called on non-empty stream');
          }
          if (!state.endEmitted) {
            state.ended = true;
            _.nextTick(close, state, stream);
          }
        }
        function close(state, messages) {
          if (!(state.endEmitted || 0 !== state.length)) {
            state.endEmitted = true;
            messages.readable = false;
            messages.emit("end");
          }
        }
        function indexOf(array, elem) {
          var i = 0;
          var length = array.length;
          for (; i < length; i++) {
            if (array[i] === elem) {
              return i;
            }
          }
          return -1;
        }
        var _ = require("./node_modules/process-nextick-args/index.js");
        module.exports = Readable;
        var connectionFn;
        var resolve = require("./node_modules/isarray/index.js");
        Readable.ReadableState = ReadableState;
        require("./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
        var error = function (elem, val) {
          return elem.listeners(val).length;
        };
        var Transport = require("./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
        var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
        var Point = PL$3.Uint8Array || function () {
        };
        var util = require("./node_modules/core-util-is/lib/util.js");
        util.inherits = require("./node_modules/inherits/inherits_browser.js");
        var options = require(0);
        var debug = void 0;
        debug = options && options.debuglog ? options.debuglog("stream") : function () {
        };
        var StringDecoder;
        var type = require("./node_modules/readable-stream/lib/internal/streams/BufferList.js");
        var unzip = require("./node_modules/readable-stream/lib/internal/streams/destroy.js");
        util.inherits(Readable, Transport);
        var events = ["error", "close", "destroy", "pause", "resume"];
        Object.defineProperty(Readable.prototype, "destroyed", {
          get: function () {
            return void 0 !== this._readableState && this._readableState.destroyed;
          },
          set: function (value) {
            if (this._readableState) {
              this._readableState.destroyed = value;
            }
          }
        });
        Readable.prototype.destroy = unzip.destroy;
        Readable.prototype._undestroy = unzip.undestroy;
        Readable.prototype._destroy = function (err, cb) {
          this.push(null);
          cb(err);
        };
        Readable.prototype.push = function (data, encoding) {
          var callback;
          var state = this._readableState;
          return state.objectMode ? callback = true : "string" == typeof data && ((encoding = encoding || state.defaultEncoding) !== state.encoding && (data = Buffer.from(data, encoding), encoding = ""), callback = true), update(this, data, encoding, false, callback);
        };
        Readable.prototype.unshift = function (data) {
          return update(this, data, null, true, false);
        };
        Readable.prototype.isPaused = function () {
          return false === this._readableState.flowing;
        };
        Readable.prototype.setEncoding = function (enc) {
          return StringDecoder || (StringDecoder = require("./node_modules/string_decoder/lib/string_decoder.js").StringDecoder), this._readableState.decoder = new StringDecoder(enc), this._readableState.encoding = enc, this;
        };
        var ipos = 8388608;
        Readable.prototype.read = function (value) {
          debug("read", value);
          value = parseInt(value, 10);
          var state = this._readableState;
          var nOrig = value;
          if (0 !== value && (state.emittedReadable = false), 0 === value && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
            return debug("read: emitReadable", state.length, state.ended), 0 === state.length && state.ended ? endReadable(this) : emitReadable(this), null;
          }
          if (0 === (value = howMuchToRead(value, state)) && state.ended) {
            return 0 === state.length && endReadable(this), null;
          }
          var ribbonHTML;
          var doRead = state.needReadable;
          return debug("need readable", doRead), (0 === state.length || state.length - value < state.highWaterMark) && debug("length less than watermark", doRead = true), state.ended || state.reading ? debug("reading or ended", doRead = false) : doRead && (debug("do read"), state.reading = true, state.sync = true, 0 === state.length && (state.needReadable = true), this._read(state.highWaterMark), state.sync = false, state.reading || (value = howMuchToRead(nOrig, state))), null === (ribbonHTML = value >
            0 ? write(value, state) : null) ? (state.needReadable = true, value = 0) : state.length -= value, 0 === state.length && (state.ended || (state.needReadable = true), nOrig !== value && state.ended && endReadable(this)), null !== ribbonHTML && this.emit("data", ribbonHTML), ribbonHTML;
        };
        Readable.prototype._read = function (value) {
          this.emit("error", new Error("_read() is not implemented"));
        };
        Readable.prototype.pipe = function (dest, pipeOpts) {
          function cleanup(name, value) {
            debug("onunpipe");
            if (name === src && value && false === value.hasUnpiped) {
              value.hasUnpiped = true;
              debug("cleanup");
              dest.removeListener("close", done);
              dest.removeListener("finish", onclose);
              dest.removeListener("drain", ondrain);
              dest.removeListener("error", onerror);
              dest.removeListener("unpipe", cleanup);
              src.removeListener("end", end);
              src.removeListener("end", unpipe);
              src.removeListener("data", ondata);
              f = true;
              if (!(!state.awaitDrain || dest._writableState && !dest._writableState.needDrain)) {
                ondrain();
              }
            }
          }
          function end() {
            debug("onend");
            dest.end();
          }
          function ondata(data) {
            debug("ondata");
            h = false;
            if (!(false !== dest.write(data) || h)) {
              if ((1 === state.pipesCount && state.pipes === dest || state.pipesCount > 1 && -1 !== indexOf(state.pipes, dest)) && !f) {
                debug("false write response, pause", src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                h = true;
              }
              src.pause();
            }
          }
          function onerror(link) {
            debug("onerror", link);
            unpipe();
            dest.removeListener("error", onerror);
            if (0 === error(dest, "error")) {
              dest.emit("error", link);
            }
          }
          function done() {
            dest.removeListener("finish", onclose);
            unpipe();
          }
          function onclose() {
            debug("onfinish");
            dest.removeListener("close", done);
            unpipe();
          }
          function unpipe() {
            debug("unpipe");
            src.unpipe(dest);
          }
          var src = this;
          var state = this._readableState;
          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;
            case 1:
              state.pipes = [state.pipes, dest];
              break;
            default:
              state.pipes.push(dest);
          }
          state.pipesCount += 1;
          debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
          var start = (!pipeOpts || false !== pipeOpts.end) && dest !== process.stdout && dest !== process.stderr ? end : unpipe;
          if (state.endEmitted) {
            _.nextTick(start);
          } else {
            src.once("end", start);
          }
          dest.on("unpipe", cleanup);
          var ondrain = function (src) {
            return function () {
              var state = src._readableState;
              debug("pipeOnDrain", state.awaitDrain);
              if (state.awaitDrain) {
                state.awaitDrain--;
              }
              if (0 === state.awaitDrain && error(src, "data")) {
                state.flowing = true;
                flow(src);
              }
            };
          }(src);
          dest.on("drain", ondrain);
          var f = false;
          var h = false;
          return src.on("data", ondata), function (emitter, type, fn) {
            if ("function" == typeof emitter.prependListener) {
              return emitter.prependListener(type, fn);
            }
            if (emitter._events && emitter._events[type]) {
              if (resolve(emitter._events[type])) {
                emitter._events[type].unshift(fn);
              } else {
                emitter._events[type] = [fn, emitter._events[type]];
              }
            } else {
              emitter.on(type, fn);
            }
          }(dest, "error", onerror), dest.once("close", done), dest.once("finish", onclose), dest.emit("pipe", src), state.flowing || (debug("pipe resume"), src.resume()), dest;
        };
        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState;
          var value = {
            hasUnpiped: false
          };
          if (0 === state.pipesCount) {
            return this;
          }
          if (1 === state.pipesCount) {
            return dest && dest !== state.pipes ? this : (dest || (dest = state.pipes), state.pipes = null, state.pipesCount = 0, state.flowing = false, dest && dest.emit("unpipe", this, value), this);
          }
          if (!dest) {
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            var i = 0;
            for (; i < len; i++) {
              dests[i].emit("unpipe", this, value);
            }
            return this;
          }
          var index = indexOf(state.pipes, dest);
          return -1 === index ? this : (state.pipes.splice(index, 1), state.pipesCount -= 1, 1 === state.pipesCount && (state.pipes = state.pipes[0]), dest.emit("unpipe", this, value), this);
        };
        Readable.prototype.on = function (name, fn) {
          var result = Transport.prototype.on.call(this, name, fn);
          if ("data" === name) {
            if (false !== this._readableState.flowing) {
              this.resume();
            }
          } else {
            if ("readable" === name) {
              var state = this._readableState;
              if (!(state.endEmitted || state.readableListening)) {
                state.readableListening = state.needReadable = true;
                state.emittedReadable = false;
                if (state.reading) {
                  if (state.length) {
                    emitReadable(this);
                  }
                } else {
                  _.nextTick(onComplete, this);
                }
              }
            }
          }
          return result;
        };
        Readable.prototype.addListener = Readable.prototype.on;
        Readable.prototype.resume = function () {
          var state = this._readableState;
          return state.flowing || (debug("resume"), state.flowing = true, function (key, state) {
            if (!state.resumeScheduled) {
              state.resumeScheduled = true;
              _.nextTick(resume, key, state);
            }
          }(this, state)), this;
        };
        Readable.prototype.pause = function () {
          return debug("call pause flowing=%j", this._readableState.flowing), false !== this._readableState.flowing && (debug("pause"), this._readableState.flowing = false, this.emit("pause")), this;
        };
        Readable.prototype.wrap = function (obj) {
          var inputChunks = this;
          var state = this._readableState;
          var n = false;
          var key;
          for (key in obj.on("end", function () {
            if (debug("wrapped end"), state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) {
                inputChunks.push(chunk);
              }
            }
            inputChunks.push(null);
          }), obj.on("data", function (chunk) {
            if (!(debug("wrapped data"), state.decoder && (chunk = state.decoder.write(chunk)), state.objectMode && null == chunk)) {
              if (state.objectMode || chunk && chunk.length) {
                if (!inputChunks.push(chunk)) {
                  n = true;
                  obj.pause();
                }
              }
            }
          }), obj) {
            if (void 0 === this[key] && "function" == typeof obj[key]) {
              this[key] = function (method_name) {
                return function () {
                  return obj[method_name].apply(obj, arguments);
                };
              }(key);
            }
          }
          var i = 0;
          for (; i < events.length; i++) {
            obj.on(events[i], this.emit.bind(this, events[i]));
          }
          return this._read = function (value) {
            debug("wrapped _read", value);
            if (n) {
              n = false;
              obj.resume();
            }
          }, this;
        };
        Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
          enumerable: false,
          get: function () {
            return this._readableState.highWaterMark;
          }
        });
        Readable._fromList = write;
      }).call(this, require("./node_modules/webpack/buildin/global.js"), require("./node_modules/process/browser.js"));
    },
    "./node_modules/readable-stream/lib/_stream_transform.js": function (module, id, require) {
      function check(e, type) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (!cb) {
          return this.emit("error", new Error("write callback called multiple times"));
        }
        ts.writechunk = null;
        ts.writecb = null;
        if (null != type) {
          this.push(type);
        }
        cb(e);
        var rs = this._readableState;
        rs.reading = false;
        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }
      function Model(value) {
        if (!(this instanceof Model)) {
          return new Model(value);
        }
        API.call(this, value);
        this._transformState = {
          afterTransform: check.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null
        };
        this._readableState.needReadable = true;
        this._readableState.sync = false;
        if (value) {
          if ("function" == typeof value.transform) {
            this._transform = value.transform;
          }
          if ("function" == typeof value.flush) {
            this._flush = value.flush;
          }
        }
        this.on("prefinish", end);
      }
      function end() {
        var t = this;
        if ("function" == typeof this._flush) {
          this._flush(function (child, resultin) {
            flush(t, child, resultin);
          });
        } else {
          flush(this, null, null);
        }
      }
      function flush(stream, t, r) {
        if (t) {
          return stream.emit("error", t);
        }
        if (null != r && stream.push(r), stream._writableState.length) {
          throw new Error("Calling transform done when ws.length != 0");
        }
        if (stream._transformState.transforming) {
          throw new Error("Calling transform done when still transforming");
        }
        return stream.push(null);
      }
      module.exports = Model;
      var API = require("./node_modules/readable-stream/lib/_stream_duplex.js");
      var _ = require("./node_modules/core-util-is/lib/util.js");
      _.inherits = require("./node_modules/inherits/inherits_browser.js");
      _.inherits(Model, API);
      Model.prototype.push = function (data, t) {
        return this._transformState.needTransform = false, API.prototype.push.call(this, data, t);
      };
      Model.prototype._transform = function (enc, cb, err) {
        throw new Error("_transform() is not implemented");
      };
      Model.prototype._write = function (value, cb, key) {
        var ts = this._transformState;
        if (ts.writecb = key, ts.writechunk = value, ts.writeencoding = cb, !ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) {
            this._read(rs.highWaterMark);
          }
        }
      };
      Model.prototype._read = function (value) {
        var ts = this._transformState;
        if (null !== ts.writechunk && ts.writecb && !ts.transforming) {
          ts.transforming = true;
          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          ts.needTransform = true;
        }
      };
      Model.prototype._destroy = function (err, callback) {
        var notificationWindow = this;
        API.prototype._destroy.call(this, err, function (identifierPositions) {
          callback(identifierPositions);
          notificationWindow.emit("close");
        });
      };
    },
    "./node_modules/readable-stream/lib/_stream_writable.js": function (task, id, require) {
      (function (target, shapeA, PL$3) {
        function execute(name) {
          var _this3 = this;
          this.next = null;
          this.entry = null;
          this.finish = function () {
            !function (_this, state, r) {
              var entry = _this.entry;
              _this.entry = null;
              for (; entry;) {
                var cb = entry.callback;
                state.pendingcb--;
                cb(r);
                entry = entry.next;
              }
              if (state.corkedRequestsFree) {
                state.corkedRequestsFree.next = _this;
              } else {
                state.corkedRequestsFree = _this;
              }
            }(_this3, name);
          };
        }
        function noServer() {
        }
        function WritableState(options, stream) {
          PGQueryStream = PGQueryStream || require("./node_modules/readable-stream/lib/_stream_duplex.js");
          options = options || {};
          var isISO = stream instanceof PGQueryStream;
          this.objectMode = !!options.objectMode;
          if (isISO) {
            this.objectMode = this.objectMode || !!options.writableObjectMode;
          }
          var hwm = options.highWaterMark;
          var tz = options.writableHighWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16384;
          this.highWaterMark = hwm || 0 === hwm ? hwm : isISO && (tz || 0 === tz) ? tz : defaultHwm;
          this.highWaterMark = Math.floor(this.highWaterMark);
          this.finalCalled = false;
          this.needDrain = false;
          this.ending = false;
          this.ended = false;
          this.finished = false;
          this.destroyed = false;
          var noDecode = false === options.decodeStrings;
          this.decodeStrings = !noDecode;
          this.defaultEncoding = options.defaultEncoding || "utf8";
          this.length = 0;
          this.writing = false;
          this.corked = 0;
          this.sync = true;
          this.bufferProcessing = false;
          this.onwrite = function (e) {
            !function (stream, fn) {
              var state = stream._writableState;
              var sync = state.sync;
              var cb = state.writecb;
              if (function (state) {
                state.writing = false;
                state.writecb = null;
                state.length -= state.writelen;
                state.writelen = 0;
              }(state), fn) {
                !function (stream, state, events, callback, func) {
                  --state.pendingcb;
                  if (events) {
                    process.nextTick(func, callback);
                    process.nextTick(done, stream, state);
                    stream._writableState.errorEmitted = true;
                    stream.emit("error", callback);
                  } else {
                    func(callback);
                    stream._writableState.errorEmitted = true;
                    stream.emit("error", callback);
                    done(stream, state);
                  }
                }(stream, state, sync, fn, cb);
              } else {
                var x = needFinish(state);
                if (!(x || state.corked || state.bufferProcessing || !state.bufferedRequest)) {
                  clearBuffer(stream, state);
                }
                if (sync) {
                  chain(connect, stream, state, x, cb);
                } else {
                  connect(stream, state, x, cb);
                }
              }
            }(stream, e);
          };
          this.writecb = null;
          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null;
          this.pendingcb = 0;
          this.prefinished = false;
          this.errorEmitted = false;
          this.bufferedRequestCount = 0;
          this.corkedRequestsFree = new execute(this);
        }
        function self(obj) {
          if (PGQueryStream = PGQueryStream || require("./node_modules/readable-stream/lib/_stream_duplex.js"), !(thismethod.call(self, this) || this instanceof PGQueryStream)) {
            return new self(obj);
          }
          this._writableState = new WritableState(obj, this);
          this.writable = true;
          if (obj) {
            if ("function" == typeof obj.write) {
              this._write = obj.write;
            }
            if ("function" == typeof obj.writev) {
              this._writev = obj.writev;
            }
            if ("function" == typeof obj.destroy) {
              this._destroy = obj.destroy;
            }
            if ("function" == typeof obj.final) {
              this._final = obj.final;
            }
          }
          Polling.call(this);
        }
        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) {
            stream._writev(chunk, state.onwrite);
          } else {
            stream._write(chunk, encoding, state.onwrite);
          }
          state.sync = false;
        }
        function connect(stream, state, url, openCallback) {
          if (!url) {
            (function (stream, state) {
              if (0 === state.length && state.needDrain) {
                state.needDrain = false;
                stream.emit("drain");
              }
            })(stream, state);
          }
          state.pendingcb--;
          openCallback();
          done(stream, state);
        }
        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;
          if (stream._writev && entry && entry.next) {
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var i = 0;
            var allBuffers = true;
            for (; entry;) {
              buffer[i] = entry;
              if (!entry.isBuf) {
                allBuffers = false;
              }
              entry = entry.next;
              i = i + 1;
            }
            buffer.allBuffers = allBuffers;
            doWrite(stream, state, true, state.length, buffer, "", holder.finish);
            state.pendingcb++;
            state.lastBufferedRequest = null;
            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new execute(state);
            }
            state.bufferedRequestCount = 0;
          } else {
            for (; entry;) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              if (doWrite(stream, state, false, state.objectMode ? 1 : chunk.length, chunk, encoding, cb), entry = entry.next, state.bufferedRequestCount--, state.writing) {
                break;
              }
            }
            if (null === entry) {
              state.lastBufferedRequest = null;
            }
          }
          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }
        function needFinish(state) {
          return state.ending && 0 === state.length && null === state.bufferedRequest && !state.finished && !state.writing;
        }
        function onComplete(req, state) {
          req._final(function (r) {
            state.pendingcb--;
            if (r) {
              req.emit("error", r);
            }
            state.prefinished = true;
            req.emit("prefinish");
            done(req, state);
          });
        }
        function done(stream, state) {
          var finished = needFinish(state);
          return finished && (!function (stream, state) {
            if (!(state.prefinished || state.finalCalled)) {
              if ("function" == typeof stream._final) {
                state.pendingcb++;
                state.finalCalled = true;
                process.nextTick(onComplete, stream, state);
              } else {
                state.prefinished = true;
                stream.emit("prefinish");
              }
            }
          }(stream, state), 0 === state.pendingcb && (state.finished = true, stream.emit("finish"))), finished;
        }
        var process = require("./node_modules/process-nextick-args/index.js");
        task.exports = self;
        var PGQueryStream;
        var chain = !target.browser && ["v0.10", "v0.9."].indexOf(target.version.slice(0, 5)) > -1 ? shapeA : process.nextTick;
        self.WritableState = WritableState;
        var util = require("./node_modules/core-util-is/lib/util.js");
        util.inherits = require("./node_modules/inherits/inherits_browser.js");
        var module = {
          deprecate: require("./node_modules/util-deprecate/browser.js")
        };
        var Polling = require("./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
        var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
        var CJSEvent = PL$3.Uint8Array || function () {
        };
        var thismethod;
        var unzip = require("./node_modules/readable-stream/lib/internal/streams/destroy.js");
        util.inherits(self, Polling);
        WritableState.prototype.getBuffer = function () {
          var current = this.bufferedRequest;
          var out = [];
          for (; current;) {
            out.push(current);
            current = current.next;
          }
          return out;
        };
        (function () {
          try {
            Object.defineProperty(WritableState.prototype, "buffer", {
              get: module.deprecate(function () {
                return this.getBuffer();
              }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
            });
          } catch (e) {
          }
        })();
        if ("function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance]) {
          thismethod = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(self, Symbol.hasInstance, {
            value: function (value) {
              return !!thismethod.call(this, value) || this === self && (value && value._writableState instanceof WritableState);
            }
          });
        } else {
          thismethod = function (s) {
            return s instanceof this;
          };
        }
        self.prototype.pipe = function () {
          this.emit("error", new Error("Cannot pipe, not readable"));
        };
        self.prototype.write = function (value, data, cb) {
          var b;
          var state = this._writableState;
          var ret = false;
          var isBuf = !state.objectMode && (b = value, Buffer.isBuffer(b) || b instanceof CJSEvent);
          return isBuf && !Buffer.isBuffer(value) && (value = function (e) {
            return Buffer.from(e);
          }(value)), "function" == typeof data && (cb = data, data = null), isBuf ? data = "buffer" : data || (data = state.defaultEncoding), "function" != typeof cb && (cb = noServer), state.ended ? function (e, func) {
            var err = new Error("write after end");
            e.emit("error", err);
            process.nextTick(func, err);
          }(this, cb) : (isBuf || function (n, state, string, t) {
            var o = true;
            var e = false;
            return null === string ? e = new TypeError("May not write null values to stream") : "string" == typeof string || void 0 === string || state.objectMode || (e = new TypeError("Invalid non-string/buffer chunk")), e && (n.emit("error", e), process.nextTick(t, e), o = false), o;
          }(this, state, value, cb)) && (state.pendingcb++, ret = function (stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
              var newChunk = function (state, value, type) {
                if (!(state.objectMode || false === state.decodeStrings || "string" != typeof value)) {
                  value = Buffer.from(value, type);
                }
                return value;
              }(state, chunk, encoding);
              if (chunk !== newChunk) {
                isBuf = true;
                encoding = "buffer";
                chunk = newChunk;
              }
            }
            var len = state.objectMode ? 1 : chunk.length;
            state.length += len;
            var exists = state.length < state.highWaterMark;
            if (!exists) {
              state.needDrain = true;
            }
            if (state.writing || state.corked) {
              var last = state.lastBufferedRequest;
              state.lastBufferedRequest = {
                chunk: chunk,
                encoding: encoding,
                isBuf: isBuf,
                callback: cb,
                next: null
              };
              if (last) {
                last.next = state.lastBufferedRequest;
              } else {
                state.bufferedRequest = state.lastBufferedRequest;
              }
              state.bufferedRequestCount += 1;
            } else {
              doWrite(stream, state, false, len, chunk, encoding, cb);
            }
            return exists;
          }(this, state, isBuf, value, data, cb)), ret;
        };
        self.prototype.cork = function () {
          this._writableState.corked++;
        };
        self.prototype.uncork = function () {
          var state = this._writableState;
          if (state.corked) {
            state.corked--;
            if (!(state.writing || state.corked || state.finished || state.bufferProcessing || !state.bufferedRequest)) {
              clearBuffer(this, state);
            }
          }
        };
        self.prototype.setDefaultEncoding = function (encoding) {
          if ("string" == typeof encoding && (encoding = encoding.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          return this._writableState.defaultEncoding = encoding, this;
        };
        Object.defineProperty(self.prototype, "writableHighWaterMark", {
          enumerable: false,
          get: function () {
            return this._writableState.highWaterMark;
          }
        });
        self.prototype._write = function (type, str, cb) {
          cb(new Error("_write() is not implemented"));
        };
        self.prototype._writev = null;
        self.prototype.end = function (data, value, options) {
          var state = this._writableState;
          if ("function" == typeof data) {
            options = data;
            data = null;
            value = null;
          } else {
            if ("function" == typeof value) {
              options = value;
              value = null;
            }
          }
          if (null != data) {
            this.write(data, value);
          }
          if (state.corked) {
            state.corked = 1;
            this.uncork();
          }
          if (!(state.ending || state.finished)) {
            (function (stream, state, fn) {
              state.ending = true;
              done(stream, state);
              if (fn) {
                if (state.finished) {
                  process.nextTick(fn);
                } else {
                  stream.once("finish", fn);
                }
              }
              state.ended = true;
              stream.writable = false;
            })(this, state, options);
          }
        };
        Object.defineProperty(self.prototype, "destroyed", {
          get: function () {
            return void 0 !== this._writableState && this._writableState.destroyed;
          },
          set: function (value) {
            if (this._writableState) {
              this._writableState.destroyed = value;
            }
          }
        });
        self.prototype.destroy = unzip.destroy;
        self.prototype._undestroy = unzip.undestroy;
        self.prototype._destroy = function (err, cb) {
          this.end();
          cb(err);
        };
      }).call(this, require("./node_modules/process/browser.js"), require("./node_modules/node-libs-browser/node_modules/timers-browserify/main.js").setImmediate, require("./node_modules/webpack/buildin/global.js"));
    },
    "./node_modules/readable-stream/lib/internal/streams/BufferList.js": function (ts, id, require) {
      var Buffer = require("./node_modules/safe-buffer/index.js").Buffer;
      var obj = require(1);
      ts.exports = function () {
        function f() {
          !function (value, t) {
            if (!(value instanceof t)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }(this, f);
          this.head = null;
          this.tail = null;
          this.length = 0;
        }
        return f.prototype.push = function (data) {
          var node = {
            data: data,
            next: null
          };
          if (this.length > 0) {
            this.tail.next = node;
          } else {
            this.head = node;
          }
          this.tail = node;
          ++this.length;
        }, f.prototype.unshift = function (data) {
          var node = {
            data: data,
            next: this.head
          };
          if (0 === this.length) {
            this.tail = node;
          }
          this.head = node;
          ++this.length;
        }, f.prototype.shift = function () {
          if (0 !== this.length) {
            var node = this.head.data;
            return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, node;
          }
        }, f.prototype.clear = function () {
          this.head = this.tail = null;
          this.length = 0;
        }, f.prototype.join = function (code) {
          if (0 === this.length) {
            return "";
          }
          var node = this.head;
          var source = "" + node.data;
          for (; node = node.next;) {
            source = source + (code + node.data);
          }
          return source;
        }, f.prototype.concat = function (str) {
          if (0 === this.length) {
            return Buffer.alloc(0);
          }
          if (1 === this.length) {
            return this.head.data;
          }
          var r;
          var i;
          var b;
          var last = Buffer.allocUnsafe(str >>> 0);
          var node = this.head;
          var bytes = 0;
          for (; node;) {
            r = node.data;
            i = last;
            b = bytes;
            r.copy(i, b);
            bytes = bytes + node.data.length;
            node = node.next;
          }
          return last;
        }, f;
      }();
      if (obj && obj.inspect && obj.inspect.custom) {
        ts.exports.prototype[obj.inspect.custom] = function () {
          var e = obj.inspect({
            length: this.length
          });
          return this.constructor.name + " " + e;
        };
      }
    },
    "./node_modules/readable-stream/lib/internal/streams/destroy.js": function (page, toTitle, $firebase) {
      function onComplete(options, server) {
        options.emit("error", server);
      }
      var ref = $firebase("./node_modules/process-nextick-args/index.js");
      page.exports = {
        destroy: function (err, cb) {
          var self = this;
          var i = this._readableState && this._readableState.destroyed;
          var xx = this._writableState && this._writableState.destroyed;
          return i || xx ? (cb ? cb(err) : !err || this._writableState && this._writableState.errorEmitted || ref.nextTick(onComplete, this, err), this) : (this._readableState && (this._readableState.destroyed = true), this._writableState && (this._writableState.destroyed = true), this._destroy(err || null, function (err) {
            if (!cb && err) {
              ref.nextTick(onComplete, self, err);
              if (self._writableState) {
                self._writableState.errorEmitted = true;
              }
            } else {
              if (cb) {
                cb(err);
              }
            }
          }), this);
        },
        undestroy: function () {
          if (this._readableState) {
            this._readableState.destroyed = false;
            this._readableState.reading = false;
            this._readableState.ended = false;
            this._readableState.endEmitted = false;
          }
          if (this._writableState) {
            this._writableState.destroyed = false;
            this._writableState.ended = false;
            this._writableState.ending = false;
            this._writableState.finished = false;
            this._writableState.errorEmitted = false;
          }
        }
      };
    },
    "./node_modules/readable-stream/lib/internal/streams/stream-browser.js": function (blob, id, require) {
      blob.exports = require("./node_modules/node-libs-browser/node_modules/events/events.js").EventEmitter;
    },
    "./node_modules/readable-stream/readable-browser.js": function (module, stream, init) {
      (stream = module.exports = init("./node_modules/readable-stream/lib/_stream_readable.js")).Stream = stream;
      stream.Readable = stream;
      stream.Writable = init("./node_modules/readable-stream/lib/_stream_writable.js");
      stream.Duplex = init("./node_modules/readable-stream/lib/_stream_duplex.js");
      stream.Transform = init("./node_modules/readable-stream/lib/_stream_transform.js");
      stream.PassThrough = init("./node_modules/readable-stream/lib/_stream_passthrough.js");
    },
    "./node_modules/reinterval/index.js": function (module, data, urlPartConfig) {
      function init(callback, duration, args) {
        var self = this;
        this._callback = callback;
        this._args = args;
        this._interval = setInterval(callback, duration, this._args);
        this.reschedule = function (interval) {
          if (!interval) {
            interval = self._interval;
          }
          if (self._interval) {
            clearInterval(self._interval);
          }
          self._interval = setInterval(self._callback, interval, self._args);
        };
        this.clear = function () {
          if (self._interval) {
            clearInterval(self._interval);
            self._interval = void 0;
          }
        };
        this.destroy = function () {
          if (self._interval) {
            clearInterval(self._interval);
          }
          self._callback = void 0;
          self._interval = void 0;
          self._args = void 0;
        };
      }
      module.exports = function () {
        if ("function" != typeof arguments[0]) {
          throw new Error("callback needed");
        }
        if ("number" != typeof arguments[1]) {
          throw new Error("interval needed");
        }
        var charsets;
        if (arguments.length > 0) {
          charsets = new Array(arguments.length - 2);
          var i = 0;
          for (; i < charsets.length; i++) {
            charsets[i] = arguments[i + 2];
          }
        }
        return new init(arguments[0], arguments[1], charsets);
      };
    },
    "./node_modules/safe-buffer/index.js": function (global, context, factory) {
      function run(options, context) {
        var name;
        for (name in options) {
          context[name] = options[name];
        }
      }
      function a(name, data, document) {
        return f(name, data, document);
      }
      var exports = factory("./node_modules/node-libs-browser/node_modules/buffer/index.js");
      var f = exports.Buffer;
      if (f.from && f.alloc && f.allocUnsafe && f.allocUnsafeSlow) {
        global.exports = exports;
      } else {
        run(exports, context);
        context.Buffer = a;
      }
      run(f, a);
      a.from = function (value, name, data) {
        if ("number" == typeof value) {
          throw new TypeError("Argument must not be a number");
        }
        return f(value, name, data);
      };
      a.alloc = function (value, name, data) {
        if ("number" != typeof value) {
          throw new TypeError("Argument must be a number");
        }
        var message = f(value);
        return void 0 !== name ? "string" == typeof data ? message.fill(name, data) : message.fill(name) : message.fill(0), message;
      };
      a.allocUnsafe = function (value) {
        if ("number" != typeof value) {
          throw new TypeError("Argument must be a number");
        }
        return f(value);
      };
      a.allocUnsafeSlow = function (value) {
        if ("number" != typeof value) {
          throw new TypeError("Argument must be a number");
        }
        return exports.SlowBuffer(value);
      };
    },
    "./node_modules/setimmediate/setImmediate.js": function (module, exports, __webpack_require__) {
      (function (canCreateDiscussions, $process) {
        !function (global, root) {
          function clear(value) {
            delete data[value];
          }
          function callback(key) {
            if (d) {
              setTimeout(callback, 0, key);
            } else {
              var evt = data[key];
              if (evt) {
                d = true;
                try {
                  !function (options) {
                    var cb = options.callback;
                    var result = options.args;
                    switch (result.length) {
                      case 0:
                        cb();
                        break;
                      case 1:
                        cb(result[0]);
                        break;
                      case 2:
                        cb(result[0], result[1]);
                        break;
                      case 3:
                        cb(result[0], result[1], result[2]);
                        break;
                      default:
                        cb.apply(root, result);
                    }
                  }(evt);
                } finally {
                  clear(key);
                  d = false;
                }
              }
            }
          }
          if (!global.setImmediate) {
            var update;
            var root;
            var channel;
            var prefix;
            var onGlobalMessage;
            var t = 1;
            var data = {};
            var d = false;
            var doc = global.document;
            var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
            attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
            if ("[object process]" === {}.toString.call(global.process)) {
              update = function (transform) {
                $process.nextTick(function () {
                  callback(transform);
                });
              };
            } else {
              if (!function () {
                if (global.postMessage && !global.importScripts) {
                  var t = true;
                  var oldOnMessage = global.onmessage;
                  return global.onmessage = function () {
                    t = false;
                  }, global.postMessage("", "*"), global.onmessage = oldOnMessage, t;
                }
              }()) {
                if (global.MessageChannel) {
                  (channel = new MessageChannel).port1.onmessage = function (event) {
                    callback(event.data);
                  };
                  update = function (source) {
                    channel.port2.postMessage(source);
                  };
                } else {
                  if (doc && "onreadystatechange" in doc.createElement("script")) {
                    root = doc.documentElement;
                    update = function (transform) {
                      var script = doc.createElement("script");
                      script.onreadystatechange = function () {
                        callback(transform);
                        script.onreadystatechange = null;
                        root.removeChild(script);
                        script = null;
                      };
                      root.appendChild(script);
                    };
                  } else {
                    update = function (tasks) {
                      setTimeout(callback, 0, tasks);
                    };
                  }
                }
              } else {
                prefix = "setImmediate$" + Math.random() + "$";
                onGlobalMessage = function (event) {
                  if (event.source === global && "string" == typeof event.data && 0 === event.data.indexOf(prefix)) {
                    callback(+event.data.slice(prefix.length));
                  }
                };
                if (global.addEventListener) {
                  global.addEventListener("message", onGlobalMessage, false);
                } else {
                  global.attachEvent("onmessage", onGlobalMessage);
                }
                update = function (text) {
                  global.postMessage(prefix + text, "*");
                };
              }
            }
            attachTo.setImmediate = function (value) {
              if ("function" != typeof value) {
                value = new Function("" + value);
              }
              var args = new Array(arguments.length - 1);
              var i = 0;
              for (; i < args.length; i++) {
                args[i] = arguments[i + 1];
              }
              var e = {
                callback: value,
                args: args
              };
              return data[t] = e, update(t), t++;
            };
            attachTo.clearImmediate = clear;
          }
        }("undefined" == typeof self ? void 0 === canCreateDiscussions ? this : canCreateDiscussions : self);
      }).call(this, __webpack_require__("./node_modules/webpack/buildin/global.js"), __webpack_require__("./node_modules/process/browser.js"));
    },
    "./node_modules/sm-crypto/src/index.js": function (blob, options, seriesStackIndexCallback) {
      blob.exports = {
        sm2: seriesStackIndexCallback("./node_modules/sm-crypto/src/sm2/index.js"),
        sm3: seriesStackIndexCallback("./node_modules/sm-crypto/src/sm3/index.js"),
        sm4: seriesStackIndexCallback("./node_modules/sm-crypto/src/sm4/index.js")
      };
    },
    "./node_modules/sm-crypto/src/sm2/asn1.js": function (blob, options, seriesStackIndexCallback) {
      function parse(str, a) {
        return +str[a + 2] < 8 ? 1 : 128 & +str.substr(a + 2, 2);
      }
      function decrypt(text, a) {
        const numBytes = parse(text, a);
        const e = text.substr(a + 2, 2 * numBytes);
        return e ? (+e[0] < 8 ? new BigInteger(e, 16) : new BigInteger(e.substr(2), 16)).intValue() : -1;
      }
      function encrypt(d, s) {
        return s + 2 * (parse(d, s) + 1);
      }
      const {
        BigInteger: BigInteger
      } = seriesStackIndexCallback("./node_modules/jsbn/index.js");
      class IniElement {
        constructor() {
          this.tlv = null;
          this.t = "00";
          this.l = "00";
          this.v = "";
        }
        getEncodedHex() {
          return this.tlv || (this.v = this.getValue(), this.l = this.getLength(), this.tlv = this.t + this.l + this.v), this.tlv;
        }
        getLength() {
          const default_favicon = this.v.length / 2;
          let val = default_favicon.toString(16);
          if (val.length % 2 == 1 && (val = "0" + val), default_favicon < 128) {
            return val;
          }
          return (128 + val.length / 2).toString(16) + val;
        }
        getValue() {
          return "";
        }
      }
      class IniSection extends IniElement {
        constructor(name) {
          super();
          this.t = "02";
          if (name) {
            this.v = function (length) {
              let url = length.toString(16);
              if ("-" !== url[0]) {
                if (url.length % 2 == 1) {
                  url = "0" + url;
                } else {
                  if (!url.match(/^[0-7]/)) {
                    url = "00" + url;
                  }
                }
              } else {
                let height = (url = url.substr(1)).length;
                if (height % 2 == 1) {
                  height = height + 1;
                } else {
                  if (!url.match(/^[0-7]/)) {
                    height = height + 2;
                  }
                }
                let val = "";
                for (let img_y = 0; img_y < height; img_y++) {
                  val = val + "f";
                }
                url = (url = (val = new BigInteger(val, 16)).xor(length).add(BigInteger.ONE)).toString(16).replace(/^-/, "");
              }
              return url;
            }(name);
          }
        }
        getValue() {
          return this.v;
        }
      }
      class MultiSelectCollection extends IniElement {
        constructor(opt_lastResultName) {
          super();
          this.t = "30";
          this.asn1Array = opt_lastResultName;
        }
        getValue() {
          return this.v = this.asn1Array.map((canCreateDiscussions) => {
            return canCreateDiscussions.getEncodedHex();
          }).join(""), this.v;
        }
      }
      blob.exports = {
        encodeDer(formatters, customFormatters) {
          const model1 = new IniSection(formatters);
          const model2 = new IniSection(customFormatters);
          return (new MultiSelectCollection([model1, model2])).getEncodedHex();
        },
        decodeDer(text) {
          const iv = encrypt(text, 0);
          const start = encrypt(text, iv);
          const numBytes = decrypt(text, iv);
          const e = text.substr(start, 2 * numBytes);
          const foo = start + e.length;
          const line_pos = encrypt(text, foo);
          const spacing = decrypt(text, foo);
          const sString = text.substr(line_pos, 2 * spacing);
          return {
            r: new BigInteger(e, 16),
            s: new BigInteger(sString, 16)
          };
        }
      };
    },
    "./node_modules/sm-crypto/src/sm2/ec.js": function (blob, options, seriesStackIndexCallback) {
      const {
        BigInteger: BigInteger
      } = seriesStackIndexCallback("./node_modules/jsbn/index.js");
      const o = new BigInteger("3");
      class Vector {
        constructor(point, x) {
          this.x = x;
          this.q = point;
        }
        equals(other) {
          return other === this || this.q.equals(other.q) && this.x.equals(other.x);
        }
        toBigInteger() {
          return this.x;
        }
        negate() {
          return new Vector(this.q, this.x.negate().mod(this.q));
        }
        add(data) {
          return new Vector(this.q, this.x.add(data.toBigInteger()).mod(this.q));
        }
        subtract(data) {
          return new Vector(this.q, this.x.subtract(data.toBigInteger()).mod(this.q));
        }
        multiply(data) {
          return new Vector(this.q, this.x.multiply(data.toBigInteger()).mod(this.q));
        }
        divide(other) {
          return new Vector(this.q, this.x.multiply(other.toBigInteger().modInverse(this.q)).mod(this.q));
        }
        square() {
          return new Vector(this.q, this.x.square().mod(this.q));
        }
      }
      class Point {
        constructor(value, point, y, val) {
          this.curve = value;
          this.x = point;
          this.y = y;
          this.z = null == val ? BigInteger.ONE : val;
          this.zinv = null;
        }
        getX() {
          return null === this.zinv && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
        }
        getY() {
          return null === this.zinv && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
        }
        equals(p) {
          if (p === this) {
            return true;
          }
          if (this.isInfinity()) {
            return p.isInfinity();
          }
          if (p.isInfinity()) {
            return this.isInfinity();
          }
          return !!p.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(p.z)).mod(this.curve.q).equals(BigInteger.ZERO) && p.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(p.z)).mod(this.curve.q).equals(BigInteger.ZERO);
        }
        isInfinity() {
          return null === this.x && null === this.y || this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
        }
        negate() {
          return new Point(this.curve, this.x, this.y.negate(), this.z);
        }
        add(point) {
          if (this.isInfinity()) {
            return point;
          }
          if (point.isInfinity()) {
            return this;
          }
          const bodyQuat = this.x.toBigInteger();
          const a = this.y.toBigInteger();
          const p = this.z;
          const out = point.x.toBigInteger();
          const vl = point.y.toBigInteger();
          const b = point.z;
          const left = this.curve.q;
          const d = bodyQuat.multiply(b).mod(left);
          const y = out.multiply(p).mod(left);
          const res = d.subtract(y);
          const rem = a.multiply(b).mod(left);
          const approxRem = vl.multiply(p).mod(left);
          const options = rem.subtract(approxRem);
          if (BigInteger.ZERO.equals(res)) {
            return BigInteger.ZERO.equals(options) ? this.twice() : this.curve.infinity;
          }
          const $jsilxna = d.add(y);
          const c = p.multiply(b).mod(left);
          const r = res.square().mod(left);
          const i = res.multiply(r).mod(left);
          const e = c.multiply(options.square()).subtract($jsilxna.multiply(r)).mod(left);
          const bb1 = res.multiply(e).mod(left);
          const step = options.multiply(r.multiply(d).subtract(e)).subtract(rem.multiply(i)).mod(left);
          const ptTriY = i.multiply(c).mod(left);
          return new Point(this.curve, this.curve.fromBigInteger(bb1), this.curve.fromBigInteger(step), ptTriY);
        }
        twice() {
          if (this.isInfinity()) {
            return this;
          }
          if (!this.y.toBigInteger().signum()) {
            return this.curve.infinity;
          }
          const a = this.x.toBigInteger();
          const res = this.y.toBigInteger();
          const m = this.z;
          const b = this.curve.q;
          const resultFrameMatrix = this.curve.a.toBigInteger();
          const options = a.square().multiply(o).add(resultFrameMatrix.multiply(m.square())).mod(b);
          const t = res.shiftLeft(1).multiply(m).mod(b);
          const point = res.square().mod(b);
          const ip = point.multiply(a).multiply(m).mod(b);
          const e = t.square().mod(b);
          const c = options.square().subtract(ip.shiftLeft(3)).mod(b);
          const y = t.multiply(c).mod(b);
          const step = options.multiply(ip.shiftLeft(2).subtract(c)).subtract(e.shiftLeft(1).multiply(point)).mod(b);
          const ptTriY = t.multiply(e).mod(b);
          return new Point(this.curve, this.curve.fromBigInteger(y), this.curve.fromBigInteger(step), ptTriY);
        }
        multiply(p) {
          if (this.isInfinity()) {
            return this;
          }
          if (!p.signum()) {
            return this.curve.infinity;
          }
          const num = p.multiply(o);
          const text = this.negate();
          let ret = this;
          for (let i = num.bitLength() - 2; i > 0; i--) {
            ret = ret.twice();
            const val = num.testBit(i);
            if (val !== p.testBit(i)) {
              ret = ret.add(val ? this : text);
            }
          }
          return ret;
        }
      }
      blob.exports = {
        ECPointFp: Point,
        ECCurveFp: class {
          constructor(queue, value, min) {
            this.q = queue;
            this.a = this.fromBigInteger(value);
            this.b = this.fromBigInteger(min);
            this.infinity = new Point(this, null, null);
          }
          equals(that) {
            return that === this || this.q.equals(that.q) && this.a.equals(that.a) && this.b.equals(that.b);
          }
          fromBigInteger(bigInteger) {
            return new Vector(this.q, bigInteger);
          }
          decodePointHex(v) {
            switch (parseInt(v.substr(0, 2), 16)) {
              case 0:
                return this.infinity;
              case 2:
              case 3:
                return null;
              case 4:
              case 6:
              case 7:
                const vIdx = (v.length - 2) / 2;
                const dQ = v.substr(2, vIdx);
                const qInv = v.substr(vIdx + 2, vIdx);
                return new Point(this, this.fromBigInteger(new BigInteger(dQ, 16)), this.fromBigInteger(new BigInteger(qInv, 16)));
              default:
                return null;
            }
          }
        }
      };
    },
    "./node_modules/sm-crypto/src/sm2/index.js": function (blob, options, seriesStackIndexCallback) {
      function format(body, response, msg = "1234567812345678") {
        msg = utils.utf8ToHex(msg);
        const err = utils.leftPad(that.curve.a.toBigInteger().toRadix(16), 64);
        const data = utils.leftPad(that.curve.b.toBigInteger().toRadix(16), 64);
        const id = utils.leftPad(that.getX().toBigInteger().toRadix(16), 64);
        const d = utils.leftPad(that.getY().toBigInteger().toRadix(16), 64);
        if (response.length > 128) {
          response = response.substr(2, 128);
        }
        const _ = response.substr(0, 64);
        const episode = response.substr(64, 64);
        const b = utils.hexToArray(msg + err + data + id + d + _ + episode);
        const i = 4 * msg.length;
        b.unshift(255 & i);
        b.unshift(65280 & i);
        const html = callback(b);
        return utils.arrayToHex(callback(html.concat(utils.hexToArray(body))));
      }
      function start() {
        const data = utils.generateKeyPairHex();
        const StatePosition = curve.decodePointHex(data.publicKey);
        return data.k = new BigInteger(data.privateKey, 16), data.x1 = StatePosition.getX().toBigInteger(), data;
      }
      const {
        BigInteger: BigInteger
      } = seriesStackIndexCallback("./node_modules/jsbn/index.js");
      const {
        encodeDer: parseInt,
        decodeDer: functorCreator
      } = seriesStackIndexCallback("./node_modules/sm-crypto/src/sm2/asn1.js");
      const utils = seriesStackIndexCallback("./node_modules/sm-crypto/src/sm2/utils.js");
      const callback = seriesStackIndexCallback("./node_modules/sm-crypto/src/sm2/sm3.js");
      const {
        G: that,
        curve: curve,
        n: p
      } = utils.generateEcparam();
      const left = 0;
      blob.exports = {
        generateKeyPairHex: utils.generateKeyPairHex,
        doEncrypt: function (end, out, padPosition = 1) {
          end = utils.hexToArray(utils.utf8ToHex(end));
          out = utils.getGlobalCurve().decodePointHex(out);
          const pair = utils.generateKeyPairHex();
          const divisor = new BigInteger(pair.privateKey, 16);
          let prefix = pair.publicKey;
          if (prefix.length > 128) {
            prefix = prefix.substr(prefix.length - 128);
          }
          const StatePosition = out.multiply(divisor);
          const d = utils.hexToArray(utils.leftPad(StatePosition.getX().toBigInteger().toRadix(16), 64));
          const value = utils.hexToArray(utils.leftPad(StatePosition.getY().toBigInteger().toRadix(16), 64));
          const str = utils.arrayToHex(callback([].concat(d, end, value)));
          let h = 1;
          let i = 0;
          let args = [];
          const y = [].concat(d, value);
          const acceptTheCall = () => {
            args = callback([...y, h >> 24 & 255, h >> 16 & 255, h >> 8 & 255, 255 & h]);
            h++;
            i = 0;
          };
          acceptTheCall();
          for (let j = 0, mixinsSize = end.length; j < mixinsSize; j++) {
            if (i === args.length) {
              acceptTheCall();
            }
            end[j] ^= 255 & args[i++];
          }
          const m = utils.arrayToHex(end);
          return padPosition === left ? prefix + m + str : prefix + str + m;
        },
        doDecrypt: function (format, r, sideToPad = 1) {
          r = new BigInteger(r, 16);
          let key = format.substr(128, 64);
          let hex = format.substr(192);
          if (sideToPad === left) {
            key = format.substr(format.length - 64);
            hex = format.substr(128, format.length - 128 - 64);
          }
          const data = utils.hexToArray(hex);
          const StatePosition = utils.getGlobalCurve().decodePointHex("04" + format.substr(0, 128)).multiply(r);
          const d = utils.hexToArray(utils.leftPad(StatePosition.getX().toBigInteger().toRadix(16), 64));
          const value = utils.hexToArray(utils.leftPad(StatePosition.getY().toBigInteger().toRadix(16), 64));
          let p = 1;
          let index = 0;
          let items = [];
          const g = [].concat(d, value);
          const acceptTheCall = () => {
            items = callback([...g, p >> 24 & 255, p >> 16 & 255, p >> 8 & 255, 255 & p]);
            p++;
            index = 0;
          };
          acceptTheCall();
          for (let i = 0, l = data.length; i < l; i++) {
            if (index === items.length) {
              acceptTheCall();
            }
            data[i] ^= 255 & items[index++];
          }
          return utils.arrayToHex(callback([].concat(d, data, value))) === key ? utils.arrayToUtf8(data) : "";
        },
        doSignature: function (a, n, {
          pointPool: path,
          der: parsing,
          hash: map,
          publicKey: context,
          userId: id
        } = {}) {
          let val = "string" == typeof a ? utils.utf8ToHex(a) : utils.arrayToHex(a);
          if (map) {
            val = format(val, context = context || function (e) {
              const StatePosition = that.multiply(new BigInteger(e, 16));
              const r = utils.leftPad(StatePosition.getX().toBigInteger().toString(16), 64);
              const g = utils.leftPad(StatePosition.getY().toBigInteger().toString(16), 64);
              return "04" + r + g;
            }(n), id);
          }
          const i = new BigInteger(n, 16);
          const _this = new BigInteger(val, 16);
          let data = null;
          let value = null;
          let r = null;
          do {
            do {
              let g;
              data = (g = path && path.length ? path.pop() : start()).k;
              value = _this.add(g.x1).mod(p);
            } while (value.equals(BigInteger.ZERO) || value.add(data).equals(p));
            r = i.add(BigInteger.ONE).modInverse(p).multiply(data.subtract(value.multiply(i))).mod(p);
          } while (r.equals(BigInteger.ZERO));
          return parsing ? parseInt(value, r) : utils.leftPad(value.toString(16), 64) + utils.leftPad(r.toString(16), 64);
        },
        doVerifySignature: function (a, b, key, {
          der: id,
          hash: version,
          userId: username
        } = {}) {
          let r;
          let v;
          let data = "string" == typeof a ? utils.utf8ToHex(a) : utils.arrayToHex(a);
          if (version && (data = format(data, key, username)), id) {
            const newV = functorCreator(b);
            r = newV.r;
            v = newV.s;
          } else {
            r = new BigInteger(b.substring(0, 64), 16);
            v = new BigInteger(b.substring(64), 16);
          }
          const out = curve.decodePointHex(key);
          const space_camera_pivot = new BigInteger(data, 16);
          const value = r.add(v).mod(p);
          if (value.equals(BigInteger.ZERO)) {
            return false;
          }
          const StatePosition = that.multiply(v).add(out.multiply(value));
          const topology2 = space_camera_pivot.add(StatePosition.getX().toBigInteger()).mod(p);
          return r.equals(topology2);
        },
        getPoint: start
      };
    },
    "./node_modules/sm-crypto/src/sm2/sm3.js": function (mixin, doPost) {
      function expect(input, data) {
        const positive = [];
        const j = ~~(data / 8);
        const bits = data % 8;
        for (let i = 0, l = input.length; i < l; i++) {
          positive[i] = (input[(i + j) % l] << bits & 255) + (input[(i + j + 1) % l] >>> 8 - bits & 255);
        }
        return positive;
      }
      function $(a, c) {
        const ee = [];
        for (let i = a.length - 1; i >= 0; i--) {
          ee[i] = 255 & (a[i] ^ c[i]);
        }
        return ee;
      }
      function filter(a, b) {
        const curLoop = [];
        for (let i = a.length - 1; i >= 0; i--) {
          curLoop[i] = a[i] & b[i] & 255;
        }
        return curLoop;
      }
      function callback(a, b) {
        const passes = [];
        for (let i = a.length - 1; i >= 0; i--) {
          passes[i] = 255 & (a[i] | b[i]);
        }
        return passes;
      }
      function setTimeout(options, args) {
        const array = [];
        let n = 0;
        for (let i = options.length - 1; i >= 0; i--) {
          const LIMB_BITMASK = options[i] + args[i] + n;
          if (LIMB_BITMASK > 255) {
            n = 1;
            array[i] = 255 & LIMB_BITMASK;
          } else {
            n = 0;
            array[i] = 255 & LIMB_BITMASK;
          }
        }
        return array;
      }
      function a(a) {
        return $($(a, expect(a, 9)), expect(a, 17));
      }
      function f(data, e, f, m) {
        return m >= 0 && m <= 15 ? $($(data, e), f) : callback(callback(filter(data, e), filter(data, f)), filter(e, f));
      }
      function check(obj, id, opt, size) {
        return size >= 0 && size <= 15 ? $($(obj, id), opt) : callback(filter(obj, id), filter(function (sizeObj) {
          const parents = [];
          for (let i = sizeObj.length - 1; i >= 0; i--) {
            parents[i] = 255 & ~sizeObj[i];
          }
          return parents;
        }(obj), opt));
      }
      function next(content, p) {
        const items = [];
        const options = [];
        for (let i = 0; i < 16; i++) {
          const pos = 4 * i;
          items.push(p.slice(pos, pos + 4));
        }
        for (let i = 16; i < 68; i++) {
          items.push($($((a = $($(items[i - 16], items[i - 9]), expect(items[i - 3], 15)), $($(a, expect(a, 15)), expect(a, 23))), expect(items[i - 13], 7)), items[i - 6]));
        }
        var a;
        for (let i = 0; i < 64; i++) {
          options.push($(items[i], items[i + 4]));
        }
        const c = [121, 204, 69, 25];
        const fire = [122, 135, 157, 138];
        let value;
        let m;
        let lastItem;
        let b;
        let message = content.slice(0, 4);
        let tag = content.slice(4, 8);
        let e = content.slice(8, 12);
        let data = content.slice(12, 16);
        let n = content.slice(16, 20);
        let val = content.slice(20, 24);
        let item = content.slice(24, 28);
        let post = content.slice(28, 32);
        for (let i = 0; i < 64; i++) {
          const now = i >= 0 && i <= 15 ? c : fire;
          m = $(value = expect(setTimeout(setTimeout(expect(message, 12), n), expect(now, i)), 7), expect(message, 12));
          lastItem = setTimeout(setTimeout(setTimeout(f(message, tag, e, i), data), m), options[i]);
          b = setTimeout(setTimeout(setTimeout(check(n, val, item, i), post), value), items[i]);
          data = e;
          e = expect(tag, 9);
          tag = message;
          message = lastItem;
          post = item;
          item = expect(val, 19);
          val = n;
          n = a(b);
        }
        return $([].concat(message, tag, e, data, n, val, item, post), content);
      }
      mixin.exports = function (value) {
        let result = 8 * value.length;
        let r = result % 512;
        r = r >= 448 ? 512 - r % 448 - 1 : 448 - r - 1;
        const dataCrc = new Array((r - 7) / 8);
        for (let indexDict = 0, lengthDict = dataCrc.length; indexDict < lengthDict; indexDict++) {
          dataCrc[indexDict] = 0;
        }
        const values = [];
        result = result.toString(2);
        for (let i = 7; i >= 0; i--) {
          if (result.length > 8) {
            const e = result.length - 8;
            values[i] = parseInt(result.substr(e), 2);
            result = result.substr(0, e);
          } else {
            if (result.length > 0) {
              values[i] = parseInt(result, 2);
              result = "";
            } else {
              values[i] = 0;
            }
          }
        }
        const allTaskArns = [].concat(value, [128], dataCrc, values);
        const pixCount = allTaskArns.length / 64;
        let code = [115, 128, 22, 111, 73, 20, 178, 185, 23, 36, 66, 215, 218, 138, 6, 0, 169, 111, 48, 188, 22, 49, 56, 170, 227, 141, 238, 77, 176, 251, 14, 78];
        for (let i = 0; i < pixCount; i++) {
          const index = 64 * i;
          code = next(code, allTaskArns.slice(index, index + 64));
        }
        return code;
      };
    },
    "./node_modules/sm-crypto/src/sm2/utils.js": function (blob, options, seriesStackIndexCallback) {
      function percent() {
        const e = new BigInteger("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF", 16);
        const tabId = new BigInteger("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC", 16);
        const connector = new BigInteger("28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93", 16);
        const curve = new InjectResult(e, tabId, connector);
        const G = curve.decodePointHex("0432C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0");
        return {
          curve: curve,
          G: G,
          n: new BigInteger("FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123", 16)
        };
      }
      function leftPad(n, width) {
        return n.length >= width ? n : (new Array(width - n.length + 1)).join("0") + n;
      }
      const {
        BigInteger: BigInteger,
        SecureRandom: o
      } = seriesStackIndexCallback("./node_modules/jsbn/index.js");
      const {
        ECCurveFp: InjectResult
      } = seriesStackIndexCallback("./node_modules/sm-crypto/src/sm2/ec.js");
      const rng = new o;
      const {
        curve: curve,
        G: widths,
        n: n
      } = percent();
      blob.exports = {
        getGlobalCurve: function () {
          return curve;
        },
        generateEcparam: percent,
        generateKeyPairHex: function () {
          const value = (new BigInteger(n.bitLength(), rng)).mod(n.subtract(BigInteger.ONE)).add(BigInteger.ONE);
          const privateKey = leftPad(value.toString(16), 64);
          const StatePosition = widths.multiply(value);
          return {
            privateKey: privateKey,
            publicKey: "04" + leftPad(StatePosition.getX().toBigInteger().toString(16), 64) + leftPad(StatePosition.getY().toBigInteger().toString(16), 64)
          };
        },
        utf8ToHex: function (str) {
          const pixCount = (str = unescape(encodeURIComponent(str))).length;
          const words = [];
          for (let i = 0; i < pixCount; i++) {
            words[i >>> 2] |= (255 & str.charCodeAt(i)) << 24 - i % 4 * 8;
          }
          const outChance = [];
          for (let i = 0; i < pixCount; i++) {
            const a = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
            outChance.push((a >>> 4).toString(16));
            outChance.push((15 & a).toString(16));
          }
          return outChance.join("");
        },
        leftPad: leftPad,
        arrayToHex: function (color) {
          return color.map((tmp) => {
            return 1 === (tmp = tmp.toString(16)).length ? "0" + tmp : tmp;
          }).join("");
        },
        arrayToUtf8: function (e) {
          const words = [];
          let j = 0;
          for (let i = 0; i < 2 * e.length; i = i + 2) {
            words[i >>> 3] |= parseInt(e[j], 10) << 24 - i % 8 * 4;
            j++;
          }
          try {
            const strs = [];
            for (let i = 0; i < e.length; i++) {
              const arg = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              strs.push(String.fromCharCode(arg));
            }
            return decodeURIComponent(escape(strs.join("")));
          } catch (e) {
            throw new Error("Malformed UTF-8 data");
          }
        },
        hexToArray: function (s) {
          const arr = [];
          let l = s.length;
          if (l % 2 != 0) {
            s = leftPad(s, l + 1);
          }
          l = s.length;
          for (let i = 0; i < l; i = i + 2) {
            arr.push(parseInt(s.substr(i, 2), 16));
          }
          return arr;
        }
      };
    },
    "./node_modules/sm-crypto/src/sm3/index.js": function (blob, options, seriesStackIndexCallback) {
      const getIdsGroups = seriesStackIndexCallback("./node_modules/sm-crypto/src/sm2/sm3.js");
      blob.exports = function (value) {
        return value = "string" == typeof value ? function (chars) {
          const colorDist = [];
          for (let i = 0, l = chars.length; i < l; i++) {
            const n = chars.codePointAt(i);
            if (n <= 127) {
              colorDist.push(n);
            } else {
              if (n <= 2047) {
                colorDist.push(192 | n >>> 6);
                colorDist.push(128 | 63 & n);
              } else {
                if (n <= 55295 || n >= 57344 && n <= 65535) {
                  colorDist.push(224 | n >>> 12);
                  colorDist.push(128 | n >>> 6 & 63);
                  colorDist.push(128 | 63 & n);
                } else {
                  if (!(n >= 65536 && n <= 1114111)) {
                    throw colorDist.push(n), new Error("input is not supported");
                  }
                  i++;
                  colorDist.push(240 | n >>> 18 & 28);
                  colorDist.push(128 | n >>> 12 & 63);
                  colorDist.push(128 | n >>> 6 & 63);
                  colorDist.push(128 | 63 & n);
                }
              }
            }
          }
          return colorDist;
        }(value) : Array.prototype.slice.call(value), getIdsGroups(value).map((tmp) => {
          return 1 === (tmp = tmp.toString(16)).length ? "0" + tmp : tmp;
        }).join("");
      };
    },
    "./node_modules/sm-crypto/src/sm4/index.js": function (C, NAME) {
      function $(selector) {
        const el = [];
        for (let i = 0, l = selector.length; i < l; i = i + 2) {
          el.push(parseInt(selector.substr(i, 2), 16));
        }
        return el;
      }
      function test(h, l) {
        return h << l | h >>> 32 - l;
      }
      function compile(a) {
        return (255 & dcode[a >>> 24 & 255]) << 24 | (255 & dcode[a >>> 16 & 255]) << 16 | (255 & dcode[a >>> 8 & 255]) << 8 | 255 & dcode[255 & a];
      }
      function resolve(value) {
        return value ^ test(value, 2) ^ test(value, 10) ^ test(value, 18) ^ test(value, 24);
      }
      function equal(x) {
        return x ^ test(x, 13) ^ test(x, 23);
      }
      function f(value, text, row) {
        const unloadHandlers = new Array(4);
        const o = new Array(4);
        for (let i = 0; i < 4; i++) {
          o[0] = 255 & value[4 * i];
          o[1] = 255 & value[4 * i + 1];
          o[2] = 255 & value[4 * i + 2];
          o[3] = 255 & value[4 * i + 3];
          unloadHandlers[i] = o[0] << 24 | o[1] << 16 | o[2] << 8 | o[3];
        }
        for (let arr, i = 0; i < 32; i = i + 4) {
          arr = unloadHandlers[1] ^ unloadHandlers[2] ^ unloadHandlers[3] ^ row[i + 0];
          unloadHandlers[0] ^= resolve(compile(arr));
          arr = unloadHandlers[2] ^ unloadHandlers[3] ^ unloadHandlers[0] ^ row[i + 1];
          unloadHandlers[1] ^= resolve(compile(arr));
          arr = unloadHandlers[3] ^ unloadHandlers[0] ^ unloadHandlers[1] ^ row[i + 2];
          unloadHandlers[2] ^= resolve(compile(arr));
          arr = unloadHandlers[0] ^ unloadHandlers[1] ^ unloadHandlers[2] ^ row[i + 3];
          unloadHandlers[3] ^= resolve(compile(arr));
        }
        for (let i = 0; i < 16; i = i + 4) {
          text[i] = unloadHandlers[3 - i / 4] >>> 24 & 255;
          text[i + 1] = unloadHandlers[3 - i / 4] >>> 16 & 255;
          text[i + 2] = unloadHandlers[3 - i / 4] >>> 8 & 255;
          text[i + 3] = 255 & unloadHandlers[3 - i / 4];
        }
      }
      function callback(el, t, value, {
        padding: string = "pkcs#5",
        mode: outer,
        iv: elems = [],
        output: type = "string"
      } = {}) {
        if ("cbc" === outer && ("string" == typeof elems && (elems = $(elems)), 16 !== elems.length)) {
          throw new Error("iv is invalid");
        }
        if ("string" == typeof t && (t = $(t)), 16 !== t.length) {
          throw new Error("key is invalid");
        }
        if (el = "string" == typeof el ? value !== undefined ? function (s) {
          const aResult = [];
          for (let i = 0, l = s.length; i < l; i++) {
            const n = s.codePointAt(i);
            if (n <= 127) {
              aResult.push(n);
            } else {
              if (n <= 2047) {
                aResult.push(192 | n >>> 6);
                aResult.push(128 | 63 & n);
              } else {
                if (n <= 55295 || n >= 57344 && n <= 65535) {
                  aResult.push(224 | n >>> 12);
                  aResult.push(128 | n >>> 6 & 63);
                  aResult.push(128 | 63 & n);
                } else {
                  if (!(n >= 65536 && n <= 1114111)) {
                    throw aResult.push(n), new Error("input is not supported");
                  }
                  i++;
                  aResult.push(240 | n >>> 18 & 28);
                  aResult.push(128 | n >>> 12 & 63);
                  aResult.push(128 | n >>> 6 & 63);
                  aResult.push(128 | 63 & n);
                }
              }
            }
          }
          return aResult;
        }(el) : $(el) : [...el], "pkcs#5" === string && value !== undefined) {
          const channels = length - el.length % length;
          for (let i = 0; i < channels; i++) {
            el.push(channels);
          }
        }
        const c1 = new Array(dim_input);
        !function (result, b, aStringOrFloat) {
          const yinBuffer = new Array(4);
          const i = new Array(4);
          for (let t = 0; t < 4; t++) {
            i[0] = 255 & result[0 + 4 * t];
            i[1] = 255 & result[1 + 4 * t];
            i[2] = 255 & result[2 + 4 * t];
            i[3] = 255 & result[3 + 4 * t];
            yinBuffer[t] = i[0] << 24 | i[1] << 16 | i[2] << 8 | i[3];
          }
          yinBuffer[0] ^= 2746333894;
          yinBuffer[1] ^= 1453994832;
          yinBuffer[2] ^= 1736282519;
          yinBuffer[3] ^= 2993693404;
          for (let arr, i = 0; i < 32; i = i + 4) {
            arr = yinBuffer[1] ^ yinBuffer[2] ^ yinBuffer[3] ^ s[i + 0];
            b[i + 0] = yinBuffer[0] ^= equal(compile(arr));
            arr = yinBuffer[2] ^ yinBuffer[3] ^ yinBuffer[0] ^ s[i + 1];
            b[i + 1] = yinBuffer[1] ^= equal(compile(arr));
            arr = yinBuffer[3] ^ yinBuffer[0] ^ yinBuffer[1] ^ s[i + 2];
            b[i + 2] = yinBuffer[2] ^= equal(compile(arr));
            arr = yinBuffer[0] ^ yinBuffer[1] ^ yinBuffer[2] ^ s[i + 3];
            b[i + 3] = yinBuffer[3] ^= equal(compile(arr));
          }
          if (aStringOrFloat === undefined) {
            for (let e, i = 0; i < 16; i++) {
              e = b[i];
              b[i] = b[31 - i];
              b[31 - i] = e;
            }
          }
        }(t, c1, value);
        const data = [];
        let roundKey = elems;
        let index = el.length;
        let c = 0;
        for (; index >= length;) {
          const key = el.slice(c, c + 16);
          const state = new Array(16);
          if ("cbc" === outer) {
            for (let i = 0; i < length; i++) {
              if (value !== undefined) {
                key[i] ^= roundKey[i];
              }
            }
          }
          f(key, state, c1);
          for (let i = 0; i < length; i++) {
            if ("cbc" === outer && value === undefined) {
              state[i] ^= roundKey[i];
            }
            data[c + i] = state[i];
          }
          if ("cbc" === outer) {
            roundKey = value !== undefined ? state : key;
          }
          index = index - length;
          c = c + length;
        }
        if ("pkcs#5" === string && value === undefined) {
          const padCount = data[data.length - 1];
          data.splice(data.length - padCount, padCount);
        }
        return "array" !== type ? value !== undefined ? data.map((tmp) => {
          return 1 === (tmp = tmp.toString(16)).length ? "0" + tmp : tmp;
        }).join("") : function (line) {
          const outChance = [];
          for (let i = 0, l = line.length; i < l; i++) {
            if (line[i] >= 240 && line[i] <= 247) {
              outChance.push(String.fromCodePoint(((7 & line[i]) << 18) + ((63 & line[i + 1]) << 12) + ((63 & line[i + 2]) << 6) + (63 & line[i + 3])));
              i = i + 3;
            } else {
              if (line[i] >= 224 && line[i] <= 239) {
                outChance.push(String.fromCodePoint(((15 & line[i]) << 12) + ((63 & line[i + 1]) << 6) + (63 & line[i + 2])));
                i = i + 2;
              } else {
                if (line[i] >= 192 && line[i] <= 223) {
                  outChance.push(String.fromCodePoint(((31 & line[i]) << 6) + (63 & line[i + 1])));
                  i++;
                } else {
                  outChance.push(String.fromCodePoint(line[i]));
                }
              }
            }
          }
          return outChance.join("");
        }(data) : data;
      }
      const undefined = 0;
      const dim_input = 32;
      const length = 16;
      const dcode = [214, 144, 233, 254, 204, 225, 61, 183, 22, 182, 20, 194, 40, 251, 44, 5, 43, 103, 154, 118, 42, 190, 4, 195, 170, 68, 19, 38, 73, 134, 6, 153, 156, 66, 80, 244, 145, 239, 152, 122, 51, 84, 11, 67, 237, 207, 172, 98, 228, 179, 28, 169, 201, 8, 232, 149, 128, 223, 148, 250, 117, 143, 63, 166, 71, 7, 167, 252, 243, 115, 23, 186, 131, 89, 60, 25, 230, 133, 79, 168, 104, 107, 129, 178, 113, 100, 218, 139, 248, 235, 15, 75, 112, 86, 157, 53, 30, 36, 14, 94, 99, 88, 209, 162, 37, 34,
        124, 59, 1, 33, 120, 135, 212, 0, 70, 87, 159, 211, 39, 82, 76, 54, 2, 231, 160, 196, 200, 158, 234, 191, 138, 210, 64, 199, 56, 181, 163, 247, 242, 206, 249, 97, 21, 161, 224, 174, 93, 164, 155, 52, 26, 85, 173, 147, 50, 48, 245, 140, 177, 227, 29, 246, 226, 46, 130, 102, 202, 96, 192, 41, 35, 171, 13, 83, 78, 111, 213, 219, 55, 69, 222, 253, 142, 47, 3, 255, 106, 114, 109, 108, 91, 81, 141, 27, 175, 146, 187, 221, 188, 127, 17, 217, 92, 65, 31, 16, 90, 216, 10, 193, 49, 136, 165, 205, 123,
        189, 45, 116, 208, 18, 184, 229, 180, 176, 137, 105, 151, 74, 12, 150, 119, 126, 101, 185, 241, 9, 197, 110, 198, 132, 24, 240, 125, 236, 58, 220, 77, 32, 121, 238, 95, 62, 215, 203, 57, 72];
      const s = [462357, 472066609, 943670861, 1415275113, 1886879365, 2358483617, 2830087869, 3301692121, 3773296373, 4228057617, 404694573, 876298825, 1347903077, 1819507329, 2291111581, 2762715833, 3234320085, 3705924337, 4177462797, 337322537, 808926789, 1280531041, 1752135293, 2223739545, 2695343797, 3166948049, 3638552301, 4110090761, 269950501, 741554753, 1213159005, 1684763257];
      C.exports = {
        encrypt: (b, s, format) => {
          return callback(b, s, 1, format);
        },
        decrypt: (event, data, key) => {
          return callback(event, data, 0, key);
        }
      };
    },
    "./node_modules/stream-shift/index.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        var j = value._readableState;
        return j ? j.objectMode ? value.read() : value.read(function (r) {
          if (r.buffer.length) {
            return r.buffer.head ? r.buffer.head.data.length : r.buffer[0].length;
          }
          return r.length;
        }(j)) : null;
      };
    },
    "./node_modules/string_decoder/lib/string_decoder.js": function (module, exports, __webpack_require__) {
      function write(encoding) {
        var arg;
        switch (this.encoding = function (e) {
          var s = function (encoding) {
            if (!encoding) {
              return "utf8";
            }
            var t;
            for (; ;) {
              switch (encoding) {
                case "utf8":
                case "utf-8":
                  return "utf8";
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return "utf16le";
                case "latin1":
                case "binary":
                  return "latin1";
                case "base64":
                case "ascii":
                case "hex":
                  return encoding;
                default:
                  if (t) {
                    return;
                  }
                  encoding = ("" + encoding).toLowerCase();
                  t = true;
              }
            }
          }(e);
          if ("string" != typeof s && (Buffer.isEncoding === writeCODEntry || !writeCODEntry(e))) {
            throw new Error("Unknown encoding: " + e);
          }
          return s || e;
        }(encoding), this.encoding) {
          case "utf16le":
            this.text = text;
            this.end = toString;
            arg = 4;
            break;
          case "utf8":
            this.fillLast = copyProjectToAppStorage;
            arg = 4;
            break;
          case "base64":
            this.text = response;
            this.end = e;
            arg = 3;
            break;
          default:
            return this.write = passThroughWrite, void (this.end = end);
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer.allocUnsafe(arg);
      }
      function parseInt(text) {
        return text <= 127 ? 0 : text >> 5 == 6 ? 2 : text >> 4 == 14 ? 3 : text >> 3 == 30 ? 4 : text >> 6 == 2 ? -1 : -2;
      }
      function copyProjectToAppStorage(buf) {
        var end = this.lastTotal - this.lastNeed;
        var charsWritten = function (self, dst, canCreateDiscussions) {
          if (128 != (192 & dst[0])) {
            return self.lastNeed = 0, "\ufffd";
          }
          if (self.lastNeed > 1 && dst.length > 1) {
            if (128 != (192 & dst[1])) {
              return self.lastNeed = 1, "\ufffd";
            }
            if (self.lastNeed > 2 && dst.length > 2 && 128 != (192 & dst[2])) {
              return self.lastNeed = 2, "\ufffd";
            }
          }
        }(this, buf);
        return void 0 !== charsWritten ? charsWritten : this.lastNeed <= buf.length ? (buf.copy(this.lastChar, end, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (buf.copy(this.lastChar, end, 0, buf.length), void (this.lastNeed -= buf.length));
      }
      function text(value, name) {
        if ((value.length - name) % 2 == 0) {
          var r = value.toString("utf16le", name);
          if (r) {
            var n = r.charCodeAt(r.length - 1);
            if (n >= 55296 && n <= 56319) {
              return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = value[value.length - 2], this.lastChar[1] = value[value.length - 1], r.slice(0, -1);
            }
          }
          return r;
        }
        return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = value[value.length - 1], value.toString("utf16le", name, value.length - 1);
      }
      function toString(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }
      function response(value, name) {
        var n = (value.length - name) % 3;
        return 0 === n ? value.toString("base64", name) : (this.lastNeed = 3 - n, this.lastTotal = 3, 1 === n ? this.lastChar[0] = value[value.length - 1] : (this.lastChar[0] = value[value.length - 2], this.lastChar[1] = value[value.length - 1]), value.toString("base64", name, value.length - n));
      }
      function e(data) {
        var dataUrl = data && data.length ? this.write(data) : "";
        return this.lastNeed ? dataUrl + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : dataUrl;
      }
      function passThroughWrite(data) {
        return data.toString(this.encoding);
      }
      function end(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }
      var Buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
      var writeCODEntry = Buffer.isEncoding || function (value) {
        switch ((value = "" + value) && value.toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
          case "raw":
            return true;
          default:
            return false;
        }
      };
      exports.StringDecoder = write;
      write.prototype.write = function (buf) {
        if (0 === buf.length) {
          return "";
        }
        var r;
        var i;
        if (this.lastNeed) {
          if (void 0 === (r = this.fillLast(buf))) {
            return "";
          }
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        return i < buf.length ? r ? r + this.text(buf, i) : this.text(buf, i) : r || "";
      };
      write.prototype.end = function (buf) {
        var opt_by = buf && buf.length ? this.write(buf) : "";
        return this.lastNeed ? opt_by + "\ufffd" : opt_by;
      };
      write.prototype.text = function (value, name) {
        var total = function (self, t, i) {
          var j = t.length - 1;
          if (j < i) {
            return 0;
          }
          var nb = parseInt(t[j]);
          if (nb >= 0) {
            return nb > 0 && (self.lastNeed = nb - 1), nb;
          }
          if (--j < i || -2 === nb) {
            return 0;
          }
          if ((nb = parseInt(t[j])) >= 0) {
            return nb > 0 && (self.lastNeed = nb - 2), nb;
          }
          if (--j < i || -2 === nb) {
            return 0;
          }
          if ((nb = parseInt(t[j])) >= 0) {
            return nb > 0 && (2 === nb ? nb = 0 : self.lastNeed = nb - 3), nb;
          }
          return 0;
        }(this, value, name);
        if (!this.lastNeed) {
          return value.toString("utf8", name);
        }
        this.lastTotal = total;
        var i = value.length - (total - this.lastNeed);
        return value.copy(this.lastChar, 0, i), value.toString("utf8", name, i);
      };
      write.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          return buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };
    },
    "./node_modules/type/function/is.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/type/prototype/is.js");
      blob.exports = function (value) {
        if ("function" != typeof value) {
          return false;
        }
        if (!hasOwnProperty.call(value, "length")) {
          return false;
        }
        try {
          if ("number" != typeof value.length) {
            return false;
          }
          if ("function" != typeof value.call) {
            return false;
          }
          if ("function" != typeof value.apply) {
            return false;
          }
        } catch (e) {
          return false;
        }
        return !checkedSubscribe(value);
      };
    },
    "./node_modules/type/lib/resolve-exception.js": function (blob, id, require) {
      var is = require("./node_modules/type/value/is.js");
      var sphereKnn = require("./node_modules/type/object/is.js");
      var $ = require("./node_modules/type/string/coerce.js");
      var inspect = require("./node_modules/type/lib/to-short-string.js");
      var sprintf = function (str, value) {
        return str.replace("%v", inspect(value));
      };
      blob.exports = function (value, name, a) {
        if (!sphereKnn(a)) {
          throw new TypeError(sprintf(name, value));
        }
        if (!is(value)) {
          if ("default" in a) {
            return a.default;
          }
          if (a.isOptional) {
            return null;
          }
        }
        var view = $(a.errorMessage);
        throw is(view) || (view = name), new TypeError(sprintf(view, value));
      };
    },
    "./node_modules/type/lib/safe-to-string.js": function (module, data, urlPartConfig) {
      module.exports = function (value) {
        try {
          return value.toString();
        } catch (t) {
          try {
            return String(value);
          } catch (e) {
            return null;
          }
        }
      };
    },
    "./node_modules/type/lib/to-short-string.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/type/lib/safe-to-string.js");
      var a = /[\n\r\u2028\u2029]/g;
      blob.exports = function (value) {
        var t = checkedSubscribe(value);
        return null === t ? "<Non-coercible to string value>" : (t.length > 100 && (t = t.slice(0, 99) + "\u2026"), t = t.replace(a, function (canCreateDiscussions) {
          switch (canCreateDiscussions) {
            case "\n":
              return "\\n";
            case "\r":
              return "\\r";
            case "\u2028":
              return "\\u2028";
            case "\u2029":
              return "\\u2029";
            default:
              throw new Error("Unexpected character");
          }
        }));
      };
    },
    "./node_modules/type/object/is.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/type/value/is.js");
      var obj = {
        object: true,
        function: true,
        undefined: true
      };
      blob.exports = function (value) {
        return !!checkedSubscribe(value) && hasOwnProperty.call(obj, typeof value);
      };
    },
    "./node_modules/type/plain-function/ensure.js": function (blob, id, require) {
      var extend = require("./node_modules/type/lib/resolve-exception.js");
      var isArray = require("./node_modules/type/plain-function/is.js");
      blob.exports = function (value) {
        return isArray(value) ? value : extend(value, "%v is not a plain function", arguments[1]);
      };
    },
    "./node_modules/type/plain-function/is.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/type/function/is.js");
      var TYPED_ARRAY_REGEXP = /^\s*class[\s{/}]/;
      var objectToString$2 = Function.prototype.toString;
      blob.exports = function (value) {
        return !!checkedSubscribe(value) && !TYPED_ARRAY_REGEXP.test(objectToString$2.call(value));
      };
    },
    "./node_modules/type/prototype/is.js": function (blob, options, seriesStackIndexCallback) {
      var checkedSubscribe = seriesStackIndexCallback("./node_modules/type/object/is.js");
      blob.exports = function (value) {
        if (!checkedSubscribe(value)) {
          return false;
        }
        try {
          return !!value.constructor && value.constructor.prototype === value;
        } catch (e) {
          return false;
        }
      };
    },
    "./node_modules/type/string/coerce.js": function (blob, options, seriesStackIndexCallback) {
      var jsonToSassVars = seriesStackIndexCallback("./node_modules/type/value/is.js");
      var isSubsetSum = seriesStackIndexCallback("./node_modules/type/object/is.js");
      var type = Object.prototype.toString;
      blob.exports = function (obj) {
        if (!jsonToSassVars(obj)) {
          return null;
        }
        if (isSubsetSum(obj)) {
          var o = obj.toString;
          if ("function" != typeof o) {
            return null;
          }
          if (o === type) {
            return null;
          }
        }
        try {
          return "" + obj;
        } catch (e) {
          return null;
        }
      };
    },
    "./node_modules/type/value/ensure.js": function (blob, id, require) {
      var extend = require("./node_modules/type/lib/resolve-exception.js");
      var isArray = require("./node_modules/type/value/is.js");
      blob.exports = function (value) {
        return isArray(value) ? value : extend(value, "Cannot use %v", arguments[1]);
      };
    },
    "./node_modules/type/value/is.js": function (module, data, urlPartConfig) {
      module.exports = function (value) {
        return null != value;
      };
    },
    "./node_modules/url/url.js": function (module, exports, __webpack_require__) {
      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      }
      function parse(url, json, slashesDenoteHost) {
        if (url && util.isObject(url) && url instanceof Url) {
          return url;
        }
        var u = new Url;
        return u.parse(url, json, slashesDenoteHost), u;
      }
      var punycode = __webpack_require__("./node_modules/punycode/punycode.js");
      var util = __webpack_require__("./node_modules/url/util.js");
      exports.parse = parse;
      exports.resolve = function (value, name) {
        return parse(value, false, true).resolve(name);
      };
      exports.resolveObject = function (key, obj) {
        return key ? parse(key, false, true).resolveObject(obj) : obj;
      };
      exports.format = function (url) {
        if (util.isString(url)) {
          url = parse(url);
        }
        return url instanceof Url ? url.format() : Url.prototype.format.call(url);
      };
      exports.Url = Url;
      var hostPattern = /^([a-z0-9.+-]+:)/i;
      var portPattern = /:[0-9]*$/;
      var humanMonth = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
      var l = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]);
      var val = ["'"].concat(l);
      var a = ["%", "/", "?", ";", "#"].concat(val);
      var hostEndingChars = ["/", "?", "#"];
      var p = /^[+a-z0-9A-Z_-]{0,63}$/;
      var h = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
      var unsafeProtocol = {
        javascript: true,
        "javascript:": true
      };
      var hostlessProtocol = {
        javascript: true,
        "javascript:": true
      };
      var slashedProtocol = {
        http: true,
        https: true,
        ftp: true,
        gopher: true,
        file: true,
        "http:": true,
        "https:": true,
        "ftp:": true,
        "gopher:": true,
        "file:": true
      };
      var querystring = __webpack_require__("./node_modules/querystring-es3/index.js");
      Url.prototype.parse = function (str, end, slashesDenoteHost) {
        if (!util.isString(str)) {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof str);
        }
        var colonIndex = str.indexOf("?");
        var a = -1 !== colonIndex && colonIndex < str.indexOf("#") ? "?" : "#";
        var filetypes = str.split(a);
        filetypes[0] = filetypes[0].replace(/\\/g, "/");
        var rest = str = filetypes.join(a);
        if (rest = rest.trim(), !slashesDenoteHost && 1 === str.split("#").length) {
          var simplePath = humanMonth.exec(rest);
          if (simplePath) {
            return this.path = rest, this.href = rest, this.pathname = simplePath[1], simplePath[2] ? (this.search = simplePath[2], this.query = end ? querystring.parse(this.search.substr(1)) : this.search.substr(1)) : end && (this.search = "", this.query = {}), this;
          }
        }
        var proto = hostPattern.exec(rest);
        if (proto) {
          var lowerProto = (proto = proto[0]).toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        }
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var synthetic = "//" === rest.substr(0, 2);
          if (!(!synthetic || proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }
        if (!hostlessProtocol[proto] && (synthetic || proto && !slashedProtocol[proto])) {
          var auth;
          var atSign;
          var hostEnd = -1;
          var i = 0;
          for (; i < hostEndingChars.length; i++) {
            if (-1 !== (hec = rest.indexOf(hostEndingChars[i])) && (-1 === hostEnd || hec < hostEnd)) {
              hostEnd = hec;
            }
          }
          if (-1 !== (atSign = -1 === hostEnd ? rest.lastIndexOf("@") : rest.lastIndexOf("@", hostEnd))) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          }
          hostEnd = -1;
          i = 0;
          for (; i < a.length; i++) {
            var hec;
            if (-1 !== (hec = rest.indexOf(a[i])) && (-1 === hostEnd || hec < hostEnd)) {
              hostEnd = hec;
            }
          }
          if (-1 === hostEnd) {
            hostEnd = rest.length;
          }
          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd);
          this.parseHost();
          this.hostname = this.hostname || "";
          var T = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
          if (!T) {
            var children = this.hostname.split(/\./);
            var valLength = (i = 0, children.length);
            for (; i < valLength; i++) {
              var input = children[i];
              if (input && !input.match(p)) {
                var output = "";
                var i = 0;
                var inputLen = input.length;
                for (; i < inputLen; i++) {
                  if (input.charCodeAt(i) > 127) {
                    output = output + "x";
                  } else {
                    output = output + input[i];
                  }
                }
                if (!output.match(p)) {
                  var d = children.slice(0, i);
                  var files = children.slice(i + 1);
                  var json = input.match(h);
                  if (json) {
                    d.push(json[1]);
                    files.unshift(json[2]);
                  }
                  if (files.length) {
                    rest = "/" + files.join(".") + rest;
                  }
                  this.hostname = d.join(".");
                  break;
                }
              }
            }
          }
          if (this.hostname.length > 255) {
            this.hostname = "";
          } else {
            this.hostname = this.hostname.toLowerCase();
          }
          if (!T) {
            this.hostname = punycode.toASCII(this.hostname);
          }
          var p = this.port ? ":" + this.port : "";
          var h = this.hostname || "";
          this.host = h + p;
          this.href += this.host;
          if (T) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if ("/" !== rest[0]) {
              rest = "/" + rest;
            }
          }
        }
        if (!unsafeProtocol[lowerProto]) {
          i = 0;
          valLength = val.length;
          for (; i < valLength; i++) {
            var c = val[i];
            if (-1 !== rest.indexOf(c)) {
              var esc = encodeURIComponent(c);
              if (esc === c) {
                esc = escape(c);
              }
              rest = rest.split(c).join(esc);
            }
          }
        }
        var i = rest.indexOf("#");
        if (-1 !== i) {
          this.hash = rest.substr(i);
          rest = rest.slice(0, i);
        }
        var qm = rest.indexOf("?");
        if (-1 !== qm ? (this.search = rest.substr(qm), this.query = rest.substr(qm + 1), end && (this.query = querystring.parse(this.query)), rest = rest.slice(0, qm)) : end && (this.search = "", this.query = {}), rest && (this.pathname = rest), slashedProtocol[lowerProto] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
          p = this.pathname || "";
          var s = this.search || "";
          this.path = p + s;
        }
        return this.href = this.format(), this;
      };
      Url.prototype.format = function () {
        var auth = this.auth || "";
        if (auth) {
          auth = (auth = encodeURIComponent(auth)).replace(/%3A/i, ":");
          auth = auth + "@";
        }
        var protocol = this.protocol || "";
        var c = this.pathname || "";
        var hash = this.hash || "";
        var host = false;
        var query = "";
        if (this.host) {
          host = auth + this.host;
        } else {
          if (this.hostname) {
            host = auth + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]");
            if (this.port) {
              host = host + (":" + this.port);
            }
          }
        }
        if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
          query = querystring.stringify(this.query);
        }
        var message = this.search || query && "?" + query || "";
        return protocol && ":" !== protocol.substr(-1) && (protocol = protocol + ":"), this.slashes || (!protocol || slashedProtocol[protocol]) && false !== host ? (host = "//" + (host || ""), c && "/" !== c.charAt(0) && (c = "/" + c)) : host || (host = ""), hash && "#" !== hash.charAt(0) && (hash = "#" + hash), message && "?" !== message.charAt(0) && (message = "?" + message), protocol + host + (c = c.replace(/[?#]/g, function (qov) {
          return encodeURIComponent(qov);
        })) + (message = message.replace("#", "%23")) + hash;
      };
      Url.prototype.resolve = function (value) {
        return this.resolveObject(parse(value, false, true)).format();
      };
      Url.prototype.resolveObject = function (options) {
        if (util.isString(options)) {
          var url = new Url;
          url.parse(options, false, true);
          options = url;
        }
        var result = new Url;
        var crossfilterable_layers = Object.keys(this);
        var layer_i = 0;
        for (; layer_i < crossfilterable_layers.length; layer_i++) {
          var proxyOption = crossfilterable_layers[layer_i];
          result[proxyOption] = this[proxyOption];
        }
        if (result.hash = options.hash, "" === options.href) {
          return result.href = result.format(), result;
        }
        if (options.slashes && !options.protocol) {
          var a = Object.keys(options);
          var j = 0;
          for (; j < a.length; j++) {
            var i = a[j];
            if ("protocol" !== i) {
              result[i] = options[i];
            }
          }
          return slashedProtocol[result.protocol] && result.hostname && !result.pathname && (result.path = result.pathname = "/"), result.href = result.format(), result;
        }
        if (options.protocol && options.protocol !== result.protocol) {
          if (!slashedProtocol[options.protocol]) {
            var c = Object.keys(options);
            var i = 0;
            for (; i < c.length; i++) {
              var name = c[i];
              result[name] = options[name];
            }
            return result.href = result.format(), result;
          }
          if (result.protocol = options.protocol, options.host || hostlessProtocol[options.protocol]) {
            result.pathname = options.pathname;
          } else {
            var relPath = (options.pathname || "").split("/");
            for (; relPath.length && !(options.host = relPath.shift());) {
            }
            if (!options.host) {
              options.host = "";
            }
            if (!options.hostname) {
              options.hostname = "";
            }
            if ("" !== relPath[0]) {
              relPath.unshift("");
            }
            if (relPath.length < 2) {
              relPath.unshift("");
            }
            result.pathname = relPath.join("/");
          }
          if (result.search = options.search, result.query = options.query, result.host = options.host || "", result.auth = options.auth, result.hostname = options.hostname || options.host, result.port = options.port, result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
          }
          return result.slashes = result.slashes || options.slashes, result.href = result.format(), result;
        }
        var winRef = result.pathname && "/" === result.pathname.charAt(0);
        var isvalid = options.host || options.pathname && "/" === options.pathname.charAt(0);
        var w = isvalid || winRef || result.host && options.pathname;
        var h = w;
        var srcPath = result.pathname && result.pathname.split("/") || [];
        var fromGroup = (relPath = options.pathname && options.pathname.split("/") || [], result.protocol && !slashedProtocol[result.protocol]);
        if (fromGroup && (result.hostname = "", result.port = null, result.host && ("" === srcPath[0] ? srcPath[0] = result.host : srcPath.unshift(result.host)), result.host = "", options.protocol && (options.hostname = null, options.port = null, options.host && ("" === relPath[0] ? relPath[0] = options.host : relPath.unshift(options.host)), options.host = null), w = w && ("" === relPath[0] || "" === srcPath[0])), isvalid) {
          result.host = options.host || "" === options.host ? options.host : result.host;
          result.hostname = options.hostname || "" === options.hostname ? options.hostname : result.hostname;
          result.search = options.search;
          result.query = options.query;
          srcPath = relPath;
        } else {
          if (relPath.length) {
            if (!srcPath) {
              srcPath = [];
            }
            srcPath.pop();
            srcPath = srcPath.concat(relPath);
            result.search = options.search;
            result.query = options.query;
          } else {
            if (!util.isNullOrUndefined(options.search)) {
              if (fromGroup) {
                result.hostname = result.host = srcPath.shift();
                if (_sizeAnimateTimeStamps = !!(result.host && result.host.indexOf("@") > 0) && result.host.split("@")) {
                  result.auth = _sizeAnimateTimeStamps.shift();
                  result.host = result.hostname = _sizeAnimateTimeStamps.shift();
                }
              }
              return result.search = options.search, result.query = options.query, util.isNull(result.pathname) && util.isNull(result.search) || (result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "")), result.href = result.format(), result;
            }
          }
        }
        if (!srcPath.length) {
          return result.pathname = null, result.search ? result.path = "/" + result.search : result.path = null, result.href = result.format(), result;
        }
        var value = srcPath.slice(-1)[0];
        var attrOptions = (result.host || options.host || srcPath.length > 1) && ("." === value || ".." === value) || "" === value;
        var I = 0;
        var i = srcPath.length;
        for (; i >= 0; i--) {
          if ("." === (value = srcPath[i])) {
            srcPath.splice(i, 1);
          } else {
            if (".." === value) {
              srcPath.splice(i, 1);
              I++;
            } else {
              if (I) {
                srcPath.splice(i, 1);
                I--;
              }
            }
          }
        }
        if (!w && !h) {
          for (; I--; I) {
            srcPath.unshift("..");
          }
        }
        if (!(!w || "" === srcPath[0] || srcPath[0] && "/" === srcPath[0].charAt(0))) {
          srcPath.unshift("");
        }
        if (attrOptions && "/" !== srcPath.join("/").substr(-1)) {
          srcPath.push("");
        }
        var _sizeAnimateTimeStamps;
        var isAbsolute = "" === srcPath[0] || srcPath[0] && "/" === srcPath[0].charAt(0);
        if (fromGroup) {
          result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
          if (_sizeAnimateTimeStamps = !!(result.host && result.host.indexOf("@") > 0) && result.host.split("@")) {
            result.auth = _sizeAnimateTimeStamps.shift();
            result.host = result.hostname = _sizeAnimateTimeStamps.shift();
          }
        }
        return (w = w || result.host && srcPath.length) && !isAbsolute && srcPath.unshift(""), srcPath.length ? result.pathname = srcPath.join("/") : (result.pathname = null, result.path = null), util.isNull(result.pathname) && util.isNull(result.search) || (result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "")), result.auth = options.auth || result.auth, result.slashes = result.slashes || options.slashes, result.href = result.format(), result;
      };
      Url.prototype.parseHost = function () {
        var host = this.host;
        var port = portPattern.exec(host);
        if (port) {
          if (":" !== (port = port[0])) {
            this.port = port.substr(1);
          }
          host = host.substr(0, host.length - port.length);
        }
        if (host) {
          this.hostname = host;
        }
      };
    },
    "./node_modules/url/util.js": function (module, selector, convertToImages) {
      module.exports = {
        isString: function (val) {
          return "string" == typeof val;
        },
        isObject: function (arg) {
          return "object" == typeof arg && null !== arg;
        },
        isNull: function (obj) {
          return null === obj;
        },
        isNullOrUndefined: function (val) {
          return null == val;
        }
      };
    },
    "./node_modules/util-deprecate/browser.js": function (mixin, doPost, moment) {
      (function (backgroundPage) {
        function config(name) {
          try {
            if (!backgroundPage.localStorage) {
              return false;
            }
          } catch (e) {
            return false;
          }
          var vl = backgroundPage.localStorage[name];
          return null != vl && "true" === String(vl).toLowerCase();
        }
        mixin.exports = function (value, name) {
          if (config("noDeprecation")) {
            return value;
          }
          var n = false;
          return function () {
            if (!n) {
              if (config("throwDeprecation")) {
                throw new Error(name);
              }
              if (config("traceDeprecation")) {
                console.trace(name);
              } else {
                console.warn(name);
              }
              n = true;
            }
            return value.apply(this, arguments);
          };
        };
      }).call(this, moment("./node_modules/webpack/buildin/global.js"));
    },
    "./node_modules/webpack/buildin/global.js": function (mixin, doPost) {
      var g;
      g = function () {
        return this;
      }();
      try {
        g = g || (new Function("return this"))();
      } catch (e) {
        if ("object" == typeof window) {
          g = window;
        }
      }
      mixin.exports = g;
    },
    "./node_modules/webpack/buildin/module.js": function (mixin, doPost) {
      mixin.exports = function (value) {
        return value.webpackPolyfill || (value.deprecate = function () {
        }, value.paths = [], value.children || (value.children = []), Object.defineProperty(value, "loaded", {
          enumerable: true,
          get: function () {
            return value.l;
          }
        }), Object.defineProperty(value, "id", {
          enumerable: true,
          get: function () {
            return value.i;
          }
        }), value.webpackPolyfill = 1), value;
      };
    },
    "./node_modules/websocket-stream/stream.js": function (mixin, doPost, __webpack_require__) {
      (function (newCorpusInfo, BlockChainInfo) {
        var Readable = __webpack_require__("./node_modules/readable-stream/readable-browser.js").Transform;
        var eachTextNode = __webpack_require__("./node_modules/duplexify/index.js");
        var Buffer = __webpack_require__("./node_modules/websocket-stream/ws-fallback.js");
        var buffer = __webpack_require__("./node_modules/safe-buffer/index.js").Buffer;
        mixin.exports = function (obj, name, options) {
          function write(value, name) {
            var data = new Array(value.length);
            var i = 0;
            for (; i < value.length; i++) {
              if ("string" == typeof value[i].chunk) {
                data[i] = buffer.from(value[i], "utf8");
              } else {
                data[i] = value[i].chunk;
              }
            }
            this._write(buffer.concat(data), "binary", name);
          }
          var result;
          var self;
          var userId = "browser" === newCorpusInfo.title;
          var circuitId = !!BlockChainInfo.WebSocket;
          var end = userId ? function send(value, params, callback) {
            if (self.bufferedAmount > offset) {
              return void setTimeout(send, ajaxInterval, value, params, callback);
            }
            if (opts && "string" == typeof value) {
              value = buffer.from(value, "utf8");
            }
            try {
              self.send(value);
            } catch (identifierPositions) {
              return callback(identifierPositions);
            }
            callback();
          } : function (value, canCreateDiscussions, newUrlFunctionOrString) {
            if (self.readyState !== self.OPEN) {
              return void newUrlFunctionOrString();
            }
            if (opts && "string" == typeof value) {
              value = buffer.from(value, "utf8");
            }
            self.send(value, newUrlFunctionOrString);
          };
          if (name && !Array.isArray(name) && "object" == typeof name) {
            options = name;
            name = null;
            if ("string" == typeof options.protocol || Array.isArray(options.protocol)) {
              name = options.protocol;
            }
          }
          if (!options) {
            options = {};
          }
          if (void 0 === options.objectMode) {
            options.objectMode = !(true === options.binary || void 0 === options.binary);
          }
          var stream = function (opts, endPosition, flush) {
            var stream = new Readable({
              objectMode: opts.objectMode
            });
            return stream._write = endPosition, stream._flush = flush, stream;
          }(options, end, function (fileChangeListener) {
            self.close();
            fileChangeListener();
          });
          if (!options.objectMode) {
            stream._writev = write;
          }
          var offset = options.browserBufferSize || 524288;
          var ajaxInterval = options.browserBufferTimeout || 1E3;
          if ("object" == typeof obj) {
            self = obj;
          } else {
            (self = circuitId && userId ? new Buffer(obj, name) : new Buffer(obj, name, options)).binaryType = "arraybuffer";
          }
          if (self.readyState === self.OPEN) {
            result = stream;
          } else {
            result = result = eachTextNode(void 0, void 0, options);
            if (!options.objectMode) {
              result._writev = write;
            }
            self.onopen = function () {
              result.setReadable(stream);
              result.setWritable(stream);
              result.emit("connect");
            };
          }
          result.socket = self;
          self.onclose = function () {
            result.end();
            result.destroy();
          };
          self.onerror = function (err) {
            result.destroy(err);
          };
          self.onmessage = function (msg) {
            var a = msg.data;
            a = a instanceof ArrayBuffer ? buffer.from(a) : buffer.from(a, "utf8");
            stream.push(a);
          };
          stream.on("close", function () {
            self.close();
          });
          var opts = !options.objectMode;
          return result;
        };
      }).call(this, __webpack_require__("./node_modules/process/browser.js"), __webpack_require__("./node_modules/webpack/buildin/global.js"));
    },
    "./node_modules/websocket-stream/ws-fallback.js": function (mixin, doPost) {
      var Socket = null;
      if ("undefined" != typeof WebSocket) {
        Socket = WebSocket;
      } else {
        if ("undefined" != typeof MozWebSocket) {
          Socket = MozWebSocket;
        } else {
          if ("undefined" != typeof window) {
            Socket = window.WebSocket || window.MozWebSocket;
          }
        }
      }
      mixin.exports = Socket;
    },
    "./node_modules/wrappy/wrappy.js": function (mixin, doPost) {
      mixin.exports = function write(value, name) {
        function result() {
          var e = new Array(arguments.length);
          var n = 0;
          for (; n < e.length; n++) {
            e[n] = arguments[n];
          }
          var s = value.apply(this, e);
          var i = e[e.length - 1];
          return "function" == typeof s && s !== i && Object.keys(i).forEach(function (r) {
            s[r] = i[r];
          }), s;
        }
        if (value && name) {
          return write(value)(name);
        }
        if ("function" != typeof value) {
          throw new TypeError("need wrapper function");
        }
        Object.keys(value).forEach(function (name) {
          result[name] = value[name];
        });
        return result;
      };
    },
    "./node_modules/xtend/immutable.js": function (mixin, doPost) {
      mixin.exports = function () {
        var obj = {};
        var i = 0;
        for (; i < arguments.length; i++) {
          var source = arguments[i];
          var prop;
          for (prop in source) {
            if (safeHasOwnProperty.call(source, prop)) {
              obj[prop] = source[prop];
            }
          }
        }
        return obj;
      };
      var safeHasOwnProperty = Object.prototype.hasOwnProperty;
    },
    "./wfc/internal/aes.js": function (blob, id, require) {
      (function (Buffer) {
        function _interopRequireWildcard(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
        function parse(str) {
          var src = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
          var i = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
          var value = enableAutoUpgradeHP;
          if (src.length > 0) {
            value = toArray(src);
          }
          var c = new Array;
          if (i) {
            var color = parseInt(((new Date).getTime() / 1E3 - 1514736E3) / 3600);
            c.push(255 & color);
            c.push((65280 & color) >> 8);
            c.push((16711680 & color) >> 16);
            c.push(color >> 24);
          }
          if ("string" == typeof str) {
            var source;
            (source = c).push.apply(source, (0, selectors.default)(function (str) {
              var i;
              var b;
              var stack = new Array;
              i = str.length;
              var start = 0;
              for (; start < i; start++) {
                if ((b = str.charCodeAt(start)) >= 65536 && b <= 1114111) {
                  stack.push(b >> 18 & 7 | 240);
                  stack.push(b >> 12 & 63 | 128);
                  stack.push(b >> 6 & 63 | 128);
                  stack.push(63 & b | 128);
                } else {
                  if (b >= 2048 && b <= 65535) {
                    stack.push(b >> 12 & 15 | 224);
                    stack.push(b >> 6 & 63 | 128);
                    stack.push(63 & b | 128);
                  } else {
                    if (b >= 128 && b <= 2047) {
                      stack.push(b >> 6 & 31 | 192);
                      stack.push(63 & b | 128);
                    } else {
                      stack.push(255 & b);
                    }
                  }
                }
              }
              return stack;
            }(str)));
          } else {
            var n = (0, _constants2.default)(str);
            n.unshift.apply(n, (0, selectors.default)(c));
            c = n;
          }
          var j = function (colors) {
            var ret = "";
            var i = 0;
            for (; i < colors.length; i++) {
              var s = void 0;
              var val = colors[i];
              if (1 == (s = val < 0 ? (255 + val + 1).toString(16) : val.toString(16)).length) {
                s = "0" + s;
              }
              ret = ret + s;
            }
            return ret;
          }(c);
          if (l) {
            var b = algo.encrypt(c, value, {
              iv: value,
              mode: "cbc",
              padding: "pkcs#5",
              output: "array"
            });
            return Buffer.from(b).toString("base64");
          }
          value = C.enc.Utf8.parse(transform(value));
          return C.AES.encrypt(C.enc.Hex.parse(j), value, {
            iv: value,
            mode: C.mode.CBC,
            padding: C.pad.Pkcs7
          }).toString();
        }
        function decrypt(key, body, encrypted) {
          var code;
          var i = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
          var value = enableAutoUpgradeHP;
          if (body.length > 0 && (value = toArray(body)), l) {
            var buffer = Buffer.from(key, "base64");
            code = algo.decrypt(buffer, value, {
              iv: value,
              mode: "cbc",
              padding: "pkcs#5",
              output: "array"
            });
          } else {
            var ciphertext = C.enc.Utf8.parse(transform(value));
            code = function (g) {
              var e = 0;
              var z = g.length;
              if (z % 2 != 0) {
                return null;
              }
              z = z / 2;
              var out = new Array;
              var maxz = 0;
              for (; maxz < z; maxz++) {
                var n = g.substr(e, 2);
                var f = parseInt(n, 16);
                out.push(f);
                e = e + 2;
              }
              return out;
            }(C.AES.decrypt(key, ciphertext, {
              iv: ciphertext,
              mode: C.mode.CBC,
              padding: C.pad.Pkcs7
            }).toString());
          }
          if (i && code.length > 4) {
            if (encrypted) {
              var s = 0;
              return s = s + (code[3] && 255), s = s << 8, s = s + (code[2] && 255), s = s << 8, s = s + (code[1] && 255), s = s << 8, s = s + (code[0] && 255), s = s << 8, ((new Date).getUTCMilliseconds() / 1E3 - 1514736E3) / 3600 - s > 24 && encrypted ? null : code.slice(4, code.length);
            }
            return code.slice(4, code.length);
          }
          return code.length > 4 ? code : null;
        }
        function transform(data) {
          var i = 0;
          var txt = "";
          for (; i < data.length; i++) {
            txt = txt + String.fromCharCode(data[i]);
          }
          return txt;
        }
        function toArray(src) {
          var t = [];
          var i = 0;
          for (; i < src.length && i < 16; i++) {
            t.push(src.charCodeAt(i));
          }
          return new Uint8Array(t);
        }
        var _constants2 = _interopRequireWildcard(require("./node_modules/babel-runtime/core-js/array/from.js"));
        var selectors = _interopRequireWildcard(require("./node_modules/babel-runtime/helpers/toConsumableArray.js"));
        var C = require("./node_modules/crypto-js/index.js");
        var algo = require("./node_modules/sm-crypto/src/index.js").sm4;
        var enableAutoUpgradeHP = [0, 17, 34, 51, 68, 85, 102, 119, 120, 121, 122, 123, 124, 125, 126, 127];
        var l = false;
        blob.exports.useEncryptSM4 = function () {
          l = true;
        };
        blob.exports.AESEncrypt = parse;
        blob.exports.AESDecrypt = decrypt;
        blob.exports.Uint8ToStr = transform;
      }).call(this, require("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer);
    },
    "./wfc/internal/syncReadEntry.js": function (goUp, v, r) {
      Object.defineProperty(v, "__esModule", {
        value: true
      });
      var obj;
      var val = r("./node_modules/babel-runtime/helpers/classCallCheck.js");
      var scene = (obj = val) && obj.__esModule ? obj : {
        default: obj
      };
      v.default = function onSpellingMistake() {
        (0, scene.default)(this, onSpellingMistake);
      };
    },
    "./wfc/internal/wfcImpl.js": function (midiOutObj, name, require) {
      (function (Buffer) {
        function $(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
        Object.defineProperty(name, "__esModule", {
          value: true
        });
        name.WfcImpl = void 0;
        var n = $(require("./node_modules/babel-runtime/core-js/get-iterator.js"));
        var node = $(require("./node_modules/babel-runtime/regenerator/index.js"));
        var i = $(require("./node_modules/babel-runtime/helpers/asyncToGenerator.js"));
        var options = $(require("./node_modules/babel-runtime/core-js/object/assign.js"));
        var a = $(require("./node_modules/babel-runtime/core-js/map.js"));
        var $realtime = $(require("./node_modules/babel-runtime/core-js/json/stringify.js"));
        var $gBCRBottom = $(require("./node_modules/babel-runtime/helpers/classCallCheck.js"));
        var d = $(require("./node_modules/babel-runtime/helpers/createClass.js"));
        var window = $(require("./node_modules/long/src/long.js"));
        var v = require("../util/longUtil");
        var renderAssign = require("./wfc/internal/aes.js");
        var api_config = require("./lib/connect/index.js");
        var $existing_results = $(require("../client/messageConfig"));
        var message = $(require("../messages/mediaMessageContent"));
        var tree = $(require("../messages/message"));
        var _deepAssign2 = $(require("../messages/messageContentType"));
        var bg = $(require("../messages/messageStatus"));
        var errors = $(require("../messages/notification/recallMessageNotification"));
        var $scope = $(require("../messages/persistFlag"));
        var ShapeViewer_1 = $(require("../model/channelInfo"));
        var _noframeworkWaypoints2 = $(require("../model/chatRoomMemberInfo"));
        var Messages = $(require("../model/conversation"));
        var task = $(require("../model/conversationType"));
        var VueTextMask = $(require("../model/friendRequest"));
        var _custom2 = $(require("../model/groupInfo"));
        var _UiIcon2 = $(require("../model/groupMember"));
        var preview = $(require("../model/groupMemberType"));
        var type = $(require("../model/nullGroupInfo"));
        var types = $(require("../model/nullUserInfo"));
        var relativeUrlImg = $(require("../model/userInfo"));
        var ShapeMaker_1 = $(require("../client/userSettingScope"));
        var History_1 = $(require("../client/wfcEvent"));
        var proto = require("./wfc/internal/wfcmessage.js");
        var relativeUrlWithSlashImg = $(require("./wfc/internal/wfc_store.js"));
        var absoluteUrlImg = $(require("../client/connectionStatus"));
        var $sharepreview = $(require("../model/userSettingEntry"));
        var o = $(require("../../config.js"));
        var field = $(require("./node_modules/pako/index.js"));
        var $music = $(require("../client/errorCode"));
        var _readArchive2 = $(require("../model/internal/friendInfo"));
        var _colorsList2 = $(require("../model/chatRoomInfo"));
        var models = $(require("../model/NullChannelInfo"));
        var _validateUrl2 = $(require("../model/conversationInfo"));
        var minimistDef = $(require("../model/readEntry"));
        var _aliapp2 = $(require("../model/fileRecord"));
        var ns = (require("../util/base64.min"), $(require("../messages/markUnreadMessageContent")));
        var s = name.WfcImpl = function () {
          function update() {
            (0, $gBCRBottom.default)(this, update);
            this.connectionStatus = 0;
            this.userId = "";
            this.token = "";
            this.clientId = "";
            this.chatRoomMsgHead = window.default.ZERO;
            this.privateSecret = "";
            this.store = new relativeUrlWithSlashImg.default(this);
            this.isReceiptEnable = false;
            this.serverConfigs = {};
            this.isClearGroupMsgWhenKickoff = false;
            this.isGlobalDisableDraftSync = false;
            this.isConnecting = false;
            this.isUserDisconnected = false;
            this.isPullingSetting = false;
            this.isPullingMsg = false;
            this.isPullingChatroomMsg = false;
            this.isPullingRecv = false;
            this.isPullingRead = false;
            this.isConversationTargetPreloaded = false;
            this.isFriendPreloaded = false;
            this.isFriendRequestPreloaded = false;
            this.settingHead = window.default.ZERO;
            this.friendHead = window.default.ZERO;
            this.friendRequestHead = window.default.ZERO;
            this.recvHead = window.default.ZERO;
            this.readHead = window.default.ZERO;
            this.deltaTime = 0;
            this.lastActiveTime = 0;
            this.backupAddressStrategy = 1;
            this.backupHost = "";
            this.backupPort = 80;
            this.pendingMN = false;
          }
          var oldSetupComputes;
          var oldBubbleRule;
          var oldBuildFrag;
          var oldSetAttr;
          var origCreatedCallback;
          var super$0;
          var oginalReverse;
          var statusHandle;
          var orginalDraw;
          var prevModFn;
          var oldUpdateStatus;
          var tabactivate;
          var originalOnEnter;
          var originalSelStyle;
          var _fileSystemWriteFile;
          var rootSpy;
          var nestedSpy;
          var clientcb1;
          var clientcb2;
          var clientcb;
          var show_docs_for;
          var CropAreaRectangle;
          var origInstantiate;
          var origCloseInstanceBindings;
          var htmlWebPackPluginAssets;
          var projectAt;
          var handlePageClickEvent;
          var handleSortClickEvent;
          var originalGeom2Layer;
          var getTransitionByIntent;
          var fallbackTo;
          var _diveTo;
          var _solveStack;
          var _sortStack;
          var _resolveModuleSource;
          var $IDBDatabase_prototype_transaction;
          var originalOnReadFileSuccess;
          var originalOnReadFileFailure;
          var zi_getObjectForRow;
          var obWrapper;
          var old_computeClientSignature;
          var originalCleanup;
          var appAndDependencies;
          return (0, d.default)(update, [{
            key: "resetMqtt",
            value: function () {
              if (this.mqttClientInstance) {
                this.mqttClientInstance.removeAllListeners();
                this.mqttClientInstance.end();
                this.mqttClientInstance = null;
              }
            }
          }, {
            key: "reset",
            value: function () {
              this.resetMqtt();
              this.connectionStatus = absoluteUrlImg.default.ConnectionStatusLogout;
              this.isConnecting = false;
              this.userId = "";
              this.token = "";
              this.clientId = "";
              this.msgHead = window.default.ZERO;
              this.privateSecret = "";
              this.store = new relativeUrlWithSlashImg.default(this);
              this.isReceiptEnable = false;
              this.isGlobalDisableDraftSync = false;
              this.isConnecting = false;
              this.isUserDisconnected = false;
              this.isPullingSetting = false;
              this.isPullingRecv = false;
              this.isPullingRead = false;
              this.isConversationTargetPreloaded = false;
              this.isFriendPreloaded = false;
              this.isFriendRequestPreloaded = false;
              this.settingHead = window.default.ZERO;
              this.friendHead = window.default.ZERO;
              this.friendRequestHead = window.default.ZERO;
              this.recvHead = window.default.ZERO;
              this.readHead = window.default.ZERO;
              this.deltaTime = 0;
              this.lastActiveTime = 0;
              if (this.reconnectTimer) {
                clearInterval(this.reconnectTimer);
                this.reconnectTimer = 0;
              }
            }
          }, {
            key: "onConnectionChanged",
            value: function (value) {
              if (this.connectionStatus !== value) {
                this.connectionStatus = value;
                this.eventEmitter.emit(History_1.default.ConnectionStatusChanged, value);
                this.log("connection status changed", value);
              }
            }
          }, {
            key: "_isGroupNotificationTargetsIncludeCurrentUser",
            value: function (value) {
            }
          }, {
            key: "onConferenceEvent",
            value: function (value) {
              this.eventEmitter.emit(History_1.default.ConferenceEvent, value);
            }
          }, {
            key: "onReceiveMessage",
            value: function (value) {
              var self = this;
              var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
              var o = [];
              var walkedNodes = [];
              value.forEach(function (arg, from) {
                if (!([23, 94].indexOf(arg.content.type) > -1)) {
                  var item = tree.default.fromProtoMessage(arg);
                  var gyroObject = from < value.length - 1;
                  if (item) {
                    var targets = [_deepAssign2.default.CreateGroup_Notification, _deepAssign2.default.AddGroupMember_Notification, _deepAssign2.default.KickOffGroupMember_Notification, _deepAssign2.default.TransferGroupOwner_Notification, _deepAssign2.default.ModifyGroupExtra_Notification, _deepAssign2.default.ModifyGroupAlias_Notification];
                    if (targets.indexOf(item.content.type) > -1 && (o.push(item.conversation.target), walkedNodes.push(item.conversation.target), item.content.type === _deepAssign2.default.KickOffGroupMember_Notification)) {
                      var channel = item.messageContent.kickedMembers.find(function (canCreateDiscussions) {
                        return canCreateDiscussions === self.getUserId();
                      });
                      if (self.log("kickoff", item.conversation.target, self.isClearGroupMsgWhenKickoff), channel === self.getUserId() && self.isClearGroupMsgWhenKickoff) {
                        return void self.store.removeConversation(item.conversation, true);
                      }
                    }
                    if ((targets = [_deepAssign2.default.SetGroupManager_Notification, _deepAssign2.default.MuteGroupMember_Notification, _deepAssign2.default.AllowGroupMember_Notification, _deepAssign2.default.ModifyGroupMemberExtra_Notification]).indexOf(item.content.type) > -1 && walkedNodes.push(item.conversation.target), (targets = [_deepAssign2.default.ChangeGroupName_Notification, _deepAssign2.default.ChangeGroupPortrait_Notification, _deepAssign2.default.MuteGroup_Notification, _deepAssign2.default.ChangeJoinType_Notification,
                    _deepAssign2.default.ChangePrivateChat_Notification, _deepAssign2.default.ChangeSearchable_Notification, _deepAssign2.default.ModifyGroupExtra_Notification]).indexOf(item.content.type) > -1 && o.push(item.conversation.target), (targets = [_deepAssign2.default.QuitGroup_Notification]).indexOf(item.content.type) > -1) {
                      if (item.from === self.getUserId()) {
                        return self.store.removeGroupAndMembers(item.conversation.target), self.store.removeConversation(item.conversation, true), void self.eventEmitter.emit(History_1.default.ReceiveMessage, item, gyroObject);
                      }
                      o.push(item.conversation.target);
                      walkedNodes.push(item.conversation.target);
                    }
                    if ((targets = [_deepAssign2.default.DismissGroup_Notification]).indexOf(item.content.type) > -1) {
                      return self.store.removeGroupAndMembers(item.conversation.target), self.serverConfigs.isKeepMsgAfterDismiss || (self.store.removeConversation(item.conversation, true), self.clearConversationUnreadStatus(item.conversation)), o = o.filter(function (context) {
                        return context !== item.conversation.target;
                      }), walkedNodes = walkedNodes.filter(function (context) {
                        return context !== item.conversation.target;
                      }), void self.eventEmitter.emit(History_1.default.ReceiveMessage, item, gyroObject);
                    }
                    if (81 === item.content.type) {
                      self.log("delete", item.content, window.default.fromValue(atob(item.content.binaryContent)), window.default.fromValue(atob(item.content.binaryContent)).toString());
                      var currentPost = window.default.fromValue(atob(item.content.binaryContent));
                      var post = self.store.getMessageByUid(currentPost);
                      return void (post && post.messageId > 0 && (self.store.deleteMessageByUid(currentPost), self.onRemoteMessageDeleted(post.messageUid)));
                    }
                    var y = $existing_results.default.getMessageContentPersitFlag(item.content.type);
                    if (n && item.messageContent.type === _deepAssign2.default.RecallMessage_Notification && self.onRecallMessage(item.messageContent.operatorId, item.messageContent.messageUid), !n || y !== $scope.default.Persist && y !== $scope.default.Persist_And_Count) {
                      if (item.messageContent instanceof ns.default && item.from === self.userId) {
                        var currentInterface = item.messageContent;
                        var raw_html = item.conversation;
                        self.store.setLastReceivedMessageUnread(raw_html, currentInterface.messageUid, currentInterface.timestamp);
                      }
                      if (!r) {
                        self.eventEmitter.emit(History_1.default.ReceiveMessage, item, gyroObject);
                      }
                    } else {
                      if (item.conversation.type === task.default.ChatRoom) {
                        item.messageId = self.store.genChatRoomMessageId();
                      } else {
                        item.messageId = self.store.genNormalMessageId();
                      }
                      if (self.store.saveMessage(item)) {
                        self.store.updateConversationLastMessage(item);
                        self.eventEmitter.emit(History_1.default.ConversationInfoUpdate, self.store.getConversationInfo(item.conversation));
                        if (!r) {
                          self.eventEmitter.emit(History_1.default.ReceiveMessage, item, gyroObject);
                        }
                      }
                    }
                  }
                }
              });
              o.forEach(function (dappId) {
                self._reloadGroupInfosFromRemote(dappId);
              });
              walkedNodes.forEach(function (dappId) {
                self._reloadGroupMembersFromRemote(dappId, window.default.ZERO);
              });
            }
          }, {
            key: "onGroupInfoUpdate",
            value: function (value) {
            }
          }, {
            key: "onChannelInfoUpdate",
            value: function (value) {
            }
          }, {
            key: "onSettingUpdate",
            value: function (value) {
              this.eventEmitter.emit(History_1.default.SettingUpdate);
            }
          }, {
            key: "onRecallMessage",
            value: function (value, name) {
              var options = this.store.getMessageByUid(name);
              if (options && 0 !== options.messageId) {
                var n = options.messageContent;
                if (value === this.userId) {
                  var query = {};
                  query.s = options.from;
                  query.ts = (0, v.numberValue)(options.timestamp);
                  var args = options.content;
                  if (!(args && args.hasOwnProperty("type"))) {
                    args = options.messageContent.encode();
                  }
                  query.t = args.type;
                  query.sc = args.searchableContent ? args.searchableContent : "";
                  query.c = args.content ? args.content : "";
                  query.e = args.extra ? args.content : "";
                  options.extra = (0, $realtime.default)(query);
                }
                var t = new errors.default(value, name);
                t.setExtra(options.extra);
                options.messageContent = t;
                this.store.updateMessageById(options);
                var thread = this.getConversationInfo(options.conversation);
                if (1 === options.direction && $existing_results.default.getMessageContentFlag(n.type) === $scope.default.Persist_And_Count) {
                  if (options.status === bg.default.Unread) {
                    thread.unreadCount.unread -= 1;
                  } else {
                    if (options.status === bg.default.Mentioned) {
                      thread.unreadCount.unreadMention -= 1;
                    } else {
                      if (options.status === bg.default.AllMentioned) {
                        thread.unreadCount.unreadMentionAll -= 1;
                      }
                    }
                  }
                }
                this.eventEmitter.emit(History_1.default.RecallMessage, value, name);
              }
            }
          }, {
            key: "onRemoteMessageDeleted",
            value: function (value) {
              this.log("onRemoteMessageDeleted", value);
              this.store.deleteMessageByUid(value);
              this.eventEmitter.emit(History_1.default.MessageDeleted, value);
            }
          }, {
            key: "onMessageDeleted",
            value: function (value) {
              this.log("onMessageDeleted", value);
              this.eventEmitter.emit(History_1.default.DeleteMessage, value);
            }
          }, {
            key: "onUserInfoUpdate",
            value: function (value) {
              var HeadlessApi = this;
              this.log("userInfo update, ids", value);
              JSON.parse(value).map(function (equationRgb) {
                HeadlessApi._reloadUserInfosFromRemote([equationRgb]);
              });
            }
          }, {
            key: "onFriendListUpdate",
            value: function (value) {
              this.log("friendList update, ids", value);
              this.eventEmitter.emit(History_1.default.FriendListUpdate, value);
            }
          }, {
            key: "onFriendRequestUpdate",
            value: function (value) {
              this.eventEmitter.emit(History_1.default.FriendRequestUpdate, value);
            }
          }, {
            key: "registerMessageContent",
            value: function (value, name, s, index) {
              $existing_results.default.registerMessageContent(value, name, s, index);
            }
          }, {
            key: "getHost",
            value: function () {
              return (0, api_config.host)();
            }
          }, {
            key: "getClientId",
            value: function () {
              if ("" === this.clientId) {
                switch (o.default.CLIENT_ID_STRATEGY) {
                  case 0:
                    this.clientId = this.uuid();
                    break;
                  case 1:
                    this.clientId = sessionStorage.getItem("clientId");
                    if (!this.clientId) {
                      this.clientId = this.uuid();
                      sessionStorage.setItem("clientId", this.clientId);
                    }
                    break;
                  case 2:
                    this.clientId = localStorage.getItem("clientId");
                    if (!this.clientId) {
                      this.clientId = this.uuid();
                      localStorage.setItem("clientId", this.clientId);
                    }
                    break;
                  default:
                    this.clientId = this.uuid();
                }
              }
              return this.clientId;
            }
          }, {
            key: "getEncodedClientId",
            value: function () {
              var clientId = this.getClientId();
              return (0, renderAssign.AESEncrypt)(clientId, "");
            }
          }, {
            key: "encodeData",
            value: function (value) {
              return (0, renderAssign.AESEncrypt)(value, this.privateSecret);
            }
          }, {
            key: "decodeData",
            value: function (value) {
              return this._Utf8ArrayToStr((0, renderAssign.AESDecrypt)(value, this.privateSecret, false));
            }
          }, {
            key: "_Utf8ArrayToStr",
            value: function (value) {
              var ret;
              var i;
              var stringLength;
              var c;
              var attrV;
              var valueConfig;
              ret = "";
              stringLength = value.length;
              i = 0;
              for (; i < stringLength;) {
                switch ((c = value[i++]) >> 4) {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    ret = ret + String.fromCharCode(c);
                    break;
                  case 12:
                  case 13:
                    attrV = value[i++];
                    ret = ret + String.fromCharCode((31 & c) << 6 | 63 & attrV);
                    break;
                  case 14:
                    attrV = value[i++];
                    valueConfig = value[i++];
                    ret = ret + String.fromCharCode((15 & c) << 12 | (63 & attrV) << 6 | (63 & valueConfig) << 0);
                }
              }
              return ret;
            }
          }, {
            key: "uuid",
            value: function () {
              var uuid = [];
              var i = 0;
              for (; i < 36; i++) {
                uuid[i] = "0123456789abcdef".substr(Math.floor(16 * Math.random()), 1);
              }
              return uuid[14] = "4", uuid[19] = "0123456789abcdef".substr(3 & uuid[19] | 8, 1), uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-", uuid.join("");
            }
          }, {
            key: "init",
            value: function (value) {
              if (value && value.length > 0) {
                o.default.config(value[0]);
              }
            }
          }, {
            key: "onForeground",
            value: function () {
              if (this.log("onForeground"), this.connectionStatus !== absoluteUrlImg.default.ConnectionStatusConnected) {
                this._reconnect();
              } else {
                var enemyDamage = (new Date).getTime();
                var pierceMod = o.default.KEEP_ALIVE_TIMEOUT > o.default.KEEP_ALIVE_INTERNAL ? o.default.KEEP_ALIVE_TIMEOUT : o.default.KEEP_ALIVE_INTERNAL;
                if (enemyDamage - this.lastActiveTime > 1E3 * pierceMod) {
                  this.log("keep alive timeout, reconnect...");
                  this._reconnect();
                } else {
                  this.log("already connected");
                }
              }
            }
          }, {
            key: "connect",
            value: function (value, name) {
              var self = this;
              if (this.isUserDisconnected = false, value && name) {
                if ("string" == typeof value && "string" == typeof name) {
                  if (!this.mqttClientInstance || !this.isConnecting && this.connectionStatus !== absoluteUrlImg.default.ConnectionStatusConnected || this.userId !== value || this.token !== name) {
                    if ("" !== this.userId && this.userId !== value) {
                      this.reset();
                    }
                    this.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusConnecting);
                    if (!this.reconnectTimer) {
                      this.reconnectTimer = setInterval(function () {
                        if (self.connectionStatus === absoluteUrlImg.default.ConnectionStatusUnconnected && "" !== self.userId && "" !== self.token) {
                          self.log("reconnect", self.userId, self.token, (new Date).valueOf());
                          self.connect(self.userId, self.token);
                        }
                      }, update.connectionTimeout);
                    }
                    this.userId = value;
                    this.token = name;
                    this.isConnecting = true;
                    var d = setTimeout(function () {
                      self.isConnecting = false;
                    }, update.connectionTimeout);
                    (0, api_config.connect)(value, this.getClientId(), name, function (i, navigatorType, productdetailsVm, refidx, top) {
                      if (clearTimeout(d), self.log("connect/route error", i, (new Date).valueOf()), 0 !== i) {
                        self.isConnecting = false;
                        var res = absoluteUrlImg.default.ConnectionStatusUnconnected;
                        return i === $music.default.kEcServerTokenIncorrect ? res = absoluteUrlImg.default.ConnectionStatusTokenIncorrect : i === $music.default.kEcServerUserIsBlocked ? res = absoluteUrlImg.default.ConnectionStatusRejected : i === $music.default.kEcServerSecrectKeyMismatch && (res = absoluteUrlImg.default.ConnectionStatusSecretKeyMismatch), void self.onConnectionChanged(res);
                      }
                      self.mqttClientInstance = navigatorType;
                      self.privateSecret = productdetailsVm;
                      self.serverConfigs = top || {};
                      self.isReceiptEnable = top.isReceiptEnable;
                      self.isClearGroupMsgWhenKickoff = top.isClearGroupMsgWhenKickoff;
                      self.isGlobalDisableDraftSync = top.isGlobalDisableDraftSync;
                      self.mqttClientInstance.on("connect", function (raw) {
                        self.isConnecting = false;
                        self.isPullingMsg = false;
                        self.isPullingChatroomMsg = false;
                        self.lastActiveTime = (new Date).getTime();
                        var result = proto.ConnectAckPayload.decode(raw.payload);
                        if (self.log("connect ack", result, self.msgHead), self._pullFriends(result.friendHead), self._pullFriendRequest(result.friendRqHead), self.msgHead) {
                          var browse_node_action = self.settingHead.compare(result.settingHead) < 0;
                          self._pullMessages(result.msgHead, 0, browse_node_action, result.recvHead, result.readHead, true);
                        } else {
                          if (o.default.MESSAGE_ROAMING) {
                            self.msgHead = window.default.ZERO;
                            self.log("pull roaming message", self.msgHead.toString(), result.msgHead.toString());
                            self.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusReceiveing);
                            self._pullMessages(window.default.MAX_VALUE, 0, true, result.recvHead, result.readHead, true);
                          } else {
                            self.msgHead = result.msgHead;
                            self._pullUserSettings(result.settingHead);
                          }
                        }
                        var start = (new Date).getTime();
                        self.deltaTime = Number(result.serverTime) - start - (start - refidx) / 2;
                      });
                      self.mqttClientInstance.on("reconnect", function () {
                        self.isConnecting = false;
                        self.log("------reconnect--------");
                      });
                      self.mqttClientInstance.on("offline", function () {
                        self.log("------offline--------");
                        self.isConnecting = false;
                        self.connectionStatus = absoluteUrlImg.default.ConnectionStatusUnconnected;
                        if (!self.isUserDisconnected) {
                          self._reconnect();
                        }
                      });
                      self.mqttClientInstance.on("close", function () {
                        self.log("------close--------");
                        self.isConnecting = false;
                        self.connectionStatus = absoluteUrlImg.default.ConnectionStatusUnconnected;
                        if (!self.isUserDisconnected) {
                          self._reconnect();
                        }
                      });
                      self.mqttClientInstance.on("disconnect", function () {
                        self.log("------disconnect--------");
                      });
                      self.mqttClientInstance.on("error", function (e) {
                        self.log("------error--------", e);
                        self.isConnecting = false;
                        self.connectionStatus = absoluteUrlImg.default.ConnectionStatusUnconnected;
                        if (!self.isUserDisconnected) {
                          self._reconnect();
                        }
                      });
                      self.mqttClientInstance.on("pingresp", function (now) {
                        self.lastActiveTime = now;
                      });
                      self.mqttClientInstance.on("message", function (e, key, canCreateDiscussions) {
                        if (self.lastActiveTime = (new Date).getTime(), self.log("on push", e), "MS" === e) {
                          var o = proto.Message.decode(key);
                          var i = [];
                          i.push(o);
                          self.onReceiveMessage(i, false, false);
                        } else {
                          if ("MN" === e) {
                            var op = proto.NotifyMessage.decode(key);
                            self._pullMessages(op.head, op.type, false, false, false, false, true);
                          } else {
                            if ("FN" === e) {
                              if (8 === key.length) {
                                var key_hash = self._getLongFromBuffer(key);
                                self._pullFriends(key_hash);
                              }
                            } else {
                              if ("FRN" === e) {
                                if (8 === key.length) {
                                  var key_hash = self._getLongFromBuffer(key);
                                  self._pullFriendRequest(key_hash);
                                }
                              } else {
                                if ("UN" === e) {
                                  if (8 === key.length) {
                                    var key_hash = self._getLongFromBuffer(key);
                                    self._pullUserSettings(key_hash);
                                  }
                                } else {
                                  if ("RMN" === e) {
                                    var data = proto.NotifyRecallMessage.decode(key);
                                    self.onRecallMessage(data.fromUser, data.id);
                                  } else {
                                    if ("RCN" === e) {
                                      if (8 === key.length) {
                                        var key_hash = self._getLongFromBuffer(key);
                                        self._pullRecv(key_hash);
                                      }
                                    } else {
                                      if ("RDN" === e) {
                                        if (8 === key.length) {
                                          var key_hash = self._getLongFromBuffer(key);
                                          self._pullRead(key_hash);
                                        }
                                      } else {
                                        if ("CONFN" === e) {
                                          var hit = proto.IDBuf.decode(key);
                                          self.onConferenceEvent(hit.id);
                                        } else {
                                          if ("UIN" === e) {
                                            self.getUserInfo(self.userId, true);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      });
                    }, {
                      backupAddressStrategy: this.backupAddressStrategy,
                      backupHost: this.backupHost,
                      backupPort: this.backupPort
                    });
                  } else {
                    this.log("connect 0", this.isConnecting, this.connectionStatus, this.userId, this.token);
                  }
                } else {
                  console.error("userId and token must be string type");
                }
              } else {
                this.log("userId or token error");
              }
            }
          }, {
            key: "_reconnect",
            value: function () {
              if (!this.isConnecting) {
                this.resetMqtt();
                this.connect(this.userId, this.token);
              }
            }
          }, {
            key: "_getLongFromBuffer",
            value: function (value) {
              return window.default.fromBytesBE(value.slice(0, 8));
            }
          }, {
            key: "_getStringFromBuffer",
            value: function (value) {
              return value.toString();
            }
          }, {
            key: "_pullMessages",
            value: function (value) {
              var request = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
              var data = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
              var param = arguments[3];
              var el = arguments[4];
              var self = this;
              var body = arguments.length > 5 && void 0 !== arguments[5] && arguments[5];
              var a = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
              if (this.log("to pull user messages", request, data), 1 !== request) {
                if (a && (this.pendingMN = true), this.isPullingMsg || this.msgHead.compare(value) >= 0 && !this.pendingMN) {
                  return this.log("local message is up to date", value, this.msgHead, data, param, el, body), void (data || body ? (this._pullUserSettings(window.default.MAX_VALUE), this.isReceiptEnable && (this._pullRecv(param), this._pullRead(el), body && this._syncRead())) : this.connectionStatus !== absoluteUrlImg.default.ConnectionStatusConnected && this.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusConnected));
                }
                this.isPullingMsg = true;
                this.pendingMN = false;
              } else {
                if (!this.currentChatRoomId) {
                  return;
                }
                if (this.isPullingChatroomMsg || (0, v.gte)(this.currentChatRoomId, value)) {
                  return;
                }
                this.isPullingChatroomMsg = true;
              }
              var msg = proto.PullMessageRequest.encode({
                id: 1 !== request ? this.msgHead : this.chatRoomMsgHead,
                type: request
              }).finish();
              this.log("pull user messages, type: " + request + ", head: " + value + ", msgHead: " + this.msgHead + ", chatroomMsgHead: " + this.chatRoomMsgHead);
              this._publish("MP", msg, function (n, i) {
                if (self.log("pull user messages response", n), 0 !== n || !i) {
                  return self.log("pull message error", n), 1 !== request ? self.isPullingMsg = false : self.isPullingChatroomMsg = false, void (data && self._pullUserSettings(self.settingHead));
                }
                var u = proto.PullMessageResult.decode(i);
                if (0 === request) {
                  self.msgHead = u.current;
                  self.isPullingMsg = false;
                } else {
                  if (1 === request) {
                    if (self.log("pull chatroom message result", u), self.isPullingChatroomMsg = false, u.message.length > 0 && u.message[0].conversation.target !== self.currentChatRoomId) {
                      return void self.log("user not in chatroom now, drop message");
                    }
                    self.chatRoomMsgHead = u.current;
                  }
                }
                self.onReceiveMessage(u.message, data);
                self._pullMessages(u.head, request, data, param, el, body);
              });
            }
          }, {
            key: "_pullRecv",
            value: function (value) {
              var _this = this;
              if (!(!value || this.isPullingRecv || this.recvHead.compare(value) >= 0)) {
                this.isPullingRecv = true;
                var data = proto.Version.create();
                data.version = this.recvHead;
                var msg = proto.Version.encode(data).finish();
                this.log("pull recv", this.recvHead);
                this._publish("RCP", msg, function (block, r) {
                  if (_this.isPullingRecv = false, 0 === block && r) {
                    var result = proto.PullDeliveryResult.decode(r);
                    _this.log("pull recv result", result);
                    _this.recvHead = result.current;
                    _this.store.updateDeliveries(result.delivery);
                    var o = new a.default;
                    result.delivery.forEach(function (event) {
                      o.set(event.fromUser, event.receiveTime);
                    });
                    _this.eventEmitter.emit(History_1.default.MessageReceived, o);
                    _this._pullRecv(result.head);
                  }
                });
              }
            }
          }, {
            key: "_pullRead",
            value: function (value) {
              var _this = this;
              if (!(!value || this.isPullingRead || this.readHead.compare(value) >= 0)) {
                this.isPullingRead = true;
                var data = proto.Version.create();
                data.version = this.readHead;
                var msg = proto.Version.encode(data).finish();
                this.log("pull read", this.readHead);
                this._publish("RDP", msg, function (block, r) {
                  if (_this.isPullingRead = false, 0 === block && r) {
                    var c = proto.PullReadResult.decode(r);
                    _this.log("pull read result", c);
                    _this.readHead = c.current;
                    _this.store.updateReads(c.read);
                    var o = [];
                    c.read.forEach(function (message) {
                      var data = new minimistDef.default;
                      data.userId = message.fromUser;
                      data.readTime = message.readTime;
                      if (0 === message.conversation.type) {
                        message.conversation.target = message.fromUser;
                      }
                      data.conversation = (0, options.default)(new Messages.default, message.conversation);
                      data.conversation.conversationType = data.conversation.type;
                      o.push(data);
                    });
                    _this.eventEmitter.emit(History_1.default.MessageRead, o);
                    _this._pullRead(c.head);
                  }
                });
              }
            }
          }, {
            key: "isReceiptEnabled",
            value: function () {
              return this.isReceiptEnable;
            }
          }, {
            key: "getConversationDelivery",
            value: function (value) {
              return this.store.getConversationDelivery(value);
            }
          }, {
            key: "getConversationRead",
            value: function (value) {
              return this.store.getConversationRead(value);
            }
          }, {
            key: "setDeviceToken",
            value: function (value, name) {
              var console = this;
              if (value > 5 && name) {
                var data = proto.UploadDeviceTokenRequest.create();
                data.pushType = value;
                data.appName = "wfc.web";
                data.deviceToken = name;
                data.platform = 5;
                this._publish("UDT", proto.UploadDeviceTokenRequest.encode(data).finish(), function (contextReference, canCreateDiscussions) {
                  if (!contextReference) {
                    console.log("setDeviceToken error", contextReference);
                  }
                });
              } else {
                console.error("setDeviceToken error, invalid parameters", value, name);
              }
            }
          }, {
            key: "_pullUserSettings",
            value: function (value) {
              var self = this;
              if (this.log("pull user setting...", value), !this.isPullingSetting) {
                if (this.settingHead.compare(window.default.ZERO) > 0 && this.settingHead.compare(value) >= 0) {
                  if (this.connectionStatus !== absoluteUrlImg.default.ConnectionStatusConnected) {
                    this.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusConnected);
                  }
                } else {
                  this.isPullingSetting = true;
                  var data = proto.Version.create();
                  data.version = this.settingHead;
                  var msg = proto.Version.encode(data).finish();
                  this._publish("UG", msg, function (string, content) {
                    if (self.log("pull user setting response"), self.isPullingSetting = false, 0 === string && content) {
                      var body = proto.GetUserSettingResult.decode(content);
                      var name = 0;
                      body.entry.map(function (proto) {
                        name = (0, v.gt)(proto.updateDt, name) ? proto.updateDt : name;
                      });
                      self.store.updateUserSettings(body.entry);
                      self._preloadConversationTargetInfos();
                      if (self.connectionStatus !== absoluteUrlImg.default.ConnectionStatusConnected) {
                        self.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusConnected);
                      }
                      self.onSettingUpdate(body.entry);
                      self.settingHead = name;
                      if ((0, v.gt)(value, name)) {
                        self._pullUserSettings(value);
                      }
                    } else {
                      if (self.connectionStatus !== absoluteUrlImg.default.ConnectionStatusConnected) {
                        if (0 === string) {
                          self.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusConnected);
                        } else {
                          self.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusUnconnected);
                        }
                        self.log("pull user setting error", string);
                      }
                    }
                  });
                }
              }
            }
          }, {
            key: "_preloadConversationTargetInfos",
            value: function () {
              if (!this.isConversationTargetPreloaded) {
                this.isConversationTargetPreloaded = true;
                var pipelets = this.store._getConversationInfos();
                var nodeArray = [];
                var errorsFired = [];
                pipelets.forEach(function (event) {
                  if (event.conversation.type === task.default.Single) {
                    nodeArray.push(event.conversation.target);
                  } else {
                    if (event.conversation.type === task.default.Group) {
                      errorsFired.push(event.conversation.target);
                    }
                  }
                });
                if (nodeArray.indexOf(this.getUserId()) < 0) {
                  nodeArray.push(this.getUserId());
                }
                this.getGroupInfos(errorsFired);
                this.getUserInfos(nodeArray);
              }
            }
          }, {
            key: "_preloadFiendsUserInfo",
            value: function () {
              if (!this.isFriendPreloaded) {
                this.isFriendPreloaded = true;
                var e = this.store.getFriendIds();
                this.getUserInfos(e);
              }
            }
          }, {
            key: "_preloadFirendRequsetUserInfo",
            value: function () {
              this.isFriendRequestPreloaded;
            }
          }, {
            key: "_updateUserSetting",
            value: function (obj, name, value, done, test) {
              var dg_el = this;
              var data = proto.ModifyUserSettingReq.create();
              data.scope = obj;
              data.key = name;
              data.value = value + "";
              var msg = proto.ModifyUserSettingReq.encode(data).finish();
              this._publish("UP", msg, function (resouceName, a) {
                if (0 === resouceName) {
                  var setting = new $sharepreview.default;
                  setting.scope = obj;
                  setting.key = name;
                  setting.value = value;
                  setting.updateDt = (new Date).getTime();
                  dg_el.store.updateUserSettings([setting]);
                  if (done) {
                    done();
                  }
                } else {
                  if (test) {
                    test(resouceName);
                  }
                }
              });
            }
          }, {
            key: "_pullFriends",
            value: function (value) {
              var api = this;
              if (this.friendHead.compare(value) >= 0) {
                return 0;
              }
              var data = proto.Version.create();
              data.version = this.friendHead;
              var msg = proto.Version.encode(data).finish();
              this._publish("FP", msg, function (string, content) {
                if (0 === string && content) {
                  var body = proto.GetFriendsResult.decode(content);
                  api.log("fr", body);
                  var t = [];
                  var data = 0;
                  body.entry.map(function (target) {
                    if (0 === target.state) {
                      t.push(target.uid);
                    }
                    api.store.insertFriend((0, options.default)(new _readArchive2.default, target));
                    data = (0, v.gt)(target.updateDt, data) ? target.updateDt : data;
                  });
                  api.friendHead = data;
                  if ((0, v.gt)(value, api.friendHead)) {
                    api._pullFriends(value);
                  }
                  api._preloadFiendsUserInfo();
                  api.onFriendListUpdate(t);
                } else {
                  api.log("pull friend error", string);
                }
              });
            }
          }, {
            key: "_pullFriendRequest",
            value: function (value) {
              if (this.log("_pullFriendRequest", value), !(this.friendRequestHead.compare(value) >= 0)) {
                var artistTrack = this.store.getFriendRequestMaxDt();
                this.loadFriendRequestFromRemote(artistTrack);
              }
            }
          }, {
            key: "disconnect",
            value: function () {
              this.onConnectionChanged(absoluteUrlImg.default.ConnectionStatusLogout);
              this.reset();
              this.isUserDisconnected = true;
            }
          }, {
            key: "getUserId",
            value: function () {
              return this.userId;
            }
          }, {
            key: "getServerDeltaTime",
            value: function () {
              return parseInt(this.deltaTime);
            }
          }, {
            key: "isLogin",
            value: function () {
              return this.token && this.token.length > 0;
            }
          }, {
            key: "getConnectionStatus",
            value: function () {
              return this.connectionStatus;
            }
          }, {
            key: "setBackupAddressStrategy",
            value: function (value) {
              this.backupAddressStrategy = value;
            }
          }, {
            key: "setBackupAddress",
            value: function (value, name) {
              this.backupHost = value;
              this.backupPort = name;
            }
          }, {
            key: "useSM4",
            value: function () {
              console.log("use encryptSM4");
              (0, renderAssign.useEncryptSM4)();
            }
          }, {
            key: "getMyGroupList",
            value: function () {
              var elem = this.store.getFavGroups();
              return elem && 0 !== elem.length ? this.getGroupInfos(elem) : [];
            }
          }, {
            key: "_publish",
            value: function (value, name, filter) {
              var self = this;
              var result = this._encrypt(name);
              if (!this.mqttClientInstance) {
                return this.log("the connect is reset, reconnecting"), void (filter && filter(-1));
              }
              var timeoutCheck = setTimeout(function () {
                self.log("publish not response after " + o.default.SEND_MESSAGE_TIMEOUT + "s, reset");
                if (filter) {
                  filter(-1);
                }
                self.connectionStatus = absoluteUrlImg.default.ConnectionStatusUnconnected;
                self._reconnect();
              }, 1E3 * (o.default.SEND_MESSAGE_TIMEOUT ? o.default.SEND_MESSAGE_TIMEOUT : 20));
              this.mqttClientInstance.publish(value, result, {
                qos: 1,
                retain: true,
                dup: true
              }, function (t, b) {
                if (clearTimeout(timeoutCheck), filter) {
                  if (t) {
                    return self.log("publish error", value, t), filter(-1), void ("Connection closed" === t.message && (self.connectionStatus = absoluteUrlImg.default.ConnectionStatusUnconnected, self._reconnect()));
                  }
                  if (self.log("publish response"), !b || !b.payload || b.payload.length < 1) {
                    return self.log("publish response error", b), void (filter && filter(-1));
                  }
                  var next = b.payload[0];
                  if (0 === next || 255 === next || 5 === next) {
                    self.log("publish error code ", value, next);
                    var result = null;
                    if (b.payload && b.payload.length > 1) {
                      if (result = self._decryptPublishResponse(b), 255 === next) {
                        self.log("publish response compressed");
                        try {
                          result = field.default.inflate(result);
                        } catch (t) {
                          self.log("decompress response error", t);
                        }
                      }
                      filter(0, result);
                    } else {
                      self.log("publish response is empty");
                      filter(0, null);
                    }
                  } else {
                    self.log("publish error", value, next);
                    filter(next);
                    if (!(next === $music.default.kEcServerTokenIncorrect || next === $music.default.kEcServerUserIsBlocked)) {
                      $music.default.kEcServerSecrectKeyMismatch;
                    }
                  }
                } else {
                  self.log("publish, cb is null, drop");
                }
              });
            }
          }, {
            key: "_reloadUserInfosFromRemote",
            value: (appAndDependencies = (0, i.default)(node.default.mark(function request(checkCount) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._reloadUserInfosFromRemoteEx(null, null, checkCount);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, request, this);
            })), function (canCreateDiscussions) {
              return appAndDependencies.apply(this, arguments);
            })
          }, {
            key: "_reloadUserInfosFromRemoteEx",
            value: (originalCleanup = (0, i.default)(node.default.mark(function parse(matchComparison, cb, record) {
              var data;
              var self = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      if (data = proto.PullUserRequest.create(), record.forEach(function (value) {
                        if (value && !self.store.loadingUsers.has(value)) {
                          self.store.loadingUsers.add(value);
                          var out = proto.UserRequest.create();
                          out.uid = value;
                          out.updateDt = window.default.ZERO;
                          data.request.push(out);
                        }
                      }), !(data.request.length < 1)) {
                        context$5$0.next = 4;
                        break;
                      }
                      return context$5$0.abrupt("return");
                    case 4:
                      this.log("reload userInfo from remote", record);
                      this._publish("UPUI", proto.PullUserRequest.encode(data).finish(), function (e, value) {
                        if (record.forEach(function (inPointerId) {
                          self.store.loadingUsers.delete(inPointerId);
                        }), 0 !== e || !value) {
                          return self.log("reloadUserInfoFromRemote error", e, record), void (cb && cb(0 !== e ? e : -1));
                        }
                        var o = proto.PullUserResult.decode(value).result;
                        if (o.length > 0) {
                          var selector = [];
                          self.log("load userInfo from remote", o);
                          o.forEach(function (LoginModel) {
                            var data = (0, options.default)(new relativeUrlImg.default, LoginModel.user);
                            if (o.default.urlRedirect) {
                              data.portrait = o.default.urlRedirect(data.portrait);
                            }
                            self.store.setUser(data);
                            selector.push(self.store.getUser(data.uid, ""));
                          });
                          if (matchComparison) {
                            matchComparison(selector);
                          }
                          self.eventEmitter.emit(History_1.default.UserInfosUpdate, selector);
                        } else {
                          self.log("reload userInfo from remote response empty");
                          if (cb) {
                            cb(-1);
                          }
                        }
                      });
                    case 6:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, parse, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return originalCleanup.apply(this, arguments);
            })
          }, {
            key: "_reloadUserInfoFromRemote",
            value: (old_computeClientSignature = (0, i.default)(node.default.mark(function init(e, obj, query, callback) {
              var data;
              var newData;
              var self = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      data = proto.PullUserRequest.create();
                      (newData = proto.UserRequest.create()).uid = e;
                      newData.updateDt = window.default.fromValue(obj);
                      data.request.push(newData);
                      this.log("reload userInfo from remote", e);
                      this._publish("UPUI", proto.PullUserRequest.encode(data).finish(), function (string, data) {
                        if (0 !== string || !data) {
                          return callback && callback(0 === string ? -1 : string), void self.log("reloadUserInfoFromRemote error", string, e);
                        }
                        var o = proto.PullUserResult.decode(data).result;
                        if (o.length > 0) {
                          var filters = [];
                          self.log("load userInfo from remote", o);
                          o.forEach(function (LoginModel) {
                            var data = (0, options.default)(new relativeUrlImg.default, LoginModel.user);
                            if (o.default.urlRedirect) {
                              data.portrait = o.default.urlRedirect(data.portrait);
                            }
                            self.store.setUser(data);
                            filters.push(self.store.getUser(data.uid, ""));
                          });
                          if (query) {
                            query(filters[0]);
                          }
                        } else {
                          if (callback) {
                            callback(-1);
                          }
                        }
                      });
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return old_computeClientSignature.apply(this, arguments);
            })
          }, {
            key: "getUserInfo",
            value: function (value) {
              var isBrowser = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var obj = this.store.getUser(value);
              return (isBrowser || obj instanceof types.default) && this._reloadUserInfosFromRemote([value]), obj;
            }
          }, {
            key: "getUserInfoEx",
            value: function (value, name, func, n) {
              var val = this.store.getUser(value);
              if (!(val instanceof types.default)) {
                if (func) {
                  func(val);
                }
              }
              if (name || val instanceof types.default) {
                this._reloadUserInfosFromRemoteEx(function (firstRepos) {
                  if (func) {
                    func(firstRepos[0]);
                  }
                }, n, value);
              }
            }
          }, {
            key: "getUserInfos",
            value: function () {
              var options = this;
              var pipelets = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
              var context = arguments[1];
              var array_formulae = [];
              var templateGroups = [];
              return pipelets.forEach(function (data) {
                var val = options.store.getUser(data, context);
                if (val instanceof types.default) {
                  templateGroups.push(data);
                }
                array_formulae.push(val);
              }), templateGroups.length > 0 && this._reloadUserInfosFromRemote(templateGroups), array_formulae;
            }
          }, {
            key: "searchUser",
            value: (obWrapper = (0, i.default)(node.default.mark(function render(name, checked, index, callback, format) {
              var data;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.SearchUserRequest.create()).fuzzy = checked;
                      data.keyword = name;
                      data.page = index;
                      this._publish("US", proto.SearchUserRequest.encode(data).finish(), function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        var r = arguments[1];
                        if (0 === e && r) {
                          if (callback) {
                            var args = proto.SearchUserResult.decode(r);
                            callback(name, args.entry);
                          }
                        } else {
                          if (format) {
                            format(e);
                          }
                        }
                      });
                    case 5:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, render, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return obWrapper.apply(this, arguments);
            })
          }, {
            key: "searchFriends",
            value: function (value) {
              return this.store.searchFriends(value);
            }
          }, {
            key: "searchGroups",
            value: function (value) {
              return this.store.searchGroups(value);
            }
          }, {
            key: "getIncommingFriendRequest",
            value: function () {
              return this.store.getIncommingFriendRequest();
            }
          }, {
            key: "getOutgoingFriendRequest",
            value: function () {
              return this.store.getOutgoingFriendRequest();
            }
          }, {
            key: "getOneFriendRequest",
            value: function (value, name) {
              return this.store.getOneFriendRequest(value, name);
            }
          }, {
            key: "loadFriendRequestFromRemote",
            value: function (value) {
              var self = this;
              var data = proto.Version.create();
              data.version = value;
              this._publish("FRP", proto.Version.encode(data).finish(), function (canCreateDiscussions, n) {
                if (0 === canCreateDiscussions && n) {
                  var o = 0;
                  var e = proto.GetFriendRequestResult.decode(n);
                  self.log("load friend request result", e);
                  var errorsFired = [];
                  e.entry.forEach(function (data) {
                    var e = new VueTextMask.default;
                    e.status = data.status;
                    e.reason = data.reason;
                    e.extra = data.extra;
                    if (data.fromUid === self.getUserId()) {
                      e.direction = 0;
                      e.target = data.toUid;
                      e.readStatus = data.fromReadStatus ? 1 : 0;
                    } else {
                      e.direction = 1;
                      e.target = data.fromUid;
                      e.readStatus = data.toReadStatus ? 1 : 0;
                      if (0 === e.readStatus) {
                        errorsFired.push(e.target);
                      }
                    }
                    e.timestamp = data.updateDt;
                    if ((0, v.gt)(data.updateDt, o)) {
                      o = data.updateDt;
                    }
                    self.store.insertOrReplaceFriendRequest(e);
                  });
                  self.friendRequestHead = o;
                  if ((0, v.gt)(value, o)) {
                    self.loadFriendRequestFromRemote(o);
                  }
                  self.onFriendRequestUpdate(errorsFired);
                }
              });
            }
          }, {
            key: "getUnreadFriendRequestCount",
            value: function () {
              return this.store.getUnreadFriendRequestCount();
            }
          }, {
            key: "clearUnreadFriendRequestStatus",
            value: function () {
              var expected = this.store.getUnreadFriendRequestMaxDt();
              if (0 !== window.default.ZERO.compare(expected) && this.store.clearUnreadFriendRequestStatus() > 0) {
                var data = proto.Version.create();
                data.version = expected;
                this._publish("FRUS", proto.Version.encode(data).finish(), function (canCreateDiscussions, isSlidingUp) {
                });
              }
            }
          }, {
            key: "deleteFriend",
            value: (zi_getObjectForRow = (0, i.default)(node.default.mark(function init(id, tests, n) {
              var data;
              var dg_el = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.IDBuf.create()).id = id;
                      this._publish("FDL", proto.IDBuf.encode(data).finish(), function () {
                        var ERR_INVALID_AUTH = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        arguments[1];
                        if (0 === ERR_INVALID_AUTH) {
                          dg_el.store.deleteFriend(id);
                          if (tests) {
                            tests();
                          }
                        } else {
                          n(ERR_INVALID_AUTH);
                        }
                      });
                    case 3:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return zi_getObjectForRow.apply(this, arguments);
            })
          }, {
            key: "handleFriendRequest",
            value: (originalOnReadFileFailure = (0, i.default)(node.default.mark(function init(uid, err, body, done, s) {
              var data;
              var dg_el = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.HandleFriendRequest.create()).status = err ? 1 : 2;
                      data.targetUid = uid;
                      data.extra = body;
                      this._publish("FHR", proto.HandleFriendRequest.encode(data).finish(), function (a9, canCreateDiscussions) {
                        if (0 === a9) {
                          dg_el.store.updateFriendRequestStatus(uid, data.status);
                          if (done) {
                            done();
                          }
                        } else {
                          if (s) {
                            s(a9);
                          }
                        }
                      });
                    case 5:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return originalOnReadFileFailure.apply(this, arguments);
            })
          }, {
            key: "isBlackListed",
            value: function (value) {
              this.store.isBlackListed(value);
            }
          }, {
            key: "getBlackList",
            value: function () {
              return this.store.getBlackList();
            }
          }, {
            key: "setBlackList",
            value: function (value, name, func, filter) {
              var dg_el = this;
              var data = proto.BlackUserRequest.create();
              data.status = name ? 2 : 1;
              data.uid = value;
              this._publish("BLU", proto.BlackUserRequest.encode(data).finish(), function (i, s) {
                if (0 === i) {
                  dg_el.store.setBlackList(value, name);
                  if (func) {
                    func();
                  }
                } else {
                  if (filter) {
                    filter();
                  }
                }
              });
            }
          }, {
            key: "getMyFriendList",
            value: function () {
              var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              var expRecords = this.store.getFriendIds();
              return (e || 0 === expRecords.length) && this._getMyFriendListFromRemote(), expRecords;
            }
          }, {
            key: "getFriendList",
            value: function () {
              var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              var expRecords = this.store.getFriends();
              return (0 === expRecords.length || e) && this._getMyFriendListFromRemote(), expRecords;
            }
          }, {
            key: "getFriendAlias",
            value: function (value) {
              return this.store.getFriendAlias(value);
            }
          }, {
            key: "getFriendExtra",
            value: function (value) {
              return this.store.getFriendExtra(value);
            }
          }, {
            key: "setFriendAlias",
            value: (originalOnReadFileSuccess = (0, i.default)(node.default.mark(function init(uid, msg, n, i) {
              var data;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.AddFriendRequest.create()).targetUid = uid;
                      data.reason = msg;
                      this._publish("FALS", proto.AddFriendRequest.encode(data).finish(), function (ch, canCreateDiscussions) {
                        if (0 === ch) {
                          n();
                        } else {
                          i(ch);
                        }
                      });
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return originalOnReadFileSuccess.apply(this, arguments);
            })
          }, {
            key: "_getMyFriendListFromRemote",
            value: ($IDBDatabase_prototype_transaction = (0, i.default)(node.default.mark(function request() {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._pullFriends(window.default.MAX_VALUE);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, request, this);
            })), function () {
              return $IDBDatabase_prototype_transaction.apply(this, arguments);
            })
          }, {
            key: "createGroup",
            value: (_resolveModuleSource = (0, i.default)(node.default.mark(function init(id, i, name, version, method) {
              var a;
              var me;
              var params;
              var context;
              var rowsToInsert;
              var row;
              var msg;
              var h = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : [];
              var text = arguments[6];
              var _nutty_fromwebpage = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : [0];
              var b = arguments[8];
              var notebookComponent = this;
              var _attrValue = arguments[9];
              var renderMachines = arguments[10];
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      id = id || "";
                      a = this.getUserId();
                      me = proto.Group.create();
                      (params = proto.GroupInfo.create()).targetId = id;
                      params.type = i;
                      params.name = name;
                      params.portrait = version;
                      params.extra = method || "";
                      me.groupInfo = params;
                      (context = new _custom2.default).target = id;
                      context.type = i;
                      context.name = name;
                      context.portrait = version;
                      context.extra = params.extra;
                      rowsToInsert = [];
                      if (!h.includes(a)) {
                        h.push(a);
                      }
                      row = void 0;
                      h.forEach(function (key) {
                        var data = proto.GroupMember.create();
                        data.memberId = key;
                        data.type = preview.default.Normal;
                        (row = new _UiIcon2.default).groupId = id;
                        row.memberId = key;
                        row.type = preview.default.Normal;
                        if (key === a) {
                          data.type = preview.default.Owner;
                          row.type = preview.default.Owner;
                        }
                        me.members.push(data);
                        rowsToInsert.push(row);
                      });
                      (msg = proto.CreateGroupRequest.create()).group = me;
                      msg.toLine = _nutty_fromwebpage;
                      msg.memberExtra = text || "";
                      msg.notifyContent = this._toProtoMessageContent(b);
                      this._publish("GC", proto.CreateGroupRequest.encode(msg).finish(), function () {
                        var data = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        var newCoord = arguments[1];
                        if (0 === data && newCoord) {
                          var data = newCoord.toString();
                          var a = new Messages.default(task.default.Group, data, 0);
                          if (notebookComponent.store._genAndSaveDefaultConversationInfo(a), notebookComponent.store.setGroupInfo(context), notebookComponent.store.setGroupMembers(data, rowsToInsert), b) {
                            var arc = new tree.default(a, b);
                            notebookComponent.store.updateConversationLastMessage(arc);
                          }
                          if (_attrValue) {
                            _attrValue(data);
                          }
                          notebookComponent.log("create group success", data);
                        } else {
                          notebookComponent.log("create group error", data);
                          if (renderMachines) {
                            renderMachines(data);
                          }
                        }
                      });
                    case 26:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return _resolveModuleSource.apply(this, arguments);
            })
          }, {
            key: "setGroupManager",
            value: (_sortStack = (0, i.default)(node.default.mark(function connect(groupId, type, id, i, parent, init_handler, callback_on_connect) {
              var data;
              var console = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.SetGroupManagerRequest.create()).type = type ? 1 : 0;
                      data.groupId = groupId;
                      data.userId = id;
                      data.toLine = i;
                      data.notifyContent = this._toProtoMessageContent(parent);
                      this._publish("GSM", proto.SetGroupManagerRequest.encode(data).finish(), function (contextReference, canCreateDiscussions) {
                        if (0 === contextReference) {
                          if (init_handler) {
                            init_handler();
                          }
                          console.log("set group manager success", groupId);
                        } else {
                          console.log("set group manager error", contextReference);
                          if (callback_on_connect) {
                            callback_on_connect(contextReference);
                          }
                        }
                      });
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, connect, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution, i, s) {
              return _sortStack.apply(this, arguments);
            })
          }, {
            key: "_reloadGroupInfosFromRemote",
            value: (_solveStack = (0, i.default)(node.default.mark(function start() {
              var a = arguments.length;
              var args = Array(a);
              var i = 0;
              for (; i < a; i++) {
                args[i] = arguments[i];
              }
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._reloadGroupInfosFromRemoteEx(null, null, args);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, start, this);
            })), function () {
              return _solveStack.apply(this, arguments);
            })
          }, {
            key: "_reloadGroupInfosFromRemoteEx",
            value: (_diveTo = (0, i.default)(node.default.mark(function parse(matchComparison, callback, args) {
              var data;
              var socket = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      if (data = proto.PullUserRequest.create(), args.forEach(function (value) {
                        if (matchComparison || !socket.store.loadingGroups.has(value)) {
                          socket.store.loadingGroups.add(value);
                          var out = proto.UserRequest.create();
                          out.uid = value;
                          out.updateDt = window.default.ZERO;
                          data.request.push(out);
                        }
                      }), !(data.request.length < 1)) {
                        context$5$0.next = 5;
                        break;
                      }
                      return callback && callback(-1), context$5$0.abrupt("return");
                    case 5:
                      this.log("reload groupInfo from remote", args);
                      this._publish("GPGI", proto.PullUserRequest.encode(data).finish(), function (data, link) {
                        if (args.forEach(function (inPointerId) {
                          socket.store.loadingGroups.delete(inPointerId);
                        }), 0 !== data || !link) {
                          return socket.log("reloadGroupInfoFromRemote error", data, args), void (callback && callback(0 !== data ? data : -1));
                        }
                        var list = proto.PullGroupInfoResult.decode(link).info;
                        if (socket.log("reload groupInfo from remote result", list), list.length > 0) {
                          var type = [];
                          list.forEach(function (json) {
                            var self = (0, options.default)(new _custom2.default, json);
                            self.target = json.targetId;
                            delete self.targetId;
                            if (o.default.urlRedirect) {
                              self.portrait = o.default.urlRedirect(self.portrait);
                            }
                            socket.store.setGroupInfo(self);
                            type.push(self);
                          });
                          if (matchComparison) {
                            matchComparison(type);
                          }
                          socket.eventEmitter.emit(History_1.default.GroupInfosUpdate, type);
                        }
                      });
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, parse, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return _diveTo.apply(this, arguments);
            })
          }, {
            key: "_reloadGroupMembersFromRemote",
            value: (fallbackTo = (0, i.default)(node.default.mark(function parse(isFirstArg, intOrDateOrString) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._reloadGroupMembersFromRemoteEx(isFirstArg, intOrDateOrString, null, null);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, parse, this);
            })), function (canCreateDiscussions, isSlidingUp) {
              return fallbackTo.apply(this, arguments);
            })
          }, {
            key: "_reloadGroupMembersFromRemoteEx",
            value: (getTransitionByIntent = (0, i.default)(node.default.mark(function init(i, obj, _, s) {
              var data;
              var self = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      if (_ || !this.store.loadingGroupMembers.has(i)) {
                        context$5$0.next = 4;
                        break;
                      }
                      return context$5$0.abrupt("return");
                    case 4:
                      this.store.loadingGroupMembers.add(i);
                    case 5:
                      (data = proto.PullGroupMemberRequest.create()).target = i;
                      data.head = window.default.fromValue(obj);
                      this._publish("GPGM", proto.PullGroupMemberRequest.encode(data).finish(), function (n, r) {
                        if (self.store.loadingGroupMembers.delete(i), 0 !== n || !r) {
                          return self.log("reloadGroupMembersFromRemote error", i, n), void (s && s(0 !== n ? n : -1));
                        }
                        var members = proto.PullGroupMemberResult.decode(r).member;
                        var s = [];
                        var u = false;
                        members.forEach(function (response) {
                          var data = new _UiIcon2.default;
                          data.groupId = i;
                          data.alias = response.alias;
                          data.extra = response.extra;
                          data.type = response.type;
                          data.memberId = response.memberId;
                          data.updateDt = response.updateDt;
                          data.createDt = response.createDt;
                          s.push(data);
                          var nativeJS = self.store.getGroupMember(i, self.userId);
                          if (data.memberId === self.userId && nativeJS && nativeJS.type === preview.default.Removed) {
                            u = true;
                          }
                        });
                        self.log("loadGroupMembersFromRemote", i, s.length);
                        self.store.updateGroupMembers(i, s);
                        s = self.store.getGroupMembers(i);
                        if (_) {
                          _(s);
                        }
                        if (u) {
                          self.log("self deleted", i);
                        } else {
                          self.eventEmitter.emit(History_1.default.GroupMembersUpdate, i, s);
                          self.log("emit groupMembersUpdate", i, s);
                        }
                      });
                    case 9:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return getTransitionByIntent.apply(this, arguments);
            })
          }, {
            key: "getGroupInfo",
            value: function (value) {
              var isBrowser = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var obj = this.store.getGroupInfo(value);
              return (isBrowser || obj instanceof type.default) && this._reloadGroupInfosFromRemote(value), obj instanceof type.default && this._reloadGroupMembersFromRemote(value, window.default.ZERO), obj;
            }
          }, {
            key: "getGroupInfoEx",
            value: function (value) {
              var isSurface = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var cb = arguments[2];
              var r_objects = arguments[3];
              var object = this.store.getGroupInfo(value);
              if (!(object instanceof type.default)) {
                if (cb) {
                  cb(object);
                }
              }
              if (isSurface || object instanceof type.default) {
                this._reloadGroupInfosFromRemoteEx(function (crss) {
                  if (cb) {
                    cb(crss[0]);
                  }
                }, r_objects, [value]);
              }
              if (object instanceof type.default) {
                this._reloadGroupMembersFromRemote(value, 0);
              }
            }
          }, {
            key: "getGroupInfos",
            value: function () {
              var dg_el = this;
              var pipelets = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
              var result = [];
              var o = [];
              if (pipelets.forEach(function (group) {
                var value = dg_el.store.getGroupInfo(group);
                if (value instanceof type.default) {
                  o.push(group);
                }
                result.push(value);
              }), o.length > 0 && (this._reloadGroupInfosFromRemote.apply(this, o), o.length <= 50)) {
                var _iteratorNormalCompletion3 = true;
                var s = false;
                var a = void 0;
                try {
                  var $__6;
                  var _iterator3 = (0, n.default)(o);
                  for (; !(_iteratorNormalCompletion3 = ($__6 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var item = $__6.value;
                    this._reloadGroupMembersFromRemote(item, window.default.ZERO);
                  }
                } catch (nativeObjectObject) {
                  s = true;
                  a = nativeObjectObject;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                      _iterator3.return();
                    }
                  } finally {
                    if (s) {
                      throw a;
                    }
                  }
                }
              }
              return result;
            }
          }, {
            key: "addGroupMembers",
            value: function (obj, name, x, _, value, i, done) {
              var input = this;
              if (!obj || !name || 0 === name.length || !_ || 0 === _.length) {
                return this.log("addGroupMembers params invalid"), void (done && done(-1));
              }
              var data = proto.AddGroupMemberRequest.create();
              data.groupId = obj;
              name.forEach(function (memberId) {
                var self = proto.GroupMember.create();
                self.memberId = memberId;
                self.type = preview.default.Normal;
                data.addedMember.push(self);
              });
              data.toLine = _;
              data.extra = x;
              data.notifyContent = this._toProtoMessageContent(value);
              this._publish("GAM", proto.AddGroupMemberRequest.encode(data).finish(), function (r, n) {
                if (0 === r) {
                  var o = [];
                  var leafsHeaders = (new Date).getTime();
                  name.forEach(function (memberId) {
                    var self = new _UiIcon2.default;
                    self.groupId = obj;
                    self.type = preview.default.Normal;
                    self.memberId = memberId;
                    self.updateDt = leafsHeaders;
                    self.createDt = leafsHeaders;
                    o.push(self);
                  });
                  input.store.updateGroupMembers(obj, o);
                }
                input._generalOperationCallback(r, i, done);
              });
            }
          }, {
            key: "getGroupMemberIds",
            value: function (value) {
              var inviteParams = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var lulc = this.store.getGroupMemberIds(value, inviteParams);
              return (0 === lulc.length || inviteParams) && this._reloadGroupMembersFromRemote(value, window.default.ZERO), lulc;
            }
          }, {
            key: "getGroupMembers",
            value: function (value) {
              var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var obj = this.store.getGroupInfo(value);
              if (obj instanceof type.default) {
                return this._reloadGroupInfosFromRemote(value), this._reloadGroupMembersFromRemote(value, window.default.ZERO), null;
              }
              var n = this.store.getGroupMembers(value);
              var a = window.default.ZERO;
              return n.length > 0 && n.forEach(function (range) {
                if (range.updateDt.compare(a) > 0) {
                  a = range.updateDt;
                }
              }), (0 === n.length || t) && (this.log("---------", value, obj, obj.memberUpdateDt), this._reloadGroupMembersFromRemote(value, a)), n.sort(this._compareGroupMember);
            }
          }, {
            key: "getGroupMembersByType",
            value: function (value, name) {
              var replaceArr = this.getGroupMembers(value);
              return 0 === replaceArr.length && this._reloadGroupMembersFromRemote(value, window.default.ZERO), replaceArr.filter(function (joint) {
                return joint.type === name;
              });
            }
          }, {
            key: "_compareGroupMember",
            value: function (value, name) {
              return value.type === name.type ? (0, v.numberValue)(value.updateDt) - (0, v.numberValue)(name.updateDt) : 4 === value.type ? -1 : 4 === name.type ? 1 : name.type - value.type;
            }
          }, {
            key: "getGroupMembersEx",
            value: function (value) {
              var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              var readMap = arguments[2];
              var r_objects = arguments[3];
              var o = this.store.getGroupMembers(value);
              var a = window.default.ZERO;
              if (o.length > 0) {
                o.forEach(function (range) {
                  if (range.updateDt.compare(a) > 0) {
                    a = range.updateDt;
                  }
                });
              }
              if (0 === o.length || t) {
                this._reloadGroupMembersFromRemoteEx(value, 0, readMap, r_objects);
              } else {
                if (readMap) {
                  readMap(o.sort(this._compareGroupMember));
                }
                if (t) {
                  this._reloadGroupMembersFromRemoteEx(value, a);
                }
              }
            }
          }, {
            key: "getGroupMember",
            value: function (value, name) {
              if (this.store.getGroupInfo(value) instanceof type.default) {
                return this._reloadGroupInfosFromRemote(value), this._reloadGroupMembersFromRemote(value, window.default.ZERO), null;
              }
              var match = this.store.getGroupMember(value, name);
              return match || this._reloadGroupMembersFromRemote(value, window.default.ZERO), match;
            }
          }, {
            key: "kickoffGroupMembers",
            value: function (value, name, s, n, t, payload) {
              var arg = this;
              var data = proto.RemoveGroupMemberRequest.create();
              data.groupId = value;
              data.removedMember = name;
              data.toLine = s;
              data.notifyContent = this._toProtoMessageContent(n);
              this._publish("GKM", proto.RemoveGroupMemberRequest.encode(data).finish(), function (context, n) {
                if (0 === context) {
                  arg.store.removeGroupMembers(value, name);
                }
                arg._generalOperationCallback(context, t, payload);
              });
            }
          }, {
            key: "muteOrAllowGroupMembers",
            value: function (value, name, object, id, result, secret, callback, filter) {
              var spy = this;
              var data = proto.SetGroupManagerRequest.create();
              data.type = name ? 1 : 0;
              data.groupId = value;
              data.userId = id;
              data.toLine = result;
              data.notifyContent = this._toProtoMessageContent(secret);
              this._publish(object ? "GMAL" : "GMM", proto.SetGroupManagerRequest.encode(data).finish(), function (change, i) {
                if (0 === change) {
                  spy.store.updateGroupMemberMuteOrAllow(value, id, name, object);
                  if (callback) {
                    callback();
                  }
                  spy.log("mute group member success", value, id);
                } else {
                  spy.log("mute group member error", change);
                  if (filter) {
                    filter(change);
                  }
                }
              });
            }
          }, {
            key: "quitGroup",
            value: (originalGeom2Layer = (0, i.default)(node.default.mark(function init(g, type, style, i, $page) {
              var data;
              var pekeUpload = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.QuitGroupRequest.create()).groupId = g;
                      data.toLine = type;
                      data.notifyContent = this._toProtoMessageContent(style);
                      this._publish("GQ", proto.QuitGroupRequest.encode(data).finish(), function (thrownError, canCreateDiscussions) {
                        pekeUpload._generalOperationCallback(thrownError, i, $page);
                      });
                    case 5:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return originalGeom2Layer.apply(this, arguments);
            })
          }, {
            key: "dismissGroup",
            value: (handleSortClickEvent = (0, i.default)(node.default.mark(function init(g, type, style, i, $page) {
              var data;
              var pekeUpload = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.DismissGroupRequest.create()).groupId = g;
                      data.toLine = type;
                      data.notifyContent = this._toProtoMessageContent(style);
                      this._publish("GD", proto.DismissGroupRequest.encode(data).finish(), function (thrownError, canCreateDiscussions) {
                        pekeUpload._generalOperationCallback(thrownError, i, $page);
                      });
                    case 5:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return handleSortClickEvent.apply(this, arguments);
            })
          }, {
            key: "modifyGroupInfo",
            value: (handlePageClickEvent = (0, i.default)(node.default.mark(function init(g, type, index, cid, name, block, html) {
              var data;
              var Aloha = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.ModifyGroupInfoRequest.create()).groupId = g;
                      data.toLine = cid;
                      data.type = type;
                      data.value = index + "";
                      data.notifyContent = this._toProtoMessageContent(name);
                      this._publish("GMI", proto.ModifyGroupInfoRequest.encode(data).finish(), function (elem, canCreateDiscussions) {
                        Aloha._generalOperationCallback(elem, block, html);
                      });
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution, i, s) {
              return handlePageClickEvent.apply(this, arguments);
            })
          }, {
            key: "modifyGroupAlias",
            value: (projectAt = (0, i.default)(node.default.mark(function init(g, id, total, elem, type, content) {
              var data;
              var ariaUtilsArray = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.ModifyGroupMemberAlias.create()).groupId = g;
                      data.alias = id;
                      data.toLine = total;
                      data.notifyContent = this._toProtoMessageContent(elem);
                      this._publish("GMA", proto.ModifyGroupMemberAlias.encode(data).finish(), function (array, canCreateDiscussions) {
                        ariaUtilsArray._generalOperationCallback(array, type, content);
                      });
                    case 6:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution, i) {
              return projectAt.apply(this, arguments);
            })
          }, {
            key: "modifyGroupMemberAlias",
            value: (htmlWebPackPluginAssets = (0, i.default)(node.default.mark(function init(i, key, value, cid, event, url, section) {
              var data;
              var dojo = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.ModifyGroupMemberAlias.create()).groupId = i;
                      data.memberId = key;
                      data.alias = value;
                      data.toLine = cid;
                      data.notifyContent = this._toProtoMessageContent(event);
                      this._publish("GMMA", proto.ModifyGroupMemberAlias.encode(data).finish(), function (liveNode, canCreateDiscussions) {
                        if (0 === liveNode) {
                          dojo.store.updateGroupMemberAlias(i, key, value);
                        }
                        dojo._generalOperationCallback(liveNode, url, section);
                      });
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution, i, s) {
              return htmlWebPackPluginAssets.apply(this, arguments);
            })
          }, {
            key: "modifyGroupMemberExtra",
            value: (origCloseInstanceBindings = (0, i.default)(node.default.mark(function init(i, key, tabs, event, obj, url, section) {
              var data;
              var dojo = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.ModifyGroupMemberExtra.create()).groupId = i;
                      data.memberId = key;
                      data.extra = tabs;
                      data.toLine = event;
                      data.notifyContent = this._toProtoMessageContent(obj);
                      this._publish("GMME", proto.ModifyGroupMemberExtra.encode(data).finish(), function (liveNode, canCreateDiscussions) {
                        if (0 === liveNode) {
                          dojo.store.updateGroupMemberExtra(i, key, tabs);
                        }
                        dojo._generalOperationCallback(liveNode, url, section);
                      });
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution, i, s) {
              return origCloseInstanceBindings.apply(this, arguments);
            })
          }, {
            key: "transferGroup",
            value: function (value, name, object, uri, req, post) {
              var exec = this;
              var data = proto.TransferGroupRequest.create();
              data.groupId = value;
              data.newOwner = name;
              data.toLine = object;
              data.notifyContent = this._toProtoMessageContent(uri);
              this._publish("GTG", proto.TransferGroupRequest.encode(data).finish(), function (fn, canCreateDiscussions) {
                exec._generalOperationCallback(fn, req, post);
              });
            }
          }, {
            key: "getFavGroups",
            value: function () {
              return this.store.getFavGroups();
            }
          }, {
            key: "isFavGroup",
            value: function (value) {
              return this.store.isFavGroup(value);
            }
          }, {
            key: "setFavGroup",
            value: (origInstantiate = (0, i.default)(node.default.mark(function start(inScene, callback, url, oData) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._updateUserSetting(ShapeMaker_1.default.FavoriteGroup, inScene, callback ? "1" : "0", url, oData);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, start, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return origInstantiate.apply(this, arguments);
            })
          }, {
            key: "getFavUsers",
            value: function () {
              return this.store.getFavUsers();
            }
          }, {
            key: "isFavUser",
            value: function (value) {
              return this.store.isFavUser(value);
            }
          }, {
            key: "setFavUser",
            value: function (value, name, s, index) {
              this._updateUserSetting(ShapeMaker_1.default.FavoriteUser, value, name ? "1" : "0", s, index);
            }
          }, {
            key: "getUserSetting",
            value: function (value, name) {
              return this.store.getUserSetting(value, name);
            }
          }, {
            key: "getUserSettings",
            value: function (value) {
              return this.store.getUserSettings(value);
            }
          }, {
            key: "setUserSetting",
            value: (CropAreaRectangle = (0, i.default)(node.default.mark(function init(windowBits, level, app, i, $page) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._updateUserSetting(windowBits, level, app, i, $page);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return CropAreaRectangle.apply(this, arguments);
            })
          }, {
            key: "modifyMyInfo",
            value: function (value, name, cb) {
              var webAPI = this;
              var data = proto.ModifyMyInfoRequest.create();
              data.entry = value;
              this._publish("MMI", proto.ModifyMyInfoRequest.encode(data).finish(), function (email, canCreateDiscussions) {
                webAPI._generalOperationCallback(email, name, cb);
              });
            }
          }, {
            key: "isGlobalSlient",
            value: function () {
              var e = this.store.getUserSetting(ShapeMaker_1.default.GlobalSilent, "");
              return !!e && "1" === e.value;
            }
          }, {
            key: "setGlobalSlient",
            value: function (value, name, b) {
              this._updateUserSetting(ShapeMaker_1.default.GlobalSilent, "", value ? "1" : "0", function () {
                if (name) {
                  name();
                }
              }, function (applyBackgroundUpdates) {
                if (b) {
                  b(applyBackgroundUpdates);
                }
              });
            }
          }, {
            key: "isHiddenNotificationDetail",
            value: function () {
              var e = this.store.getUserSetting(ShapeMaker_1.default.HiddenNotificationDetail, "");
              return !!e && "1" === e.value;
            }
          }, {
            key: "setHiddenNotificationDetail",
            value: (show_docs_for = (0, i.default)(node.default.mark(function request(xy, r, n) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._updateUserSetting(ShapeMaker_1.default.HiddenNotificationDetail, "", xy ? "1" : "0", function () {
                        if (r) {
                          r();
                        }
                      }, function (appid) {
                        if (n) {
                          n(appid);
                        }
                      });
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, request, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return show_docs_for.apply(this, arguments);
            })
          }, {
            key: "isHiddenGroupMemberName",
            value: function (value) {
              var cell1 = this.store.getUserSetting(ShapeMaker_1.default.GroupHideNickname, value);
              return !!cell1 && "1" === cell1.value;
            }
          }, {
            key: "setHiddenGroupMemberName",
            value: (clientcb = (0, i.default)(node.default.mark(function request(checkCount, callback, body, i) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this._updateUserSetting(ShapeMaker_1.default.GroupHideNickname, checkCount, callback ? "1" : "0", function () {
                        if (body) {
                          body();
                        }
                      }, function (ch) {
                        if (i) {
                          i(ch);
                        }
                      });
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, request, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return clientcb.apply(this, arguments);
            })
          }, {
            key: "joinChatroom",
            value: (clientcb2 = (0, i.default)(node.default.mark(function init(str, _, n) {
              var data;
              var target = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.IDBuf.create()).id = str;
                      this._publish("CRJ", proto.IDBuf.encode(data).finish(), function () {
                        var ERR_INVALID_AUTH = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        arguments[1];
                        if (0 === ERR_INVALID_AUTH) {
                          target.chatRoomMsgHead = window.default.ZERO;
                          target.currentChatRoomId = str;
                          if (_) {
                            _();
                          }
                          target._pullMessages(window.default.MAX_VALUE, 1, false);
                        } else {
                          if (n) {
                            n(ERR_INVALID_AUTH);
                          }
                        }
                      });
                    case 3:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return clientcb2.apply(this, arguments);
            })
          }, {
            key: "quitChatroom",
            value: (clientcb1 = (0, i.default)(node.default.mark(function init(_id, p, n) {
              var data;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.IDBuf.create()).id = _id;
                      this.currentChatRoomId = "";
                      this._publish("CRQ", proto.IDBuf.encode(data).finish(), function () {
                        var ERR_INVALID_AUTH = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        arguments[1];
                        if (0 === ERR_INVALID_AUTH) {
                          if (p) {
                            p();
                          }
                        } else {
                          if (n) {
                            n(ERR_INVALID_AUTH);
                          }
                        }
                      });
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return clientcb1.apply(this, arguments);
            })
          }, {
            key: "getChatroomInfo",
            value: (nestedSpy = (0, i.default)(node.default.mark(function init(settingsCollection, value, step, plugin) {
              var data;
              var notebookComponent = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.GetChatroomInfoRequest.create()).chatroomId = settingsCollection;
                      data.updateDt = window.default.fromValue(value);
                      this._publish("CRI", proto.GetChatroomInfoRequest.encode(data).finish(), function () {
                        var pluginOpts = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        var t = arguments[1];
                        if (0 === pluginOpts && t) {
                          if (step) {
                            var data = proto.ChatroomInfo.decode(t);
                            notebookComponent.log("getChatroomInfo result", data);
                            var event = (0, options.default)(new _colorsList2.default, data);
                            if (o.default.urlRedirect) {
                              event.portrait = o.default.urlRedirect(event.portrait);
                            }
                            step(event);
                          }
                        } else {
                          if (plugin) {
                            plugin(pluginOpts);
                          }
                        }
                      });
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return nestedSpy.apply(this, arguments);
            })
          }, {
            key: "getChatroomMemberInfo",
            value: (rootSpy = (0, i.default)(node.default.mark(function init(sinparam, type, method, emitter) {
              var data;
              var li = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.GetChatroomMemberInfoRequest.create()).chatroomId = sinparam;
                      data.maxCount = type || 10;
                      this._publish("CRMI", proto.GetChatroomMemberInfoRequest.encode(data).finish(), function () {
                        var item = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        var o = arguments[1];
                        if (0 === item && o) {
                          if (method) {
                            var index = proto.ChatroomMemberInfo.decode(o);
                            li.log("getChatroomMemberInfo result", index);
                            var fed_name = (0, options.default)(new _noframeworkWaypoints2.default, index);
                            method(fed_name);
                          }
                        } else {
                          if (emitter) {
                            emitter(item);
                          }
                        }
                      });
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return rootSpy.apply(this, arguments);
            })
          }, {
            key: "createChannel",
            value: function (value, name, data, prop, e, cb, done) {
              var data = proto.ChannelInfo.create();
              data.name = value;
              data.portrait = name;
              data.desc = prop;
              data.extra = e;
              this._publish("CHC", proto.ChannelInfo.encode(data).finish(), function () {
                var resultcode = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                arguments[1];
                if (0 === resultcode) {
                  if (cb) {
                    cb();
                  }
                } else {
                  if (done) {
                    done(resultcode);
                  }
                }
              });
            }
          }, {
            key: "getChannelInfo",
            value: function (value, name) {
              var obj = this.store.getChannelInfo(value);
              return (obj instanceof models.default || name) && this._reloadChannelInfo(value, obj.updateDt), obj;
            }
          }, {
            key: "_reloadChannelInfo",
            value: (_fileSystemWriteFile = (0, i.default)(node.default.mark(function init(passedDatabaseTypes) {
              var data;
              var socket = this;
              var obj = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.PullChannelInfo.create()).channelId = passedDatabaseTypes;
                      data.head = window.default.fromValue(obj);
                      this._publish("CHP", proto.PullChannelInfo.encode(data).finish(), function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        var r = arguments[1];
                        if (0 === e && r) {
                          var max = proto.ChannelInfo.decode(r);
                          var data = (0, options.default)(new ShapeViewer_1.default, max);
                          if (o.default.urlRedirect) {
                            data.portrait = o.default.urlRedirect(data.portrait);
                          }
                          socket.store.setChannelInfo(channInfo);
                          socket.eventEmitter.emit(History_1.default.ChannelInfosUpdate, [data]);
                        }
                      });
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions) {
              return _fileSystemWriteFile.apply(this, arguments);
            })
          }, {
            key: "modifyChannelInfo",
            value: (originalSelStyle = (0, i.default)(node.default.mark(function get(channelId, type, username, _, s) {
              var data;
              var slack = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.ModifyChannelInfo.create()).channelId = channelId;
                      data.type = type;
                      data.value = username;
                      this._publish("CHMI", proto.ModifyChannelInfo.encode(data).finish(), function () {
                        var fbSuccessResponse = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        arguments[1];
                        if (0 === fbSuccessResponse) {
                          slack._reloadChannelInfo(channelId);
                          if (_) {
                            _();
                          }
                        } else {
                          if (s) {
                            s(fbSuccessResponse);
                          }
                        }
                      });
                    case 5:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, get, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return originalSelStyle.apply(this, arguments);
            })
          }, {
            key: "searchChannel",
            value: function (value, name, callback, func) {
              var data = proto.SearchUserRequest.create();
              data.keyword = value;
              data.fuzzy = name;
              data.page = 0;
              this._publish("CHS", proto.SearchUserRequest.encode(data).finish(), function () {
                var item = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                var o = arguments[1];
                if (0 === item && o) {
                  if (callback) {
                    var e = proto.SearchChannelResult.decode(o);
                    callback(value, e.entry);
                  }
                } else {
                  if (func) {
                    func(item);
                  }
                }
              });
            }
          }, {
            key: "isListenedChannel",
            value: function (value) {
              var cell1 = this.store.getUserSetting(ShapeMaker_1.default.Listened_Channel, value);
              return cell1 && "1" === cell1.value;
            }
          }, {
            key: "listenChannel",
            value: (originalOnEnter = (0, i.default)(node.default.mark(function init(specials, val, cb, finished) {
              var obj;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (obj = proto.ListenChannel.create()).channelId = specials;
                      obj.listen = val;
                      this._publish("CHL", proto.ListenChannel.encode(obj).finish(), function () {
                        var result = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        arguments[1];
                        if (0 === result) {
                          if (cb) {
                            cb();
                          }
                        } else {
                          if (finished) {
                            finished(result);
                          }
                        }
                      });
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n) {
              return originalOnEnter.apply(this, arguments);
            })
          }, {
            key: "getMyChannels",
            value: function () {
              return this.store.getUserSettings(ShapeMaker_1.default.Listened_Channel).filter(function (select_ele) {
                return "1" === select_ele.value;
              }).map(function (shortcutKeyObject) {
                return shortcutKeyObject.key;
              });
            }
          }, {
            key: "getListenedChannels",
            value: function () {
              return this.store.getUserSettings(ShapeMaker_1.default.My_Channel).filter(function (select_ele) {
                return "1" === select_ele.value;
              }).map(function (shortcutKeyObject) {
                return shortcutKeyObject.key;
              });
            }
          }, {
            key: "destroyChannel",
            value: (tabactivate = (0, i.default)(node.default.mark(function init(pid, x, n) {
              var data;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.IDBuf.create()).id = pid;
                      this._publish("CHD", proto.ListenChannel.encode(data).finish(), function () {
                        var ERR_INVALID_AUTH = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                        arguments[1];
                        if (0 === ERR_INVALID_AUTH) {
                          if (x) {
                            x();
                          }
                        } else {
                          if (n) {
                            n(ERR_INVALID_AUTH);
                          }
                        }
                      });
                    case 3:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return tabactivate.apply(this, arguments);
            })
          }, {
            key: "getConversationList",
            value: function (value, name) {
              return this.store.getConversationList(value, name);
            }
          }, {
            key: "getConversationInfo",
            value: function (value) {
              var valBoolVal = this.store.getConversationInfo(value);
              return valBoolVal || ((valBoolVal = new _validateUrl2.default).conversation = value), valBoolVal;
            }
          }, {
            key: "searchConversation",
            value: function (value) {
              var inviteParams = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [0, 1, 2];
              var activitySort = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [0, 1];
              return this.store.searchConversation(value, inviteParams, activitySort);
            }
          }, {
            key: "removeConversation",
            value: (oldUpdateStatus = (0, i.default)(node.default.mark(function update(ids, successCallback) {
              var params;
              var value;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      if (params = this.getConversationInfo(ids)) {
                        context$5$0.next = 3;
                        break;
                      }
                      return context$5$0.abrupt("return");
                    case 3:
                      this.store.removeConversation(ids, successCallback);
                      value = (new Date).getTime();
                      if (!params.timestamp || (0, v.gt)(params.timestamp, value + 72E5) || (0, v.lte)(params.timestamp, value - 12E4)) {
                        params.timestamp = window.default.fromValue(value);
                      }
                      this._syncConversationReadDt(ids, params.timestamp.neg());
                    case 7:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, update, this);
            })), function (canCreateDiscussions, isSlidingUp) {
              return oldUpdateStatus.apply(this, arguments);
            })
          }, {
            key: "setConversationTop",
            value: function (value, name, func, done) {
              var subject = this;
              var i = ShapeMaker_1.default.ConversationTop;
              var artistTrack = value.type + "-" + value.line + "-" + value.target;
              var va = name ? "1" : "0";
              this._updateUserSetting(i, artistTrack, va, function () {
                var n = subject.getConversationInfo(value);
                subject.eventEmitter.emit(History_1.default.ConversationInfoUpdate, n);
                subject.store.setConversationTop(value, name);
                if (func) {
                  func();
                }
              }, function (generatedImageError) {
                if (done) {
                  done(generatedImageError);
                }
              });
            }
          }, {
            key: "setConversationSlient",
            value: function (value, name, func, done) {
              var subject = this;
              var i = ShapeMaker_1.default.ConversationSilent;
              var artistTrack = value.type + "-" + value.line + "-" + value.target;
              var va = name ? "1" : "0";
              this._updateUserSetting(i, artistTrack, va, function () {
                subject.store.setConversationSilent(value, name);
                if (func) {
                  func();
                }
                var n = subject.getConversationInfo(value);
                subject.eventEmitter.emit(History_1.default.ConversationInfoUpdate, n);
              }, function (generatedImageError) {
                if (done) {
                  done(generatedImageError);
                }
              });
            }
          }, {
            key: "setConversationDraft",
            value: function (value) {
              var email = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
              var r = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
              if (value) {
                email = email || "";
                var e = this.getConversationInfo(value);
                if (e.draft !== email) {
                  this.store.setConversationDraft(value, email);
                  this.eventEmitter.emit(History_1.default.ConversationInfoUpdate, e);
                  if (r) {
                    this._syncDraft(value, email);
                  }
                }
              }
            }
          }, {
            key: "_syncDraft",
            value: function (value, name) {
              var in_test = value.type + "-" + value.line + "-" + value.target;
              var setting = this.getUserSetting(ShapeMaker_1.default.EnableSyncDraft, in_test);
              if (!(!!setting && "1" === setting.value)) {
                var _fullDir = this.clientId + "@@@" + name;
                this._updateUserSetting(ShapeMaker_1.default.ConversationDraft, in_test, _fullDir);
              }
            }
          }, {
            key: "setConversationTimestamp",
            value: function (value, name) {
              var doc = this.store.getConversationInfo(value);
              if (!doc) {
                doc = this.store._genAndSaveDefaultConversationInfo(value);
              }
              var minotaur = (new Date).getTime();
              if ((0, v.gt)(name, minotaur + 72E5)) {
                name = minotaur;
              }
              doc.timestamp = window.default.fromValue(name);
              this.eventEmitter.emit(History_1.default.ConversationInfoUpdate, doc);
            }
          }, {
            key: "getUnreadCount",
            value: function () {
              var id = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
              var callback = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [0];
              return this.store.getUnreadCount(id, callback);
            }
          }, {
            key: "getConversationUnreadCount",
            value: function (value) {
              return this.store.getConversationUnreadCount(value);
            }
          }, {
            key: "sendConferenceRequest",
            value: function (value, name, type, source, config, cb) {
              var data = proto.ConferenceRequest.create();
              data.sessionId = value;
              data.roomId = name;
              data.request = type;
              data.advance = config ? 1 : 0;
              data.data = source;
              this._publish("CONF", proto.ConferenceRequest.encode(data).finish(), function () {
                var additiveNodes = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                var data = arguments[1];
                if (0 === additiveNodes) {
                  var result = null;
                  if (data) {
                    var span = proto.IDBuf.decode(data);
                    result = span.id;
                  }
                  if (cb) {
                    cb(0, result);
                  }
                } else {
                  if (cb) {
                    cb(additiveNodes);
                  }
                }
              });
            }
          }, {
            key: "clearConversationUnreadStatus",
            value: (prevModFn = (0, i.default)(node.default.mark(function start(id) {
              var idFocused;
              var existsTextarea;
              var e;
              var generatorObject;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      idFocused = [];
                      if (this.isReceiptEnable && this.isUserReceiptEnabled()) {
                        idFocused = this.store.getUnreadMsgSenders(id);
                      }
                      existsTextarea = this.store.clearConversationUnreadStatus(id);
                      e = this.getConversationInfo(id);
                      this.eventEmitter.emit(History_1.default.ConversationInfoUpdate, e);
                      if (existsTextarea > 0 && (generatorObject = this.store.getConversationReadMaxDt(id)).compare(window.default.ZERO) > 0) {
                        this._syncConversationReadDt(id, generatorObject, idFocused);
                      }
                    case 6:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, start, this);
            })), function (canCreateDiscussions) {
              return prevModFn.apply(this, arguments);
            })
          }, {
            key: "clearMessageUnreadStatus",
            value: function (value) {
              if (this.store.clearMessageUnreadStatus(value)) {
                var e = this.getConversationInfo(this.getMessageById(value).conversation);
                this.eventEmitter.emit(History_1.default.ConversationInfoUpdate, e);
              }
            }
          }, {
            key: "_syncConversationReadDt",
            value: function (value, name, object, result) {
              var _this = this;
              if (window.default.isLong(name)) {
                var field = value.type + "-" + value.line + "-" + value.target;
                var data = proto.ModifyUserSettingReq.create();
                data.scope = ShapeMaker_1.default.Conversation_Sync;
                data.key = field;
                data.value = name.toString();
                data.target = object;
                var msg = proto.ModifyUserSettingReq.encode(data).finish();
                if (!result) {
                  result = this.store.saveSyncReadEntry(value.type, value.target, value.line, name, object);
                }
                this._publish("UP", msg, function (statements, canCreateDiscussions) {
                  if (0 === statements) {
                    var options = new $sharepreview.default;
                    options.scope = ShapeMaker_1.default.Conversation_Sync;
                    options.key = field;
                    options.value = name.toString();
                    _this.store.updateUserSettings([options]);
                    _this.store.deleteSyncReadEntry(result);
                    _this._syncRead();
                  } else {
                    _this.log("syncConversationReadDt error", statements);
                  }
                });
              } else {
                this.log("_syncConversationReadDt invalid dt", name);
              }
            }
          }, {
            key: "_syncRead",
            value: function () {
              var self = this.store.loadSyncReadEntry();
              if (self) {
                var artistTrack = new Messages.default(self.type, self.target, self.line);
                this._syncConversationReadDt(artistTrack, self.readDt, self.senders, self.id);
              }
            }
          }, {
            key: "clearAllUnreadStatus",
            value: (orginalDraw = (0, i.default)(node.default.mark(function init() {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this.store.clearAllUnreadStatus();
                    case 2:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function () {
              return orginalDraw.apply(this, arguments);
            })
          }, {
            key: "setMediaMessagePlayed",
            value: function (value) {
              if (this.store.setMediaMessagePlayed(value) > 0) {
                var e = this.store.getMessageById(value);
                this.eventEmitter.emit(History_1.default.MessageStatusUpdate, e);
              }
            }
          }, {
            key: "isMyFriend",
            value: function (value) {
              return this.store.isMyFriend(value);
            }
          }, {
            key: "sendFriendRequest",
            value: (statusHandle = (0, i.default)(node.default.mark(function create(uid, msg, extra, anim, callback) {
              var data;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.AddFriendRequest.create()).targetUid = uid;
                      data.reason = msg;
                      data.extra = extra;
                      this._publish("FAR", proto.AddFriendRequest.encode(data).finish(), function (identifierPositions, canCreateDiscussions) {
                        if (0 === identifierPositions) {
                          if (anim) {
                            anim();
                          }
                        } else {
                          if (callback) {
                            callback(identifierPositions);
                          }
                        }
                      });
                    case 5:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, create, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return statusHandle.apply(this, arguments);
            })
          }, {
            key: "getMessages",
            value: function (value, name) {
              var activitySort = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
              var extraCells = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 20;
              var callback = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "";
              return this.store.getConversationMessages(value, name, activitySort, extraCells, callback);
            }
          }, {
            key: "getMessagesEx",
            value: function (value, name, data, source, o, fn, thisp) {
              return this.store.getMessagesEx(value, name, data, thisp);
            }
          }, {
            key: "getMessagesEx2",
            value: function (value, name, data, source, o, fn, thisp) {
              return this.store.getMessagesEx2(value, name, data, thisp);
            }
          }, {
            key: "getUserMessages",
            value: function (value, name, url) {
              var data = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
              var extraCells = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 20;
              var callback = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : "";
              var x = this.store.getConversationMessages(name, url, data, extraCells, callback);
              return x.filter(function (raw) {
                return raw.from === value;
              });
            }
          }, {
            key: "getUserMessagesEx",
            value: function (value, name, data, n) {
              if (!!(arguments.length > 4 && void 0 !== arguments[4])) {
                arguments[4];
              }
              if (arguments.length > 5 && void 0 !== arguments[5]) {
                arguments[5];
              }
              var errorCallback = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : [];
              var result = this.store.getMessagesEx(name, data, errorCallback, "");
              return result.filter(function (raw) {
                return raw.from === value;
              });
            }
          }, {
            key: "getFirstUnreadMessageId",
            value: function (value) {
              return this.store.getFirstUnreadMessageId(value);
            }
          }, {
            key: "_loadRemoteMessagePublishCallback",
            value: function () {
              var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 2;
              var r = arguments[1];
              var data = arguments[2];
              var status = arguments[3];
              var plantService = this;
              var isArray = arguments[4];
              var i = arguments[5];
              if (this.log("loadRemoteMessages result", e, data, status), 0 === e && r) {
                var err = proto.PullMessageResult.decode(r);
                this.log("loadRemoteMessages result data", err);
                var args = [];
                if (err && err.message) {
                  if (err.message.forEach(function (proto) {
                    var self = tree.default.fromProtoMessage(proto);
                    if (self) {
                      var o = $existing_results.default.getMessageContentPersitFlag(self.content.type);
                      if (data) {
                        if (81 === self.type) {
                          var vm = plantService.store.getMessageByUid(window.default.fromValue(self.content.binaryContent));
                          if (vm && vm.messageId > 0) {
                            plantService.store.deleteMessageByUid(window.default.from(self.content.binaryContent));
                            plantService.onRemoteMessageDeleted(vm.messageUid);
                          }
                        }
                        if (80 === self.type) {
                          plantService.onRecallMessage(self.content.operatorId, self.content.messageUid);
                        }
                        if (!(o !== $scope.default.Persist && o !== $scope.default.Persist_And_Count)) {
                          self.messageId = plantService.store.genNormalMessageId();
                          if (plantService.store.saveMessage(self)) {
                            args.push(self);
                          }
                        }
                      } else {
                        if (-1 === o && 1 == (1 & proto.content.persistFlag)) {
                          o = 1;
                        }
                        self.messageId = 1 == (1 & o) && o > 0 ? -1 : 0;
                        args.push(self);
                      }
                    }
                  }), status && args.length > 0) {
                    var message = args[0];
                    var name = message.conversation;
                    var item = this.store.getConversationInfo(name);
                    if (!item) {
                      item = this.store._genAndSaveDefaultConversationInfo(name);
                    }
                    if (!(item.lastMessage && item.lastMessage.timestamp && !(0, v.gt)(message.timestamp, item.lastMessage.timestamp))) {
                      item.lastMessage = message;
                      item.timestamp = message.timestamp;
                      this.eventEmitter.emit(History_1.default.ConversationInfoUpdate, item);
                    }
                  }
                  if (isArray) {
                    isArray(args = args.reverse());
                  }
                } else {
                  if (i) {
                    i(-1);
                  }
                }
              } else {
                if (i) {
                  i(e);
                }
              }
            }
          }, {
            key: "loadRemoteLineMessages",
            value: function (value, name) {
              var subj = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
              var autoInstances = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 20;
              var matrix = this;
              var context = arguments[4];
              var s = arguments[5];
              var x = window.default.fromValue(subj);
              if (x.eq(window.default.ZERO)) {
                x = window.default.MAX_VALUE;
              }
              var data = proto.LoadLineMessages.create();
              data.line = value;
              data.count = autoInstances;
              data.beforeUid = x;
              if (!name) {
                name = [];
              }
              data.contentType = name;
              this._publish("LLM", proto.LoadLineMessages.encode(data).finish(), function () {
                var preTranslateMatrix = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                var yScale = arguments[1];
                matrix._loadRemoteMessagePublishCallback(preTranslateMatrix, yScale, false, false, context, s);
              });
            }
          }, {
            key: "loadRemoteMessages",
            value: function (value, name) {
              var id = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
              var autoInstances = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 20;
              var matrix = this;
              var context = arguments[4];
              var s = arguments[5];
              var val = window.default.fromValue(id);
              if (val.eq(window.default.ZERO)) {
                val = window.default.MAX_VALUE;
              }
              var b = this.store.getConversationInfo(value);
              if (b && b.lastMessage && b.lastMessage.messageUid && val.neq(window.default.MAX_VALUE) && window.default.fromValue(b.lastMessage.messageUid).compare(val) < 0) {
                return this.log("the start message is exits", b.lastMessage.toString(), val.toString()), void (s && s(-2));
              }
              var data = proto.LoadRemoteMessages.create();
              data.conversation = this._toProtoConversation(value);
              if (!name) {
                name = [];
              }
              data.contentType = name;
              data.beforeUid = val;
              data.count = autoInstances;
              this.log("loadRemoteMessages request", value, val.toString(), data);
              this._publish("LRM", proto.LoadRemoteMessages.encode(data).finish(), function () {
                var preTranslateMatrix = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                var yScale = arguments[1];
                matrix._loadRemoteMessagePublishCallback(preTranslateMatrix, yScale, 0 === name.length, 0 === name.length, context, s);
              });
            }
          }, {
            key: "loadRemoteMessage",
            value: function (obj, name, data) {
              var console = this;
              if (obj) {
                var data = proto.INT64Buf.create();
                data.id = window.default.fromValue(obj);
                this._publish("LROM", proto.INT64Buf.encode(data).finish(), function () {
                  var WARN_NO_READ = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                  var item = arguments[1];
                  console._loadRemoteMessagePublishCallback(WARN_NO_READ, item, false, false, name, data);
                });
              } else {
                if (data) {
                  data(-1);
                }
              }
            }
          }, {
            key: "getMessageById",
            value: function (value) {
              return this.store.getMessageById(value);
            }
          }, {
            key: "getMessageByUid",
            value: function (value) {
              return this.store.getMessageByUid(value);
            }
          }, {
            key: "searchMessage",
            value: function (value, name) {
              return this.store.searchConversationMessage(value, name);
            }
          }, {
            key: "sendConversationMessage",
            value: (oginalReverse = (0, i.default)(node.default.mark(function update(self, e, hangout, type, s, url, devops_json) {
              var scope;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      scope = new tree.default;
                      if (self instanceof Messages.default) {
                        scope.conversation = self;
                      } else {
                        scope.conversation = new Messages.default(self.type, self.target, self.line);
                      }
                      scope.messageContent = e;
                      this.sendMessageEx(scope, hangout, type, s, url, devops_json);
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, update, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution, i, s) {
              return oginalReverse.apply(this, arguments);
            })
          }, {
            key: "sendMessage",
            value: (super$0 = (0, i.default)(node.default.mark(function init(windowBits, level, app, i, $page) {
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      this.sendMessageEx(windowBits, [], level, app, i, $page);
                    case 1:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints, n, forceExecution) {
              return super$0.apply(this, arguments);
            })
          }, {
            key: "sendMessageEx",
            value: (origCreatedCallback = (0, i.default)(node.default.mark(function init(options) {
              var id;
              var now;
              var type;
              var picSize = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
              var set = arguments[2];
              var a = arguments[3];
              var _this = this;
              var r_objects = arguments[4];
              var f = arguments[5];
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      id = void 0;
                      now = window.default.fromValue((new Date).getTime());
                      options.status = bg.default.Sending;
                      options.from = this.userId;
                      options.timestamp = now;
                      if ((type = $existing_results.default.getMessageContentPersitFlag(options.messageContent.type)) === $scope.default.No_Persist || type === $scope.default.Transparent) {
                        id = 0;
                        options.messageId = id;
                      } else {
                        id = options.conversation.type === task.default.ChatRoom ? this.store.genChatRoomMessageId() : this.store.genNormalMessageId();
                        options.messageId = id;
                        options.content = this._toProtoMessageContent(options.messageContent);
                        this.store.saveMessage(options);
                        this.log("message prepared", id, now, options);
                        this.store.updateConversationLastMessage(options);
                      }
                      this.eventEmitter.emit(History_1.default.SendMessage, options);
                      if (set) {
                        this.log("onPrepared", this.getMessageById(id));
                        set(id, now);
                      }
                      if (options.messageContent instanceof message.default) {
                        if (options.messageContent.file) {
                          this.uploadMedia(options.messageContent.name, options.messageContent.file, options.messageContent.mediaType, function (e) {
                            options.messageContent.remotePath = e;
                            _this.log("remote Url", e);
                            _this.eventEmitter.emit(History_1.default.MessageStatusUpdate, options);
                            _this._sendMessageInternal(options, picSize, r_objects, f);
                          }, function (widthCtrl) {
                            options.status = bg.default.SendFailure;
                            _this.store.updateMessageById(options);
                            _this.store.updateConversationLastMessage(options);
                            _this.eventEmitter.emit(History_1.default.MessageStatusUpdate, options);
                            if (f) {
                              f(widthCtrl);
                            }
                          }, function (s, failCall) {
                            if (a) {
                              a(s, failCall);
                            }
                          });
                        } else {
                          if ("" !== options.messageContent.remotePath) {
                            this._sendMessageInternal(options, picSize, r_objects, f);
                          } else {
                            options.status = bg.default.SendFailure;
                            this.store.updateMessageById(options);
                            this.store.updateConversationLastMessage(options);
                            this.eventEmitter.emit(History_1.default.MessageStatusUpdate, options);
                            if (f) {
                              this.log("send media message error, file and remoteUrl are null");
                              f(-1);
                            }
                          }
                        }
                      } else {
                        this._sendMessageInternal(options, picSize, r_objects, f);
                      }
                    case 10:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions) {
              return origCreatedCallback.apply(this, arguments);
            })
          }, {
            key: "_sendMessageInternal",
            value: function (obj) {
              var activePhone = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
              var self = this;
              var cb = arguments[2];
              var next = arguments[3];
              var data = this._toProtoMessage(obj);
              data.to = activePhone;
              this.log("_sendMessageInternal", this.connectionStatus);
              var msg = proto.Message.encode(data).finish();
              if (msg.byteLength > 15360 && this.log("\u8b66\u544a\uff01\uff01\uff01\u6d88\u606f\u5185\u5bb9\u5927\u5c0f\u662f: " + msg.byteLength + "\uff0c\u5927\u5c0f\u8d85\u8fc715K\u4e86\uff0c\u5efa\u8bae\u4e0d\u8981\u8d85\u8fc715K\uff0c\u5982\u679c\u5927\u6d88\u606f\u8fc7\u591a\u4f1a\u5f71\u54cd\u63a5\u53d7\u4f53\u9a8c\uff0c\u5efa\u8bae\u5927\u6587\u4ef6\u4f7f\u7528\u5a92\u4f53\u6d88\u606f\u7c7b\u578b!!!"), msg.byteLength > 204800) {
                return console.error("\u6d88\u606f\u5185\u5bb9\u592a\u5927\uff0c\u53d1\u9001\u5931\u8d25!"), void (next && next(-1));
              }
              this._publish("MS", msg, function () {
                var feature = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : -2;
                var path = arguments[1];
                if (self.log("_sendMessageInternal result", feature), 0 !== feature || !path) {
                  return self.log("send message error", feature), obj.status = bg.default.SendFailure, self.store.updateMessageById(obj), self.store.updateConversationLastMessage(obj), self.eventEmitter.emit(History_1.default.MessageStatusUpdate, obj), void (next && next(feature));
                }
                var webentities = new window.default(0);
                var now = new window.default(0);
                if (16 === path.length) {
                  webentities = window.default.fromBytesBE(path.slice(0, 8), true);
                  now = window.default.fromBytesBE(path.slice(8, 16), true);
                  obj.messageUid = webentities;
                  obj.timestamp = now;
                  obj.status = bg.default.Sent;
                  obj.direction = 0;
                  obj.from = self.userId;
                  self.store.updateMessageById(obj);
                  self.store.updateConversationLastMessage(obj);
                  self.eventEmitter.emit(History_1.default.MessageStatusUpdate, obj);
                  if (cb) {
                    cb(webentities, now);
                  }
                } else {
                  obj.status = bg.default.SendFailure;
                  self.store.updateMessageById(obj);
                  self.store.updateConversationLastMessage(obj);
                  self.log("ms reponse length error");
                  self.eventEmitter.emit(History_1.default.MessageStatusUpdate, obj);
                  if (next) {
                    next(-100001);
                  }
                }
              });
            }
          }, {
            key: "recallMessage",
            value: (oldSetAttr = (0, i.default)(node.default.mark(function init(id, tests, n) {
              var data;
              var Authentication = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      (data = proto.INT64Buf.create()).id = window.default.fromValue(id);
                      this._publish("MR", proto.INT64Buf.encode(data).finish(), function (appid, canCreateDiscussions) {
                        if (0 === appid) {
                          if (tests) {
                            tests();
                          }
                          Authentication.onRecallMessage(Authentication.getUserId(), id);
                        } else {
                          if (n) {
                            n(appid);
                          }
                        }
                      });
                    case 3:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return oldSetAttr.apply(this, arguments);
            })
          }, {
            key: "deleteMessageById",
            value: function (value) {
              var hasValue = this.store.deleteMessageById(value);
              return hasValue && this.onMessageDeleted(value), hasValue;
            }
          }, {
            key: "deleteRemoteMessage",
            value: function (obj, name, b) {
              var asEvented = this;
              var data = proto.INT64Buf.create();
              data.id = window.default.fromValue(obj);
              this._publish("MD", proto.INT64Buf.encode(data).finish(), function (applyBackgroundUpdates, i) {
                if (0 === applyBackgroundUpdates) {
                  if (name) {
                    name();
                  }
                  asEvented.onRemoteMessageDeleted(obj);
                } else {
                  if (b) {
                    b(applyBackgroundUpdates);
                  }
                }
              });
            }
          }, {
            key: "clearMessages",
            value: (oldBuildFrag = (0, i.default)(node.default.mark(function init(type, end) {
              var e;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      if (void 0 === end) {
                        end = window.default.MAX_VALUE;
                      }
                      this.store.clearConversationMessages(type, end);
                      e = this.getConversationInfo(type);
                      this.eventEmitter.emit(History_1.default.ConversationInfoUpdate, e);
                    case 4:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp) {
              return oldBuildFrag.apply(this, arguments);
            })
          }, {
            key: "clearRemoteConversationMessages",
            value: (oldBubbleRule = (0, i.default)(node.default.mark(function init(from, topic, callback) {
              var data;
              var room = this;
              return node.default.wrap(function (context$5$0) {
                for (; ;) {
                  switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      data = this._toProtoConversation(from);
                      this._publish("CMD", proto.Conversation.encode(data).finish(), function (value, canCreateDiscussions) {
                        if (0 === value) {
                          room.clearMessages(from);
                          if (topic) {
                            topic();
                          }
                        } else {
                          if (callback) {
                            callback(0 === value ? -1 : value);
                          }
                        }
                      });
                    case 2:
                    case "end":
                      return context$5$0.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, dontForceConstraints) {
              return oldBubbleRule.apply(this, arguments);
            })
          }, {
            key: "insertMessage",
            value: function (value, name, data) {
              var n = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
              var o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
              var result = new tree.default(value, name);
              switch (result.status = data, result.direction = 0, data >= bg.default.Unread && (result.direction = 1, value.type === task.default.Single ? result.from = value.target : result.from = this.userId), result.timestamp = window.default.fromValue(o || (new Date).getTime()), value.type) {
                case task.default.ChatRoom:
                  result.messageId = this.store.genChatRoomMessageId();
                  break;
                default:
                  result.messageId = this.store.genNormalMessageId();
              }
              this.store.insertConversationMessages(result);
              if (n) {
                this.eventEmitter.emit(History_1.default.ReceiveMessage, result);
              }
            }
          }, {
            key: "isUserReceiptEnabled",
            value: function () {
              return "1" !== this.getUserSetting(ShapeMaker_1.default.DisableReceipt, "");
            }
          }, {
            key: "isGlobalDisableSyncDraft",
            value: function () {
              return this.isGlobalDisableDraftSync;
            }
          }, {
            key: "setDisableSyncDraft",
            value: function (value, name, data) {
              this._updateUserSetting(ShapeMaker_1.default.DisableSyncDraft, "", value ? "1" : "0", name, data);
            }
          }, {
            key: "isDisableSyncDraft",
            value: function () {
              return "1" !== this.getUserSetting(ShapeMaker_1.default.DisableSyncDraft, "");
            }
          }, {
            key: "setUserEnableReceipt",
            value: function (value, name, data) {
              this._updateUserSetting(ShapeMaker_1.default.DisableReceipt, "", value ? "0" : "1", name, data);
            }
          }, {
            key: "updateMessageContent",
            value: function (value, name) {
              var item = this.store.getMessageById(value);
              if (0 !== item.messageId) {
                item.messageContent = name;
                this.store.updateMessageById(item);
              }
            }
          }, {
            key: "uploadMedia",
            value: (oldSetupComputes = (0, i.default)(node.default.mark(function init(e, b, type, err, process, cb) {
              var value;
              var g;
              var DEADZONE;
              var c;
              var data;
              var socket = this;
              return node.default.wrap(function (_context) {
                for (; ;) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (value = void 0, g = (Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)).substring(0, 12), e && "" !== e ? (value = e, e = g) : value = e = g, -1 !== e.indexOf(".")) {
                        _context.next = 14;
                        break;
                      }
                      _context.t0 = type;
                      _context.next = 1 === _context.t0 ? 7 : 5 === _context.t0 ? 7 : 2 === _context.t0 ? 9 : 3 === _context.t0 ? 11 : 13;
                      break;
                    case 7:
                      return e = e + ".jpg", _context.abrupt("break", 14);
                    case 9:
                      return e = e + ".mp3", _context.abrupt("break", 14);
                    case 11:
                      return e = e + ".mp4", _context.abrupt("break", 14);
                    case 13:
                      return _context.abrupt("break", 14);
                    case 14:
                      this.log("upload fileName", e, type);
                      DEADZONE = e.substring(e.lastIndexOf("."));
                      if (-1 === value.indexOf(".")) {
                        value = value + DEADZONE;
                      }
                      c = this.userId + "-" + type + "-" + Math.round((new Date).valueOf() / 1E3) + "-" + e;
                      (data = proto.GetUploadTokenRequest.create()).mediaType = type;
                      data.mediaPath = c;
                      this._publish("GMUT", proto.GetUploadTokenRequest.encode(data).finish(), function (selector, o) {
                        if (0 === selector) {
                          var options = proto.GetUploadTokenResult.decode(o);
                          socket.log("getUploadToken result", options);
                          var self = new XMLHttpRequest;
                          var f = false;
                          var autoResumeTimer = setTimeout(function () {
                            this.log("upload media timeout");
                            f = true;
                            self.abort();
                            process(-1);
                          }, 2E5);
                          self.onerror = function (num) {
                            socket.log("upload media error", num);
                            if (process) {
                              process(-1);
                            }
                          };
                          self.onreadystatechange = function () {
                            if (4 === self.readyState && !f) {
                              if (clearTimeout(autoResumeTimer), 200 === self.status) {
                                if (socket.log("upload response", self.responseText), options.type < 2) {
                                  var sourceParts = JSON.parse(self.responseText);
                                  if (err) {
                                    err(options.domain + "/" + sourceParts.key);
                                  }
                                } else {
                                  if (err) {
                                    err(options.domain + "/" + c);
                                  }
                                }
                              } else {
                                socket.log("upload media error status\uff1a" + self.status);
                                if (process) {
                                  process(self.status);
                                }
                              }
                            }
                          };
                          self.onprogress = function (data) {
                            if (data.lengthComputable && cb) {
                              cb(data.loaded, data.total);
                            }
                          };
                          var name = void 0;
                          if (0 === options.type || 4 === options.type) {
                            name = "/fs";
                          } else {
                            if (3 === options.type) {
                              var filename = options.path + "/" + c;
                              filename = (0, renderAssign.AESEncrypt)(filename);
                              name = "/fs/" + filename;
                            } else {
                              if (2 === options.type) {
                                c = encodeURI(c);
                              }
                              name = "/" + c;
                            }
                          }
                          socket.log("upload media cgi", name, options);
                          var server = void 0;
                          var id = void 0;
                          var path = void 0;
                          if (2 === socket.backupAddressStrategy && options.backupServer ? (server = options.backupServer, path = 443 === (path = options.backupSslPort) ? "" : ":" + path, id = 80 === (id = options.backupPort) ? "" : ":" + id) : (server = options.server, path = "", options.sslPort && 443 !== options.sslPort && (path = ":" + options.sslPort), id = 80 !== options.port ? ":" + options.port : ""), options.type < 2 || 4 === options.type) {
                            var form = new FormData;
                            var GET_USER_PROFILE_SUCCESS = "application_octet-stream";
                            if (1 === type) {
                              GET_USER_PROFILE_SUCCESS = "image_jpeg";
                            } else {
                              if (2 === type) {
                                GET_USER_PROFILE_SUCCESS = "audio_amr";
                              }
                            }
                            var data = void 0;
                            data = "string" == typeof b || b instanceof String ? socket._dataURItoBlob(b) : new Blob([b], {
                              type: GET_USER_PROFILE_SUCCESS
                            });
                            form.append("token", options.token);
                            form.append("key", e);
                            if (options.type < 2) {
                              form.append("file", data, value);
                              if (o.default.USE_WSS) {
                                self.open("POST", "https://" + server + path + name);
                              } else {
                                self.open("POST", "http://" + server + id + name);
                              }
                              if (0 !== options.type) {
                                self.setRequestHeader("content-disposition", 'attachment; filename="' + encodeURI(value) + '"');
                              }
                              self.send(form);
                            } else {
                              (new Response(data)).arrayBuffer().then(function (privateKey) {
                                var key = new Uint8Array(privateKey);
                                var data = socket._encrypt(key, false);
                                var blob = new Blob([new Uint8Array(data, data.byteOffset, data.byteLength)]);
                                form.append("file", blob, value);
                                if (o.default.USE_WSS) {
                                  self.open("POST", "https://" + server + path + name);
                                } else {
                                  self.open("POST", "http://" + server + id + name);
                                }
                                self.setRequestHeader("x-wfc-size", data.byteLength);
                                if (0 !== options.type) {
                                  self.setRequestHeader("content-disposition", 'attachment; filename="' + encodeURI(value) + '"');
                                }
                                self.send(form);
                              });
                            }
                          } else {
                            if (options.type >= 2) {
                              var cookies = void 0;
                              if (o.default.USE_WSS) {
                                self.open("PUT", "https://" + server + path + name);
                                cookies = 1 === socket.backupAddressStrategy ? options.sslToken ? options.sslToken : options.token : options.backupSslToken ? options.backupSslToken : options.backupToken;
                              } else {
                                self.open("PUT", "http://" + server + id + name);
                                cookies = 1 === socket.backupAddressStrategy ? options.token : options.backupToken;
                              }
                              self.setRequestHeader("content-disposition", 'attachment; filename="' + encodeURI(value) + '"');
                              self.setRequestHeader("Authorization", cookies);
                              var mime = void 0;
                              if (2 === options.type) {
                                mime = "application/octet-stream";
                                self.setRequestHeader("Content-Type", mime);
                                self.setRequestHeader("x-oss-date", options.date);
                              } else {
                                var ext = e.split(".").pop();
                                if (1 === type) {
                                  mime = "image/jpeg";
                                } else {
                                  if (2 === type) {
                                    mime = "audio/amr";
                                  } else {
                                    if (3 === type) {
                                      mime = "video/mp4";
                                    } else {
                                      if (ext) {
                                        switch (ext) {
                                          case "jpg":
                                          case "jpeg":
                                            mime = "image/jpeg";
                                            break;
                                          case "gif":
                                            mime = "image/gif";
                                            break;
                                          case "png":
                                            mime = "image/png";
                                            break;
                                          case "mp3":
                                            mime = "audio/mpeg";
                                            break;
                                          case "mp4":
                                            mime = "video/mp4";
                                            break;
                                          case "doc":
                                          case "docx":
                                            mime = "application/vnd.ms-word";
                                            break;
                                          case "xls":
                                          case "xlsx":
                                            mime = "application/vnd.ms-xls";
                                            break;
                                          case "ppt":
                                          case "pptx":
                                          case "pps":
                                            mime = "application/vnd.ms-powerpoint";
                                            break;
                                          case "pdf":
                                            mime = '"application/pdf';
                                            break;
                                          case "xml":
                                            mime = "application/vnd.ms-xml";
                                            break;
                                          default:
                                            mime = "application/octet-stream";
                                        }
                                      } else {
                                        mime = "application/octet-stream";
                                      }
                                    }
                                  }
                                }
                                self.setRequestHeader("Content-Type", mime);
                                self.setRequestHeader("x-amz-date", options.date);
                                self.setRequestHeader("x-wfc-cid", (0, renderAssign.AESEncrypt)(socket.clientId));
                                self.setRequestHeader("x-wfc-uid", (0, renderAssign.AESEncrypt)(socket.userId));
                              }
                              var req = void 0;
                              if (req = "string" == typeof b || b instanceof String ? socket._dataURItoBlob(b) : new Blob([b], {
                                type: mime
                              }), 3 === options.type) {
                                if (req.size > 104857600) {
                                  return void (process && (socket.log("upload media size too large", req.size), process(-1)));
                                }
                                (new Response(req)).arrayBuffer().then(function (s) {
                                  var b = new Uint8Array(s);
                                  var r = socket._encrypt(b);
                                  self.setRequestHeader("x-wfc-size", s.byteLength);
                                  self.send(r);
                                });
                              } else {
                                (new Response(req)).arrayBuffer().then(function (e) {
                                  self.send(e);
                                });
                              }
                            }
                          }
                        } else {
                          if (process) {
                            process(selector);
                          }
                        }
                      });
                      this.log("upload-----------");
                    case 23:
                    case "end":
                      return _context.stop();
                  }
                }
              }, init, this);
            })), function (canCreateDiscussions, isSlidingUp, n, dontForceConstraints, i, s) {
              return oldSetupComputes.apply(this, arguments);
            })
          }, {
            key: "getAuthorizedMediaUrl",
            value: function (value, name, s, done, callback) {
              var data = proto.GetUploadTokenRequest.create();
              data.mediaType = name;
              data.mediaPath = s;
              data.messageId = value;
              this._publish("GMDT", proto.INT64Buf.encode(data).finish(), function (string, data) {
                if (0 === string && data) {
                  var out = proto.IDBuf.decode(data);
                  if (done) {
                    done(out.id);
                  }
                } else {
                  if (callback) {
                    callback(0 === string ? -1 : string);
                  }
                }
              });
            }
          }, {
            key: "isSupportBigFilesUpload",
            value: function () {
              return this.serverConfigs.isSupportBigFileUpload;
            }
          }, {
            key: "getUploadMediaUrl",
            value: function (value, name, type, fail, request) {
              var obj = proto.GetUploadTokenRequest.create();
              var bag = this.userId + "-" + name + "-" + Math.round((new Date).valueOf() / 1E3) + "-" + Math.round(1E8 * Math.random());
              var i = value.lastIndexOf(".");
              if (i > 0) {
                bag = bag + value.substring(i);
              }
              obj.type = name;
              obj.mediaPath = bag;
              obj.contentType = type || "application/octet-stream";
              this._publish("GMPU", proto.GetUploadTokenRequest.encode(obj).finish(), function (method, params) {
                if (0 === method && params) {
                  var e = proto.GetPresignedUrlResult.decode(params);
                  if (fail) {
                    fail(e.presignedUrl, e.mediaUrl, e.backupPresignedUrl, e.type);
                  }
                } else {
                  if (request) {
                    request(0 === method ? -1 : method);
                  }
                }
              });
            }
          }, {
            key: "_getContentType",
            value: function (value, name) {
              if (1 === value) {
                return "image/jpeg";
              }
              if (2 === value) {
                return "audio/amr";
              }
              if (3 === value) {
                return "video/mp4";
              }
              if (name) {
                var undefined = name.substring(name.lastIndexOf(".") + 1);
                return "jpg" === undefined || "jpeg" === undefined ? "image/jpeg" : "gif" === undefined ? "image/gif" : "png" === undefined ? "image/png" : "mp3" === undefined ? "audio/mpeg" : "mp4" === undefined ? "video/mp4" : "doc" === undefined || "docx" === undefined ? "application/vnd.ms-word" : "xls" === undefined || "xlsx" === undefined ? "application/vnd.ms-xls" : "ppt" === undefined || "pptx" === undefined ? "application/vnd.ms-powerpoint" : "pps" === undefined ? "application/vnd.ms-powerpoint" :
                  "pdf" === undefined ? "application/pdf" : "xml" === undefined ? "application/vnd.ms-xml" : "application/octet-stream";
              }
              return "application/octet-stream";
            }
          }, {
            key: "_getFileRecordsCallback",
            value: function (value, name, target, callback) {
              if (0 === value && name) {
                var tracker = proto.LoadFileRecordRes.decode(name);
                var one = [];
                tracker.record.forEach(function (result) {
                  var data = new _aliapp2.default;
                  data.conversation = new Messages.default(result.conversation.type, result.conversation.target, result.conversation.line);
                  data.messageUid = result.messageId;
                  data.name = result.name;
                  data.url = result.url;
                  if (o.default.urlRedirect) {
                    data.url = o.default.urlRedirect(result.url);
                  }
                  data.size = result.size;
                  data.downloadCount = result.downloadCount;
                  data.userId = result.fromUser;
                  data.timestamp = result.dt;
                  one.push(data);
                });
                if (target) {
                  target(one);
                }
              } else {
                if (callback) {
                  callback(0 === value ? -1 : value);
                }
              }
            }
          }, {
            key: "getConversationFileRecords",
            value: function (value, name, id, n, o, alignment) {
              var MotionGuidePlugin = this;
              var data = proto.LoadFileRecordReq.create();
              data.conversation = this._toProtoConversation(value);
              data.messageId = window.default.fromValue(id);
              data.from = name;
              data.count = n;
              this._publish("LFR", proto.LoadFileRecordReq.encode(data).finish(), function (data, injectProps) {
                MotionGuidePlugin._getFileRecordsCallback(data, injectProps, o, alignment);
              });
            }
          }, {
            key: "getMyFileRecords",
            value: function (value, name, data, key) {
              var exports = this;
              var data = proto.LoadFileRecordReq.create();
              data.messageId = window.default.fromValue(value);
              data.count = name;
              this._publish("LFR", proto.LoadFileRecordReq.encode(data).finish(), function (txt4, ignoreNativeFunc) {
                exports._getFileRecordsCallback(txt4, ignoreNativeFunc, data, key);
              });
            }
          }, {
            key: "deleteFileRecord",
            value: function (obj, name, b) {
              var data = proto.INT64Buf.create();
              data.id = window.default.fromValue(obj);
              this._publish("DFR", proto.INT64Buf.encode(data).finish(), function (applyBackgroundUpdates, n) {
                if (0 === applyBackgroundUpdates) {
                  if (name) {
                    name();
                  }
                } else {
                  if (b) {
                    b(applyBackgroundUpdates);
                  }
                }
              });
            }
          }, {
            key: "markConversationAsUnread",
            value: function (value, name) {
              var data = this.store.setLastReceivedMessageUnread(value, "0", "0");
              if (data && (0, v.gt)(data, 0) && name) {
                var n = new ns.default(data);
                var e = this.store.getMessageByUid(data);
                return n.timestamp = e.timestamp, this.sendConversationMessage(value, n), true;
              }
              return false;
            }
          }, {
            key: "getVersion",
            value: function () {
              return update.version;
            }
          }, {
            key: "_dataURItoBlob",
            value: function (value) {
              var arr = value.split(",");
              var severity = arr[0].match(/:(.*?);/)[1];
              var byteString = atob(arr[1]);
              var i = byteString.length;
              var view = new Uint8Array(i);
              for (; i--;) {
                view[i] = byteString.charCodeAt(i);
              }
              return this.log("-----------dataurltoblob", severity), new Blob([view], {
                type: severity
              });
            }
          }, {
            key: "_encrypt",
            value: function (value) {
              var password = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
              var buf = new Buffer((0, renderAssign.AESEncrypt)(value, this.privateSecret, password), "base64");
              return buf;
            }
          }, {
            key: "_decrypt",
            value: function (value) {
              var packLength = (0, renderAssign.AESDecrypt)(value.toString("base64"), this.privateSecret, true);
              return new Buffer(packLength);
            }
          }, {
            key: "_decryptPublishResponse",
            value: function (value) {
              var len = (0, renderAssign.AESDecrypt)(value.payload.slice(1, value.payload.length).toString("base64"), this.privateSecret, true);
              return len ? new Buffer(len) : null;
            }
          }, {
            key: "_toProtoConversation",
            value: function (value) {
              var node = proto.Conversation.create();
              return node.type = value.type, node.target = value.target, node.line = value.line, node;
            }
          }, {
            key: "_toProtoMessage",
            value: function (obj) {
              var data = proto.Message.create();
              return data.conversation = obj.conversation, data.fromUser = this.getUserId(), data.content = this._toProtoMessageContent(obj.messageContent), data;
            }
          }, {
            key: "_toProtoMessageContent",
            value: function (value) {
              if (!value) {
                return null;
              }
              var options = proto.MessageContent.create();
              var self = value.encode();
              return options.content = self.content, options.pushContent = self.pushContent, options.pushData = self.pushData, options.searchableContent = self.searchableContent, options.data = self.binaryContent, options.type = self.type, options.mentionedType = self.mentionedType, options.mentionedTarget = self.mentionedTargets, options.mediaType = self.mediaType, options.remoteMediaUrl = self.remoteMediaUrl, options.persistFlag = $existing_results.default.getMessageContentPersitFlag(self.type),
                options.extra = value.extra, options;
            }
          }, {
            key: "_generalOperationCallback",
            value: function (value, name, fn) {
              if (0 === value) {
                if (name) {
                  name();
                }
              } else {
                if (fn) {
                  fn(value);
                }
              }
            }
          }, {
            key: "_getStore",
            value: function () {
              return this.store;
            }
          }, {
            key: "log",
            value: function (value) {
              if (!o.default.DISABLE_LOG) {
                var _console2;
                var length = arguments.length;
                var args = Array(length > 1 ? length - 1 : 0);
                var i = 1;
                for (; i < length; i++) {
                  args[i - 1] = arguments[i];
                }
                (_console2 = console).log.apply(_console2, [value].concat(args));
              }
            }
          }, {
            key: "warn",
            value: function (value) {
              if (!o.default.DISABLE_LOG) {
                var _console2;
                var length = arguments.length;
                var args = Array(length > 1 ? length - 1 : 0);
                var i = 1;
                for (; i < length; i++) {
                  args[i - 1] = arguments[i];
                }
                (_console2 = console).warn.apply(_console2, [value].concat(args));
              }
            }
          }, {
            key: "error",
            value: function (value) {
              if (!o.default.DISABLE_LOG) {
                var _console2;
                var length = arguments.length;
                var args = Array(length > 1 ? length - 1 : 0);
                var i = 1;
                for (; i < length; i++) {
                  args[i - 1] = arguments[i];
                }
                (_console2 = console).error.apply(_console2, [value].concat(args));
              }
            }
          }, {
            key: "test",
            value: function () {
              this.log("---------------test start----------------------");
              var t = new window.default(-35650792, 34748344, false);
              var e = new window.default(-1415576788, 34740445, false);
              this.log("xxxoo", t.comp(e), t.toString(), e.toString());
              this.log("---------------test end----------------------");
            }
          }]), update;
        }();
        s.connectionTimeout = 2E4;
        s.version = "WFCWebSDKVersion-2021-12-15";
        var text = new s;
        name.default = text;
      }).call(this, require("./node_modules/node-libs-browser/node_modules/buffer/index.js").Buffer);
    },
    "./wfc/internal/wfc_store.js": function (cond, t, r) {
      function $(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      Object.defineProperty(t, "__esModule", {
        value: true
      });
      var n = $(r("./node_modules/babel-runtime/core-js/json/stringify.js"));
      var o = $(r("./node_modules/babel-runtime/helpers/toConsumableArray.js"));
      var i = $(r("./node_modules/babel-runtime/core-js/object/assign.js"));
      var s = $(r("./node_modules/babel-runtime/core-js/get-iterator.js"));
      var a = $(r("./node_modules/babel-runtime/core-js/set.js"));
      var $realtime = $(r("./node_modules/babel-runtime/core-js/map.js"));
      var $gBCRBottom = $(r("./node_modules/babel-runtime/helpers/classCallCheck.js"));
      var d = $(r("./node_modules/babel-runtime/helpers/createClass.js"));
      var self = $(r("./node_modules/long/src/long.js"));
      var bg = $(r("../messages/messageStatus"));
      var _channel2 = $(r("../model/conversation"));
      var h = $(r("../model/conversationInfo"));
      var task = $(r("../model/conversationType"));
      var $existing_results = $(r("../model/internal/friendInfo"));
      var field = $(r("../model/nullGroupInfo"));
      var schema = $(r("../model/nullUserInfo"));
      var options = $(r("../model/unreadCount"));
      var _noframeworkWaypoints2 = $(r("../client/userSettingScope"));
      var config = $(r("../messages/mediaMessageContent"));
      var fn = $(r("../model/NullChannelInfo"));
      var ShapeMaker_1 = $(r("../client/messageConfig"));
      var x = r("../util/longUtil");
      var VueTextMask = $(r("./wfc/internal/syncReadEntry.js"));
      var _custom2 = $(r("../messages/persistFlag"));
      var contentScriptData = $(r("../model/groupMemberType"));
      var ShapeViewer_1 = $(r("../../config.js"));
      var _deepAssign2 = $(r("../model/friend"));
      var _UiIcon2 = $(r("../model/userInfo"));
      var relativeUrlImg = $(r("../model/channelInfo"));
      var cell = $(r("../model/groupInfo"));
      var xmlparser = r("./wfc/internal/aes.js");
      var offsetFromCenter = function () {
        function init(type) {
          (0, $gBCRBottom.default)(this, init);
          this.users = new $realtime.default;
          this.groups = new $realtime.default;
          this.loadingUsers = new a.default;
          this.loadingGroups = new a.default;
          this.loadingGroupMembers = new a.default;
          this.favGroups = [];
          this.favUsers = [];
          this.channels = new $realtime.default;
          this.groupMembers = new $realtime.default;
          this.friends = new $realtime.default;
          this.deliveries = new $realtime.default;
          this.readEntries = new $realtime.default;
          this.syncReadEntries = new $realtime.default;
          this.friendRequests = [];
          this.messages = [];
          this.settings = [];
          this.conversationInfos = [];
          this.chatRoomMessageId = 100;
          this.messageId = 100;
          this.syncReadId = 100;
          this.impl = null;
          this.impl = type;
          if (ShapeViewer_1.default.ENABLE_INFO_PERSISTENCE) {
            this.users = localStorage;
            this.groups = localStorage;
            this.channels = localStorage;
          }
        }
        return (0, d.default)(init, [{
          key: "genConversationKey",
          value: function (value) {
            return value.type + "@" + value.target + "@" + value.line;
          }
        }, {
          key: "getUser",
          value: function (value) {
            var userId = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
            var result = this._get(this.users, "u", value, _UiIcon2.default);
            if (result) {
              var c = this.getFriendAlias(value);
              if (c && "" !== c && (result.friendAlias = c), userId.length > 0) {
                var data = this.getGroupMember(userId, value);
                if (data && data.alias && "" !== data.alias) {
                  result.groupAlias = data.alias;
                }
              }
            } else {
              result = new schema.default(value);
            }
            return result;
          }
        }, {
          key: "setUser",
          value: function (value) {
            this._set(this.users, "u", value.uid, value);
          }
        }, {
          key: "getChannelInfo",
          value: function (value) {
            var result = this._get(this.channels, "c", value, relativeUrlImg.default);
            return result || (result = new fn.default(value)), result;
          }
        }, {
          key: "setChannelInfo",
          value: function (obj) {
            if (!(obj instanceof fn.default)) {
              this._set(this.channels, "c", obj.channelId, obj);
            }
          }
        }, {
          key: "getGroupInfo",
          value: function (value) {
            var result = this._get(this.groups, "g", value, cell.default);
            return result || (result = new field.default(value)), result;
          }
        }, {
          key: "setGroupInfo",
          value: function (value) {
            this._set(this.groups, "g", value.target, value);
          }
        }, {
          key: "getGroupMembers",
          value: function (value) {
            var time = this.groupMembers.get(value);
            return time = (time = time || []).filter(function (model) {
              return model.type !== contentScriptData.default.Removed;
            });
          }
        }, {
          key: "getGroupMemberIds",
          value: function (value) {
            var vec__22329 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            var s = this.getGroupMembers(value, vec__22329);
            var serieIds = [];
            return s.forEach(function (row) {
              if (row.type !== contentScriptData.default.Removed) {
                serieIds.push(row.memberId);
              }
            }), serieIds;
          }
        }, {
          key: "setGroupMembers",
          value: function (value, name) {
            this.groupMembers.set(value, name);
          }
        }, {
          key: "removeGroupAndMembers",
          value: function (value) {
            this._delete(this.groups, "g", value);
            this.groupMembers.delete(value);
          }
        }, {
          key: "removeGroupMembers",
          value: function (value, name) {
            var r = this.groupMembers.get(value);
            if (r) {
              r = r.filter(function (result) {
                return -1 === name.indexOf(result.memberId);
              });
              this.groupMembers.set(value, r);
            }
          }
        }, {
          key: "updateGroupMembers",
          value: function (value, name) {
            var data = this.groupMembers.get(value);
            if (data) {
              var k = 0;
              for (; k < name.length; k++) {
                var o = false;
                var i = 0;
                for (; i < data.length; i++) {
                  if (data[i].memberId === name[k].memberId) {
                    data[i] = name[k];
                    o = true;
                  }
                }
                if (!o) {
                  data.push(name[k]);
                }
              }
            } else {
              this.groupMembers.set(value, name);
            }
          }
        }, {
          key: "updateGroupMemberMuteOrAllow",
          value: function (value, name, s, m) {
            var Mad = this;
            if (name) {
              name.forEach(function (output) {
                var error = Mad.getGroupMember(value, output);
                if (error) {
                  error.type = m ? s ? contentScriptData.default.Allowed : 0 : s ? contentScriptData.default.Muted : 0;
                }
              });
            }
          }
        }, {
          key: "updateGroupMemberAlias",
          value: function (value, name, id) {
            var n = this.getGroupMember(value, name);
            if (n) {
              n.alias = id;
            }
          }
        }, {
          key: "updateGroupMemberExtra",
          value: function (value, name, data) {
            var li = this.getGroupMember(value, name);
            if (li) {
              li.extra = data;
            }
          }
        }, {
          key: "getGroupMember",
          value: function (value, name) {
            var minyMin = this.groupMembers.get(value);
            if (!minyMin) {
              return null;
            }
            var _iteratorNormalCompletion3 = true;
            var o = false;
            var i = void 0;
            try {
              var _step2;
              var _iterator3 = (0, s.default)(minyMin);
              for (; !(_iteratorNormalCompletion3 = (_step2 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var data = _step2.value;
                if (name === data.memberId) {
                  return data;
                }
              }
            } catch (contactCapacity) {
              o = true;
              i = contactCapacity;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }
              } finally {
                if (o) {
                  throw i;
                }
              }
            }
            return null;
          }
        }, {
          key: "getFriends",
          value: function () {
            var stdoutLog = [];
            return this.friends.forEach(function (data, canCreateDiscussions) {
              if (0 === data.state) {
                var message = new _deepAssign2.default;
                message.userId = data.uid;
                message.alias = data.alias;
                message.extra = data.extra;
                message.extra = data.updateDt;
                stdoutLog.push(message);
              }
            }), stdoutLog;
          }
        }, {
          key: "getFriendIds",
          value: function () {
            var suids = [];
            return this.friends.forEach(function (trace, canCreateDiscussions) {
              if (0 === trace.state) {
                suids.push(trace.uid);
              }
            }), suids;
          }
        }, {
          key: "getBlackList",
          value: function () {
            var suids = [];
            return this.friends.forEach(function (trace, canCreateDiscussions) {
              if (2 === trace.state) {
                suids.push(trace.uid);
              }
            }), suids;
          }
        }, {
          key: "isBlackListed",
          value: function (value) {
            return 2 === this.friends.get(value).state;
          }
        }, {
          key: "setBlackList",
          value: function (value, name) {
            this.friends.get(value).state = name ? 2 : 0;
          }
        }, {
          key: "isMyFriend",
          value: function (value) {
            var t = this.friends.get(value);
            return !(!t || 0 !== t.state);
          }
        }, {
          key: "isBlocked",
          value: function (value) {
            var t = this.friends.get(value);
            return t && 2 === t.state;
          }
        }, {
          key: "insertFriend",
          value: function (obj) {
            var release1 = this.friends.get(obj.uid);
            if (!release1 || obj.updateDt.compare(release1.updateDt) > 0) {
              this.friends.set(obj.uid, (0, i.default)(new $existing_results.default, obj));
            }
          }
        }, {
          key: "addFavGroup",
          value: function (value) {
            if (!(this.favGroups.indexOf(value) >= 0)) {
              this.favGroups.push(value);
            }
          }
        }, {
          key: "getFavGroups",
          value: function () {
            return this.favGroups;
          }
        }, {
          key: "isFavGroup",
          value: function (value) {
            var valBoolVal = this.favGroups.indexOf(value);
            return valBoolVal && valBoolVal >= 0;
          }
        }, {
          key: "getFavUsers",
          value: function () {
            return this.favUsers;
          }
        }, {
          key: "isFavUser",
          value: function (value) {
            var valBoolVal = this.favUsers.indexOf(value);
            return valBoolVal && valBoolVal >= 0;
          }
        }, {
          key: "getFavGroupInfos",
          value: function () {
            var self = this;
            var rulesCache = [];
            return this.favGroups.map(function (type) {
              var nodes = self._get(self.groups, "g", type, cell.default);
              rulesCache.push(nodes);
            }), rulesCache;
          }
        }, {
          key: "getFriendAlias",
          value: function (value) {
            var tag = this.friends.get(value);
            var p = tag ? tag.alias : "";
            return p.length > 0 ? p : null;
          }
        }, {
          key: "getFriendExtra",
          value: function (value) {
            var json = this.friends.get(value);
            var params = json ? json.extra : "";
            return params.length > 0 ? params : null;
          }
        }, {
          key: "getFriendUserInfos",
          value: function () {
            var Controller = this;
            var _posPoints = [];
            return this.friends.forEach(function (inAgent, key) {
              if (0 === inAgent.state) {
                var o = Controller.getUser(key);
                _posPoints.push(o);
              }
            }), _posPoints;
          }
        }, {
          key: "getConversationInfo",
          value: function (value) {
            var t = this.conversationInfos.filter(function (status) {
              return status.conversation.equal(value);
            });
            return t && t.length > 0 ? t[0] : null;
          }
        }, {
          key: "clearConversationUnreadStatus",
          value: function (obj) {
            var thread = this.getConversationInfo(obj);
            var visibility = 0;
            return thread && (visibility = thread.unreadCount.unread + thread.unreadCount.unreadMention + thread.unreadCount.unreadMentionAll, this.updateConversationUnreadStatus(obj, thread.timestamp)), visibility;
          }
        }, {
          key: "clearMessageUnreadStatus",
          value: function (value) {
            var last_v = false;
            var i = 0;
            for (; i < this.messages.length; i++) {
              var item = this.messages[i];
              if (item.messageId === value && [bg.default.Unread, bg.default.Mentioned, bg.default.AllMentioned].indexOf(item.status) > -1) {
                var thread = this.getConversationInfo(item.conversation);
                if (thread) {
                  switch (item.status) {
                    case bg.default.Unread:
                      thread.unreadCount.unread -= 1;
                      break;
                    case bg.default.Mentioned:
                      thread.unreadCount.unreadMention -= 1;
                      break;
                    case bg.default.AllMentioned:
                      thread.unreadCount.unreadMentionAll -= 1;
                  }
                  last_v = true;
                }
                item.status = bg.default.Readed;
                break;
              }
            }
            return last_v;
          }
        }, {
          key: "updateConversationRead",
          value: function (value, name) {
            var hx$ = this;
            this.messages.forEach(function (result) {
              if (result.conversation.equal(value) && result.status === bg.default.Sent && (0, x.lte)(result.timestamp, name)) {
                result.status = bg.default.Readed;
                hx$.log("--------- mark conversation message read", value, name);
              }
            });
          }
        }, {
          key: "getConversationReadMaxDt",
          value: function (value) {
            var result = self.default.ZERO;
            return this.messages.forEach(function (event) {
              if (event.conversation.equal(value)) {
                result = (0, x.gt)(event.timestamp, result) ? event.timestamp : result;
              }
            }), result;
          }
        }, {
          key: "getUnreadMsgSenders",
          value: function (value) {
            var pattern = [];
            return this.messages.forEach(function (event) {
              if (event.conversation.equal(value)) {
                if (!(event.status !== bg.default.Unread && event.status !== bg.default.Mentioned && event.status !== bg.default.AllMentioned)) {
                  if (-1 === pattern.indexOf(event.from)) {
                    pattern.push(event.from);
                  }
                }
              }
            }), pattern;
          }
        }, {
          key: "clearAllUnreadStatus",
          value: function () {
            var assert = this;
            var tt = 0;
            return this.conversationInfos.forEach(function (thread) {
              tt = tt + (thread.unreadCount.unread + thread.unreadCount.unreadMention + thread.unreadCount.unreadMentionAll);
              assert.updateConversationUnreadStatus(conversation, thread.timestamp);
            }), tt;
          }
        }, {
          key: "updateConversationUnreadStatus",
          value: function (obj, name) {
            var match_ids = this.getConversationMessages(obj);
            var thread = this.getConversationInfo(obj);
            thread.unreadCount.unread = 0;
            thread.unreadCount.unreadMention = 0;
            thread.unreadCount.unreadMentionAll = 0;
            if ((0, x.gte)(name, thread.timestamp)) {
              match_ids.forEach(function (e) {
                if ((0, x.gte)(name, e.timestamp) && [bg.default.Unread, bg.default.AllMentioned, bg.default.Mentioned].indexOf(e.status) > -1) {
                  e.status = bg.default.Readed;
                }
              });
            } else {
              match_ids.forEach(function (e) {
                if (0 !== e.direction) {
                  if ((0, x.gt)(e.timestamp, name) && ShapeMaker_1.default.getMessageContentPersitFlag(e.content.type) === _custom2.default.Persist_And_Count) {
                    if (e.status === bg.default.Unread) {
                      thread.unreadCount.unread += 1;
                    } else {
                      if (e.status === bg.default.Mentioned) {
                        thread.unreadCount.unreadMention += 1;
                      } else {
                        if (e.status === bg.default.AllMentioned) {
                          thread.unreadCount.unreadMentionAll += 1;
                        }
                      }
                    }
                  } else {
                    if ([bg.default.Unread, bg.default.AllMentioned, bg.default.Mentioned].indexOf(e.status) > -1) {
                      e.status = bg.default.Readed;
                    }
                  }
                }
              });
            }
          }
        }, {
          key: "_getConversationInfos",
          value: function () {
            return this.conversationInfos;
          }
        }, {
          key: "getConversationList",
          value: function (value, name) {
            return this.conversationInfos.filter(function (result) {
              if (-1 === value.indexOf(result.conversation.type) || -1 === name.indexOf(result.conversation.line)) {
                return false;
              }
              result.conversation.target;
              result.conversation.type;
              return true;
            }).sort(function (options, child) {
              return options.isTop && !child.isTop ? 1 : !options.isTop && child.isTop ? -1 : (0, x.compare)(options.timestamp, child.timestamp);
            }).reverse();
          }
        }, {
          key: "searchFriends",
          value: function (value) {
            return this.getFriendUserInfos().filter(function (originalTenantNetwork) {
              return originalTenantNetwork.displayName.indexOf(value) >= 0;
            });
          }
        }, {
          key: "searchConversation",
          value: function (value) {
            var me = this;
            var actionsRequireSave = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [0, 1, 2, 3];
            var seenLines = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [0, 1];
            return this.conversationInfos.filter(function (event) {
              if (actionsRequireSave.indexOf(event.conversation.type) < 0 || seenLines.indexOf(event.conversation.line) < 0) {
                return false;
              }
              var displayName = void 0;
              switch (event.conversation.type) {
                case task.default.Single:
                  displayName = me.getUser(event.conversation.target).displayName;
                  break;
                case task.default.Group:
                  displayName = me.getGroupInfo(event.conversation.target).displayName;
              }
              if (displayName && displayName.indexOf(value) > -1) {
                return true;
              }
              var attributeErrors = me.searchConversationMessage(event.conversation, value);
              return attributeErrors && attributeErrors.length > 0;
            });
          }
        }, {
          key: "searchGroups",
          value: function (value) {
            var colorDist = [];
            return this.groups.forEach(function (canCreateDiscussions, n) {
              if (n.name.indexOf(value) > -1) {
                colorDist.push(n);
              }
            }), colorDist;
          }
        }, {
          key: "_findConversationInfoIndex",
          value: function (value) {
            var i = 0;
            for (; i < this.conversationInfos.length; i++) {
              if (this.conversationInfos[i].conversation.equal(value)) {
                return i;
              }
            }
            return -1;
          }
        }, {
          key: "removeConversation",
          value: function (value) {
            var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            var val_index = this._findConversationInfoIndex(value);
            if (val_index > -1) {
              this.conversationInfos.splice(val_index, 1);
            }
            if (t) {
              this.messages = this.messages.filter(function (status) {
                return !status.conversation.equal(value);
              });
            }
          }
        }, {
          key: "setConversationTop",
          value: function (value, name) {
            var res = this.getConversationInfo(value);
            if (res) {
              res.isTop = name;
            }
          }
        }, {
          key: "setConversationSilent",
          value: function (value, name) {
            var obj = this.getConversationInfo(value);
            if (obj) {
              obj.isSilent = name;
            }
          }
        }, {
          key: "setConversationDraft",
          value: function (value, name) {
            var result = this.getConversationInfo(value);
            if (result) {
              result.draft = name;
            }
          }
        }, {
          key: "getUnreadCount",
          value: function (value, name) {
            var count = new options.default;
            return this.conversationInfos.forEach(function (self) {
              if (value.indexOf(self.conversation.type) > -1 && name.indexOf(self.conversation.line) > -1 && self.unreadCount) {
                count.unread += self.unreadCount.unread;
                count.unreadMention += self.unreadCount.unreadMention;
                count.unreadMentionAll += self.unreadCount.unreadMentionAll;
              }
            }), count;
          }
        }, {
          key: "getConversationUnreadCount",
          value: function (value) {
            var idx = this._findConversationInfoIndex(value);
            return idx > -1 ? this.conversationInfos[idx].unreadCount : null;
          }
        }, {
          key: "insertConversationMessages",
          value: function (value) {
            var source;
            (source = this.messages).push.apply(source, (0, o.default)(value));
          }
        }, {
          key: "updateConversationLastMessage",
          value: function (obj) {
            if (obj.messageId) {
              var self = this.conversationInfos.find(function (status) {
                return status.conversation.equal(obj.conversation);
              });
              if (!self) {
                var v = this.getUserSetting(_noframeworkWaypoints2.default.Conversation_Sync, obj.conversation.conversationType + "-" + obj.conversation.line + "-" + obj.conversation.target);
                if (v && v.value && v.value.startsWith("-") && (0, x.gte)(-Number(v.value), obj.timestamp)) {
                  return void this.log("conversation removed, drop conversation message", obj);
                }
                (self = new h.default).conversation = obj.conversation;
                self.timestamp = obj.timestamp;
                self.unreadCount = new options.default;
                this.conversationInfos.push(self);
              }
              var options = self.conversation;
              var chooserElem = this.getUserSetting(_noframeworkWaypoints2.default.Conversation_Sync, options.conversationType + "-" + options.line + "-" + options.target);
              var additionalDigits = 0;
              if (chooserElem) {
                additionalDigits = Number(chooserElem.value);
              }
              if ((0, x.gte)(obj.timestamp, self.timestamp)) {
                self.lastMessage = obj;
                self.timestamp = obj.timestamp;
              }
              if ((0, x.gt)(obj.timestamp, additionalDigits) && 1 === obj.direction && ShapeMaker_1.default.getMessageContentFlag(obj.messageContent.type) === _custom2.default.Persist_And_Count) {
                if (obj.status === bg.default.Unread) {
                  self.unreadCount.unread += 1;
                } else {
                  if (obj.status === bg.default.Mentioned) {
                    self.unreadCount.unreadMention += 1;
                  } else {
                    if (obj.status === bg.default.AllMentioned) {
                      self.unreadCount.unreadMentionAll += 1;
                    }
                  }
                }
              }
            }
          }
        }, {
          key: "getConversationMessages",
          value: function (value) {
            var id = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
            var isArray = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
            var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
            var phone = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : "";
            var object = null;
            if (id) {
              object = this.getMessageById(id);
            }
            var c = this.messages.filter(function (msg) {
              return object ? isArray ? msg.conversation.equal(value) && (0, x.lt)(msg.timestamp, object.timestamp) && (!phone || (0 === msg.direction && (msg.to === phone || "" === msg.to) || msg.from === phone)) : msg.conversation.equal(value) && (0, x.gt)(msg.timestamp, object.timestamp) && (!phone || (0 === msg.direction && (msg.to === phone || "" === msg.to) || msg.from === phone)) : msg.conversation.equal(value);
            });
            return c && c.length > 0 && (c = c.sort(function (ssrcReport, internalRTCStatsReport) {
              return (0, x.compare)(ssrcReport.timestamp, internalRTCStatsReport.timestamp);
            })), i > 0 && (c = isArray ? c.slice(-i) : c.slice(0, i)), c;
          }
        }, {
          key: "getConversationLastReceivedMessageUid",
          value: function (value) {
            var banListKeys = this.messages.filter(function (status) {
              return status.conversation.equal(value) && 1 === status.direction;
            });
            return banListKeys && banListKeys.length > 0 ? (banListKeys = banListKeys.sort(function (ssrcReport, internalRTCStatsReport) {
              return (0, x.compare)(ssrcReport.timestamp, internalRTCStatsReport.timestamp);
            }))[banListKeys.length - 1].messageUid : 0;
          }
        }, {
          key: "setLastReceivedMessageUnread",
          value: function (obj, name, value) {
            if (console.log("setLastReceivedMessageUnread", obj, name), (0, x.eq)(name, 0) && (name = this.getConversationLastReceivedMessageUid(obj)), (0, x.eq)(name, 0)) {
              return 0;
            }
            var cell = this.getMessageByUid(name);
            return cell && cell.status > bg.default.Unread ? (cell.status = bg.default.Unread, (0, x.eq)(value, 0) ? cell.timestamp = cell.timestamp.add(501) : cell.timestamp = self.default.fromValue(value), this.getConversationInfo(obj).unreadCount.unread = 1, cell.messageUid) : 0;
          }
        }, {
          key: "getMessagesEx2",
          value: function (value, name, node, id) {
            var values = this.messages.filter(function (result) {
              var options = result.conversation;
              return !(!(value.indexOf(options.conversationType) >= 0 && name.indexOf(options.line) >= 0) || node !== bg.default.All && result.status !== node) && (!id || (options.conversationType === task.default.Single ? result.from === id || options.target === id : result.from === id || result.to === id));
            });
            return values && values.length > 0 ? values.sort(function (ssrcReport, internalRTCStatsReport) {
              return (0, x.compare)(ssrcReport.timestamp, internalRTCStatsReport.timestamp);
            }) : values;
          }
        }, {
          key: "getMessagesEx",
          value: function (value, name, data, id) {
            var values = this.messages.filter(function (scope) {
              var options = scope.conversation;
              return !!(value.indexOf(options.conversationType) >= 0 && name.indexOf(options.line) >= 0 && (0 === data.length || data.length > 0 && data.indexOf(ShapeMaker_1.default.getMessageContentType(scope.messageContent)) >= 0)) && (!id || (options.conversationType === task.default.Single ? scope.from === id || options.target === id : scope.from === id || scope.to === id));
            });
            return values && values.length > 0 ? values.sort(function (ssrcReport, internalRTCStatsReport) {
              return (0, x.compare)(ssrcReport.timestamp, internalRTCStatsReport.timestamp);
            }) : values;
          }
        }, {
          key: "getFirstUnreadMessageId",
          value: function (value) {
            var replaceArr = this.getConversationMessages(value);
            if (replaceArr && replaceArr.length > 0) {
              var expRecords = replaceArr.filter(function (e) {
                return [bg.default.Unread, bg.default.AllMentioned, bg.default.AllMentioned].indexOf(e.status) >= 0;
              });
              if (expRecords && expRecords.length > 0) {
                return expRecords[0];
              }
            }
            return -1;
          }
        }, {
          key: "clearConversationMessages",
          value: function (value, name) {
            this.messages = this.messages.filter(function (event) {
              return !event.conversation.equal(value) || (0, x.gt)(event.timestamp, name);
            });
            var node = this.getConversationInfo(value);
            if (node && node.lastMessage && node.lastMessage.timestamp && (0, x.lte)(node.lastMessage.timestamp, name)) {
              node.lastMessage = null;
            }
          }
        }, {
          key: "searchMessage",
          value: function (value) {
            return this.messages.filter(function (rowToken) {
              return rowToken.content && rowToken.content.searchableContent && rowToken.content.searchableContent.indexOf(value) > -1;
            });
          }
        }, {
          key: "searchConversationMessage",
          value: function (value, name) {
            return this.getConversationMessages(value).filter(function (rowToken) {
              return rowToken.content && rowToken.content.searchableContent && rowToken.content.searchableContent.indexOf(name) > -1;
            });
          }
        }, {
          key: "genChatRoomMessageId",
          value: function () {
            return this.chatRoomMessageId++, 0 - this.chatRoomMessageId;
          }
        }, {
          key: "genNormalMessageId",
          value: function () {
            return this.messageId++;
          }
        }, {
          key: "saveMessage",
          value: function (obj) {
            if (obj.messageUid && this.getMessageByUid(obj.messageUid)) {
              return this.log("messageUid exist", obj), false;
            }
            if (obj.messageId > 0 && this.getMessageById(obj.messageId)) {
              return this.log("messageId exist", obj), false;
            }
            var chooserElem = this.getUserSetting(_noframeworkWaypoints2.default.Conversation_Sync, obj.conversation.conversationType + "-" + obj.conversation.line + "-" + obj.conversation.target);
            var additionalDigits = 0;
            return chooserElem && (additionalDigits = Number(chooserElem.value)), 1 === obj.direction && (0, x.gte)(additionalDigits, obj.timestamp) && (obj.status = bg.default.Readed), this.messages.push(obj), true;
          }
        }, {
          key: "updateMessageById",
          value: function (obj) {
            if (obj.messageId) {
              var index = void 0;
              var i = 0;
              for (; i < this.messages.length; i++) {
                if (this.messages[i].messageId === obj.messageId) {
                  index = i;
                  break;
                }
              }
              if (index) {
                this.messages[index] = obj;
                var node = this.getConversationInfo(obj.conversation);
                if (node && node.lastMessage.messageId === obj.messageId) {
                  node.lastMessage = obj;
                }
              }
            }
          }
        }, {
          key: "deleteMessageById",
          value: function (value) {
            var index = void 0;
            var i = 0;
            for (; i < this.messages.length; i++) {
              if (this.messages[i].messageId === value) {
                index = i;
                break;
              }
            }
            if (index) {
              var n = this.messages.splice(index, 1)[0];
              return this.onMessageDeleted(n), true;
            }
            return false;
          }
        }, {
          key: "deleteMessageByUid",
          value: function (value) {
            var index = void 0;
            var i = 0;
            for (; i < this.messages.length; i++) {
              if (0 === this.messages[i].messageUid.compare(value)) {
                index = i;
                break;
              }
            }
            if (index) {
              var n = this.messages.splice(index, 1)[0];
              return this.onMessageDeleted(n), true;
            }
            return false;
          }
        }, {
          key: "onMessageDeleted",
          value: function (value) {
            if (value) {
              var obj = value;
              var thread = this.getConversationInfo(obj.conversation);
              var chooserElem = this.getUserSetting(_noframeworkWaypoints2.default.Conversation_Sync, obj.conversation.conversationType + "-" + obj.conversation.line + "-" + obj.conversation.target);
              var additionalDigits = 0;
              if (chooserElem && (additionalDigits = Number(chooserElem.value)), (0, x.gt)(obj.timestamp, additionalDigits) && 1 === obj.direction && (obj.status === bg.default.Unread ? thread.unreadCount.unread -= 1 : obj.status === bg.default.Mentioned ? thread.unreadCount.unreadMention -= 1 : obj.status === bg.default.AllMentioned && (thread.unreadCount.unreadMentionAll -= 1)), thread.lastMessage && thread.lastMessage.messageId === obj.messageId) {
                var expRecords = this.getConversationMessages(obj.conversation);
                if (expRecords && expRecords.length > 0) {
                  thread.lastMessage = expRecords[expRecords.length - 1];
                } else {
                  thread.lastMessage = null;
                }
              }
            }
          }
        }, {
          key: "deleteFriend",
          value: function (value) {
            this.friends.delete(value);
          }
        }, {
          key: "getMessageById",
          value: function (value) {
            var expRecords = this.messages.filter(function (att) {
              return att.messageId === value;
            });
            return expRecords.length > 0 ? expRecords[0] : null;
          }
        }, {
          key: "getMessageByUid",
          value: function (value) {
            var t = self.default.fromValue(value);
            var r = this.messages.filter(function (rows) {
              return 0 === t.compare(rows.messageUid);
            });
            return r && r.length > 0 ? r[0] : null;
          }
        }, {
          key: "setMediaMessagePlayed",
          value: function (value) {
            var t = false;
            var self = this.getMessageById(value);
            return self.messageContent instanceof config.default && 1 === self.direction && (self.status = bg.default.Played, t = true), t;
          }
        }, {
          key: "updateUserSettings",
          value: function (value) {
            var self = this;
            value.sort(function (canCreateDiscussions, isSlidingUp) {
              return (0, x.compare)(canCreateDiscussions.updateDt, isSlidingUp.updateDt);
            });
            value.forEach(function (opts) {
              if (opts.updateDt) {
                var path = -1;
                var i = 0;
                for (; i < self.settings.length; i++) {
                  var item = self.settings[i];
                  if (item.key === opts.key && item.scope === opts.scope) {
                    path = i;
                    break;
                  }
                }
                if (path >= 0 ? "" === opts.value ? self.settings.splice(path, 1) : self.settings[path] = opts : "" !== opts.value && self.settings.push(opts), opts.scope === _noframeworkWaypoints2.default.ConversationSilent || opts.scope === _noframeworkWaypoints2.default.ConversationTop || opts.scope === _noframeworkWaypoints2.default.Conversation_Sync || opts.scope === _noframeworkWaypoints2.default.UserSettingConversationReaded || opts.scope === _noframeworkWaypoints2.default.ConversationClearMessage ||
                  opts.scope === _noframeworkWaypoints2.default.ConversationDraft) {
                  var url = opts.key;
                  var index = url.indexOf("-");
                  var i = url.indexOf("-", index + 1);
                  var n = parseInt(url.substring(0, index));
                  var cb = parseInt(url.substring(index + 1, i));
                  var channel = url.substring(i + 1);
                  var data = new _channel2.default(n, channel, cb);
                  var params = self.getConversationInfo(data);
                  if (!params) {
                    if (opts.scope === _noframeworkWaypoints2.default.Conversation_Sync || opts.scope === _noframeworkWaypoints2.default.UserSettingConversationReaded) {
                      var x2 = Number(opts.value);
                      if ((x2 = x2 % 1E3 < 500 ? x2 : x2 + (1E3 - x2 % 1E3)) < 0 || x2 > 0 && (new Date).getTime() - x2 >= 24 * (ShapeViewer_1.default.CONVERSATION_EXPIRE_TIME ? ShapeViewer_1.default.CONVERSATION_EXPIRE_TIME : 30) * 60 * 60 * 1E3) {
                        return;
                      }
                    }
                    if (opts.scope === _noframeworkWaypoints2.default.ConversationSilent && "0" === opts.value) {
                      return;
                    }
                    if (opts.scope === _noframeworkWaypoints2.default.ConversationTop && "0" === opts.value) {
                      return;
                    }
                    if (opts.scope !== _noframeworkWaypoints2.default.ConversationDraft) {
                      (params = self._genAndSaveDefaultConversationInfo(data)).timestamp = opts.updateDt;
                    }
                  }
                  if (opts.scope === _noframeworkWaypoints2.default.ConversationSilent) {
                    params.isSilent = "1" === opts.value;
                  } else {
                    if (opts.scope === _noframeworkWaypoints2.default.ConversationTop) {
                      params.isTop = "1" === opts.value;
                    } else {
                      if (opts.scope === _noframeworkWaypoints2.default.Conversation_Sync) {
                        var m = Number(opts.value);
                        if (m < 0) {
                          if ((0, x.lte)(params.timestamp, -m)) {
                            self.removeConversation(data, true);
                          }
                        } else {
                          self.updateConversationUnreadStatus(data, m);
                        }
                      } else {
                        if (opts.scope === _noframeworkWaypoints2.default.UserSettingConversationReaded) {
                          self.updateConversationRead(data, Number(opts.value));
                        } else {
                          if (opts.scope === _noframeworkWaypoints2.default.ConversationClearMessage) {
                            var heightInches = Number(opts.value);
                            if (params && heightInches > 0) {
                              self.impl.clearMessages(data, heightInches);
                            }
                          } else {
                            if (opts.scope === _noframeworkWaypoints2.default.ConversationDraft) {
                              var secondSpacePos = opts.value.indexOf("@@@");
                              if (secondSpacePos > 0) {
                                var form = opts.value.substring(secondSpacePos + 3).trim();
                                if (!params && form) {
                                  (params = self._genAndSaveDefaultConversationInfo(data)).timestamp = opts.updateDt;
                                }
                                if (params && params.draft !== form) {
                                  self.impl.setConversationDraft(data, form, false);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (opts.scope === _noframeworkWaypoints2.default.FavoriteGroup) {
                    var existingProxyIndex = self.favGroups.indexOf(opts.key);
                    if ("1" === opts.value) {
                      if (existingProxyIndex < 0) {
                        self.favGroups.push(opts.key);
                      }
                    } else {
                      if (existingProxyIndex >= 0) {
                        self.favGroups.splice(existingProxyIndex, 1);
                      }
                    }
                  } else {
                    if (opts.scope === _noframeworkWaypoints2.default.FavoriteUser) {
                      var existingProxyIndex = self.favUsers.indexOf(opts.key);
                      if ("1" === opts.value) {
                        if (existingProxyIndex < 0) {
                          self.favUsers.push(opts.key);
                        }
                      } else {
                        if (existingProxyIndex >= 0) {
                          self.favUsers.splice(existingProxyIndex, 1);
                        }
                      }
                    }
                  }
                }
              } else {
                console.log("invalid setting", opts);
              }
            });
          }
        }, {
          key: "_genAndSaveDefaultConversationInfo",
          value: function (value) {
            var data = new h.default;
            return data.conversation = value, data.timestamp = self.default.ZERO, data.unreadCount = new options.default, this.conversationInfos.push(data), data;
          }
        }, {
          key: "updateDeliveries",
          value: function (value) {
            var self = this;
            value.forEach(function (data) {
              self.deliveries.set(data.fromUser, data.receiveTime);
            });
          }
        }, {
          key: "getUserDelivery",
          value: function (value) {
            return this.deliveries.get(value);
          }
        }, {
          key: "getConversationDelivery",
          value: function (value) {
            var self = new $realtime.default;
            if (0 === value.type) {
              var tc = this.getUserDelivery(value.target);
              if (tc) {
                self.set(value.target, tc);
              }
            } else {
              if (1 === value.type) {
                var BRANCHES = this.getGroupMemberIds(value.target);
                this.deliveries.forEach(function (tc, a) {
                  if (BRANCHES.indexOf(a) >= 0) {
                    self.set(a, tc);
                  }
                });
              }
            }
            return self;
          }
        }, {
          key: "updateReads",
          value: function (value) {
            var self = this;
            value.forEach(function (data) {
              if (0 === data.conversation.type) {
                data.conversation.target = data.fromUser;
              }
              var r = self.genConversationKey(data.conversation);
              var a = self.readEntries.get(r);
              if (!a) {
                a = new $realtime.default;
                self.readEntries.set(r, a);
              }
              a.set(data.fromUser, data.readTime);
            });
          }
        }, {
          key: "saveSyncReadEntry",
          value: function (value, name, input, source, o) {
            var key = this.syncReadId++;
            var self = new VueTextMask.default;
            return self.id = key, self.type = value, self.target = name, self.line = input, self.senders = o, this.syncReadEntries.set(key, self), key;
          }
        }, {
          key: "deleteSyncReadEntry",
          value: function (value) {
            this.syncReadEntries.delete(value);
          }
        }, {
          key: "getSyncReadEntries",
          value: function () {
            return this.syncReadEntries;
          }
        }, {
          key: "loadSyncReadEntry",
          value: function () {
            return this.syncReadEntries.values().next().value;
          }
        }, {
          key: "_genSyncReadEntryKey",
          value: function (value) {
            return value.type + "@" + value.target + "@" + value.line;
          }
        }, {
          key: "getConversationRead",
          value: function (value) {
            var t = this._genSyncReadEntryKey(value);
            return this.readEntries.get(t);
          }
        }, {
          key: "getUserSetting",
          value: function (value, name) {
            var expRecords = this.settings.filter(function (data) {
              return data.scope === value && data.key === name;
            });
            return expRecords.length > 0 ? expRecords[expRecords.length - 1] : null;
          }
        }, {
          key: "getUserSettings",
          value: function (value) {
            return this.settings.filter(function (directive) {
              return directive.scope === value;
            });
          }
        }, {
          key: "getFriendRequestMaxDt",
          value: function () {
            var result = self.default.ZERO;
            return this.friendRequests.forEach(function (array) {
              result = (0, x.gt)(array.timestamp, result) ? array.timestamp : result;
            }), result;
          }
        }, {
          key: "insertOrReplaceFriendRequest",
          value: function (value) {
            var dimensionId = -1;
            var i = 0;
            for (; i < this.friendRequests.length; i++) {
              var e = this.friendRequests[i];
              if (e.direction === value.direction && e.target === value.target) {
                dimensionId = i;
                break;
              }
            }
            if (dimensionId >= 0) {
              this.friendRequests[dimensionId] = value;
            } else {
              this.friendRequests.push(value);
            }
          }
        }, {
          key: "getIncommingFriendRequest",
          value: function () {
            return this.friendRequests.filter(function (collisionInfo) {
              return 1 === collisionInfo.direction;
            });
          }
        }, {
          key: "getOutgoingFriendRequest",
          value: function () {
            return this.friendRequests.filter(function (collisionInfo) {
              return 0 === collisionInfo.direction;
            });
          }
        }, {
          key: "getOneFriendRequest",
          value: function (value, name) {
            var expRecords = this.friendRequests.filter(function (vo) {
              return vo.target === value && vo.direction === (name ? 1 : 0);
            });
            return expRecords.length > 0 ? expRecords[0] : null;
          }
        }, {
          key: "getUnreadFriendRequestCount",
          value: function () {
            var e = 0;
            return this.friendRequests.forEach(function (message) {
              if (1 === message.direction && 0 === message.readStatus) {
                e++;
              }
            }), e;
          }
        }, {
          key: "clearUnreadFriendRequestStatus",
          value: function () {
            var e = 0;
            return this.friendRequests.forEach(function (message) {
              if (1 === message.direction && 0 === message.readStatus) {
                message.readStatus = 1;
                e++;
              }
            }), e;
          }
        }, {
          key: "updateFriendRequestStatus",
          value: function (value, name) {
            this.friendRequests.forEach(function (action) {
              if (action.target === value && 1 === action.direction) {
                action.status = name;
              }
            });
          }
        }, {
          key: "getUnreadFriendRequestMaxDt",
          value: function () {
            var result = self.default.ZERO;
            return this.friendRequests.forEach(function (message) {
              if (1 === message.direction && 0 === message.readStatus) {
                result = (0, x.gt)(message.timestamp, result) ? message.timestamp : result;
              }
            }), result;
          }
        }, {
          key: "log",
          value: function (value) {
            if (ShapeViewer_1.default.ENABLE_LOG) {
              var _console2;
              var length = arguments.length;
              var args = Array(length > 1 ? length - 1 : 0);
              var i = 1;
              for (; i < length; i++) {
                args[i - 1] = arguments[i];
              }
              (_console2 = console).log.apply(_console2, [value].concat(args));
            }
          }
        }, {
          key: "_get",
          value: function (value, name, x, c) {
            if (ShapeViewer_1.default.ENABLE_INFO_PERSISTENCE) {
              var index = this.impl.userId + "-" + name + "-" + x;
              var target = value.getItem(index);
              return target && (target = this.impl._Utf8ArrayToStr((0, xmlparser.AESDecrypt)(target, "", false, false))) ? (0, i.default)(new c, JSON.parse(target)) : null;
            }
            return value.get(x);
          }
        }, {
          key: "_set",
          value: function (obj, name, x, d) {
            if (ShapeViewer_1.default.ENABLE_INFO_PERSISTENCE) {
              d = d ? (0, n.default)(d) : "";
              var id = this.impl.userId + "-" + name + "-" + x;
              d = (0, xmlparser.AESEncrypt)(d, "", false);
              obj.setItem(id, d);
            } else {
              obj.set(x, d);
            }
          }
        }, {
          key: "_delete",
          value: function (obj, name, id) {
            if (ShapeViewer_1.default.ENABLE_INFO_PERSISTENCE) {
              var filter = this.impl.userId + "-" + name + "-" + id;
              obj.removeItem(filter);
            } else {
              obj.delete(id);
            }
          }
        }]), init;
      }();
      t.default = offsetFromCenter;
    },
    "./wfc/internal/wfcmessage.js": function (module, metadata, packageSuccess) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _deepAssign2 = _interopRequireDefault(packageSuccess("./node_modules/babel-runtime/helpers/typeof.js"));
      var _noframeworkWaypoints2 = _interopRequireDefault(packageSuccess("./node_modules/babel-runtime/core-js/object/keys.js"));
      var $protobuf = packageSuccess("./wfc/pb/protobuf.min.js");
      var Buffer = $protobuf.Reader;
      var $Writer = $protobuf.Writer;
      var self = $protobuf.util;
      var window = $protobuf.roots.default || ($protobuf.roots.default = {});
      window.AddFriendRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.targetUid = "", Error.prototype.reason = "", Error.prototype.extra = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (params, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(params.targetUid), target.uint32(18).string(params.reason), null != params.extra && params.hasOwnProperty("extra") && target.uint32(26).string(params.extra), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (a, i) {
          if (!(a instanceof Buffer)) {
            a = Buffer.create(a);
          }
          var end = void 0 === i ? a.len : a.pos + i;
          var message = new window.AddFriendRequest;
          for (; a.pos < end;) {
            var f = a.uint32();
            switch (f >>> 3) {
              case 1:
                message.targetUid = a.string();
                break;
              case 2:
                message.reason = a.string();
                break;
              case 3:
                message.extra = a.string();
                break;
              default:
                a.skipType(7 & f);
            }
          }
          if (!message.hasOwnProperty("targetUid")) {
            throw self.ProtocolError("missing required 'targetUid'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("reason")) {
            throw self.ProtocolError("missing required 'reason'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (params) {
          return "object" !== (void 0 === params ? "undefined" : (0, _deepAssign2.default)(params)) || null === params ? "object expected" : self.isString(params.targetUid) ? self.isString(params.reason) ? null != params.extra && params.hasOwnProperty("extra") && !self.isString(params.extra) ? "extra: string expected" : null : "reason: string expected" : "targetUid: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.AddFriendRequest) {
            return object;
          }
          var params = new window.AddFriendRequest;
          return null != object.targetUid && (params.targetUid = String(object.targetUid)), null != object.reason && (params.reason = String(object.reason)), null != object.extra && (params.extra = String(object.extra)), params;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var message = {};
          return options.defaults && (message.targetUid = "", message.reason = "", message.extra = ""), null != data.targetUid && data.hasOwnProperty("targetUid") && (message.targetUid = data.targetUid), null != data.reason && data.hasOwnProperty("reason") && (message.reason = data.reason), null != data.extra && data.hasOwnProperty("extra") && (message.extra = data.extra), message;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.Conversation = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.type = 0, Error.prototype.target = "", Error.prototype.line = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(8).int32(args.type), target.uint32(18).string(args.target), target.uint32(24).int32(args.line), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.Conversation;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.type = data.int32();
                break;
              case 2:
                obj.target = data.string();
                break;
              case 3:
                obj.line = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("target")) {
            throw self.ProtocolError("missing required 'target'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("line")) {
            throw self.ProtocolError("missing required 'line'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isInteger(value.type) ? self.isString(value.target) ? self.isInteger(value.line) ? null : "line: integer expected" : "target: string expected" : "type: integer expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.Conversation) {
            return object;
          }
          var prop = new window.Conversation;
          return null != object.type && (prop.type = 0 | object.type), null != object.target && (prop.target = String(object.target)), null != object.line && (prop.line = 0 | object.line), prop;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var node = {};
          return options.defaults && (node.type = 0, node.target = "", node.line = 0), null != message.type && message.hasOwnProperty("type") && (node.type = message.type), null != message.target && message.hasOwnProperty("target") && (node.target = message.target), null != message.line && message.hasOwnProperty("line") && (node.line = message.line), node;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GroupInfo = function () {
        function model(d) {
          if (d) {
            var r = (0, _noframeworkWaypoints2.default)(d);
            var i = 0;
            for (; i < r.length; ++i) {
              if (null != d[r[i]]) {
                this[r[i]] = d[r[i]];
              }
            }
          }
        }
        return model.prototype.targetId = "", model.prototype.name = "", model.prototype.portrait = "", model.prototype.owner = "", model.prototype.type = 0, model.prototype.memberCount = 0, model.prototype.extra = "", model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.memberUpdateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.mute = 0, model.prototype.joinType = 0, model.prototype.privateChat = 0, model.prototype.searchable = 0, model.prototype.maxMemberCount =
          0, model.prototype.historyMessage = 0, model.create = function (value) {
            return new model(value);
          }, model.encode = function (options, writer) {
            return writer || (writer = $Writer.create()), null != options.targetId && options.hasOwnProperty("targetId") && writer.uint32(10).string(options.targetId), writer.uint32(18).string(options.name), null != options.portrait && options.hasOwnProperty("portrait") && writer.uint32(26).string(options.portrait), null != options.owner && options.hasOwnProperty("owner") && writer.uint32(34).string(options.owner), writer.uint32(40).int32(options.type), null != options.memberCount && options.hasOwnProperty("memberCount") &&
              writer.uint32(48).int32(options.memberCount), null != options.extra && options.hasOwnProperty("extra") && writer.uint32(58).string(options.extra), null != options.updateDt && options.hasOwnProperty("updateDt") && writer.uint32(64).int64(options.updateDt), null != options.memberUpdateDt && options.hasOwnProperty("memberUpdateDt") && writer.uint32(72).int64(options.memberUpdateDt), null != options.mute && options.hasOwnProperty("mute") && writer.uint32(80).int32(options.mute), null != options.joinType &&
              options.hasOwnProperty("joinType") && writer.uint32(88).int32(options.joinType), null != options.privateChat && options.hasOwnProperty("privateChat") && writer.uint32(96).int32(options.privateChat), null != options.searchable && options.hasOwnProperty("searchable") && writer.uint32(104).int32(options.searchable), null != options.maxMemberCount && options.hasOwnProperty("maxMemberCount") && writer.uint32(112).int32(options.maxMemberCount), null != options.historyMessage && options.hasOwnProperty("historyMessage") &&
              writer.uint32(120).int32(options.historyMessage), writer;
          }, model.encodeDelimited = function (message, writer) {
            return this.encode(message, writer).ldelim();
          }, model.decode = function (data, i) {
            if (!(data instanceof Buffer)) {
              data = Buffer.create(data);
            }
            var end = void 0 === i ? data.len : data.pos + i;
            var page = new window.GroupInfo;
            for (; data.pos < end;) {
              var o = data.uint32();
              switch (o >>> 3) {
                case 1:
                  page.targetId = data.string();
                  break;
                case 2:
                  page.name = data.string();
                  break;
                case 3:
                  page.portrait = data.string();
                  break;
                case 4:
                  page.owner = data.string();
                  break;
                case 5:
                  page.type = data.int32();
                  break;
                case 6:
                  page.memberCount = data.int32();
                  break;
                case 7:
                  page.extra = data.string();
                  break;
                case 8:
                  page.updateDt = data.int64();
                  break;
                case 9:
                  page.memberUpdateDt = data.int64();
                  break;
                case 10:
                  page.mute = data.int32();
                  break;
                case 11:
                  page.joinType = data.int32();
                  break;
                case 12:
                  page.privateChat = data.int32();
                  break;
                case 13:
                  page.searchable = data.int32();
                  break;
                case 14:
                  page.maxMemberCount = data.int32();
                  break;
                case 15:
                  page.historyMessage = data.int32();
                  break;
                default:
                  data.skipType(7 & o);
              }
            }
            if (!page.hasOwnProperty("name")) {
              throw self.ProtocolError("missing required 'name'", {
                instance: page
              });
            }
            if (!page.hasOwnProperty("type")) {
              throw self.ProtocolError("missing required 'type'", {
                instance: page
              });
            }
            return page;
          }, model.decodeDelimited = function (data) {
            return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
          }, model.verify = function (options) {
            return "object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options ? "object expected" : null != options.targetId && options.hasOwnProperty("targetId") && !self.isString(options.targetId) ? "targetId: string expected" : self.isString(options.name) ? null != options.portrait && options.hasOwnProperty("portrait") && !self.isString(options.portrait) ? "portrait: string expected" : null != options.owner && options.hasOwnProperty("owner") && !self.isString(options.owner) ?
              "owner: string expected" : self.isInteger(options.type) ? null != options.memberCount && options.hasOwnProperty("memberCount") && !self.isInteger(options.memberCount) ? "memberCount: integer expected" : null != options.extra && options.hasOwnProperty("extra") && !self.isString(options.extra) ? "extra: string expected" : null != options.updateDt && options.hasOwnProperty("updateDt") && !(self.isInteger(options.updateDt) || options.updateDt && self.isInteger(options.updateDt.low) && self.isInteger(options.updateDt.high)) ?
                "updateDt: integer|Long expected" : null != options.memberUpdateDt && options.hasOwnProperty("memberUpdateDt") && !(self.isInteger(options.memberUpdateDt) || options.memberUpdateDt && self.isInteger(options.memberUpdateDt.low) && self.isInteger(options.memberUpdateDt.high)) ? "memberUpdateDt: integer|Long expected" : null != options.mute && options.hasOwnProperty("mute") && !self.isInteger(options.mute) ? "mute: integer expected" : null != options.joinType && options.hasOwnProperty("joinType") &&
                  !self.isInteger(options.joinType) ? "joinType: integer expected" : null != options.privateChat && options.hasOwnProperty("privateChat") && !self.isInteger(options.privateChat) ? "privateChat: integer expected" : null != options.searchable && options.hasOwnProperty("searchable") && !self.isInteger(options.searchable) ? "searchable: integer expected" : null != options.maxMemberCount && options.hasOwnProperty("maxMemberCount") && !self.isInteger(options.maxMemberCount) ? "maxMemberCount: integer expected" :
                    null != options.historyMessage && options.hasOwnProperty("historyMessage") && !self.isInteger(options.historyMessage) ? "historyMessage: integer expected" : null : "type: integer expected" : "name: string expected";
          }, model.fromObject = function (data) {
            if (data instanceof window.GroupInfo) {
              return data;
            }
            var options = new window.GroupInfo;
            return null != data.targetId && (options.targetId = String(data.targetId)), null != data.name && (options.name = String(data.name)), null != data.portrait && (options.portrait = String(data.portrait)), null != data.owner && (options.owner = String(data.owner)), null != data.type && (options.type = 0 | data.type), null != data.memberCount && (options.memberCount = 0 | data.memberCount), null != data.extra && (options.extra = String(data.extra)), null != data.updateDt && (self.Long ? (options.updateDt =
              self.Long.fromValue(data.updateDt)).unsigned = false : "string" == typeof data.updateDt ? options.updateDt = parseInt(data.updateDt, 10) : "number" == typeof data.updateDt ? options.updateDt = data.updateDt : "object" === (0, _deepAssign2.default)(data.updateDt) && (options.updateDt = (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>> 0)).toNumber())), null != data.memberUpdateDt && (self.Long ? (options.memberUpdateDt = self.Long.fromValue(data.memberUpdateDt)).unsigned =
                false : "string" == typeof data.memberUpdateDt ? options.memberUpdateDt = parseInt(data.memberUpdateDt, 10) : "number" == typeof data.memberUpdateDt ? options.memberUpdateDt = data.memberUpdateDt : "object" === (0, _deepAssign2.default)(data.memberUpdateDt) && (options.memberUpdateDt = (new self.LongBits(data.memberUpdateDt.low >>> 0, data.memberUpdateDt.high >>> 0)).toNumber())), null != data.mute && (options.mute = 0 | data.mute), null != data.joinType && (options.joinType = 0 | data.joinType),
              null != data.privateChat && (options.privateChat = 0 | data.privateChat), null != data.searchable && (options.searchable = 0 | data.searchable), null != data.maxMemberCount && (options.maxMemberCount = 0 | data.maxMemberCount), null != data.historyMessage && (options.historyMessage = 0 | data.historyMessage), options;
          }, model.toObject = function (data, options) {
            if (!options) {
              options = {};
            }
            var $scope = {};
            if (options.defaults) {
              if ($scope.targetId = "", $scope.name = "", $scope.portrait = "", $scope.owner = "", $scope.type = 0, $scope.memberCount = 0, $scope.extra = "", self.Long) {
                var long = new self.Long(0, 0, false);
                $scope.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
              } else {
                $scope.updateDt = options.longs === String ? "0" : 0;
              }
              if (self.Long) {
                long = new self.Long(0, 0, false);
                $scope.memberUpdateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
              } else {
                $scope.memberUpdateDt = options.longs === String ? "0" : 0;
              }
              $scope.mute = 0;
              $scope.joinType = 0;
              $scope.privateChat = 0;
              $scope.searchable = 0;
              $scope.maxMemberCount = 0;
              $scope.historyMessage = 0;
            }
            return null != data.targetId && data.hasOwnProperty("targetId") && ($scope.targetId = data.targetId), null != data.name && data.hasOwnProperty("name") && ($scope.name = data.name), null != data.portrait && data.hasOwnProperty("portrait") && ($scope.portrait = data.portrait), null != data.owner && data.hasOwnProperty("owner") && ($scope.owner = data.owner), null != data.type && data.hasOwnProperty("type") && ($scope.type = data.type), null != data.memberCount && data.hasOwnProperty("memberCount") &&
              ($scope.memberCount = data.memberCount), null != data.extra && data.hasOwnProperty("extra") && ($scope.extra = data.extra), null != data.updateDt && data.hasOwnProperty("updateDt") && ("number" == typeof data.updateDt ? $scope.updateDt = options.longs === String ? String(data.updateDt) : data.updateDt : $scope.updateDt = options.longs === String ? self.Long.prototype.toString.call(data.updateDt) : options.longs === Number ? (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>>
                0)).toNumber() : data.updateDt), null != data.memberUpdateDt && data.hasOwnProperty("memberUpdateDt") && ("number" == typeof data.memberUpdateDt ? $scope.memberUpdateDt = options.longs === String ? String(data.memberUpdateDt) : data.memberUpdateDt : $scope.memberUpdateDt = options.longs === String ? self.Long.prototype.toString.call(data.memberUpdateDt) : options.longs === Number ? (new self.LongBits(data.memberUpdateDt.low >>> 0, data.memberUpdateDt.high >>> 0)).toNumber() : data.memberUpdateDt),
              null != data.mute && data.hasOwnProperty("mute") && ($scope.mute = data.mute), null != data.joinType && data.hasOwnProperty("joinType") && ($scope.joinType = data.joinType), null != data.privateChat && data.hasOwnProperty("privateChat") && ($scope.privateChat = data.privateChat), null != data.searchable && data.hasOwnProperty("searchable") && ($scope.searchable = data.searchable), null != data.maxMemberCount && data.hasOwnProperty("maxMemberCount") && ($scope.maxMemberCount = data.maxMemberCount),
              null != data.historyMessage && data.hasOwnProperty("historyMessage") && ($scope.historyMessage = data.historyMessage), $scope;
          }, model.prototype.toJSON = function () {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          }, model;
      }();
      window.GroupMember = function () {
        function model(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return model.prototype.memberId = "", model.prototype.alias = "", model.prototype.type = 0, model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.createDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.extra = "", model.create = function (value) {
          return new model(value);
        }, model.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.memberId), null != args.alias && args.hasOwnProperty("alias") && target.uint32(18).string(args.alias), target.uint32(24).int32(args.type), null != args.updateDt && args.hasOwnProperty("updateDt") && target.uint32(32).int64(args.updateDt), null != args.createDt && args.hasOwnProperty("createDt") && target.uint32(40).int64(args.createDt), null != args.extra && args.hasOwnProperty("extra") && target.uint32(50).string(args.extra),
            target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var ret = new window.GroupMember;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                ret.memberId = data.string();
                break;
              case 2:
                ret.alias = data.string();
                break;
              case 3:
                ret.type = data.int32();
                break;
              case 4:
                ret.updateDt = data.int64();
                break;
              case 5:
                ret.createDt = data.int64();
                break;
              case 6:
                ret.extra = data.string();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!ret.hasOwnProperty("memberId")) {
            throw self.ProtocolError("missing required 'memberId'", {
              instance: ret
            });
          }
          if (!ret.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: ret
            });
          }
          return ret;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.memberId) ? null != data.alias && data.hasOwnProperty("alias") && !self.isString(data.alias) ? "alias: string expected" : self.isInteger(data.type) ? null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" :
            null != data.createDt && data.hasOwnProperty("createDt") && !(self.isInteger(data.createDt) || data.createDt && self.isInteger(data.createDt.low) && self.isInteger(data.createDt.high)) ? "createDt: integer|Long expected" : null != data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra) ? "extra: string expected" : null : "type: integer expected" : "memberId: string expected";
        }, model.fromObject = function (object) {
          if (object instanceof window.GroupMember) {
            return object;
          }
          var result = new window.GroupMember;
          return null != object.memberId && (result.memberId = String(object.memberId)), null != object.alias && (result.alias = String(object.alias)), null != object.type && (result.type = 0 | object.type), null != object.updateDt && (self.Long ? (result.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? result.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? result.updateDt = object.updateDt : "object" === (0,
            _deepAssign2.default)(object.updateDt) && (result.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>> 0)).toNumber())), null != object.createDt && (self.Long ? (result.createDt = self.Long.fromValue(object.createDt)).unsigned = false : "string" == typeof object.createDt ? result.createDt = parseInt(object.createDt, 10) : "number" == typeof object.createDt ? result.createDt = object.createDt : "object" === (0, _deepAssign2.default)(object.createDt) && (result.createDt =
              (new self.LongBits(object.createDt.low >>> 0, object.createDt.high >>> 0)).toNumber())), null != object.extra && (result.extra = String(object.extra)), result;
        }, model.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if (options.defaults) {
            if ($scope.memberId = "", $scope.alias = "", $scope.type = 0, self.Long) {
              var long = new self.Long(0, 0, false);
              $scope.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              $scope.updateDt = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              $scope.createDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              $scope.createDt = options.longs === String ? "0" : 0;
            }
            $scope.extra = "";
          }
          return null != message.memberId && message.hasOwnProperty("memberId") && ($scope.memberId = message.memberId), null != message.alias && message.hasOwnProperty("alias") && ($scope.alias = message.alias), null != message.type && message.hasOwnProperty("type") && ($scope.type = message.type), null != message.updateDt && message.hasOwnProperty("updateDt") && ("number" == typeof message.updateDt ? $scope.updateDt = options.longs === String ? String(message.updateDt) : message.updateDt : $scope.updateDt =
            options.longs === String ? self.Long.prototype.toString.call(message.updateDt) : options.longs === Number ? (new self.LongBits(message.updateDt.low >>> 0, message.updateDt.high >>> 0)).toNumber() : message.updateDt), null != message.createDt && message.hasOwnProperty("createDt") && ("number" == typeof message.createDt ? $scope.createDt = options.longs === String ? String(message.createDt) : message.createDt : $scope.createDt = options.longs === String ? self.Long.prototype.toString.call(message.createDt) :
              options.longs === Number ? (new self.LongBits(message.createDt.low >>> 0, message.createDt.high >>> 0)).toNumber() : message.createDt), null != message.extra && message.hasOwnProperty("extra") && ($scope.extra = message.extra), $scope;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.Group = function () {
        function Error(props) {
          if (this.members = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupInfo = null, Error.prototype.members = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, value) {
          if (value || (value = $Writer.create()), window.GroupInfo.encode(data.groupInfo, value.uint32(10).fork()).ldelim(), null != data.members && data.members.length) {
            var i = 0;
            for (; i < data.members.length; ++i) {
              window.GroupMember.encode(data.members[i], value.uint32(18).fork()).ldelim();
            }
          }
          return value;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var obj = new window.Group;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                obj.groupInfo = window.GroupInfo.decode(s, s.uint32());
                break;
              case 2:
                if (!(obj.members && obj.members.length)) {
                  obj.members = [];
                }
                obj.members.push(window.GroupMember.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("groupInfo")) {
            throw self.ProtocolError("missing required 'groupInfo'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (r = window.GroupInfo.verify(data.groupInfo)) {
            return "groupInfo." + r;
          }
          if (null != data.members && data.hasOwnProperty("members")) {
            if (!Array.isArray(data.members)) {
              return "members: array expected";
            }
            var i = 0;
            for (; i < data.members.length; ++i) {
              var r;
              if (r = window.GroupMember.verify(data.members[i])) {
                return "members." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.Group) {
            return object;
          }
          var $scope = new window.Group;
          if (null != object.groupInfo) {
            if ("object" !== (0, _deepAssign2.default)(object.groupInfo)) {
              throw TypeError(".Group.groupInfo: object expected");
            }
            $scope.groupInfo = window.GroupInfo.fromObject(object.groupInfo);
          }
          if (object.members) {
            if (!Array.isArray(object.members)) {
              throw TypeError(".Group.members: array expected");
            }
            $scope.members = [];
            var i = 0;
            for (; i < object.members.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.members[i])) {
                throw TypeError(".Group.members: object expected");
              }
              $scope.members[i] = window.GroupMember.fromObject(object.members[i]);
            }
          }
          return $scope;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var config = {};
          if ((options.arrays || options.defaults) && (config.members = []), options.defaults && (config.groupInfo = null), null != data.groupInfo && data.hasOwnProperty("groupInfo") && (config.groupInfo = window.GroupInfo.toObject(data.groupInfo, options)), data.members && data.members.length) {
            config.members = [];
            var key = 0;
            for (; key < data.members.length; ++key) {
              config.members[key] = window.GroupMember.toObject(data.members[key], options);
            }
          }
          return config;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ChannelInfo = function () {
        function model(params) {
          if (params) {
            var _keys = (0, _noframeworkWaypoints2.default)(params);
            var i = 0;
            for (; i < _keys.length; ++i) {
              if (null != params[_keys[i]]) {
                this[_keys[i]] = params[_keys[i]];
              }
            }
          }
        }
        return model.prototype.targetId = "", model.prototype.name = "", model.prototype.portrait = "", model.prototype.owner = "", model.prototype.status = 0, model.prototype.desc = "", model.prototype.extra = "", model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.secret = "", model.prototype.callback = "", model.prototype.automatic = 0, model.create = function (value) {
          return new model(value);
        }, model.encode = function (options, writer) {
          return writer || (writer = $Writer.create()), null != options.targetId && options.hasOwnProperty("targetId") && writer.uint32(10).string(options.targetId), writer.uint32(18).string(options.name), null != options.portrait && options.hasOwnProperty("portrait") && writer.uint32(26).string(options.portrait), null != options.owner && options.hasOwnProperty("owner") && writer.uint32(34).string(options.owner), null != options.status && options.hasOwnProperty("status") && writer.uint32(40).int32(options.status),
            null != options.desc && options.hasOwnProperty("desc") && writer.uint32(50).string(options.desc), null != options.extra && options.hasOwnProperty("extra") && writer.uint32(58).string(options.extra), null != options.updateDt && options.hasOwnProperty("updateDt") && writer.uint32(64).int64(options.updateDt), null != options.secret && options.hasOwnProperty("secret") && writer.uint32(74).string(options.secret), null != options.callback && options.hasOwnProperty("callback") && writer.uint32(82).string(options.callback),
            null != options.automatic && options.hasOwnProperty("automatic") && writer.uint32(88).int32(options.automatic), writer;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var params = new window.ChannelInfo;
          for (; data.pos < end;) {
            var settings = data.uint32();
            switch (settings >>> 3) {
              case 1:
                params.targetId = data.string();
                break;
              case 2:
                params.name = data.string();
                break;
              case 3:
                params.portrait = data.string();
                break;
              case 4:
                params.owner = data.string();
                break;
              case 5:
                params.status = data.int32();
                break;
              case 6:
                params.desc = data.string();
                break;
              case 7:
                params.extra = data.string();
                break;
              case 8:
                params.updateDt = data.int64();
                break;
              case 9:
                params.secret = data.string();
                break;
              case 10:
                params.callback = data.string();
                break;
              case 11:
                params.automatic = data.int32();
                break;
              default:
                data.skipType(7 & settings);
            }
          }
          if (!params.hasOwnProperty("name")) {
            throw self.ProtocolError("missing required 'name'", {
              instance: params
            });
          }
          return params;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : null != data.targetId && data.hasOwnProperty("targetId") && !self.isString(data.targetId) ? "targetId: string expected" : self.isString(data.name) ? null != data.portrait && data.hasOwnProperty("portrait") && !self.isString(data.portrait) ? "portrait: string expected" : null != data.owner && data.hasOwnProperty("owner") && !self.isString(data.owner) ? "owner: string expected" :
            null != data.status && data.hasOwnProperty("status") && !self.isInteger(data.status) ? "status: integer expected" : null != data.desc && data.hasOwnProperty("desc") && !self.isString(data.desc) ? "desc: string expected" : null != data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra) ? "extra: string expected" : null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ?
              "updateDt: integer|Long expected" : null != data.secret && data.hasOwnProperty("secret") && !self.isString(data.secret) ? "secret: string expected" : null != data.callback && data.hasOwnProperty("callback") && !self.isString(data.callback) ? "callback: string expected" : null != data.automatic && data.hasOwnProperty("automatic") && !self.isInteger(data.automatic) ? "automatic: integer expected" : null : "name: string expected";
        }, model.fromObject = function (data) {
          if (data instanceof window.ChannelInfo) {
            return data;
          }
          var options = new window.ChannelInfo;
          return null != data.targetId && (options.targetId = String(data.targetId)), null != data.name && (options.name = String(data.name)), null != data.portrait && (options.portrait = String(data.portrait)), null != data.owner && (options.owner = String(data.owner)), null != data.status && (options.status = 0 | data.status), null != data.desc && (options.desc = String(data.desc)), null != data.extra && (options.extra = String(data.extra)), null != data.updateDt && (self.Long ? (options.updateDt =
            self.Long.fromValue(data.updateDt)).unsigned = false : "string" == typeof data.updateDt ? options.updateDt = parseInt(data.updateDt, 10) : "number" == typeof data.updateDt ? options.updateDt = data.updateDt : "object" === (0, _deepAssign2.default)(data.updateDt) && (options.updateDt = (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>> 0)).toNumber())), null != data.secret && (options.secret = String(data.secret)), null != data.callback && (options.callback = String(data.callback)),
            null != data.automatic && (options.automatic = 0 | data.automatic), options;
        }, model.toObject = function (options, obj) {
          if (!obj) {
            obj = {};
          }
          var $scope = {};
          if (obj.defaults) {
            if ($scope.targetId = "", $scope.name = "", $scope.portrait = "", $scope.owner = "", $scope.status = 0, $scope.desc = "", $scope.extra = "", self.Long) {
              var long = new self.Long(0, 0, false);
              $scope.updateDt = obj.longs === String ? long.toString() : obj.longs === Number ? long.toNumber() : long;
            } else {
              $scope.updateDt = obj.longs === String ? "0" : 0;
            }
            $scope.secret = "";
            $scope.callback = "";
            $scope.automatic = 0;
          }
          return null != options.targetId && options.hasOwnProperty("targetId") && ($scope.targetId = options.targetId), null != options.name && options.hasOwnProperty("name") && ($scope.name = options.name), null != options.portrait && options.hasOwnProperty("portrait") && ($scope.portrait = options.portrait), null != options.owner && options.hasOwnProperty("owner") && ($scope.owner = options.owner), null != options.status && options.hasOwnProperty("status") && ($scope.status = options.status),
            null != options.desc && options.hasOwnProperty("desc") && ($scope.desc = options.desc), null != options.extra && options.hasOwnProperty("extra") && ($scope.extra = options.extra), null != options.updateDt && options.hasOwnProperty("updateDt") && ("number" == typeof options.updateDt ? $scope.updateDt = obj.longs === String ? String(options.updateDt) : options.updateDt : $scope.updateDt = obj.longs === String ? self.Long.prototype.toString.call(options.updateDt) : obj.longs === Number ? (new self.LongBits(options.updateDt.low >>>
              0, options.updateDt.high >>> 0)).toNumber() : options.updateDt), null != options.secret && options.hasOwnProperty("secret") && ($scope.secret = options.secret), null != options.callback && options.hasOwnProperty("callback") && ($scope.callback = options.callback), null != options.automatic && options.hasOwnProperty("automatic") && ($scope.automatic = options.automatic), $scope;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.ModifyChannelInfo = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.channelId = "", Error.prototype.type = 0, Error.prototype.value = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.channelId), target.uint32(16).int32(args.type), target.uint32(26).string(args.value), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.ModifyChannelInfo;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.channelId = data.string();
                break;
              case 2:
                that.type = data.int32();
                break;
              case 3:
                that.value = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("channelId")) {
            throw self.ProtocolError("missing required 'channelId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("value")) {
            throw self.ProtocolError("missing required 'value'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.channelId) ? self.isInteger(value.type) ? self.isString(value.value) ? null : "value: string expected" : "type: integer expected" : "channelId: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.ModifyChannelInfo) {
            return obj;
          }
          var response = new window.ModifyChannelInfo;
          return null != obj.channelId && (response.channelId = String(obj.channelId)), null != obj.type && (response.type = 0 | obj.type), null != obj.value && (response.value = String(obj.value)), response;
        }, Error.toObject = function (obj, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          return options.defaults && (result.channelId = "", result.type = 0, result.value = ""), null != obj.channelId && obj.hasOwnProperty("channelId") && (result.channelId = obj.channelId), null != obj.type && obj.hasOwnProperty("type") && (result.type = obj.type), null != obj.value && obj.hasOwnProperty("value") && (result.value = obj.value), result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.TransferChannel = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.channelId = "", Error.prototype.newOwner = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.channelId), target.uint32(18).string(data.newOwner), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var message = new window.TransferChannel;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                message.channelId = s.string();
                break;
              case 2:
                message.newOwner = s.string();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!message.hasOwnProperty("channelId")) {
            throw self.ProtocolError("missing required 'channelId'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("newOwner")) {
            throw self.ProtocolError("missing required 'newOwner'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          return "object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj ? "object expected" : self.isString(obj.channelId) ? self.isString(obj.newOwner) ? null : "newOwner: string expected" : "channelId: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.TransferChannel) {
            return obj;
          }
          var track = new window.TransferChannel;
          return null != obj.channelId && (track.channelId = String(obj.channelId)), null != obj.newOwner && (track.newOwner = String(obj.newOwner)), track;
        }, Error.toObject = function (options, args) {
          if (!args) {
            args = {};
          }
          var $scope = {};
          return args.defaults && ($scope.channelId = "", $scope.newOwner = ""), null != options.channelId && options.hasOwnProperty("channelId") && ($scope.channelId = options.channelId), null != options.newOwner && options.hasOwnProperty("newOwner") && ($scope.newOwner = options.newOwner), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullChannelInfo = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.channelId = "", Error.prototype.head = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.channelId), target.uint32(16).int64(data.head), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var that = new window.PullChannelInfo;
          for (; options.pos < ch;) {
            var form = options.uint32();
            switch (form >>> 3) {
              case 1:
                that.channelId = options.string();
                break;
              case 2:
                that.head = options.int64();
                break;
              default:
                options.skipType(7 & form);
            }
          }
          if (!that.hasOwnProperty("channelId")) {
            throw self.ProtocolError("missing required 'channelId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("head")) {
            throw self.ProtocolError("missing required 'head'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.channelId) ? self.isInteger(data.head) || data.head && self.isInteger(data.head.low) && self.isInteger(data.head.high) ? null : "head: integer|Long expected" : "channelId: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.PullChannelInfo) {
            return object;
          }
          var message = new window.PullChannelInfo;
          return null != object.channelId && (message.channelId = String(object.channelId)), null != object.head && (self.Long ? (message.head = self.Long.fromValue(object.head)).unsigned = false : "string" == typeof object.head ? message.head = parseInt(object.head, 10) : "number" == typeof object.head ? message.head = object.head : "object" === (0, _deepAssign2.default)(object.head) && (message.head = (new self.LongBits(object.head.low >>> 0, object.head.high >>> 0)).toNumber())), message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if (options.defaults) {
            if (result.channelId = "", self.Long) {
              var long = new self.Long(0, 0, false);
              result.head = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              result.head = options.longs === String ? "0" : 0;
            }
          }
          return null != message.channelId && message.hasOwnProperty("channelId") && (result.channelId = message.channelId), null != message.head && message.hasOwnProperty("head") && ("number" == typeof message.head ? result.head = options.longs === String ? String(message.head) : message.head : result.head = options.longs === String ? self.Long.prototype.toString.call(message.head) : options.longs === Number ? (new self.LongBits(message.head.low >>> 0, message.head.high >>> 0)).toNumber() : message.head),
            result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullChannelListener = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.channelId = "", Error.prototype.offset = 0, Error.prototype.count = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.channelId), target.uint32(16).int32(args.offset), target.uint32(24).int32(args.count), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.PullChannelListener;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.channelId = data.string();
                break;
              case 2:
                obj.offset = data.int32();
                break;
              case 3:
                obj.count = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("channelId")) {
            throw self.ProtocolError("missing required 'channelId'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("offset")) {
            throw self.ProtocolError("missing required 'offset'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("count")) {
            throw self.ProtocolError("missing required 'count'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.channelId) ? self.isInteger(value.offset) ? self.isInteger(value.count) ? null : "count: integer expected" : "offset: integer expected" : "channelId: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.PullChannelListener) {
            return obj;
          }
          var o = new window.PullChannelListener;
          return null != obj.channelId && (o.channelId = String(obj.channelId)), null != obj.offset && (o.offset = 0 | obj.offset), null != obj.count && (o.count = 0 | obj.count), o;
        }, Error.toObject = function (options, args) {
          if (!args) {
            args = {};
          }
          var result = {};
          return args.defaults && (result.channelId = "", result.offset = 0, result.count = 0), null != options.channelId && options.hasOwnProperty("channelId") && (result.channelId = options.channelId), null != options.offset && options.hasOwnProperty("offset") && (result.offset = options.offset), null != options.count && options.hasOwnProperty("count") && (result.count = options.count), result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullChannelListenerResult = function () {
        function model(props) {
          if (this.listener = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return model.prototype.totalCount = 0, model.prototype.offset = 0, model.prototype.listener = self.emptyArray, model.create = function (value) {
          return new model(value);
        }, model.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(8).int32(message.totalCount), writer.uint32(16).int32(message.offset), null != message.listener && message.listener.length) {
            var i = 0;
            for (; i < message.listener.length; ++i) {
              writer.uint32(26).string(message.listener[i]);
            }
          }
          return writer;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.PullChannelListenerResult;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.totalCount = data.int32();
                break;
              case 2:
                obj.offset = data.int32();
                break;
              case 3:
                if (!(obj.listener && obj.listener.length)) {
                  obj.listener = [];
                }
                obj.listener.push(data.string());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("totalCount")) {
            throw self.ProtocolError("missing required 'totalCount'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("offset")) {
            throw self.ProtocolError("missing required 'offset'", {
              instance: obj
            });
          }
          return obj;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (!self.isInteger(value.totalCount)) {
            return "totalCount: integer expected";
          }
          if (!self.isInteger(value.offset)) {
            return "offset: integer expected";
          }
          if (null != value.listener && value.hasOwnProperty("listener")) {
            if (!Array.isArray(value.listener)) {
              return "listener: array expected";
            }
            var i = 0;
            for (; i < value.listener.length; ++i) {
              if (!self.isString(value.listener[i])) {
                return "listener: string[] expected";
              }
            }
          }
          return null;
        }, model.fromObject = function (obj) {
          if (obj instanceof window.PullChannelListenerResult) {
            return obj;
          }
          var result = new window.PullChannelListenerResult;
          if (null != obj.totalCount && (result.totalCount = 0 | obj.totalCount), null != obj.offset && (result.offset = 0 | obj.offset), obj.listener) {
            if (!Array.isArray(obj.listener)) {
              throw TypeError(".PullChannelListenerResult.listener: array expected");
            }
            result.listener = [];
            var i = 0;
            for (; i < obj.listener.length; ++i) {
              result.listener[i] = String(obj.listener[i]);
            }
          }
          return result;
        }, model.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var self = {};
          if ((options.arrays || options.defaults) && (self.listener = []), options.defaults && (self.totalCount = 0, self.offset = 0), null != data.totalCount && data.hasOwnProperty("totalCount") && (self.totalCount = data.totalCount), null != data.offset && data.hasOwnProperty("offset") && (self.offset = data.offset), data.listener && data.listener.length) {
            self.listener = [];
            var i = 0;
            for (; i < data.listener.length; ++i) {
              self.listener[i] = data.listener[i];
            }
          }
          return self;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.ListenChannel = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.channelId = "", Error.prototype.listen = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.channelId), target.uint32(16).int32(args.listen), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.ListenChannel;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.channelId = data.string();
                break;
              case 2:
                obj.listen = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("channelId")) {
            throw self.ProtocolError("missing required 'channelId'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("listen")) {
            throw self.ProtocolError("missing required 'listen'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.channelId) ? self.isInteger(value.listen) ? null : "listen: integer expected" : "channelId: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.ListenChannel) {
            return obj;
          }
          var track = new window.ListenChannel;
          return null != obj.channelId && (track.channelId = String(obj.channelId)), null != obj.listen && (track.listen = 0 | obj.listen), track;
        }, Error.toObject = function (obj, args) {
          if (!args) {
            args = {};
          }
          var options = {};
          return args.defaults && (options.channelId = "", options.listen = 0), null != obj.channelId && obj.hasOwnProperty("channelId") && (options.channelId = obj.channelId), null != obj.listen && obj.hasOwnProperty("listen") && (options.listen = obj.listen), options;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.SearchChannelResult = function () {
        function Error(props) {
          if (this.channel = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.channel = self.emptyArray, Error.prototype.keyword = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          if (target || (target = $Writer.create()), null != data.channel && data.channel.length) {
            var i = 0;
            for (; i < data.channel.length; ++i) {
              window.ChannelInfo.encode(data.channel[i], target.uint32(10).fork()).ldelim();
            }
          }
          return target.uint32(18).string(data.keyword), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var value = new window.SearchChannelResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(value.channel && value.channel.length)) {
                  value.channel = [];
                }
                value.channel.push(window.ChannelInfo.decode(s, s.uint32()));
                break;
              case 2:
                value.keyword = s.string();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!value.hasOwnProperty("keyword")) {
            throw self.ProtocolError("missing required 'keyword'", {
              instance: value
            });
          }
          return value;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.channel && value.hasOwnProperty("channel")) {
            if (!Array.isArray(value.channel)) {
              return "channel: array expected";
            }
            var i = 0;
            for (; i < value.channel.length; ++i) {
              var r = window.ChannelInfo.verify(value.channel[i]);
              if (r) {
                return "channel." + r;
              }
            }
          }
          return self.isString(value.keyword) ? null : "keyword: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.SearchChannelResult) {
            return object;
          }
          var self = new window.SearchChannelResult;
          if (object.channel) {
            if (!Array.isArray(object.channel)) {
              throw TypeError(".SearchChannelResult.channel: array expected");
            }
            self.channel = [];
            var i = 0;
            for (; i < object.channel.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.channel[i])) {
                throw TypeError(".SearchChannelResult.channel: object expected");
              }
              self.channel[i] = window.ChannelInfo.fromObject(object.channel[i]);
            }
          }
          return null != object.keyword && (self.keyword = String(object.keyword)), self;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var form = {};
          if ((options.arrays || options.defaults) && (form.channel = []), options.defaults && (form.keyword = ""), data.channel && data.channel.length) {
            form.channel = [];
            var key = 0;
            for (; key < data.channel.length; ++key) {
              form.channel[key] = window.ChannelInfo.toObject(data.channel[key], options);
            }
          }
          return null != data.keyword && data.hasOwnProperty("keyword") && (form.keyword = data.keyword), form;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.MessageContent = function () {
        function Error(match) {
          if (this.mentionedTarget = [], match) {
            var crossfilterable_layers = (0, _noframeworkWaypoints2.default)(match);
            var layer_i = 0;
            for (; layer_i < crossfilterable_layers.length; ++layer_i) {
              if (null != match[crossfilterable_layers[layer_i]]) {
                this[crossfilterable_layers[layer_i]] = match[crossfilterable_layers[layer_i]];
              }
            }
          }
        }
        return Error.prototype.type = 0, Error.prototype.searchableContent = "", Error.prototype.pushContent = "", Error.prototype.content = "", Error.prototype.data = self.newBuffer([]), Error.prototype.mediaType = 0, Error.prototype.remoteMediaUrl = "", Error.prototype.persistFlag = 0, Error.prototype.expireDuration = 0, Error.prototype.mentionedType = 0, Error.prototype.mentionedTarget = self.emptyArray, Error.prototype.extra = "", Error.prototype.pushData = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(8).int32(message.type), null != message.searchableContent && message.hasOwnProperty("searchableContent") && writer.uint32(18).string(message.searchableContent), null != message.pushContent && message.hasOwnProperty("pushContent") && writer.uint32(26).string(message.pushContent), null != message.content && message.hasOwnProperty("content") && writer.uint32(34).string(message.content), null != message.data && message.hasOwnProperty("data") &&
            writer.uint32(42).bytes(message.data), null != message.mediaType && message.hasOwnProperty("mediaType") && writer.uint32(48).int32(message.mediaType), null != message.remoteMediaUrl && message.hasOwnProperty("remoteMediaUrl") && writer.uint32(58).string(message.remoteMediaUrl), null != message.persistFlag && message.hasOwnProperty("persistFlag") && writer.uint32(64).int32(message.persistFlag), null != message.expireDuration && message.hasOwnProperty("expireDuration") && writer.uint32(72).int32(message.expireDuration),
            null != message.mentionedType && message.hasOwnProperty("mentionedType") && writer.uint32(80).int32(message.mentionedType), null != message.mentionedTarget && message.mentionedTarget.length) {
            var i = 0;
            for (; i < message.mentionedTarget.length; ++i) {
              writer.uint32(90).string(message.mentionedTarget[i]);
            }
          }
          return null != message.extra && message.hasOwnProperty("extra") && writer.uint32(98).string(message.extra), null != message.pushData && message.hasOwnProperty("pushData") && writer.uint32(106).string(message.pushData), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var o = new window.MessageContent;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                o.type = data.int32();
                break;
              case 2:
                o.searchableContent = data.string();
                break;
              case 3:
                o.pushContent = data.string();
                break;
              case 4:
                o.content = data.string();
                break;
              case 5:
                o.data = data.bytes();
                break;
              case 6:
                o.mediaType = data.int32();
                break;
              case 7:
                o.remoteMediaUrl = data.string();
                break;
              case 8:
                o.persistFlag = data.int32();
                break;
              case 9:
                o.expireDuration = data.int32();
                break;
              case 10:
                o.mentionedType = data.int32();
                break;
              case 11:
                if (!(o.mentionedTarget && o.mentionedTarget.length)) {
                  o.mentionedTarget = [];
                }
                o.mentionedTarget.push(data.string());
                break;
              case 12:
                o.extra = data.string();
                break;
              case 13:
                o.pushData = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!o.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: o
            });
          }
          return o;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (item) {
          if ("object" !== (void 0 === item ? "undefined" : (0, _deepAssign2.default)(item)) || null === item) {
            return "object expected";
          }
          if (!self.isInteger(item.type)) {
            return "type: integer expected";
          }
          if (null != item.searchableContent && item.hasOwnProperty("searchableContent") && !self.isString(item.searchableContent)) {
            return "searchableContent: string expected";
          }
          if (null != item.pushContent && item.hasOwnProperty("pushContent") && !self.isString(item.pushContent)) {
            return "pushContent: string expected";
          }
          if (null != item.content && item.hasOwnProperty("content") && !self.isString(item.content)) {
            return "content: string expected";
          }
          if (null != item.data && item.hasOwnProperty("data") && !(item.data && "number" == typeof item.data.length || self.isString(item.data))) {
            return "data: buffer expected";
          }
          if (null != item.mediaType && item.hasOwnProperty("mediaType") && !self.isInteger(item.mediaType)) {
            return "mediaType: integer expected";
          }
          if (null != item.remoteMediaUrl && item.hasOwnProperty("remoteMediaUrl") && !self.isString(item.remoteMediaUrl)) {
            return "remoteMediaUrl: string expected";
          }
          if (null != item.persistFlag && item.hasOwnProperty("persistFlag") && !self.isInteger(item.persistFlag)) {
            return "persistFlag: integer expected";
          }
          if (null != item.expireDuration && item.hasOwnProperty("expireDuration") && !self.isInteger(item.expireDuration)) {
            return "expireDuration: integer expected";
          }
          if (null != item.mentionedType && item.hasOwnProperty("mentionedType") && !self.isInteger(item.mentionedType)) {
            return "mentionedType: integer expected";
          }
          if (null != item.mentionedTarget && item.hasOwnProperty("mentionedTarget")) {
            if (!Array.isArray(item.mentionedTarget)) {
              return "mentionedTarget: array expected";
            }
            var i = 0;
            for (; i < item.mentionedTarget.length; ++i) {
              if (!self.isString(item.mentionedTarget[i])) {
                return "mentionedTarget: string[] expected";
              }
            }
          }
          return null != item.extra && item.hasOwnProperty("extra") && !self.isString(item.extra) ? "extra: string expected" : null != item.pushData && item.hasOwnProperty("pushData") && !self.isString(item.pushData) ? "pushData: string expected" : null;
        }, Error.fromObject = function (options) {
          if (options instanceof window.MessageContent) {
            return options;
          }
          var that = new window.MessageContent;
          if (null != options.type && (that.type = 0 | options.type), null != options.searchableContent && (that.searchableContent = String(options.searchableContent)), null != options.pushContent && (that.pushContent = String(options.pushContent)), null != options.content && (that.content = String(options.content)), null != options.data && ("string" == typeof options.data ? self.base64.decode(options.data, that.data = self.newBuffer(self.base64.length(options.data)), 0) : options.data.length &&
            (that.data = options.data)), null != options.mediaType && (that.mediaType = 0 | options.mediaType), null != options.remoteMediaUrl && (that.remoteMediaUrl = String(options.remoteMediaUrl)), null != options.persistFlag && (that.persistFlag = 0 | options.persistFlag), null != options.expireDuration && (that.expireDuration = 0 | options.expireDuration), null != options.mentionedType && (that.mentionedType = 0 | options.mentionedType), options.mentionedTarget) {
            if (!Array.isArray(options.mentionedTarget)) {
              throw TypeError(".MessageContent.mentionedTarget: array expected");
            }
            that.mentionedTarget = [];
            var i = 0;
            for (; i < options.mentionedTarget.length; ++i) {
              that.mentionedTarget[i] = String(options.mentionedTarget[i]);
            }
          }
          return null != options.extra && (that.extra = String(options.extra)), null != options.pushData && (that.pushData = String(options.pushData)), that;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var that = {};
          if ((options.arrays || options.defaults) && (that.mentionedTarget = []), options.defaults && (that.type = 0, that.searchableContent = "", that.pushContent = "", that.content = "", options.bytes === String ? that.data = "" : (that.data = [], options.bytes !== Array && (that.data = self.newBuffer(that.data))), that.mediaType = 0, that.remoteMediaUrl = "", that.persistFlag = 0, that.expireDuration = 0, that.mentionedType = 0, that.extra = "", that.pushData = ""), null != message.type && message.hasOwnProperty("type") &&
            (that.type = message.type), null != message.searchableContent && message.hasOwnProperty("searchableContent") && (that.searchableContent = message.searchableContent), null != message.pushContent && message.hasOwnProperty("pushContent") && (that.pushContent = message.pushContent), null != message.content && message.hasOwnProperty("content") && (that.content = message.content), null != message.data && message.hasOwnProperty("data") && (that.data = options.bytes === String ? self.base64.encode(message.data,
              0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data), null != message.mediaType && message.hasOwnProperty("mediaType") && (that.mediaType = message.mediaType), null != message.remoteMediaUrl && message.hasOwnProperty("remoteMediaUrl") && (that.remoteMediaUrl = message.remoteMediaUrl), null != message.persistFlag && message.hasOwnProperty("persistFlag") && (that.persistFlag = message.persistFlag), null != message.expireDuration && message.hasOwnProperty("expireDuration") &&
            (that.expireDuration = message.expireDuration), null != message.mentionedType && message.hasOwnProperty("mentionedType") && (that.mentionedType = message.mentionedType), message.mentionedTarget && message.mentionedTarget.length) {
            that.mentionedTarget = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.mentionedTarget.length; ++buttonIndex) {
              that.mentionedTarget[buttonIndex] = message.mentionedTarget[buttonIndex];
            }
          }
          return null != message.extra && message.hasOwnProperty("extra") && (that.extra = message.extra), null != message.pushData && message.hasOwnProperty("pushData") && (that.pushData = message.pushData), that;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.AddGroupMemberRequest = function () {
        function Error(props) {
          if (this.addedMember = [], this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.addedMember = self.emptyArray, Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.prototype.extra = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), null != message.addedMember && message.addedMember.length) {
            var i = 0;
            for (; i < message.addedMember.length; ++i) {
              window.GroupMember.encode(message.addedMember[i], writer.uint32(18).fork()).ldelim();
            }
          }
          if (null != message.toLine && message.toLine.length) {
            i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(24).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(34).fork()).ldelim(), null != message.extra && message.hasOwnProperty("extra") && writer.uint32(42).string(message.extra), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.AddGroupMemberRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                if (!(that.addedMember && that.addedMember.length)) {
                  that.addedMember = [];
                }
                that.addedMember.push(window.GroupMember.decode(data, data.uint32()));
                break;
              case 3:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 4:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              case 5:
                that.extra = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          if (!self.isString(obj.groupId)) {
            return "groupId: string expected";
          }
          if (null != obj.addedMember && obj.hasOwnProperty("addedMember")) {
            if (!Array.isArray(obj.addedMember)) {
              return "addedMember: array expected";
            }
            var i = 0;
            for (; i < obj.addedMember.length; ++i) {
              if (r = window.GroupMember.verify(obj.addedMember[i])) {
                return "addedMember." + r;
              }
            }
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          var r;
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent") && (r = window.MessageContent.verify(obj.notifyContent))) {
            return "notifyContent." + r;
          }
          return null != obj.extra && obj.hasOwnProperty("extra") && !self.isString(obj.extra) ? "extra: string expected" : null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.AddGroupMemberRequest) {
            return obj;
          }
          var that = new window.AddGroupMemberRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), obj.addedMember) {
            if (!Array.isArray(obj.addedMember)) {
              throw TypeError(".AddGroupMemberRequest.addedMember: array expected");
            }
            that.addedMember = [];
            var i = 0;
            for (; i < obj.addedMember.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.addedMember[i])) {
                throw TypeError(".AddGroupMemberRequest.addedMember: object expected");
              }
              that.addedMember[i] = window.GroupMember.fromObject(obj.addedMember[i]);
            }
          }
          if (obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".AddGroupMemberRequest.toLine: array expected");
            }
            that.toLine = [];
            i = 0;
            for (; i < obj.toLine.length; ++i) {
              that.toLine[i] = 0 | obj.toLine[i];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".AddGroupMemberRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return null != obj.extra && (that.extra = String(obj.extra)), that;
        }, Error.toObject = function (params, options) {
          if (!options) {
            options = {};
          }
          var stream = {};
          if ((options.arrays || options.defaults) && (stream.addedMember = [], stream.toLine = []), options.defaults && (stream.groupId = "", stream.notifyContent = null, stream.extra = ""), null != params.groupId && params.hasOwnProperty("groupId") && (stream.groupId = params.groupId), params.addedMember && params.addedMember.length) {
            stream.addedMember = [];
            var key = 0;
            for (; key < params.addedMember.length; ++key) {
              stream.addedMember[key] = window.GroupMember.toObject(params.addedMember[key], options);
            }
          }
          if (params.toLine && params.toLine.length) {
            stream.toLine = [];
            key = 0;
            for (; key < params.toLine.length; ++key) {
              stream.toLine[key] = params.toLine[key];
            }
          }
          return null != params.notifyContent && params.hasOwnProperty("notifyContent") && (stream.notifyContent = window.MessageContent.toObject(params.notifyContent, options)), null != params.extra && params.hasOwnProperty("extra") && (stream.extra = params.extra), stream;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.CreateGroupRequest = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.group = null, Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.prototype.memberExtra = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), window.Group.encode(message.group, writer.uint32(10).fork()).ldelim(), null != message.toLine && message.toLine.length) {
            var i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(16).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(26).fork()).ldelim(), null != message.memberExtra && message.hasOwnProperty("memberExtra") && writer.uint32(34).string(message.memberExtra), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.CreateGroupRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.group = window.Group.decode(data, data.uint32());
                break;
              case 2:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 3:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              case 4:
                that.memberExtra = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("group")) {
            throw self.ProtocolError("missing required 'group'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          var t;
          if (t = window.Group.verify(obj.group)) {
            return "group." + t;
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent") && (t = window.MessageContent.verify(obj.notifyContent))) {
            return "notifyContent." + t;
          }
          return null != obj.memberExtra && obj.hasOwnProperty("memberExtra") && !self.isString(obj.memberExtra) ? "memberExtra: string expected" : null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.CreateGroupRequest) {
            return obj;
          }
          var that = new window.CreateGroupRequest;
          if (null != obj.group) {
            if ("object" !== (0, _deepAssign2.default)(obj.group)) {
              throw TypeError(".CreateGroupRequest.group: object expected");
            }
            that.group = window.Group.fromObject(obj.group);
          }
          if (obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".CreateGroupRequest.toLine: array expected");
            }
            that.toLine = [];
            var r = 0;
            for (; r < obj.toLine.length; ++r) {
              that.toLine[r] = 0 | obj.toLine[r];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".CreateGroupRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return null != obj.memberExtra && (that.memberExtra = String(obj.memberExtra)), that;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var that = {};
          if ((options.arrays || options.defaults) && (that.toLine = []), options.defaults && (that.group = null, that.notifyContent = null, that.memberExtra = ""), null != message.group && message.hasOwnProperty("group") && (that.group = window.Group.toObject(message.group, options)), message.toLine && message.toLine.length) {
            that.toLine = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.toLine.length; ++buttonIndex) {
              that.toLine[buttonIndex] = message.toLine[buttonIndex];
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && (that.notifyContent = window.MessageContent.toObject(message.notifyContent, options)), null != message.memberExtra && message.hasOwnProperty("memberExtra") && (that.memberExtra = message.memberExtra), that;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.DismissGroupRequest = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), null != message.toLine && message.toLine.length) {
            var i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(16).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(26).fork()).ldelim(), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.DismissGroupRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 3:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          if (!self.isString(obj.groupId)) {
            return "groupId: string expected";
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(obj.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.DismissGroupRequest) {
            return obj;
          }
          var that = new window.DismissGroupRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".DismissGroupRequest.toLine: array expected");
            }
            that.toLine = [];
            var r = 0;
            for (; r < obj.toLine.length; ++r) {
              that.toLine[r] = 0 | obj.toLine[r];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".DismissGroupRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return that;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if ((options.arrays || options.defaults) && ($scope.toLine = []), options.defaults && ($scope.groupId = "", $scope.notifyContent = null), null != message.groupId && message.hasOwnProperty("groupId") && ($scope.groupId = message.groupId), message.toLine && message.toLine.length) {
            $scope.toLine = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.toLine.length; ++buttonIndex) {
              $scope.toLine[buttonIndex] = message.toLine[buttonIndex];
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && ($scope.notifyContent = window.MessageContent.toObject(message.notifyContent, options)), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.FriendRequest = function () {
        function model(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return model.prototype.fromUid = "", model.prototype.toUid = "", model.prototype.reason = "", model.prototype.status = 0, model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.fromReadStatus = false, model.prototype.toReadStatus = false, model.prototype.extra = "", model.create = function (value) {
          return new model(value);
        }, model.encode = function (args, target) {
          return target || (target = $Writer.create()), null != args.fromUid && args.hasOwnProperty("fromUid") && target.uint32(10).string(args.fromUid), target.uint32(18).string(args.toUid), target.uint32(26).string(args.reason), null != args.status && args.hasOwnProperty("status") && target.uint32(32).int32(args.status), null != args.updateDt && args.hasOwnProperty("updateDt") && target.uint32(40).int64(args.updateDt), null != args.fromReadStatus && args.hasOwnProperty("fromReadStatus") && target.uint32(48).bool(args.fromReadStatus),
            null != args.toReadStatus && args.hasOwnProperty("toReadStatus") && target.uint32(56).bool(args.toReadStatus), null != args.extra && args.hasOwnProperty("extra") && target.uint32(66).string(args.extra), target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var params = new window.FriendRequest;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                params.fromUid = data.string();
                break;
              case 2:
                params.toUid = data.string();
                break;
              case 3:
                params.reason = data.string();
                break;
              case 4:
                params.status = data.int32();
                break;
              case 5:
                params.updateDt = data.int64();
                break;
              case 6:
                params.fromReadStatus = data.bool();
                break;
              case 7:
                params.toReadStatus = data.bool();
                break;
              case 8:
                params.extra = data.string();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!params.hasOwnProperty("toUid")) {
            throw self.ProtocolError("missing required 'toUid'", {
              instance: params
            });
          }
          if (!params.hasOwnProperty("reason")) {
            throw self.ProtocolError("missing required 'reason'", {
              instance: params
            });
          }
          return params;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : null != data.fromUid && data.hasOwnProperty("fromUid") && !self.isString(data.fromUid) ? "fromUid: string expected" : self.isString(data.toUid) ? self.isString(data.reason) ? null != data.status && data.hasOwnProperty("status") && !self.isInteger(data.status) ? "status: integer expected" : null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) ||
            data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" : null != data.fromReadStatus && data.hasOwnProperty("fromReadStatus") && "boolean" != typeof data.fromReadStatus ? "fromReadStatus: boolean expected" : null != data.toReadStatus && data.hasOwnProperty("toReadStatus") && "boolean" != typeof data.toReadStatus ? "toReadStatus: boolean expected" : null != data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra) ?
              "extra: string expected" : null : "reason: string expected" : "toUid: string expected";
        }, model.fromObject = function (object) {
          if (object instanceof window.FriendRequest) {
            return object;
          }
          var data = new window.FriendRequest;
          return null != object.fromUid && (data.fromUid = String(object.fromUid)), null != object.toUid && (data.toUid = String(object.toUid)), null != object.reason && (data.reason = String(object.reason)), null != object.status && (data.status = 0 | object.status), null != object.updateDt && (self.Long ? (data.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? data.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ?
            data.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) && (data.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>> 0)).toNumber())), null != object.fromReadStatus && (data.fromReadStatus = Boolean(object.fromReadStatus)), null != object.toReadStatus && (data.toReadStatus = Boolean(object.toReadStatus)), null != object.extra && (data.extra = String(object.extra)), data;
        }, model.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if (options.defaults) {
            if (result.fromUid = "", result.toUid = "", result.reason = "", result.status = 0, self.Long) {
              var long = new self.Long(0, 0, false);
              result.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              result.updateDt = options.longs === String ? "0" : 0;
            }
            result.fromReadStatus = false;
            result.toReadStatus = false;
            result.extra = "";
          }
          return null != message.fromUid && message.hasOwnProperty("fromUid") && (result.fromUid = message.fromUid), null != message.toUid && message.hasOwnProperty("toUid") && (result.toUid = message.toUid), null != message.reason && message.hasOwnProperty("reason") && (result.reason = message.reason), null != message.status && message.hasOwnProperty("status") && (result.status = message.status), null != message.updateDt && message.hasOwnProperty("updateDt") && ("number" == typeof message.updateDt ?
            result.updateDt = options.longs === String ? String(message.updateDt) : message.updateDt : result.updateDt = options.longs === String ? self.Long.prototype.toString.call(message.updateDt) : options.longs === Number ? (new self.LongBits(message.updateDt.low >>> 0, message.updateDt.high >>> 0)).toNumber() : message.updateDt), null != message.fromReadStatus && message.hasOwnProperty("fromReadStatus") && (result.fromReadStatus = message.fromReadStatus), null != message.toReadStatus && message.hasOwnProperty("toReadStatus") &&
            (result.toReadStatus = message.toReadStatus), null != message.extra && message.hasOwnProperty("extra") && (result.extra = message.extra), result;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.GeneralResult = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.errorCode = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(8).int32(args.errorCode), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var response = new window.GeneralResult;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                response.errorCode = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!response.hasOwnProperty("errorCode")) {
            throw self.ProtocolError("missing required 'errorCode'", {
              instance: response
            });
          }
          return response;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isInteger(value.errorCode) ? null : "errorCode: integer expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.GeneralResult) {
            return object;
          }
          var validatedFrameDuration = new window.GeneralResult;
          return null != object.errorCode && (validatedFrameDuration.errorCode = 0 | object.errorCode), validatedFrameDuration;
        }, Error.toObject = function (options, data) {
          if (!data) {
            data = {};
          }
          var err = {};
          return data.defaults && (err.errorCode = 0), null != options.errorCode && options.hasOwnProperty("errorCode") && (err.errorCode = options.errorCode), err;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GetUploadTokenRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.mediaType = 0, Error.prototype.mediaPath = "", Error.prototype.contentType = "", Error.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(8).int32(message.mediaType), writer.uint32(18).string(message.mediaPath), null != message.contentType && message.hasOwnProperty("contentType") && writer.uint32(26).string(message.contentType), null != message.messageId && message.hasOwnProperty("messageId") && writer.uint32(32).int64(message.messageId), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.GetUploadTokenRequest;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.mediaType = data.int32();
                break;
              case 2:
                message.mediaPath = data.string();
                break;
              case 3:
                message.contentType = data.string();
                break;
              case 4:
                message.messageId = data.int64();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("mediaType")) {
            throw self.ProtocolError("missing required 'mediaType'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("mediaPath")) {
            throw self.ProtocolError("missing required 'mediaPath'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.mediaType) ? self.isString(data.mediaPath) ? null != data.contentType && data.hasOwnProperty("contentType") && !self.isString(data.contentType) ? "contentType: string expected" : null != data.messageId && data.hasOwnProperty("messageId") && !(self.isInteger(data.messageId) || data.messageId && self.isInteger(data.messageId.low) && self.isInteger(data.messageId.high)) ?
            "messageId: integer|Long expected" : null : "mediaPath: string expected" : "mediaType: integer expected";
        }, Error.fromObject = function (message) {
          if (message instanceof window.GetUploadTokenRequest) {
            return message;
          }
          var result = new window.GetUploadTokenRequest;
          return null != message.mediaType && (result.mediaType = 0 | message.mediaType), null != message.mediaPath && (result.mediaPath = String(message.mediaPath)), null != message.contentType && (result.contentType = String(message.contentType)), null != message.messageId && (self.Long ? (result.messageId = self.Long.fromValue(message.messageId)).unsigned = false : "string" == typeof message.messageId ? result.messageId = parseInt(message.messageId, 10) : "number" == typeof message.messageId ?
            result.messageId = message.messageId : "object" === (0, _deepAssign2.default)(message.messageId) && (result.messageId = (new self.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0)).toNumber())), result;
        }, Error.toObject = function (options, data) {
          if (!data) {
            data = {};
          }
          var result = {};
          if (data.defaults) {
            if (result.mediaType = 0, result.mediaPath = "", result.contentType = "", self.Long) {
              var long = new self.Long(0, 0, false);
              result.messageId = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
            } else {
              result.messageId = data.longs === String ? "0" : 0;
            }
          }
          return null != options.mediaType && options.hasOwnProperty("mediaType") && (result.mediaType = options.mediaType), null != options.mediaPath && options.hasOwnProperty("mediaPath") && (result.mediaPath = options.mediaPath), null != options.contentType && options.hasOwnProperty("contentType") && (result.contentType = options.contentType), null != options.messageId && options.hasOwnProperty("messageId") && ("number" == typeof options.messageId ? result.messageId = data.longs === String ? String(options.messageId) :
            options.messageId : result.messageId = data.longs === String ? self.Long.prototype.toString.call(options.messageId) : data.longs === Number ? (new self.LongBits(options.messageId.low >>> 0, options.messageId.high >>> 0)).toNumber() : options.messageId), result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GetUploadTokenResult = function () {
        function self(val) {
          if (val) {
            var bKeys = (0, _noframeworkWaypoints2.default)(val);
            var i = 0;
            for (; i < bKeys.length; ++i) {
              if (null != val[bKeys[i]]) {
                this[bKeys[i]] = val[bKeys[i]];
              }
            }
          }
        }
        return self.prototype.domain = "", self.prototype.token = "", self.prototype.server = "", self.prototype.port = 0, self.prototype.type = 0, self.prototype.date = "", self.prototype.path = "", self.prototype.backupServer = "", self.prototype.backupPort = 0, self.prototype.sslPort = 0, self.prototype.backupSslPort = 0, self.prototype.sslToken = "", self.prototype.backupToken = "", self.prototype.backupSslToken = "", self.create = function (obj) {
          return new self(obj);
        }, self.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.domain), target.uint32(18).string(data.token), target.uint32(26).string(data.server), null != data.port && data.hasOwnProperty("port") && target.uint32(32).int32(data.port), null != data.type && data.hasOwnProperty("type") && target.uint32(40).int32(data.type), null != data.date && data.hasOwnProperty("date") && target.uint32(50).string(data.date), null != data.path && data.hasOwnProperty("path") && target.uint32(58).string(data.path),
            null != data.backupServer && data.hasOwnProperty("backupServer") && target.uint32(66).string(data.backupServer), null != data.backupPort && data.hasOwnProperty("backupPort") && target.uint32(72).int32(data.backupPort), null != data.sslPort && data.hasOwnProperty("sslPort") && target.uint32(80).int32(data.sslPort), null != data.backupSslPort && data.hasOwnProperty("backupSslPort") && target.uint32(88).int32(data.backupSslPort), null != data.sslToken && data.hasOwnProperty("sslToken") &&
            target.uint32(98).string(data.sslToken), null != data.backupToken && data.hasOwnProperty("backupToken") && target.uint32(106).string(data.backupToken), null != data.backupSslToken && data.hasOwnProperty("backupSslToken") && target.uint32(114).string(data.backupSslToken), target;
        }, self.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, self.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var result = new window.GetUploadTokenResult;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                result.domain = data.string();
                break;
              case 2:
                result.token = data.string();
                break;
              case 3:
                result.server = data.string();
                break;
              case 4:
                result.port = data.int32();
                break;
              case 5:
                result.type = data.int32();
                break;
              case 6:
                result.date = data.string();
                break;
              case 7:
                result.path = data.string();
                break;
              case 8:
                result.backupServer = data.string();
                break;
              case 9:
                result.backupPort = data.int32();
                break;
              case 10:
                result.sslPort = data.int32();
                break;
              case 11:
                result.backupSslPort = data.int32();
                break;
              case 12:
                result.sslToken = data.string();
                break;
              case 13:
                result.backupToken = data.string();
                break;
              case 14:
                result.backupSslToken = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!result.hasOwnProperty("domain")) {
            throw self.ProtocolError("missing required 'domain'", {
              instance: result
            });
          }
          if (!result.hasOwnProperty("token")) {
            throw self.ProtocolError("missing required 'token'", {
              instance: result
            });
          }
          if (!result.hasOwnProperty("server")) {
            throw self.ProtocolError("missing required 'server'", {
              instance: result
            });
          }
          return result;
        }, self.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, self.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.domain) ? self.isString(value.token) ? self.isString(value.server) ? null != value.port && value.hasOwnProperty("port") && !self.isInteger(value.port) ? "port: integer expected" : null != value.type && value.hasOwnProperty("type") && !self.isInteger(value.type) ? "type: integer expected" : null != value.date && value.hasOwnProperty("date") &&
            !self.isString(value.date) ? "date: string expected" : null != value.path && value.hasOwnProperty("path") && !self.isString(value.path) ? "path: string expected" : null != value.backupServer && value.hasOwnProperty("backupServer") && !self.isString(value.backupServer) ? "backupServer: string expected" : null != value.backupPort && value.hasOwnProperty("backupPort") && !self.isInteger(value.backupPort) ? "backupPort: integer expected" : null != value.sslPort && value.hasOwnProperty("sslPort") &&
              !self.isInteger(value.sslPort) ? "sslPort: integer expected" : null != value.backupSslPort && value.hasOwnProperty("backupSslPort") && !self.isInteger(value.backupSslPort) ? "backupSslPort: integer expected" : null != value.sslToken && value.hasOwnProperty("sslToken") && !self.isString(value.sslToken) ? "sslToken: string expected" : null != value.backupToken && value.hasOwnProperty("backupToken") && !self.isString(value.backupToken) ? "backupToken: string expected" : null != value.backupSslToken &&
                value.hasOwnProperty("backupSslToken") && !self.isString(value.backupSslToken) ? "backupSslToken: string expected" : null : "server: string expected" : "token: string expected" : "domain: string expected";
        }, self.fromObject = function (object) {
          if (object instanceof window.GetUploadTokenResult) {
            return object;
          }
          var self = new window.GetUploadTokenResult;
          return null != object.domain && (self.domain = String(object.domain)), null != object.token && (self.token = String(object.token)), null != object.server && (self.server = String(object.server)), null != object.port && (self.port = 0 | object.port), null != object.type && (self.type = 0 | object.type), null != object.date && (self.date = String(object.date)), null != object.path && (self.path = String(object.path)), null != object.backupServer && (self.backupServer = String(object.backupServer)),
            null != object.backupPort && (self.backupPort = 0 | object.backupPort), null != object.sslPort && (self.sslPort = 0 | object.sslPort), null != object.backupSslPort && (self.backupSslPort = 0 | object.backupSslPort), null != object.sslToken && (self.sslToken = String(object.sslToken)), null != object.backupToken && (self.backupToken = String(object.backupToken)), null != object.backupSslToken && (self.backupSslToken = String(object.backupSslToken)), self;
        }, self.toObject = function (options, data) {
          if (!data) {
            data = {};
          }
          var self = {};
          return data.defaults && (self.domain = "", self.token = "", self.server = "", self.port = 0, self.type = 0, self.date = "", self.path = "", self.backupServer = "", self.backupPort = 0, self.sslPort = 0, self.backupSslPort = 0, self.sslToken = "", self.backupToken = "", self.backupSslToken = ""), null != options.domain && options.hasOwnProperty("domain") && (self.domain = options.domain), null != options.token && options.hasOwnProperty("token") && (self.token = options.token), null != options.server &&
            options.hasOwnProperty("server") && (self.server = options.server), null != options.port && options.hasOwnProperty("port") && (self.port = options.port), null != options.type && options.hasOwnProperty("type") && (self.type = options.type), null != options.date && options.hasOwnProperty("date") && (self.date = options.date), null != options.path && options.hasOwnProperty("path") && (self.path = options.path), null != options.backupServer && options.hasOwnProperty("backupServer") && (self.backupServer =
              options.backupServer), null != options.backupPort && options.hasOwnProperty("backupPort") && (self.backupPort = options.backupPort), null != options.sslPort && options.hasOwnProperty("sslPort") && (self.sslPort = options.sslPort), null != options.backupSslPort && options.hasOwnProperty("backupSslPort") && (self.backupSslPort = options.backupSslPort), null != options.sslToken && options.hasOwnProperty("sslToken") && (self.sslToken = options.sslToken), null != options.backupToken && options.hasOwnProperty("backupToken") &&
            (self.backupToken = options.backupToken), null != options.backupSslToken && options.hasOwnProperty("backupSslToken") && (self.backupSslToken = options.backupSslToken), self;
        }, self.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, self;
      }();
      window.GetPresignedUrlResult = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.presignedUrl = "", Error.prototype.mediaUrl = "", Error.prototype.backupPresignedUrl = "", Error.prototype.type = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(message.presignedUrl), writer.uint32(18).string(message.mediaUrl), null != message.backupPresignedUrl && message.hasOwnProperty("backupPresignedUrl") && writer.uint32(26).string(message.backupPresignedUrl), null != message.type && message.hasOwnProperty("type") && writer.uint32(32).int32(message.type), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.GetPresignedUrlResult;
          for (; data.pos < end;) {
            var f = data.uint32();
            switch (f >>> 3) {
              case 1:
                message.presignedUrl = data.string();
                break;
              case 2:
                message.mediaUrl = data.string();
                break;
              case 3:
                message.backupPresignedUrl = data.string();
                break;
              case 4:
                message.type = data.int32();
                break;
              default:
                data.skipType(7 & f);
            }
          }
          if (!message.hasOwnProperty("presignedUrl")) {
            throw self.ProtocolError("missing required 'presignedUrl'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("mediaUrl")) {
            throw self.ProtocolError("missing required 'mediaUrl'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.presignedUrl) ? self.isString(value.mediaUrl) ? null != value.backupPresignedUrl && value.hasOwnProperty("backupPresignedUrl") && !self.isString(value.backupPresignedUrl) ? "backupPresignedUrl: string expected" : null != value.type && value.hasOwnProperty("type") && !self.isInteger(value.type) ? "type: integer expected" : null : "mediaUrl: string expected" :
            "presignedUrl: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetPresignedUrlResult) {
            return obj;
          }
          var message = new window.GetPresignedUrlResult;
          return null != obj.presignedUrl && (message.presignedUrl = String(obj.presignedUrl)), null != obj.mediaUrl && (message.mediaUrl = String(obj.mediaUrl)), null != obj.backupPresignedUrl && (message.backupPresignedUrl = String(obj.backupPresignedUrl)), null != obj.type && (message.type = 0 | obj.type), message;
        }, Error.toObject = function (obj, args) {
          if (!args) {
            args = {};
          }
          var self = {};
          return args.defaults && (self.presignedUrl = "", self.mediaUrl = "", self.backupPresignedUrl = "", self.type = 0), null != obj.presignedUrl && obj.hasOwnProperty("presignedUrl") && (self.presignedUrl = obj.presignedUrl), null != obj.mediaUrl && obj.hasOwnProperty("mediaUrl") && (self.mediaUrl = obj.mediaUrl), null != obj.backupPresignedUrl && obj.hasOwnProperty("backupPresignedUrl") && (self.backupPresignedUrl = obj.backupPresignedUrl), null != obj.type && obj.hasOwnProperty("type") &&
            (self.type = obj.type), self;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GetDownloadSignedUrlResult = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.url = "", Error.prototype.backupUrl = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.url), null != data.backupUrl && data.hasOwnProperty("backupUrl") && target.uint32(18).string(data.backupUrl), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var v = new window.GetDownloadSignedUrlResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                v.url = s.string();
                break;
              case 2:
                v.backupUrl = s.string();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!v.hasOwnProperty("url")) {
            throw self.ProtocolError("missing required 'url'", {
              instance: v
            });
          }
          return v;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.url) ? null != value.backupUrl && value.hasOwnProperty("backupUrl") && !self.isString(value.backupUrl) ? "backupUrl: string expected" : null : "url: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.GetDownloadSignedUrlResult) {
            return object;
          }
          var data = new window.GetDownloadSignedUrlResult;
          return null != object.url && (data.url = String(object.url)), null != object.backupUrl && (data.backupUrl = String(object.backupUrl)), data;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var a = {};
          return options.defaults && (a.url = "", a.backupUrl = ""), null != data.url && data.hasOwnProperty("url") && (a.url = data.url), null != data.backupUrl && data.hasOwnProperty("backupUrl") && (a.backupUrl = data.backupUrl), a;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.HandleFriendRequest = function () {
        function model(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return model.prototype.targetUid = "", model.prototype.status = 0, model.prototype.extra = "", model.create = function (value) {
          return new model(value);
        }, model.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.targetUid), target.uint32(16).int32(args.status), null != args.extra && args.hasOwnProperty("extra") && target.uint32(26).string(args.extra), target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var params = new window.HandleFriendRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                params.targetUid = data.string();
                break;
              case 2:
                params.status = data.int32();
                break;
              case 3:
                params.extra = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!params.hasOwnProperty("targetUid")) {
            throw self.ProtocolError("missing required 'targetUid'", {
              instance: params
            });
          }
          if (!params.hasOwnProperty("status")) {
            throw self.ProtocolError("missing required 'status'", {
              instance: params
            });
          }
          return params;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (params) {
          return "object" !== (void 0 === params ? "undefined" : (0, _deepAssign2.default)(params)) || null === params ? "object expected" : self.isString(params.targetUid) ? self.isInteger(params.status) ? null != params.extra && params.hasOwnProperty("extra") && !self.isString(params.extra) ? "extra: string expected" : null : "status: integer expected" : "targetUid: string expected";
        }, model.fromObject = function (data) {
          if (data instanceof window.HandleFriendRequest) {
            return data;
          }
          var params = new window.HandleFriendRequest;
          return null != data.targetUid && (params.targetUid = String(data.targetUid)), null != data.status && (params.status = 0 | data.status), null != data.extra && (params.extra = String(data.extra)), params;
        }, model.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var params = {};
          return options.defaults && (params.targetUid = "", params.status = 0, params.extra = ""), null != data.targetUid && data.hasOwnProperty("targetUid") && (params.targetUid = data.targetUid), null != data.status && data.hasOwnProperty("status") && (params.status = data.status), null != data.extra && data.hasOwnProperty("extra") && (params.extra = data.extra), params;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.IDBuf = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.id = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.id), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var t = new window.IDBuf;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                t.id = s.string();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!t.hasOwnProperty("id")) {
            throw self.ProtocolError("missing required 'id'", {
              instance: t
            });
          }
          return t;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.id) ? null : "id: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.IDBuf) {
            return object;
          }
          var post_link1 = new window.IDBuf;
          return null != object.id && (post_link1.id = String(object.id)), post_link1;
        }, Error.toObject = function (options, o) {
          if (!o) {
            o = {};
          }
          var r = {};
          return o.defaults && (r.id = ""), null != options.id && options.hasOwnProperty("id") && (r.id = options.id), r;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.IDListBuf = function () {
        function Device(properties) {
          if (this.id = [], properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Device.prototype.id = self.emptyArray, Device.create = function (value) {
          return new Device(value);
        }, Device.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.id && value.id.length) {
            var i = 0;
            for (; i < value.id.length; ++i) {
              message.uint32(10).string(value.id[i]);
            }
          }
          return message;
        }, Device.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Device.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var self = new window.IDListBuf;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(self.id && self.id.length)) {
                  self.id = [];
                }
                self.id.push(s.string());
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return self;
        }, Device.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Device.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.id && value.hasOwnProperty("id")) {
            if (!Array.isArray(value.id)) {
              return "id: array expected";
            }
            var i = 0;
            for (; i < value.id.length; ++i) {
              if (!self.isString(value.id[i])) {
                return "id: string[] expected";
              }
            }
          }
          return null;
        }, Device.fromObject = function (object) {
          if (object instanceof window.IDListBuf) {
            return object;
          }
          var node = new window.IDListBuf;
          if (object.id) {
            if (!Array.isArray(object.id)) {
              throw TypeError(".IDListBuf.id: array expected");
            }
            node.id = [];
            var i = 0;
            for (; i < object.id.length; ++i) {
              node.id[i] = String(object.id[i]);
            }
          }
          return node;
        }, Device.toObject = function (line, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if ((options.arrays || options.defaults) && (result.id = []), line.id && line.id.length) {
            result.id = [];
            var i = 0;
            for (; i < line.id.length; ++i) {
              result.id[i] = line.id[i];
            }
          }
          return result;
        }, Device.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Device;
      }();
      window.Message = function () {
        function Bookmark(properties) {
          if (this.to = [], properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Bookmark.prototype.conversation = null, Bookmark.prototype.fromUser = "", Bookmark.prototype.content = null, Bookmark.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Bookmark.prototype.serverTimestamp = self.Long ? self.Long.fromBits(0, 0, false) : 0, Bookmark.prototype.toUser = "", Bookmark.prototype.to = self.emptyArray, Bookmark.create = function (value) {
          return new Bookmark(value);
        }, Bookmark.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), window.Conversation.encode(message.conversation, writer.uint32(10).fork()).ldelim(), writer.uint32(18).string(message.fromUser), window.MessageContent.encode(message.content, writer.uint32(26).fork()).ldelim(), null != message.messageId && message.hasOwnProperty("messageId") && writer.uint32(32).int64(message.messageId), null != message.serverTimestamp && message.hasOwnProperty("serverTimestamp") && writer.uint32(40).int64(message.serverTimestamp),
            null != message.toUser && message.hasOwnProperty("toUser") && writer.uint32(50).string(message.toUser), null != message.to && message.to.length) {
            var i = 0;
            for (; i < message.to.length; ++i) {
              writer.uint32(58).string(message.to[i]);
            }
          }
          return writer;
        }, Bookmark.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Bookmark.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.Message;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.conversation = window.Conversation.decode(options, options.uint32());
                break;
              case 2:
                message.fromUser = options.string();
                break;
              case 3:
                message.content = window.MessageContent.decode(options, options.uint32());
                break;
              case 4:
                message.messageId = options.int64();
                break;
              case 5:
                message.serverTimestamp = options.int64();
                break;
              case 6:
                message.toUser = options.string();
                break;
              case 7:
                if (!(message.to && message.to.length)) {
                  message.to = [];
                }
                message.to.push(options.string());
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("conversation")) {
            throw self.ProtocolError("missing required 'conversation'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("content")) {
            throw self.ProtocolError("missing required 'content'", {
              instance: message
            });
          }
          return message;
        }, Bookmark.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Bookmark.verify = function (message) {
          if ("object" !== (void 0 === message ? "undefined" : (0, _deepAssign2.default)(message)) || null === message) {
            return "object expected";
          }
          var t;
          if (t = window.Conversation.verify(message.conversation)) {
            return "conversation." + t;
          }
          if (!self.isString(message.fromUser)) {
            return "fromUser: string expected";
          }
          if (t = window.MessageContent.verify(message.content)) {
            return "content." + t;
          }
          if (null != message.messageId && message.hasOwnProperty("messageId") && !(self.isInteger(message.messageId) || message.messageId && self.isInteger(message.messageId.low) && self.isInteger(message.messageId.high))) {
            return "messageId: integer|Long expected";
          }
          if (null != message.serverTimestamp && message.hasOwnProperty("serverTimestamp") && !(self.isInteger(message.serverTimestamp) || message.serverTimestamp && self.isInteger(message.serverTimestamp.low) && self.isInteger(message.serverTimestamp.high))) {
            return "serverTimestamp: integer|Long expected";
          }
          if (null != message.toUser && message.hasOwnProperty("toUser") && !self.isString(message.toUser)) {
            return "toUser: string expected";
          }
          if (null != message.to && message.hasOwnProperty("to")) {
            if (!Array.isArray(message.to)) {
              return "to: array expected";
            }
            var i = 0;
            for (; i < message.to.length; ++i) {
              if (!self.isString(message.to[i])) {
                return "to: string[] expected";
              }
            }
          }
          return null;
        }, Bookmark.fromObject = function (data) {
          if (data instanceof window.Message) {
            return data;
          }
          var message = new window.Message;
          if (null != data.conversation) {
            if ("object" !== (0, _deepAssign2.default)(data.conversation)) {
              throw TypeError(".Message.conversation: object expected");
            }
            message.conversation = window.Conversation.fromObject(data.conversation);
          }
          if (null != data.fromUser && (message.fromUser = String(data.fromUser)), null != data.content) {
            if ("object" !== (0, _deepAssign2.default)(data.content)) {
              throw TypeError(".Message.content: object expected");
            }
            message.content = window.MessageContent.fromObject(data.content);
          }
          if (null != data.messageId && (self.Long ? (message.messageId = self.Long.fromValue(data.messageId)).unsigned = false : "string" == typeof data.messageId ? message.messageId = parseInt(data.messageId, 10) : "number" == typeof data.messageId ? message.messageId = data.messageId : "object" === (0, _deepAssign2.default)(data.messageId) && (message.messageId = (new self.LongBits(data.messageId.low >>> 0, data.messageId.high >>> 0)).toNumber())), null != data.serverTimestamp && (self.Long ?
            (message.serverTimestamp = self.Long.fromValue(data.serverTimestamp)).unsigned = false : "string" == typeof data.serverTimestamp ? message.serverTimestamp = parseInt(data.serverTimestamp, 10) : "number" == typeof data.serverTimestamp ? message.serverTimestamp = data.serverTimestamp : "object" === (0, _deepAssign2.default)(data.serverTimestamp) && (message.serverTimestamp = (new self.LongBits(data.serverTimestamp.low >>> 0, data.serverTimestamp.high >>> 0)).toNumber())), null != data.toUser &&
            (message.toUser = String(data.toUser)), data.to) {
            if (!Array.isArray(data.to)) {
              throw TypeError(".Message.to: array expected");
            }
            message.to = [];
            var i = 0;
            for (; i < data.to.length; ++i) {
              message.to[i] = String(data.to[i]);
            }
          }
          return message;
        }, Bookmark.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.to = []), options.defaults) {
            if (data.conversation = null, data.fromUser = "", data.content = null, self.Long) {
              var long = new self.Long(0, 0, false);
              data.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.messageId = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              data.serverTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.serverTimestamp = options.longs === String ? "0" : 0;
            }
            data.toUser = "";
          }
          if (null != message.conversation && message.hasOwnProperty("conversation") && (data.conversation = window.Conversation.toObject(message.conversation, options)), null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), null != message.content && message.hasOwnProperty("content") && (data.content = window.MessageContent.toObject(message.content, options)), null != message.messageId && message.hasOwnProperty("messageId") && ("number" == typeof message.messageId ?
            data.messageId = options.longs === String ? String(message.messageId) : message.messageId : data.messageId = options.longs === String ? self.Long.prototype.toString.call(message.messageId) : options.longs === Number ? (new self.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0)).toNumber() : message.messageId), null != message.serverTimestamp && message.hasOwnProperty("serverTimestamp") && ("number" == typeof message.serverTimestamp ? data.serverTimestamp = options.longs ===
              String ? String(message.serverTimestamp) : message.serverTimestamp : data.serverTimestamp = options.longs === String ? self.Long.prototype.toString.call(message.serverTimestamp) : options.longs === Number ? (new self.LongBits(message.serverTimestamp.low >>> 0, message.serverTimestamp.high >>> 0)).toNumber() : message.serverTimestamp), null != message.toUser && message.hasOwnProperty("toUser") && (data.toUser = message.toUser), message.to && message.to.length) {
            data.to = [];
            var i = 0;
            for (; i < message.to.length; ++i) {
              data.to[i] = message.to[i];
            }
          }
          return data;
        }, Bookmark.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Bookmark;
      }();
      window.ConvReadRequest = function () {
        function Bookmark(properties) {
          if (this.to = [], properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Bookmark.prototype.conversation = null, Bookmark.prototype.fromUser = "", Bookmark.prototype.readTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, Bookmark.prototype.to = self.emptyArray, Bookmark.create = function (value) {
          return new Bookmark(value);
        }, Bookmark.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), window.Conversation.encode(message.conversation, writer.uint32(10).fork()).ldelim(), writer.uint32(18).string(message.fromUser), writer.uint32(24).int64(message.readTime), null != message.to && message.to.length) {
            var i = 0;
            for (; i < message.to.length; ++i) {
              writer.uint32(34).string(message.to[i]);
            }
          }
          return writer;
        }, Bookmark.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Bookmark.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.ConvReadRequest;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.conversation = window.Conversation.decode(options, options.uint32());
                break;
              case 2:
                message.fromUser = options.string();
                break;
              case 3:
                message.readTime = options.int64();
                break;
              case 4:
                if (!(message.to && message.to.length)) {
                  message.to = [];
                }
                message.to.push(options.string());
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("conversation")) {
            throw self.ProtocolError("missing required 'conversation'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("readTime")) {
            throw self.ProtocolError("missing required 'readTime'", {
              instance: message
            });
          }
          return message;
        }, Bookmark.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Bookmark.verify = function (message) {
          if ("object" !== (void 0 === message ? "undefined" : (0, _deepAssign2.default)(message)) || null === message) {
            return "object expected";
          }
          var t = window.Conversation.verify(message.conversation);
          if (t) {
            return "conversation." + t;
          }
          if (!self.isString(message.fromUser)) {
            return "fromUser: string expected";
          }
          if (!(self.isInteger(message.readTime) || message.readTime && self.isInteger(message.readTime.low) && self.isInteger(message.readTime.high))) {
            return "readTime: integer|Long expected";
          }
          if (null != message.to && message.hasOwnProperty("to")) {
            if (!Array.isArray(message.to)) {
              return "to: array expected";
            }
            var i = 0;
            for (; i < message.to.length; ++i) {
              if (!self.isString(message.to[i])) {
                return "to: string[] expected";
              }
            }
          }
          return null;
        }, Bookmark.fromObject = function (object) {
          if (object instanceof window.ConvReadRequest) {
            return object;
          }
          var obj = new window.ConvReadRequest;
          if (null != object.conversation) {
            if ("object" !== (0, _deepAssign2.default)(object.conversation)) {
              throw TypeError(".ConvReadRequest.conversation: object expected");
            }
            obj.conversation = window.Conversation.fromObject(object.conversation);
          }
          if (null != object.fromUser && (obj.fromUser = String(object.fromUser)), null != object.readTime && (self.Long ? (obj.readTime = self.Long.fromValue(object.readTime)).unsigned = false : "string" == typeof object.readTime ? obj.readTime = parseInt(object.readTime, 10) : "number" == typeof object.readTime ? obj.readTime = object.readTime : "object" === (0, _deepAssign2.default)(object.readTime) && (obj.readTime = (new self.LongBits(object.readTime.low >>> 0, object.readTime.high >>> 0)).toNumber())),
            object.to) {
            if (!Array.isArray(object.to)) {
              throw TypeError(".ConvReadRequest.to: array expected");
            }
            obj.to = [];
            var i = 0;
            for (; i < object.to.length; ++i) {
              obj.to[i] = String(object.to[i]);
            }
          }
          return obj;
        }, Bookmark.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.to = []), options.defaults) {
            if (data.conversation = null, data.fromUser = "", self.Long) {
              var long = new self.Long(0, 0, false);
              data.readTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.readTime = options.longs === String ? "0" : 0;
            }
          }
          if (null != message.conversation && message.hasOwnProperty("conversation") && (data.conversation = window.Conversation.toObject(message.conversation, options)), null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), null != message.readTime && message.hasOwnProperty("readTime") && ("number" == typeof message.readTime ? data.readTime = options.longs === String ? String(message.readTime) : message.readTime : data.readTime = options.longs ===
            String ? self.Long.prototype.toString.call(message.readTime) : options.longs === Number ? (new self.LongBits(message.readTime.low >>> 0, message.readTime.high >>> 0)).toNumber() : message.readTime), message.to && message.to.length) {
            data.to = [];
            var i = 0;
            for (; i < message.to.length; ++i) {
              data.to[i] = message.to[i];
            }
          }
          return data;
        }, Bookmark.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Bookmark;
      }();
      window.ConvRead = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.id = 0, Error.prototype.conversation = null, Error.prototype.fromUser = "", Error.prototype.readTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), null != message.id && message.hasOwnProperty("id") && writer.uint32(8).int32(message.id), window.Conversation.encode(message.conversation, writer.uint32(18).fork()).ldelim(), writer.uint32(26).string(message.fromUser), writer.uint32(32).int64(message.readTime), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.ConvRead;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.id = data.int32();
                break;
              case 2:
                message.conversation = window.Conversation.decode(data, data.uint32());
                break;
              case 3:
                message.fromUser = data.string();
                break;
              case 4:
                message.readTime = data.int64();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("conversation")) {
            throw self.ProtocolError("missing required 'conversation'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("readTime")) {
            throw self.ProtocolError("missing required 'readTime'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (null != data.id && data.hasOwnProperty("id") && !self.isInteger(data.id)) {
            return "id: integer expected";
          }
          var t = window.Conversation.verify(data.conversation);
          return t ? "conversation." + t : self.isString(data.fromUser) ? self.isInteger(data.readTime) || data.readTime && self.isInteger(data.readTime.low) && self.isInteger(data.readTime.high) ? null : "readTime: integer|Long expected" : "fromUser: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.ConvRead) {
            return object;
          }
          var message = new window.ConvRead;
          if (null != object.id && (message.id = 0 | object.id), null != object.conversation) {
            if ("object" !== (0, _deepAssign2.default)(object.conversation)) {
              throw TypeError(".ConvRead.conversation: object expected");
            }
            message.conversation = window.Conversation.fromObject(object.conversation);
          }
          return null != object.fromUser && (message.fromUser = String(object.fromUser)), null != object.readTime && (self.Long ? (message.readTime = self.Long.fromValue(object.readTime)).unsigned = false : "string" == typeof object.readTime ? message.readTime = parseInt(object.readTime, 10) : "number" == typeof object.readTime ? message.readTime = object.readTime : "object" === (0, _deepAssign2.default)(object.readTime) && (message.readTime = (new self.LongBits(object.readTime.low >>> 0, object.readTime.high >>>
            0)).toNumber())), message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if (options.defaults) {
            if (data.id = 0, data.conversation = null, data.fromUser = "", self.Long) {
              var long = new self.Long(0, 0, false);
              data.readTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.readTime = options.longs === String ? "0" : 0;
            }
          }
          return null != message.id && message.hasOwnProperty("id") && (data.id = message.id), null != message.conversation && message.hasOwnProperty("conversation") && (data.conversation = window.Conversation.toObject(message.conversation, options)), null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), null != message.readTime && message.hasOwnProperty("readTime") && ("number" == typeof message.readTime ? data.readTime = options.longs === String ?
            String(message.readTime) : message.readTime : data.readTime = options.longs === String ? self.Long.prototype.toString.call(message.readTime) : options.longs === Number ? (new self.LongBits(message.readTime.low >>> 0, message.readTime.high >>> 0)).toNumber() : message.readTime), data;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.Delivery = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.fromUser = "", Error.prototype.receiveTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.fromUser), target.uint32(16).int64(data.receiveTime), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.Delivery;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.fromUser = options.string();
                break;
              case 2:
                message.receiveTime = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("receiveTime")) {
            throw self.ProtocolError("missing required 'receiveTime'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.fromUser) ? self.isInteger(data.receiveTime) || data.receiveTime && self.isInteger(data.receiveTime.low) && self.isInteger(data.receiveTime.high) ? null : "receiveTime: integer|Long expected" : "fromUser: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.Delivery) {
            return object;
          }
          var data = new window.Delivery;
          return null != object.fromUser && (data.fromUser = String(object.fromUser)), null != object.receiveTime && (self.Long ? (data.receiveTime = self.Long.fromValue(object.receiveTime)).unsigned = false : "string" == typeof object.receiveTime ? data.receiveTime = parseInt(object.receiveTime, 10) : "number" == typeof object.receiveTime ? data.receiveTime = object.receiveTime : "object" === (0, _deepAssign2.default)(object.receiveTime) && (data.receiveTime = (new self.LongBits(object.receiveTime.low >>>
            0, object.receiveTime.high >>> 0)).toNumber())), data;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if (options.defaults) {
            if (data.fromUser = "", self.Long) {
              var long = new self.Long(0, 0, false);
              data.receiveTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.receiveTime = options.longs === String ? "0" : 0;
            }
          }
          return null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), null != message.receiveTime && message.hasOwnProperty("receiveTime") && ("number" == typeof message.receiveTime ? data.receiveTime = options.longs === String ? String(message.receiveTime) : message.receiveTime : data.receiveTime = options.longs === String ? self.Long.prototype.toString.call(message.receiveTime) : options.longs === Number ? (new self.LongBits(message.receiveTime.low >>>
            0, message.receiveTime.high >>> 0)).toNumber() : message.receiveTime), data;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.NotifyDelivery = function () {
        function Options(defaults) {
          if (this.target = [], defaults) {
            var keys = (0, _noframeworkWaypoints2.default)(defaults);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != defaults[keys[i]]) {
                this[keys[i]] = defaults[keys[i]];
              }
            }
          }
        }
        return Options.prototype.fromUser = "", Options.prototype.receiveTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, Options.prototype.target = self.emptyArray, Options.create = function (value) {
          return new Options(value);
        }, Options.encode = function (data, value) {
          if (value || (value = $Writer.create()), value.uint32(10).string(data.fromUser), value.uint32(16).int64(data.receiveTime), null != data.target && data.target.length) {
            var i = 0;
            for (; i < data.target.length; ++i) {
              value.uint32(26).string(data.target[i]);
            }
          }
          return value;
        }, Options.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Options.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var data = new window.NotifyDelivery;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                data.fromUser = options.string();
                break;
              case 2:
                data.receiveTime = options.int64();
                break;
              case 3:
                if (!(data.target && data.target.length)) {
                  data.target = [];
                }
                data.target.push(options.string());
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!data.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: data
            });
          }
          if (!data.hasOwnProperty("receiveTime")) {
            throw self.ProtocolError("missing required 'receiveTime'", {
              instance: data
            });
          }
          return data;
        }, Options.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Options.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isString(data.fromUser)) {
            return "fromUser: string expected";
          }
          if (!(self.isInteger(data.receiveTime) || data.receiveTime && self.isInteger(data.receiveTime.low) && self.isInteger(data.receiveTime.high))) {
            return "receiveTime: integer|Long expected";
          }
          if (null != data.target && data.hasOwnProperty("target")) {
            if (!Array.isArray(data.target)) {
              return "target: array expected";
            }
            var i = 0;
            for (; i < data.target.length; ++i) {
              if (!self.isString(data.target[i])) {
                return "target: string[] expected";
              }
            }
          }
          return null;
        }, Options.fromObject = function (object) {
          if (object instanceof window.NotifyDelivery) {
            return object;
          }
          var data = new window.NotifyDelivery;
          if (null != object.fromUser && (data.fromUser = String(object.fromUser)), null != object.receiveTime && (self.Long ? (data.receiveTime = self.Long.fromValue(object.receiveTime)).unsigned = false : "string" == typeof object.receiveTime ? data.receiveTime = parseInt(object.receiveTime, 10) : "number" == typeof object.receiveTime ? data.receiveTime = object.receiveTime : "object" === (0, _deepAssign2.default)(object.receiveTime) && (data.receiveTime = (new self.LongBits(object.receiveTime.low >>>
            0, object.receiveTime.high >>> 0)).toNumber())), object.target) {
            if (!Array.isArray(object.target)) {
              throw TypeError(".NotifyDelivery.target: array expected");
            }
            data.target = [];
            var i = 0;
            for (; i < object.target.length; ++i) {
              data.target[i] = String(object.target[i]);
            }
          }
          return data;
        }, Options.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.target = []), options.defaults) {
            if (data.fromUser = "", self.Long) {
              var long = new self.Long(0, 0, false);
              data.receiveTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.receiveTime = options.longs === String ? "0" : 0;
            }
          }
          if (null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), null != message.receiveTime && message.hasOwnProperty("receiveTime") && ("number" == typeof message.receiveTime ? data.receiveTime = options.longs === String ? String(message.receiveTime) : message.receiveTime : data.receiveTime = options.longs === String ? self.Long.prototype.toString.call(message.receiveTime) : options.longs === Number ? (new self.LongBits(message.receiveTime.low >>>
            0, message.receiveTime.high >>> 0)).toNumber() : message.receiveTime), message.target && message.target.length) {
            data.target = [];
            var i = 0;
            for (; i < message.target.length; ++i) {
              data.target[i] = message.target[i];
            }
          }
          return data;
        }, Options.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Options;
      }();
      window.User = function () {
        function model(data) {
          if (data) {
            var props2 = (0, _noframeworkWaypoints2.default)(data);
            var i = 0;
            for (; i < props2.length; ++i) {
              if (null != data[props2[i]]) {
                this[props2[i]] = data[props2[i]];
              }
            }
          }
        }
        return model.prototype.uid = "", model.prototype.name = "", model.prototype.displayName = "", model.prototype.portrait = "", model.prototype.mobile = "", model.prototype.email = "", model.prototype.address = "", model.prototype.company = "", model.prototype.extra = "", model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.gender = 0, model.prototype.social = "", model.prototype.type = 0, model.prototype.deleted = 0, model.create = function (value) {
          return new model(value);
        }, model.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.uid), null != data.name && data.hasOwnProperty("name") && target.uint32(18).string(data.name), null != data.displayName && data.hasOwnProperty("displayName") && target.uint32(26).string(data.displayName), null != data.portrait && data.hasOwnProperty("portrait") && target.uint32(34).string(data.portrait), null != data.mobile && data.hasOwnProperty("mobile") && target.uint32(42).string(data.mobile), null != data.email &&
            data.hasOwnProperty("email") && target.uint32(50).string(data.email), null != data.address && data.hasOwnProperty("address") && target.uint32(58).string(data.address), null != data.company && data.hasOwnProperty("company") && target.uint32(66).string(data.company), null != data.extra && data.hasOwnProperty("extra") && target.uint32(74).string(data.extra), null != data.updateDt && data.hasOwnProperty("updateDt") && target.uint32(80).int64(data.updateDt), null != data.gender && data.hasOwnProperty("gender") &&
            target.uint32(88).int32(data.gender), null != data.social && data.hasOwnProperty("social") && target.uint32(98).string(data.social), null != data.type && data.hasOwnProperty("type") && target.uint32(104).int32(data.type), null != data.deleted && data.hasOwnProperty("deleted") && target.uint32(112).int32(data.deleted), target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var user = new window.User;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                user.uid = data.string();
                break;
              case 2:
                user.name = data.string();
                break;
              case 3:
                user.displayName = data.string();
                break;
              case 4:
                user.portrait = data.string();
                break;
              case 5:
                user.mobile = data.string();
                break;
              case 6:
                user.email = data.string();
                break;
              case 7:
                user.address = data.string();
                break;
              case 8:
                user.company = data.string();
                break;
              case 9:
                user.extra = data.string();
                break;
              case 10:
                user.updateDt = data.int64();
                break;
              case 11:
                user.gender = data.int32();
                break;
              case 12:
                user.social = data.string();
                break;
              case 13:
                user.type = data.int32();
                break;
              case 14:
                user.deleted = data.int32();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!user.hasOwnProperty("uid")) {
            throw self.ProtocolError("missing required 'uid'", {
              instance: user
            });
          }
          return user;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.uid) ? null != data.name && data.hasOwnProperty("name") && !self.isString(data.name) ? "name: string expected" : null != data.displayName && data.hasOwnProperty("displayName") && !self.isString(data.displayName) ? "displayName: string expected" : null != data.portrait && data.hasOwnProperty("portrait") && !self.isString(data.portrait) ? "portrait: string expected" :
            null != data.mobile && data.hasOwnProperty("mobile") && !self.isString(data.mobile) ? "mobile: string expected" : null != data.email && data.hasOwnProperty("email") && !self.isString(data.email) ? "email: string expected" : null != data.address && data.hasOwnProperty("address") && !self.isString(data.address) ? "address: string expected" : null != data.company && data.hasOwnProperty("company") && !self.isString(data.company) ? "company: string expected" : null != data.extra && data.hasOwnProperty("extra") &&
              !self.isString(data.extra) ? "extra: string expected" : null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" : null != data.gender && data.hasOwnProperty("gender") && !self.isInteger(data.gender) ? "gender: integer expected" : null != data.social && data.hasOwnProperty("social") && !self.isString(data.social) ? "social: string expected" :
                null != data.type && data.hasOwnProperty("type") && !self.isInteger(data.type) ? "type: integer expected" : null != data.deleted && data.hasOwnProperty("deleted") && !self.isInteger(data.deleted) ? "deleted: integer expected" : null : "uid: string expected";
        }, model.fromObject = function (data) {
          if (data instanceof window.User) {
            return data;
          }
          var user = new window.User;
          return null != data.uid && (user.uid = String(data.uid)), null != data.name && (user.name = String(data.name)), null != data.displayName && (user.displayName = String(data.displayName)), null != data.portrait && (user.portrait = String(data.portrait)), null != data.mobile && (user.mobile = String(data.mobile)), null != data.email && (user.email = String(data.email)), null != data.address && (user.address = String(data.address)), null != data.company && (user.company = String(data.company)),
            null != data.extra && (user.extra = String(data.extra)), null != data.updateDt && (self.Long ? (user.updateDt = self.Long.fromValue(data.updateDt)).unsigned = false : "string" == typeof data.updateDt ? user.updateDt = parseInt(data.updateDt, 10) : "number" == typeof data.updateDt ? user.updateDt = data.updateDt : "object" === (0, _deepAssign2.default)(data.updateDt) && (user.updateDt = (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>> 0)).toNumber())), null != data.gender &&
            (user.gender = 0 | data.gender), null != data.social && (user.social = String(data.social)), null != data.type && (user.type = 0 | data.type), null != data.deleted && (user.deleted = 0 | data.deleted), user;
        }, model.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if (options.defaults) {
            if ($scope.uid = "", $scope.name = "", $scope.displayName = "", $scope.portrait = "", $scope.mobile = "", $scope.email = "", $scope.address = "", $scope.company = "", $scope.extra = "", self.Long) {
              var long = new self.Long(0, 0, false);
              $scope.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              $scope.updateDt = options.longs === String ? "0" : 0;
            }
            $scope.gender = 0;
            $scope.social = "";
            $scope.type = 0;
            $scope.deleted = 0;
          }
          return null != data.uid && data.hasOwnProperty("uid") && ($scope.uid = data.uid), null != data.name && data.hasOwnProperty("name") && ($scope.name = data.name), null != data.displayName && data.hasOwnProperty("displayName") && ($scope.displayName = data.displayName), null != data.portrait && data.hasOwnProperty("portrait") && ($scope.portrait = data.portrait), null != data.mobile && data.hasOwnProperty("mobile") && ($scope.mobile = data.mobile), null != data.email && data.hasOwnProperty("email") &&
            ($scope.email = data.email), null != data.address && data.hasOwnProperty("address") && ($scope.address = data.address), null != data.company && data.hasOwnProperty("company") && ($scope.company = data.company), null != data.extra && data.hasOwnProperty("extra") && ($scope.extra = data.extra), null != data.updateDt && data.hasOwnProperty("updateDt") && ("number" == typeof data.updateDt ? $scope.updateDt = options.longs === String ? String(data.updateDt) : data.updateDt : $scope.updateDt =
              options.longs === String ? self.Long.prototype.toString.call(data.updateDt) : options.longs === Number ? (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>> 0)).toNumber() : data.updateDt), null != data.gender && data.hasOwnProperty("gender") && ($scope.gender = data.gender), null != data.social && data.hasOwnProperty("social") && ($scope.social = data.social), null != data.type && data.hasOwnProperty("type") && ($scope.type = data.type), null != data.deleted && data.hasOwnProperty("deleted") &&
            ($scope.deleted = data.deleted), $scope;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.Robot = function () {
        function model(obj) {
          if (obj) {
            var props = (0, _noframeworkWaypoints2.default)(obj);
            var i = 0;
            for (; i < props.length; ++i) {
              if (null != obj[props[i]]) {
                this[props[i]] = obj[props[i]];
              }
            }
          }
        }
        return model.prototype.uid = "", model.prototype.state = 0, model.prototype.owner = "", model.prototype.secret = "", model.prototype.callback = "", model.prototype.extra = "", model.create = function (value) {
          return new model(value);
        }, model.encode = function (obj, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(obj.uid), writer.uint32(16).int32(obj.state), null != obj.owner && obj.hasOwnProperty("owner") && writer.uint32(26).string(obj.owner), null != obj.secret && obj.hasOwnProperty("secret") && writer.uint32(34).string(obj.secret), null != obj.callback && obj.hasOwnProperty("callback") && writer.uint32(42).string(obj.callback), null != obj.extra && obj.hasOwnProperty("extra") && writer.uint32(50).string(obj.extra), writer;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.Robot;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.uid = data.string();
                break;
              case 2:
                obj.state = data.int32();
                break;
              case 3:
                obj.owner = data.string();
                break;
              case 4:
                obj.secret = data.string();
                break;
              case 5:
                obj.callback = data.string();
                break;
              case 6:
                obj.extra = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("uid")) {
            throw self.ProtocolError("missing required 'uid'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("state")) {
            throw self.ProtocolError("missing required 'state'", {
              instance: obj
            });
          }
          return obj;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (obj) {
          return "object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj ? "object expected" : self.isString(obj.uid) ? self.isInteger(obj.state) ? null != obj.owner && obj.hasOwnProperty("owner") && !self.isString(obj.owner) ? "owner: string expected" : null != obj.secret && obj.hasOwnProperty("secret") && !self.isString(obj.secret) ? "secret: string expected" : null != obj.callback && obj.hasOwnProperty("callback") && !self.isString(obj.callback) ? "callback: string expected" :
            null != obj.extra && obj.hasOwnProperty("extra") && !self.isString(obj.extra) ? "extra: string expected" : null : "state: integer expected" : "uid: string expected";
        }, model.fromObject = function (obj) {
          if (obj instanceof window.Robot) {
            return obj;
          }
          var entry = new window.Robot;
          return null != obj.uid && (entry.uid = String(obj.uid)), null != obj.state && (entry.state = 0 | obj.state), null != obj.owner && (entry.owner = String(obj.owner)), null != obj.secret && (entry.secret = String(obj.secret)), null != obj.callback && (entry.callback = String(obj.callback)), null != obj.extra && (entry.extra = String(obj.extra)), entry;
        }, model.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var that = {};
          return options.defaults && (that.uid = "", that.state = 0, that.owner = "", that.secret = "", that.callback = "", that.extra = ""), null != data.uid && data.hasOwnProperty("uid") && (that.uid = data.uid), null != data.state && data.hasOwnProperty("state") && (that.state = data.state), null != data.owner && data.hasOwnProperty("owner") && (that.owner = data.owner), null != data.secret && data.hasOwnProperty("secret") && (that.secret = data.secret), null != data.callback && data.hasOwnProperty("callback") &&
            (that.callback = data.callback), null != data.extra && data.hasOwnProperty("extra") && (that.extra = data.extra), that;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.GetRobotsResult = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.Robot.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.GetRobotsResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.Robot.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.Robot.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetRobotsResult) {
            return obj;
          }
          var dict = new window.GetRobotsResult;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".GetRobotsResult.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".GetRobotsResult.entry: object expected");
              }
              dict.entry[i] = window.Robot.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.Robot.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.Device = function () {
        function model(obj) {
          if (this.owner = [], obj) {
            var props = (0, _noframeworkWaypoints2.default)(obj);
            var i = 0;
            for (; i < props.length; ++i) {
              if (null != obj[props[i]]) {
                this[props[i]] = obj[props[i]];
              }
            }
          }
        }
        return model.prototype.uid = "", model.prototype.state = 0, model.prototype.token = "", model.prototype.owner = self.emptyArray, model.prototype.extra = "", model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.create = function (value) {
          return new model(value);
        }, model.encode = function (args, target) {
          if (target || (target = $Writer.create()), target.uint32(10).string(args.uid), target.uint32(16).int32(args.state), target.uint32(26).string(args.token), null != args.owner && args.owner.length) {
            var key = 0;
            for (; key < args.owner.length; ++key) {
              target.uint32(34).string(args.owner[key]);
            }
          }
          return null != args.extra && args.hasOwnProperty("extra") && target.uint32(42).string(args.extra), null != args.updateDt && args.hasOwnProperty("updateDt") && target.uint32(48).int64(args.updateDt), target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var t = new window.Device;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                t.uid = data.string();
                break;
              case 2:
                t.state = data.int32();
                break;
              case 3:
                t.token = data.string();
                break;
              case 4:
                if (!(t.owner && t.owner.length)) {
                  t.owner = [];
                }
                t.owner.push(data.string());
                break;
              case 5:
                t.extra = data.string();
                break;
              case 6:
                t.updateDt = data.int64();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!t.hasOwnProperty("uid")) {
            throw self.ProtocolError("missing required 'uid'", {
              instance: t
            });
          }
          if (!t.hasOwnProperty("state")) {
            throw self.ProtocolError("missing required 'state'", {
              instance: t
            });
          }
          if (!t.hasOwnProperty("token")) {
            throw self.ProtocolError("missing required 'token'", {
              instance: t
            });
          }
          return t;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isString(data.uid)) {
            return "uid: string expected";
          }
          if (!self.isInteger(data.state)) {
            return "state: integer expected";
          }
          if (!self.isString(data.token)) {
            return "token: string expected";
          }
          if (null != data.owner && data.hasOwnProperty("owner")) {
            if (!Array.isArray(data.owner)) {
              return "owner: array expected";
            }
            var key = 0;
            for (; key < data.owner.length; ++key) {
              if (!self.isString(data.owner[key])) {
                return "owner: string[] expected";
              }
            }
          }
          return null != data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra) ? "extra: string expected" : null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" : null;
        }, model.fromObject = function (object) {
          if (object instanceof window.Device) {
            return object;
          }
          var data = new window.Device;
          if (null != object.uid && (data.uid = String(object.uid)), null != object.state && (data.state = 0 | object.state), null != object.token && (data.token = String(object.token)), object.owner) {
            if (!Array.isArray(object.owner)) {
              throw TypeError(".Device.owner: array expected");
            }
            data.owner = [];
            var key = 0;
            for (; key < object.owner.length; ++key) {
              data.owner[key] = String(object.owner[key]);
            }
          }
          return null != object.extra && (data.extra = String(object.extra)), null != object.updateDt && (self.Long ? (data.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? data.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? data.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) && (data.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>> 0)).toNumber())),
            data;
        }, model.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if ((options.arrays || options.defaults) && (result.owner = []), options.defaults) {
            if (result.uid = "", result.state = 0, result.token = "", result.extra = "", self.Long) {
              var long = new self.Long(0, 0, false);
              result.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              result.updateDt = options.longs === String ? "0" : 0;
            }
          }
          if (null != data.uid && data.hasOwnProperty("uid") && (result.uid = data.uid), null != data.state && data.hasOwnProperty("state") && (result.state = data.state), null != data.token && data.hasOwnProperty("token") && (result.token = data.token), data.owner && data.owner.length) {
            result.owner = [];
            var key = 0;
            for (; key < data.owner.length; ++key) {
              result.owner[key] = data.owner[key];
            }
          }
          return null != data.extra && data.hasOwnProperty("extra") && (result.extra = data.extra), null != data.updateDt && data.hasOwnProperty("updateDt") && ("number" == typeof data.updateDt ? result.updateDt = options.longs === String ? String(data.updateDt) : data.updateDt : result.updateDt = options.longs === String ? self.Long.prototype.toString.call(data.updateDt) : options.longs === Number ? (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>> 0)).toNumber() : data.updateDt),
            result;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.GetDeviceResult = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.Device.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.GetDeviceResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.Device.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.Device.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetDeviceResult) {
            return obj;
          }
          var dict = new window.GetDeviceResult;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".GetDeviceResult.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".GetDeviceResult.entry: object expected");
              }
              dict.entry[i] = window.Device.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.Device.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.UploadDeviceTokenRequest = function () {
        function Device(properties) {
          if (properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Device.prototype.platform = 0, Device.prototype.appName = "", Device.prototype.deviceToken = "", Device.prototype.pushType = 0, Device.create = function (value) {
          return new Device(value);
        }, Device.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(8).int32(data.platform), target.uint32(18).string(data.appName), target.uint32(26).string(data.deviceToken), target.uint32(32).int32(data.pushType), target;
        }, Device.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Device.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.UploadDeviceTokenRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.platform = data.int32();
                break;
              case 2:
                obj.appName = data.string();
                break;
              case 3:
                obj.deviceToken = data.string();
                break;
              case 4:
                obj.pushType = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("platform")) {
            throw self.ProtocolError("missing required 'platform'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("appName")) {
            throw self.ProtocolError("missing required 'appName'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("deviceToken")) {
            throw self.ProtocolError("missing required 'deviceToken'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("pushType")) {
            throw self.ProtocolError("missing required 'pushType'", {
              instance: obj
            });
          }
          return obj;
        }, Device.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Device.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.platform) ? self.isString(data.appName) ? self.isString(data.deviceToken) ? self.isInteger(data.pushType) ? null : "pushType: integer expected" : "deviceToken: string expected" : "appName: string expected" : "platform: integer expected";
        }, Device.fromObject = function (obj) {
          if (obj instanceof window.UploadDeviceTokenRequest) {
            return obj;
          }
          var params = new window.UploadDeviceTokenRequest;
          return null != obj.platform && (params.platform = 0 | obj.platform), null != obj.appName && (params.appName = String(obj.appName)), null != obj.deviceToken && (params.deviceToken = String(obj.deviceToken)), null != obj.pushType && (params.pushType = 0 | obj.pushType), params;
        }, Device.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var device = {};
          return options.defaults && (device.platform = 0, device.appName = "", device.deviceToken = "", device.pushType = 0), null != data.platform && data.hasOwnProperty("platform") && (device.platform = data.platform), null != data.appName && data.hasOwnProperty("appName") && (device.appName = data.appName), null != data.deviceToken && data.hasOwnProperty("deviceToken") && (device.deviceToken = data.deviceToken), null != data.pushType && data.hasOwnProperty("pushType") && (device.pushType = data.pushType),
            device;
        }, Device.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Device;
      }();
      window.ModifyGroupInfoRequest = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.type = 0, Error.prototype.value = "", Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), writer.uint32(16).int32(message.type), writer.uint32(26).string(message.value), null != message.toLine && message.toLine.length) {
            var i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(32).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(42).fork()).ldelim(), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.ModifyGroupInfoRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                that.type = data.int32();
                break;
              case 3:
                that.value = data.string();
                break;
              case 4:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 5:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("value")) {
            throw self.ProtocolError("missing required 'value'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isString(data.groupId)) {
            return "groupId: string expected";
          }
          if (!self.isInteger(data.type)) {
            return "type: integer expected";
          }
          if (!self.isString(data.value)) {
            return "value: string expected";
          }
          if (null != data.toLine && data.hasOwnProperty("toLine")) {
            if (!Array.isArray(data.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < data.toLine.length; ++i) {
              if (!self.isInteger(data.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != data.notifyContent && data.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(data.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.ModifyGroupInfoRequest) {
            return obj;
          }
          var that = new window.ModifyGroupInfoRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), null != obj.type && (that.type = 0 | obj.type), null != obj.value && (that.value = String(obj.value)), obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".ModifyGroupInfoRequest.toLine: array expected");
            }
            that.toLine = [];
            var r = 0;
            for (; r < obj.toLine.length; ++r) {
              that.toLine[r] = 0 | obj.toLine[r];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".ModifyGroupInfoRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return that;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var that = {};
          if ((options.arrays || options.defaults) && (that.toLine = []), options.defaults && (that.groupId = "", that.type = 0, that.value = "", that.notifyContent = null), null != message.groupId && message.hasOwnProperty("groupId") && (that.groupId = message.groupId), null != message.type && message.hasOwnProperty("type") && (that.type = message.type), null != message.value && message.hasOwnProperty("value") && (that.value = message.value), message.toLine && message.toLine.length) {
            that.toLine = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.toLine.length; ++buttonIndex) {
              that.toLine[buttonIndex] = message.toLine[buttonIndex];
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && (that.notifyContent = window.MessageContent.toObject(message.notifyContent, options)), that;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.SetGroupManagerRequest = function () {
        function Error(props) {
          if (this.userId = [], this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.type = 0, Error.prototype.userId = self.emptyArray, Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), writer.uint32(16).int32(message.type), null != message.userId && message.userId.length) {
            var i = 0;
            for (; i < message.userId.length; ++i) {
              writer.uint32(26).string(message.userId[i]);
            }
          }
          if (null != message.toLine && message.toLine.length) {
            i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(32).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(42).fork()).ldelim(), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.SetGroupManagerRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                that.type = data.int32();
                break;
              case 3:
                if (!(that.userId && that.userId.length)) {
                  that.userId = [];
                }
                that.userId.push(data.string());
                break;
              case 4:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 5:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isString(data.groupId)) {
            return "groupId: string expected";
          }
          if (!self.isInteger(data.type)) {
            return "type: integer expected";
          }
          if (null != data.userId && data.hasOwnProperty("userId")) {
            if (!Array.isArray(data.userId)) {
              return "userId: array expected";
            }
            var i = 0;
            for (; i < data.userId.length; ++i) {
              if (!self.isString(data.userId[i])) {
                return "userId: string[] expected";
              }
            }
          }
          if (null != data.toLine && data.hasOwnProperty("toLine")) {
            if (!Array.isArray(data.toLine)) {
              return "toLine: array expected";
            }
            i = 0;
            for (; i < data.toLine.length; ++i) {
              if (!self.isInteger(data.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != data.notifyContent && data.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(data.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.SetGroupManagerRequest) {
            return obj;
          }
          var that = new window.SetGroupManagerRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), null != obj.type && (that.type = 0 | obj.type), obj.userId) {
            if (!Array.isArray(obj.userId)) {
              throw TypeError(".SetGroupManagerRequest.userId: array expected");
            }
            that.userId = [];
            var i = 0;
            for (; i < obj.userId.length; ++i) {
              that.userId[i] = String(obj.userId[i]);
            }
          }
          if (obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".SetGroupManagerRequest.toLine: array expected");
            }
            that.toLine = [];
            i = 0;
            for (; i < obj.toLine.length; ++i) {
              that.toLine[i] = 0 | obj.toLine[i];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".SetGroupManagerRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return that;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var that = {};
          if ((options.arrays || options.defaults) && (that.userId = [], that.toLine = []), options.defaults && (that.groupId = "", that.type = 0, that.notifyContent = null), null != data.groupId && data.hasOwnProperty("groupId") && (that.groupId = data.groupId), null != data.type && data.hasOwnProperty("type") && (that.type = data.type), data.userId && data.userId.length) {
            that.userId = [];
            var i = 0;
            for (; i < data.userId.length; ++i) {
              that.userId[i] = data.userId[i];
            }
          }
          if (data.toLine && data.toLine.length) {
            that.toLine = [];
            i = 0;
            for (; i < data.toLine.length; ++i) {
              that.toLine[i] = data.toLine[i];
            }
          }
          return null != data.notifyContent && data.hasOwnProperty("notifyContent") && (that.notifyContent = window.MessageContent.toObject(data.notifyContent, options)), that;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.InfoEntry = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.type = 0, Error.prototype.value = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(8).int32(args.type), target.uint32(18).string(args.value), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var v = new window.InfoEntry;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                v.type = data.int32();
                break;
              case 2:
                v.value = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!v.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: v
            });
          }
          if (!v.hasOwnProperty("value")) {
            throw self.ProtocolError("missing required 'value'", {
              instance: v
            });
          }
          return v;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isInteger(value.type) ? self.isString(value.value) ? null : "value: string expected" : "type: integer expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.InfoEntry) {
            return object;
          }
          var prop = new window.InfoEntry;
          return null != object.type && (prop.type = 0 | object.type), null != object.value && (prop.value = String(object.value)), prop;
        }, Error.toObject = function (options, o) {
          if (!o) {
            o = {};
          }
          var r = {};
          return o.defaults && (r.type = 0, r.value = ""), null != options.type && options.hasOwnProperty("type") && (r.type = options.type), null != options.value && options.hasOwnProperty("value") && (r.value = options.value), r;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ModifyMyInfoRequest = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.InfoEntry.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.ModifyMyInfoRequest;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.InfoEntry.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.InfoEntry.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.ModifyMyInfoRequest) {
            return obj;
          }
          var dict = new window.ModifyMyInfoRequest;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".ModifyMyInfoRequest.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".ModifyMyInfoRequest.entry: object expected");
              }
              dict.entry[i] = window.InfoEntry.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.InfoEntry.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.NotifyMessage = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.type = 0, Error.prototype.head = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.target = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(8).int32(args.type), target.uint32(16).int64(args.head), null != args.target && args.hasOwnProperty("target") && target.uint32(26).string(args.target), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var o = new window.NotifyMessage;
          for (; data.pos < end;) {
            var s = data.uint32();
            switch (s >>> 3) {
              case 1:
                o.type = data.int32();
                break;
              case 2:
                o.head = data.int64();
                break;
              case 3:
                o.target = data.string();
                break;
              default:
                data.skipType(7 & s);
            }
          }
          if (!o.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: o
            });
          }
          if (!o.hasOwnProperty("head")) {
            throw self.ProtocolError("missing required 'head'", {
              instance: o
            });
          }
          return o;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (options) {
          return "object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options ? "object expected" : self.isInteger(options.type) ? self.isInteger(options.head) || options.head && self.isInteger(options.head.low) && self.isInteger(options.head.high) ? null != options.target && options.hasOwnProperty("target") && !self.isString(options.target) ? "target: string expected" : null : "head: integer|Long expected" : "type: integer expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.NotifyMessage) {
            return object;
          }
          var context = new window.NotifyMessage;
          return null != object.type && (context.type = 0 | object.type), null != object.head && (self.Long ? (context.head = self.Long.fromValue(object.head)).unsigned = false : "string" == typeof object.head ? context.head = parseInt(object.head, 10) : "number" == typeof object.head ? context.head = object.head : "object" === (0, _deepAssign2.default)(object.head) && (context.head = (new self.LongBits(object.head.low >>> 0, object.head.high >>> 0)).toNumber())), null != object.target && (context.target =
            String(object.target)), context;
        }, Error.toObject = function (options, o) {
          if (!o) {
            o = {};
          }
          var parsed = {};
          if (o.defaults) {
            if (parsed.type = 0, self.Long) {
              var long = new self.Long(0, 0, false);
              parsed.head = o.longs === String ? long.toString() : o.longs === Number ? long.toNumber() : long;
            } else {
              parsed.head = o.longs === String ? "0" : 0;
            }
            parsed.target = "";
          }
          return null != options.type && options.hasOwnProperty("type") && (parsed.type = options.type), null != options.head && options.hasOwnProperty("head") && ("number" == typeof options.head ? parsed.head = o.longs === String ? String(options.head) : options.head : parsed.head = o.longs === String ? self.Long.prototype.toString.call(options.head) : o.longs === Number ? (new self.LongBits(options.head.low >>> 0, options.head.high >>> 0)).toNumber() : options.head), null != options.target && options.hasOwnProperty("target") &&
            (parsed.target = options.target), parsed;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullMessageRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.id = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.type = 0, Error.prototype.delay = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(8).int64(args.id), target.uint32(16).int32(args.type), null != args.delay && args.hasOwnProperty("delay") && target.uint32(24).int64(args.delay), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.PullMessageRequest;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                obj.id = data.int64();
                break;
              case 2:
                obj.type = data.int32();
                break;
              case 3:
                obj.delay = data.int64();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!obj.hasOwnProperty("id")) {
            throw self.ProtocolError("missing required 'id'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (options) {
          return "object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options ? "object expected" : self.isInteger(options.id) || options.id && self.isInteger(options.id.low) && self.isInteger(options.id.high) ? self.isInteger(options.type) ? null != options.delay && options.hasOwnProperty("delay") && !(self.isInteger(options.delay) || options.delay && self.isInteger(options.delay.low) && self.isInteger(options.delay.high)) ? "delay: integer|Long expected" :
            null : "type: integer expected" : "id: integer|Long expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.PullMessageRequest) {
            return object;
          }
          var err = new window.PullMessageRequest;
          return null != object.id && (self.Long ? (err.id = self.Long.fromValue(object.id)).unsigned = false : "string" == typeof object.id ? err.id = parseInt(object.id, 10) : "number" == typeof object.id ? err.id = object.id : "object" === (0, _deepAssign2.default)(object.id) && (err.id = (new self.LongBits(object.id.low >>> 0, object.id.high >>> 0)).toNumber())), null != object.type && (err.type = 0 | object.type), null != object.delay && (self.Long ? (err.delay = self.Long.fromValue(object.delay)).unsigned =
            false : "string" == typeof object.delay ? err.delay = parseInt(object.delay, 10) : "number" == typeof object.delay ? err.delay = object.delay : "object" === (0, _deepAssign2.default)(object.delay) && (err.delay = (new self.LongBits(object.delay.low >>> 0, object.delay.high >>> 0)).toNumber())), err;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var step = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              step.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              step.id = options.longs === String ? "0" : 0;
            }
            if (step.type = 0, self.Long) {
              long = new self.Long(0, 0, false);
              step.delay = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              step.delay = options.longs === String ? "0" : 0;
            }
          }
          return null != message.id && message.hasOwnProperty("id") && ("number" == typeof message.id ? step.id = options.longs === String ? String(message.id) : message.id : step.id = options.longs === String ? self.Long.prototype.toString.call(message.id) : options.longs === Number ? (new self.LongBits(message.id.low >>> 0, message.id.high >>> 0)).toNumber() : message.id), null != message.type && message.hasOwnProperty("type") && (step.type = message.type), null != message.delay && message.hasOwnProperty("delay") &&
            ("number" == typeof message.delay ? step.delay = options.longs === String ? String(message.delay) : message.delay : step.delay = options.longs === String ? self.Long.prototype.toString.call(message.delay) : options.longs === Number ? (new self.LongBits(message.delay.low >>> 0, message.delay.high >>> 0)).toNumber() : message.delay), step;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullMessageResult = function () {
        function Error(props) {
          if (this.message = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.message = self.emptyArray, Error.prototype.current = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.head = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (target, message) {
          if (message || (message = $Writer.create()), null != target.message && target.message.length) {
            var i = 0;
            for (; i < target.message.length; ++i) {
              window.Message.encode(target.message[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message.uint32(16).int64(target.current), message.uint32(24).int64(target.head), message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var o = new window.PullMessageResult;
          for (; options.pos < ch;) {
            var s = options.uint32();
            switch (s >>> 3) {
              case 1:
                if (!(o.message && o.message.length)) {
                  o.message = [];
                }
                o.message.push(window.Message.decode(options, options.uint32()));
                break;
              case 2:
                o.current = options.int64();
                break;
              case 3:
                o.head = options.int64();
                break;
              default:
                options.skipType(7 & s);
            }
          }
          if (!o.hasOwnProperty("current")) {
            throw self.ProtocolError("missing required 'current'", {
              instance: o
            });
          }
          if (!o.hasOwnProperty("head")) {
            throw self.ProtocolError("missing required 'head'", {
              instance: o
            });
          }
          return o;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (null != data.message && data.hasOwnProperty("message")) {
            if (!Array.isArray(data.message)) {
              return "message: array expected";
            }
            var i = 0;
            for (; i < data.message.length; ++i) {
              var r = window.Message.verify(data.message[i]);
              if (r) {
                return "message." + r;
              }
            }
          }
          return self.isInteger(data.current) || data.current && self.isInteger(data.current.low) && self.isInteger(data.current.high) ? self.isInteger(data.head) || data.head && self.isInteger(data.head.low) && self.isInteger(data.head.high) ? null : "head: integer|Long expected" : "current: integer|Long expected";
        }, Error.fromObject = function (data) {
          if (data instanceof window.PullMessageResult) {
            return data;
          }
          var context = new window.PullMessageResult;
          if (data.message) {
            if (!Array.isArray(data.message)) {
              throw TypeError(".PullMessageResult.message: array expected");
            }
            context.message = [];
            var i = 0;
            for (; i < data.message.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(data.message[i])) {
                throw TypeError(".PullMessageResult.message: object expected");
              }
              context.message[i] = window.Message.fromObject(data.message[i]);
            }
          }
          return null != data.current && (self.Long ? (context.current = self.Long.fromValue(data.current)).unsigned = false : "string" == typeof data.current ? context.current = parseInt(data.current, 10) : "number" == typeof data.current ? context.current = data.current : "object" === (0, _deepAssign2.default)(data.current) && (context.current = (new self.LongBits(data.current.low >>> 0, data.current.high >>> 0)).toNumber())), null != data.head && (self.Long ? (context.head = self.Long.fromValue(data.head)).unsigned =
            false : "string" == typeof data.head ? context.head = parseInt(data.head, 10) : "number" == typeof data.head ? context.head = data.head : "object" === (0, _deepAssign2.default)(data.head) && (context.head = (new self.LongBits(data.head.low >>> 0, data.head.high >>> 0)).toNumber())), context;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var r = {};
          if ((options.arrays || options.defaults) && (r.message = []), options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              r.current = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              r.current = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              r.head = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              r.head = options.longs === String ? "0" : 0;
            }
          }
          if (message.message && message.message.length) {
            r.message = [];
            var key = 0;
            for (; key < message.message.length; ++key) {
              r.message[key] = window.Message.toObject(message.message[key], options);
            }
          }
          return null != message.current && message.hasOwnProperty("current") && ("number" == typeof message.current ? r.current = options.longs === String ? String(message.current) : message.current : r.current = options.longs === String ? self.Long.prototype.toString.call(message.current) : options.longs === Number ? (new self.LongBits(message.current.low >>> 0, message.current.high >>> 0)).toNumber() : message.current), null != message.head && message.hasOwnProperty("head") && ("number" == typeof message.head ?
            r.head = options.longs === String ? String(message.head) : message.head : r.head = options.longs === String ? self.Long.prototype.toString.call(message.head) : options.longs === Number ? (new self.LongBits(message.head.low >>> 0, message.head.high >>> 0)).toNumber() : message.head), r;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullReadResult = function () {
        function Site(cat) {
          if (this.read = [], cat) {
            var keys = (0, _noframeworkWaypoints2.default)(cat);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != cat[keys[i]]) {
                this[keys[i]] = cat[keys[i]];
              }
            }
          }
        }
        return Site.prototype.read = self.emptyArray, Site.prototype.current = self.Long ? self.Long.fromBits(0, 0, false) : 0, Site.prototype.head = self.Long ? self.Long.fromBits(0, 0, false) : 0, Site.create = function (obj) {
          return new Site(obj);
        }, Site.encode = function (target, message) {
          if (message || (message = $Writer.create()), null != target.read && target.read.length) {
            var i = 0;
            for (; i < target.read.length; ++i) {
              window.ConvRead.encode(target.read[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message.uint32(16).int64(target.current), message.uint32(24).int64(target.head), message;
        }, Site.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Site.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var o = new window.PullReadResult;
          for (; options.pos < ch;) {
            var s = options.uint32();
            switch (s >>> 3) {
              case 1:
                if (!(o.read && o.read.length)) {
                  o.read = [];
                }
                o.read.push(window.ConvRead.decode(options, options.uint32()));
                break;
              case 2:
                o.current = options.int64();
                break;
              case 3:
                o.head = options.int64();
                break;
              default:
                options.skipType(7 & s);
            }
          }
          if (!o.hasOwnProperty("current")) {
            throw self.ProtocolError("missing required 'current'", {
              instance: o
            });
          }
          if (!o.hasOwnProperty("head")) {
            throw self.ProtocolError("missing required 'head'", {
              instance: o
            });
          }
          return o;
        }, Site.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Site.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (null != data.read && data.hasOwnProperty("read")) {
            if (!Array.isArray(data.read)) {
              return "read: array expected";
            }
            var i = 0;
            for (; i < data.read.length; ++i) {
              var r = window.ConvRead.verify(data.read[i]);
              if (r) {
                return "read." + r;
              }
            }
          }
          return self.isInteger(data.current) || data.current && self.isInteger(data.current.low) && self.isInteger(data.current.high) ? self.isInteger(data.head) || data.head && self.isInteger(data.head.low) && self.isInteger(data.head.high) ? null : "head: integer|Long expected" : "current: integer|Long expected";
        }, Site.fromObject = function (data) {
          if (data instanceof window.PullReadResult) {
            return data;
          }
          var context = new window.PullReadResult;
          if (data.read) {
            if (!Array.isArray(data.read)) {
              throw TypeError(".PullReadResult.read: array expected");
            }
            context.read = [];
            var i = 0;
            for (; i < data.read.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(data.read[i])) {
                throw TypeError(".PullReadResult.read: object expected");
              }
              context.read[i] = window.ConvRead.fromObject(data.read[i]);
            }
          }
          return null != data.current && (self.Long ? (context.current = self.Long.fromValue(data.current)).unsigned = false : "string" == typeof data.current ? context.current = parseInt(data.current, 10) : "number" == typeof data.current ? context.current = data.current : "object" === (0, _deepAssign2.default)(data.current) && (context.current = (new self.LongBits(data.current.low >>> 0, data.current.high >>> 0)).toNumber())), null != data.head && (self.Long ? (context.head = self.Long.fromValue(data.head)).unsigned =
            false : "string" == typeof data.head ? context.head = parseInt(data.head, 10) : "number" == typeof data.head ? context.head = data.head : "object" === (0, _deepAssign2.default)(data.head) && (context.head = (new self.LongBits(data.head.low >>> 0, data.head.high >>> 0)).toNumber())), context;
        }, Site.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var r = {};
          if ((options.arrays || options.defaults) && (r.read = []), options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              r.current = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              r.current = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              r.head = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              r.head = options.longs === String ? "0" : 0;
            }
          }
          if (message.read && message.read.length) {
            r.read = [];
            var key = 0;
            for (; key < message.read.length; ++key) {
              r.read[key] = window.ConvRead.toObject(message.read[key], options);
            }
          }
          return null != message.current && message.hasOwnProperty("current") && ("number" == typeof message.current ? r.current = options.longs === String ? String(message.current) : message.current : r.current = options.longs === String ? self.Long.prototype.toString.call(message.current) : options.longs === Number ? (new self.LongBits(message.current.low >>> 0, message.current.high >>> 0)).toNumber() : message.current), null != message.head && message.hasOwnProperty("head") && ("number" == typeof message.head ?
            r.head = options.longs === String ? String(message.head) : message.head : r.head = options.longs === String ? self.Long.prototype.toString.call(message.head) : options.longs === Number ? (new self.LongBits(message.head.low >>> 0, message.head.high >>> 0)).toNumber() : message.head), r;
        }, Site.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Site;
      }();
      window.PullDeliveryResult = function () {
        function Error(props) {
          if (this.delivery = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.delivery = self.emptyArray, Error.prototype.current = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.head = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), null != message.delivery && message.delivery.length) {
            var i = 0;
            for (; i < message.delivery.length; ++i) {
              window.Delivery.encode(message.delivery[i], writer.uint32(10).fork()).ldelim();
            }
          }
          return writer.uint32(16).int64(message.current), writer.uint32(24).int64(message.head), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var result = new window.PullDeliveryResult;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                if (!(result.delivery && result.delivery.length)) {
                  result.delivery = [];
                }
                result.delivery.push(window.Delivery.decode(options, options.uint32()));
                break;
              case 2:
                result.current = options.int64();
                break;
              case 3:
                result.head = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!result.hasOwnProperty("current")) {
            throw self.ProtocolError("missing required 'current'", {
              instance: result
            });
          }
          if (!result.hasOwnProperty("head")) {
            throw self.ProtocolError("missing required 'head'", {
              instance: result
            });
          }
          return result;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (options) {
          if ("object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options) {
            return "object expected";
          }
          if (null != options.delivery && options.hasOwnProperty("delivery")) {
            if (!Array.isArray(options.delivery)) {
              return "delivery: array expected";
            }
            var i = 0;
            for (; i < options.delivery.length; ++i) {
              var r = window.Delivery.verify(options.delivery[i]);
              if (r) {
                return "delivery." + r;
              }
            }
          }
          return self.isInteger(options.current) || options.current && self.isInteger(options.current.low) && self.isInteger(options.current.high) ? self.isInteger(options.head) || options.head && self.isInteger(options.head.low) && self.isInteger(options.head.high) ? null : "head: integer|Long expected" : "current: integer|Long expected";
        }, Error.fromObject = function (data) {
          if (data instanceof window.PullDeliveryResult) {
            return data;
          }
          var options = new window.PullDeliveryResult;
          if (data.delivery) {
            if (!Array.isArray(data.delivery)) {
              throw TypeError(".PullDeliveryResult.delivery: array expected");
            }
            options.delivery = [];
            var i = 0;
            for (; i < data.delivery.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(data.delivery[i])) {
                throw TypeError(".PullDeliveryResult.delivery: object expected");
              }
              options.delivery[i] = window.Delivery.fromObject(data.delivery[i]);
            }
          }
          return null != data.current && (self.Long ? (options.current = self.Long.fromValue(data.current)).unsigned = false : "string" == typeof data.current ? options.current = parseInt(data.current, 10) : "number" == typeof data.current ? options.current = data.current : "object" === (0, _deepAssign2.default)(data.current) && (options.current = (new self.LongBits(data.current.low >>> 0, data.current.high >>> 0)).toNumber())), null != data.head && (self.Long ? (options.head = self.Long.fromValue(data.head)).unsigned =
            false : "string" == typeof data.head ? options.head = parseInt(data.head, 10) : "number" == typeof data.head ? options.head = data.head : "object" === (0, _deepAssign2.default)(data.head) && (options.head = (new self.LongBits(data.head.low >>> 0, data.head.high >>> 0)).toNumber())), options;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var update = {};
          if ((options.arrays || options.defaults) && (update.delivery = []), options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              update.current = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              update.current = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              update.head = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              update.head = options.longs === String ? "0" : 0;
            }
          }
          if (message.delivery && message.delivery.length) {
            update.delivery = [];
            var key = 0;
            for (; key < message.delivery.length; ++key) {
              update.delivery[key] = window.Delivery.toObject(message.delivery[key], options);
            }
          }
          return null != message.current && message.hasOwnProperty("current") && ("number" == typeof message.current ? update.current = options.longs === String ? String(message.current) : message.current : update.current = options.longs === String ? self.Long.prototype.toString.call(message.current) : options.longs === Number ? (new self.LongBits(message.current.low >>> 0, message.current.high >>> 0)).toNumber() : message.current), null != message.head && message.hasOwnProperty("head") && ("number" ==
            typeof message.head ? update.head = options.longs === String ? String(message.head) : message.head : update.head = options.longs === String ? self.Long.prototype.toString.call(message.head) : options.longs === Number ? (new self.LongBits(message.head.low >>> 0, message.head.high >>> 0)).toNumber() : message.head), update;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullGroupInfoResult = function () {
        function Error(props) {
          if (this.info = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.info = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.info && value.info.length) {
            var i = 0;
            for (; i < value.info.length; ++i) {
              window.GroupInfo.encode(value.info[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.PullGroupInfoResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.info && json.info.length)) {
                  json.info = [];
                }
                json.info.push(window.GroupInfo.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (input) {
          if ("object" !== (void 0 === input ? "undefined" : (0, _deepAssign2.default)(input)) || null === input) {
            return "object expected";
          }
          if (null != input.info && input.hasOwnProperty("info")) {
            if (!Array.isArray(input.info)) {
              return "info: array expected";
            }
            var i = 0;
            for (; i < input.info.length; ++i) {
              var r = window.GroupInfo.verify(input.info[i]);
              if (r) {
                return "info." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.PullGroupInfoResult) {
            return object;
          }
          var obj = new window.PullGroupInfoResult;
          if (object.info) {
            if (!Array.isArray(object.info)) {
              throw TypeError(".PullGroupInfoResult.info: array expected");
            }
            obj.info = [];
            var i = 0;
            for (; i < object.info.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.info[i])) {
                throw TypeError(".PullGroupInfoResult.info: object expected");
              }
              obj.info[i] = window.GroupInfo.fromObject(object.info[i]);
            }
          }
          return obj;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var object = {};
          if ((options.arrays || options.defaults) && (object.info = []), data.info && data.info.length) {
            object.info = [];
            var key = 0;
            for (; key < data.info.length; ++key) {
              object.info[key] = window.GroupInfo.toObject(data.info[key], options);
            }
          }
          return object;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullGroupMemberRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.target = "", Error.prototype.head = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(message.target), writer.uint32(16).int64(message.head), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var o = new window.PullGroupMemberRequest;
          for (; options.pos < ch;) {
            var me = options.uint32();
            switch (me >>> 3) {
              case 1:
                o.target = options.string();
                break;
              case 2:
                o.head = options.int64();
                break;
              default:
                options.skipType(7 & me);
            }
          }
          if (!o.hasOwnProperty("target")) {
            throw self.ProtocolError("missing required 'target'", {
              instance: o
            });
          }
          if (!o.hasOwnProperty("head")) {
            throw self.ProtocolError("missing required 'head'", {
              instance: o
            });
          }
          return o;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.target) ? self.isInteger(data.head) || data.head && self.isInteger(data.head.low) && self.isInteger(data.head.high) ? null : "head: integer|Long expected" : "target: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.PullGroupMemberRequest) {
            return object;
          }
          var context = new window.PullGroupMemberRequest;
          return null != object.target && (context.target = String(object.target)), null != object.head && (self.Long ? (context.head = self.Long.fromValue(object.head)).unsigned = false : "string" == typeof object.head ? context.head = parseInt(object.head, 10) : "number" == typeof object.head ? context.head = object.head : "object" === (0, _deepAssign2.default)(object.head) && (context.head = (new self.LongBits(object.head.low >>> 0, object.head.high >>> 0)).toNumber())), context;
        }, Error.toObject = function (options, o) {
          if (!o) {
            o = {};
          }
          var parsed = {};
          if (o.defaults) {
            if (parsed.target = "", self.Long) {
              var long = new self.Long(0, 0, false);
              parsed.head = o.longs === String ? long.toString() : o.longs === Number ? long.toNumber() : long;
            } else {
              parsed.head = o.longs === String ? "0" : 0;
            }
          }
          return null != options.target && options.hasOwnProperty("target") && (parsed.target = options.target), null != options.head && options.hasOwnProperty("head") && ("number" == typeof options.head ? parsed.head = o.longs === String ? String(options.head) : options.head : parsed.head = o.longs === String ? self.Long.prototype.toString.call(options.head) : o.longs === Number ? (new self.LongBits(options.head.low >>> 0, options.head.high >>> 0)).toNumber() : options.head), parsed;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullGroupMemberResult = function () {
        function Error(props) {
          if (this.member = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.member = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.member && value.member.length) {
            var i = 0;
            for (; i < value.member.length; ++i) {
              window.GroupMember.encode(value.member[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var response = new window.PullGroupMemberResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(response.member && response.member.length)) {
                  response.member = [];
                }
                response.member.push(window.GroupMember.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return response;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.member && value.hasOwnProperty("member")) {
            if (!Array.isArray(value.member)) {
              return "member: array expected";
            }
            var i = 0;
            for (; i < value.member.length; ++i) {
              var r = window.GroupMember.verify(value.member[i]);
              if (r) {
                return "member." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.PullGroupMemberResult) {
            return object;
          }
          var s = new window.PullGroupMemberResult;
          if (object.member) {
            if (!Array.isArray(object.member)) {
              throw TypeError(".PullGroupMemberResult.member: array expected");
            }
            s.member = [];
            var i = 0;
            for (; i < object.member.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.member[i])) {
                throw TypeError(".PullGroupMemberResult.member: object expected");
              }
              s.member[i] = window.GroupMember.fromObject(object.member[i]);
            }
          }
          return s;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.member = []), message.member && message.member.length) {
            ret.member = [];
            var key = 0;
            for (; key < message.member.length; ++key) {
              ret.member[key] = window.GroupMember.toObject(message.member[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.UserRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.uid = "", Error.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.uid), null != data.updateDt && data.hasOwnProperty("updateDt") && target.uint32(16).int64(data.updateDt), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var t = new window.UserRequest;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                t.uid = options.string();
                break;
              case 2:
                t.updateDt = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!t.hasOwnProperty("uid")) {
            throw self.ProtocolError("missing required 'uid'", {
              instance: t
            });
          }
          return t;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.uid) ? null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" : null : "uid: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.UserRequest) {
            return object;
          }
          var message = new window.UserRequest;
          return null != object.uid && (message.uid = String(object.uid)), null != object.updateDt && (self.Long ? (message.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? message.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? message.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) && (message.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>>
            0)).toNumber())), message;
        }, Error.toObject = function (options, data) {
          if (!data) {
            data = {};
          }
          var request = {};
          if (data.defaults) {
            if (request.uid = "", self.Long) {
              var long = new self.Long(0, 0, false);
              request.updateDt = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
            } else {
              request.updateDt = data.longs === String ? "0" : 0;
            }
          }
          return null != options.uid && options.hasOwnProperty("uid") && (request.uid = options.uid), null != options.updateDt && options.hasOwnProperty("updateDt") && ("number" == typeof options.updateDt ? request.updateDt = data.longs === String ? String(options.updateDt) : options.updateDt : request.updateDt = data.longs === String ? self.Long.prototype.toString.call(options.updateDt) : data.longs === Number ? (new self.LongBits(options.updateDt.low >>> 0, options.updateDt.high >>> 0)).toNumber() :
            options.updateDt), request;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullUserRequest = function () {
        function Site(cat) {
          if (this.request = [], cat) {
            var keys = (0, _noframeworkWaypoints2.default)(cat);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != cat[keys[i]]) {
                this[keys[i]] = cat[keys[i]];
              }
            }
          }
        }
        return Site.prototype.request = self.emptyArray, Site.create = function (obj) {
          return new Site(obj);
        }, Site.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.request && value.request.length) {
            var index = 0;
            for (; index < value.request.length; ++index) {
              window.UserRequest.encode(value.request[index], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Site.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Site.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var self = new window.PullUserRequest;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(self.request && self.request.length)) {
                  self.request = [];
                }
                self.request.push(window.UserRequest.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return self;
        }, Site.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Site.verify = function (self) {
          if ("object" !== (void 0 === self ? "undefined" : (0, _deepAssign2.default)(self)) || null === self) {
            return "object expected";
          }
          if (null != self.request && self.hasOwnProperty("request")) {
            if (!Array.isArray(self.request)) {
              return "request: array expected";
            }
            var i = 0;
            for (; i < self.request.length; ++i) {
              var r = window.UserRequest.verify(self.request[i]);
              if (r) {
                return "request." + r;
              }
            }
          }
          return null;
        }, Site.fromObject = function (object) {
          if (object instanceof window.PullUserRequest) {
            return object;
          }
          var b = new window.PullUserRequest;
          if (object.request) {
            if (!Array.isArray(object.request)) {
              throw TypeError(".PullUserRequest.request: array expected");
            }
            b.request = [];
            var i = 0;
            for (; i < object.request.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.request[i])) {
                throw TypeError(".PullUserRequest.request: object expected");
              }
              b.request[i] = window.UserRequest.fromObject(object.request[i]);
            }
          }
          return b;
        }, Site.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.request = []), message.request && message.request.length) {
            data.request = [];
            var key = 0;
            for (; key < message.request.length; ++key) {
              data.request[key] = window.UserRequest.toObject(message.request[key], options);
            }
          }
          return data;
        }, Site.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Site;
      }();
      window.UserResult = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.user = null, Error.prototype.code = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), window.User.encode(message.user, writer.uint32(10).fork()).ldelim(), writer.uint32(16).int32(message.code), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.UserResult;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                message.user = window.User.decode(data, data.uint32());
                break;
              case 2:
                message.code = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!message.hasOwnProperty("user")) {
            throw self.ProtocolError("missing required 'user'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("code")) {
            throw self.ProtocolError("missing required 'code'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          var t = window.User.verify(value.user);
          return t ? "user." + t : self.isInteger(value.code) ? null : "code: integer expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.UserResult) {
            return object;
          }
          var eopts = new window.UserResult;
          if (null != object.user) {
            if ("object" !== (0, _deepAssign2.default)(object.user)) {
              throw TypeError(".UserResult.user: object expected");
            }
            eopts.user = window.User.fromObject(object.user);
          }
          return null != object.code && (eopts.code = 0 | object.code), eopts;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var settings = {};
          return options.defaults && (settings.user = null, settings.code = 0), null != message.user && message.hasOwnProperty("user") && (settings.user = window.User.toObject(message.user, options)), null != message.code && message.hasOwnProperty("code") && (settings.code = message.code), settings;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.PullUserResult = function () {
        function model(obj) {
          if (this.result = [], obj) {
            var props = (0, _noframeworkWaypoints2.default)(obj);
            var i = 0;
            for (; i < props.length; ++i) {
              if (null != obj[props[i]]) {
                this[props[i]] = obj[props[i]];
              }
            }
          }
        }
        return model.prototype.result = self.emptyArray, model.create = function (value) {
          return new model(value);
        }, model.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.result && value.result.length) {
            var index = 0;
            for (; index < value.result.length; ++index) {
              window.UserResult.encode(value.result[index], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var self = new window.PullUserResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(self.result && self.result.length)) {
                  self.result = [];
                }
                self.result.push(window.UserResult.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return self;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.result && value.hasOwnProperty("result")) {
            if (!Array.isArray(value.result)) {
              return "result: array expected";
            }
            var i = 0;
            for (; i < value.result.length; ++i) {
              var r = window.UserResult.verify(value.result[i]);
              if (r) {
                return "result." + r;
              }
            }
          }
          return null;
        }, model.fromObject = function (object) {
          if (object instanceof window.PullUserResult) {
            return object;
          }
          var obj = new window.PullUserResult;
          if (object.result) {
            if (!Array.isArray(object.result)) {
              throw TypeError(".PullUserResult.result: array expected");
            }
            obj.result = [];
            var i = 0;
            for (; i < object.result.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.result[i])) {
                throw TypeError(".PullUserResult.result: object expected");
              }
              obj.result[i] = window.UserResult.fromObject(object.result[i]);
            }
          }
          return obj;
        }, model.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.result = []), message.result && message.result.length) {
            ret.result = [];
            var key = 0;
            for (; key < message.result.length; ++key) {
              ret.result[key] = window.UserResult.toObject(message.result[key], options);
            }
          }
          return ret;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.QuitGroupRequest = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), null != message.toLine && message.toLine.length) {
            var i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(16).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(26).fork()).ldelim(), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.QuitGroupRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 3:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          if (!self.isString(obj.groupId)) {
            return "groupId: string expected";
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(obj.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.QuitGroupRequest) {
            return obj;
          }
          var that = new window.QuitGroupRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".QuitGroupRequest.toLine: array expected");
            }
            that.toLine = [];
            var r = 0;
            for (; r < obj.toLine.length; ++r) {
              that.toLine[r] = 0 | obj.toLine[r];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".QuitGroupRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return that;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if ((options.arrays || options.defaults) && ($scope.toLine = []), options.defaults && ($scope.groupId = "", $scope.notifyContent = null), null != message.groupId && message.hasOwnProperty("groupId") && ($scope.groupId = message.groupId), message.toLine && message.toLine.length) {
            $scope.toLine = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.toLine.length; ++buttonIndex) {
              $scope.toLine[buttonIndex] = message.toLine[buttonIndex];
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && ($scope.notifyContent = window.MessageContent.toObject(message.notifyContent, options)), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.RemoveGroupMemberRequest = function () {
        function Error(props) {
          if (this.removedMember = [], this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.removedMember = self.emptyArray, Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), null != message.removedMember && message.removedMember.length) {
            var i = 0;
            for (; i < message.removedMember.length; ++i) {
              writer.uint32(18).string(message.removedMember[i]);
            }
          }
          if (null != message.toLine && message.toLine.length) {
            i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(24).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(34).fork()).ldelim(), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.RemoveGroupMemberRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                if (!(that.removedMember && that.removedMember.length)) {
                  that.removedMember = [];
                }
                that.removedMember.push(data.string());
                break;
              case 3:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 4:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          if (!self.isString(obj.groupId)) {
            return "groupId: string expected";
          }
          if (null != obj.removedMember && obj.hasOwnProperty("removedMember")) {
            if (!Array.isArray(obj.removedMember)) {
              return "removedMember: array expected";
            }
            var i = 0;
            for (; i < obj.removedMember.length; ++i) {
              if (!self.isString(obj.removedMember[i])) {
                return "removedMember: string[] expected";
              }
            }
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(obj.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.RemoveGroupMemberRequest) {
            return obj;
          }
          var that = new window.RemoveGroupMemberRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), obj.removedMember) {
            if (!Array.isArray(obj.removedMember)) {
              throw TypeError(".RemoveGroupMemberRequest.removedMember: array expected");
            }
            that.removedMember = [];
            var i = 0;
            for (; i < obj.removedMember.length; ++i) {
              that.removedMember[i] = String(obj.removedMember[i]);
            }
          }
          if (obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".RemoveGroupMemberRequest.toLine: array expected");
            }
            that.toLine = [];
            i = 0;
            for (; i < obj.toLine.length; ++i) {
              that.toLine[i] = 0 | obj.toLine[i];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".RemoveGroupMemberRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return that;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if ((options.arrays || options.defaults) && ($scope.removedMember = [], $scope.toLine = []), options.defaults && ($scope.groupId = "", $scope.notifyContent = null), null != message.groupId && message.hasOwnProperty("groupId") && ($scope.groupId = message.groupId), message.removedMember && message.removedMember.length) {
            $scope.removedMember = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.removedMember.length; ++buttonIndex) {
              $scope.removedMember[buttonIndex] = message.removedMember[buttonIndex];
            }
          }
          if (message.toLine && message.toLine.length) {
            $scope.toLine = [];
            buttonIndex = 0;
            for (; buttonIndex < message.toLine.length; ++buttonIndex) {
              $scope.toLine[buttonIndex] = message.toLine[buttonIndex];
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && ($scope.notifyContent = window.MessageContent.toObject(message.notifyContent, options)), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.TransferGroupRequest = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.newOwner = "", Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), writer.uint32(18).string(message.newOwner), null != message.toLine && message.toLine.length) {
            var i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(24).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(34).fork()).ldelim(), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.TransferGroupRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                that.newOwner = data.string();
                break;
              case 3:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 4:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("newOwner")) {
            throw self.ProtocolError("missing required 'newOwner'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          if (!self.isString(obj.groupId)) {
            return "groupId: string expected";
          }
          if (!self.isString(obj.newOwner)) {
            return "newOwner: string expected";
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(obj.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.TransferGroupRequest) {
            return obj;
          }
          var that = new window.TransferGroupRequest;
          if (null != obj.groupId && (that.groupId = String(obj.groupId)), null != obj.newOwner && (that.newOwner = String(obj.newOwner)), obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".TransferGroupRequest.toLine: array expected");
            }
            that.toLine = [];
            var r = 0;
            for (; r < obj.toLine.length; ++r) {
              that.toLine[r] = 0 | obj.toLine[r];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".TransferGroupRequest.notifyContent: object expected");
            }
            that.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return that;
        }, Error.toObject = function (item, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if ((options.arrays || options.defaults) && ($scope.toLine = []), options.defaults && ($scope.groupId = "", $scope.newOwner = "", $scope.notifyContent = null), null != item.groupId && item.hasOwnProperty("groupId") && ($scope.groupId = item.groupId), null != item.newOwner && item.hasOwnProperty("newOwner") && ($scope.newOwner = item.newOwner), item.toLine && item.toLine.length) {
            $scope.toLine = [];
            var i = 0;
            for (; i < item.toLine.length; ++i) {
              $scope.toLine[i] = item.toLine[i];
            }
          }
          return null != item.notifyContent && item.hasOwnProperty("notifyContent") && ($scope.notifyContent = window.MessageContent.toObject(item.notifyContent, options)), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ModifyGroupMemberAlias = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.alias = "", Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.prototype.memberId = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          if (target || (target = $Writer.create()), target.uint32(10).string(data.groupId), target.uint32(18).string(data.alias), null != data.toLine && data.toLine.length) {
            var i = 0;
            for (; i < data.toLine.length; ++i) {
              target.uint32(24).int32(data.toLine[i]);
            }
          }
          return null != data.notifyContent && data.hasOwnProperty("notifyContent") && window.MessageContent.encode(data.notifyContent, target.uint32(34).fork()).ldelim(), null != data.memberId && data.hasOwnProperty("memberId") && target.uint32(42).string(data.memberId), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.ModifyGroupMemberAlias;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                that.alias = data.string();
                break;
              case 3:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 4:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              case 5:
                that.memberId = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("alias")) {
            throw self.ProtocolError("missing required 'alias'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isString(data.groupId)) {
            return "groupId: string expected";
          }
          if (!self.isString(data.alias)) {
            return "alias: string expected";
          }
          if (null != data.toLine && data.hasOwnProperty("toLine")) {
            if (!Array.isArray(data.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < data.toLine.length; ++i) {
              if (!self.isInteger(data.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != data.notifyContent && data.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(data.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null != data.memberId && data.hasOwnProperty("memberId") && !self.isString(data.memberId) ? "memberId: string expected" : null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.ModifyGroupMemberAlias) {
            return obj;
          }
          var self = new window.ModifyGroupMemberAlias;
          if (null != obj.groupId && (self.groupId = String(obj.groupId)), null != obj.alias && (self.alias = String(obj.alias)), obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".ModifyGroupMemberAlias.toLine: array expected");
            }
            self.toLine = [];
            var ds = 0;
            for (; ds < obj.toLine.length; ++ds) {
              self.toLine[ds] = 0 | obj.toLine[ds];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".ModifyGroupMemberAlias.notifyContent: object expected");
            }
            self.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return null != obj.memberId && (self.memberId = String(obj.memberId)), self;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if ((options.arrays || options.defaults) && ($scope.toLine = []), options.defaults && ($scope.groupId = "", $scope.alias = "", $scope.notifyContent = null, $scope.memberId = ""), null != data.groupId && data.hasOwnProperty("groupId") && ($scope.groupId = data.groupId), null != data.alias && data.hasOwnProperty("alias") && ($scope.alias = data.alias), data.toLine && data.toLine.length) {
            $scope.toLine = [];
            var i = 0;
            for (; i < data.toLine.length; ++i) {
              $scope.toLine[i] = data.toLine[i];
            }
          }
          return null != data.notifyContent && data.hasOwnProperty("notifyContent") && ($scope.notifyContent = window.MessageContent.toObject(data.notifyContent, options)), null != data.memberId && data.hasOwnProperty("memberId") && ($scope.memberId = data.memberId), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ModifyGroupMemberExtra = function () {
        function Error(props) {
          if (this.toLine = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.groupId = "", Error.prototype.toLine = self.emptyArray, Error.prototype.notifyContent = null, Error.prototype.extra = "", Error.prototype.memberId = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.groupId), null != message.toLine && message.toLine.length) {
            var i = 0;
            for (; i < message.toLine.length; ++i) {
              writer.uint32(16).int32(message.toLine[i]);
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && window.MessageContent.encode(message.notifyContent, writer.uint32(26).fork()).ldelim(), null != message.extra && message.hasOwnProperty("extra") && writer.uint32(34).string(message.extra), null != message.memberId && message.hasOwnProperty("memberId") && writer.uint32(42).string(message.memberId), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.ModifyGroupMemberExtra;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.groupId = data.string();
                break;
              case 2:
                if (that.toLine && that.toLine.length || (that.toLine = []), 2 == (7 & a)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    that.toLine.push(data.int32());
                  }
                } else {
                  that.toLine.push(data.int32());
                }
                break;
              case 3:
                that.notifyContent = window.MessageContent.decode(data, data.uint32());
                break;
              case 4:
                that.extra = data.string();
                break;
              case 5:
                that.memberId = data.string();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("groupId")) {
            throw self.ProtocolError("missing required 'groupId'", {
              instance: that
            });
          }
          return that;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (obj) {
          if ("object" !== (void 0 === obj ? "undefined" : (0, _deepAssign2.default)(obj)) || null === obj) {
            return "object expected";
          }
          if (!self.isString(obj.groupId)) {
            return "groupId: string expected";
          }
          if (null != obj.toLine && obj.hasOwnProperty("toLine")) {
            if (!Array.isArray(obj.toLine)) {
              return "toLine: array expected";
            }
            var i = 0;
            for (; i < obj.toLine.length; ++i) {
              if (!self.isInteger(obj.toLine[i])) {
                return "toLine: integer[] expected";
              }
            }
          }
          if (null != obj.notifyContent && obj.hasOwnProperty("notifyContent")) {
            var r = window.MessageContent.verify(obj.notifyContent);
            if (r) {
              return "notifyContent." + r;
            }
          }
          return null != obj.extra && obj.hasOwnProperty("extra") && !self.isString(obj.extra) ? "extra: string expected" : null != obj.memberId && obj.hasOwnProperty("memberId") && !self.isString(obj.memberId) ? "memberId: string expected" : null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.ModifyGroupMemberExtra) {
            return obj;
          }
          var $scope = new window.ModifyGroupMemberExtra;
          if (null != obj.groupId && ($scope.groupId = String(obj.groupId)), obj.toLine) {
            if (!Array.isArray(obj.toLine)) {
              throw TypeError(".ModifyGroupMemberExtra.toLine: array expected");
            }
            $scope.toLine = [];
            var ds = 0;
            for (; ds < obj.toLine.length; ++ds) {
              $scope.toLine[ds] = 0 | obj.toLine[ds];
            }
          }
          if (null != obj.notifyContent) {
            if ("object" !== (0, _deepAssign2.default)(obj.notifyContent)) {
              throw TypeError(".ModifyGroupMemberExtra.notifyContent: object expected");
            }
            $scope.notifyContent = window.MessageContent.fromObject(obj.notifyContent);
          }
          return null != obj.extra && ($scope.extra = String(obj.extra)), null != obj.memberId && ($scope.memberId = String(obj.memberId)), $scope;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if ((options.arrays || options.defaults) && ($scope.toLine = []), options.defaults && ($scope.groupId = "", $scope.notifyContent = null, $scope.extra = "", $scope.memberId = ""), null != message.groupId && message.hasOwnProperty("groupId") && ($scope.groupId = message.groupId), message.toLine && message.toLine.length) {
            $scope.toLine = [];
            var buttonIndex = 0;
            for (; buttonIndex < message.toLine.length; ++buttonIndex) {
              $scope.toLine[buttonIndex] = message.toLine[buttonIndex];
            }
          }
          return null != message.notifyContent && message.hasOwnProperty("notifyContent") && ($scope.notifyContent = window.MessageContent.toObject(message.notifyContent, options)), null != message.extra && message.hasOwnProperty("extra") && ($scope.extra = message.extra), null != message.memberId && message.hasOwnProperty("memberId") && ($scope.memberId = message.memberId), $scope;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.UserSettingEntry = function () {
        function Options(defaults) {
          if (defaults) {
            var keys = (0, _noframeworkWaypoints2.default)(defaults);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != defaults[keys[i]]) {
                this[keys[i]] = defaults[keys[i]];
              }
            }
          }
        }
        return Options.prototype.scope = 0, Options.prototype.key = "", Options.prototype.value = "", Options.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, Options.create = function (value) {
          return new Options(value);
        }, Options.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(8).int32(args.scope), target.uint32(18).string(args.key), target.uint32(26).string(args.value), target.uint32(32).int64(args.updateDt), target;
        }, Options.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Options.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.UserSettingEntry;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.scope = data.int32();
                break;
              case 2:
                message.key = data.string();
                break;
              case 3:
                message.value = data.string();
                break;
              case 4:
                message.updateDt = data.int64();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("scope")) {
            throw self.ProtocolError("missing required 'scope'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("key")) {
            throw self.ProtocolError("missing required 'key'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("value")) {
            throw self.ProtocolError("missing required 'value'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("updateDt")) {
            throw self.ProtocolError("missing required 'updateDt'", {
              instance: message
            });
          }
          return message;
        }, Options.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Options.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.scope) ? self.isString(data.key) ? self.isString(data.value) ? self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high) ? null : "updateDt: integer|Long expected" : "value: string expected" : "key: string expected" : "scope: integer expected";
        }, Options.fromObject = function (object) {
          if (object instanceof window.UserSettingEntry) {
            return object;
          }
          var data = new window.UserSettingEntry;
          return null != object.scope && (data.scope = 0 | object.scope), null != object.key && (data.key = String(object.key)), null != object.value && (data.value = String(object.value)), null != object.updateDt && (self.Long ? (data.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? data.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? data.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) &&
            (data.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>> 0)).toNumber())), data;
        }, Options.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if (options.defaults) {
            if (ret.scope = 0, ret.key = "", ret.value = "", self.Long) {
              var long = new self.Long(0, 0, false);
              ret.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              ret.updateDt = options.longs === String ? "0" : 0;
            }
          }
          return null != data.scope && data.hasOwnProperty("scope") && (ret.scope = data.scope), null != data.key && data.hasOwnProperty("key") && (ret.key = data.key), null != data.value && data.hasOwnProperty("value") && (ret.value = data.value), null != data.updateDt && data.hasOwnProperty("updateDt") && ("number" == typeof data.updateDt ? ret.updateDt = options.longs === String ? String(data.updateDt) : data.updateDt : ret.updateDt = options.longs === String ? self.Long.prototype.toString.call(data.updateDt) :
            options.longs === Number ? (new self.LongBits(data.updateDt.low >>> 0, data.updateDt.high >>> 0)).toNumber() : data.updateDt), ret;
        }, Options.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Options;
      }();
      window.ModifyUserSettingReq = function () {
        function Options(defaults) {
          if (this.target = [], defaults) {
            var keys = (0, _noframeworkWaypoints2.default)(defaults);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != defaults[keys[i]]) {
                this[keys[i]] = defaults[keys[i]];
              }
            }
          }
        }
        return Options.prototype.scope = 0, Options.prototype.key = "", Options.prototype.value = "", Options.prototype.target = self.emptyArray, Options.create = function (value) {
          return new Options(value);
        }, Options.encode = function (args, value) {
          if (value || (value = $Writer.create()), value.uint32(8).int32(args.scope), value.uint32(18).string(args.key), value.uint32(26).string(args.value), null != args.target && args.target.length) {
            var i = 0;
            for (; i < args.target.length; ++i) {
              value.uint32(34).string(args.target[i]);
            }
          }
          return value;
        }, Options.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Options.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var object = new window.ModifyUserSettingReq;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                object.scope = data.int32();
                break;
              case 2:
                object.key = data.string();
                break;
              case 3:
                object.value = data.string();
                break;
              case 4:
                if (!(object.target && object.target.length)) {
                  object.target = [];
                }
                object.target.push(data.string());
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!object.hasOwnProperty("scope")) {
            throw self.ProtocolError("missing required 'scope'", {
              instance: object
            });
          }
          if (!object.hasOwnProperty("key")) {
            throw self.ProtocolError("missing required 'key'", {
              instance: object
            });
          }
          if (!object.hasOwnProperty("value")) {
            throw self.ProtocolError("missing required 'value'", {
              instance: object
            });
          }
          return object;
        }, Options.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Options.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (!self.isInteger(value.scope)) {
            return "scope: integer expected";
          }
          if (!self.isString(value.key)) {
            return "key: string expected";
          }
          if (!self.isString(value.value)) {
            return "value: string expected";
          }
          if (null != value.target && value.hasOwnProperty("target")) {
            if (!Array.isArray(value.target)) {
              return "target: array expected";
            }
            var i = 0;
            for (; i < value.target.length; ++i) {
              if (!self.isString(value.target[i])) {
                return "target: string[] expected";
              }
            }
          }
          return null;
        }, Options.fromObject = function (obj) {
          if (obj instanceof window.ModifyUserSettingReq) {
            return obj;
          }
          var node = new window.ModifyUserSettingReq;
          if (null != obj.scope && (node.scope = 0 | obj.scope), null != obj.key && (node.key = String(obj.key)), null != obj.value && (node.value = String(obj.value)), obj.target) {
            if (!Array.isArray(obj.target)) {
              throw TypeError(".ModifyUserSettingReq.target: array expected");
            }
            node.target = [];
            var i = 0;
            for (; i < obj.target.length; ++i) {
              node.target[i] = String(obj.target[i]);
            }
          }
          return node;
        }, Options.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var o = {};
          if ((options.arrays || options.defaults) && (o.target = []), options.defaults && (o.scope = 0, o.key = "", o.value = ""), null != data.scope && data.hasOwnProperty("scope") && (o.scope = data.scope), null != data.key && data.hasOwnProperty("key") && (o.key = data.key), null != data.value && data.hasOwnProperty("value") && (o.value = data.value), data.target && data.target.length) {
            o.target = [];
            var i = 0;
            for (; i < data.target.length; ++i) {
              o.target[i] = data.target[i];
            }
          }
          return o;
        }, Options.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Options;
      }();
      window.Version = function () {
        function Info(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Info.prototype.version = self.Long ? self.Long.fromBits(0, 0, false) : 0, Info.create = function (obj) {
          return new Info(obj);
        }, Info.encode = function (target, message) {
          return message || (message = $Writer.create()), message.uint32(8).int64(target.version), message;
        }, Info.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Info.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.Version;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.version = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("version")) {
            throw self.ProtocolError("missing required 'version'", {
              instance: message
            });
          }
          return message;
        }, Info.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Info.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.version) || data.version && self.isInteger(data.version.low) && self.isInteger(data.version.high) ? null : "version: integer|Long expected";
        }, Info.fromObject = function (object) {
          if (object instanceof window.Version) {
            return object;
          }
          var config = new window.Version;
          return null != object.version && (self.Long ? (config.version = self.Long.fromValue(object.version)).unsigned = false : "string" == typeof object.version ? config.version = parseInt(object.version, 10) : "number" == typeof object.version ? config.version = object.version : "object" === (0, _deepAssign2.default)(object.version) && (config.version = (new self.LongBits(object.version.low >>> 0, object.version.high >>> 0)).toNumber())), config;
        }, Info.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var Riloadr = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              Riloadr.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              Riloadr.version = options.longs === String ? "0" : 0;
            }
          }
          return null != message.version && message.hasOwnProperty("version") && ("number" == typeof message.version ? Riloadr.version = options.longs === String ? String(message.version) : message.version : Riloadr.version = options.longs === String ? self.Long.prototype.toString.call(message.version) : options.longs === Number ? (new self.LongBits(message.version.low >>> 0, message.version.high >>> 0)).toNumber() : message.version), Riloadr;
        }, Info.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Info;
      }();
      window.GetUserSettingResult = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.UserSettingEntry.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.GetUserSettingResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.UserSettingEntry.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.UserSettingEntry.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetUserSettingResult) {
            return obj;
          }
          var dict = new window.GetUserSettingResult;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".GetUserSettingResult.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".GetUserSettingResult.entry: object expected");
              }
              dict.entry[i] = window.UserSettingEntry.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.UserSettingEntry.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.Friend = function () {
        function model(obj) {
          if (obj) {
            var props = (0, _noframeworkWaypoints2.default)(obj);
            var i = 0;
            for (; i < props.length; ++i) {
              if (null != obj[props[i]]) {
                this[props[i]] = obj[props[i]];
              }
            }
          }
        }
        return model.prototype.uid = "", model.prototype.state = 0, model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.alias = "", model.prototype.blacked = 0, model.prototype.extra = "", model.create = function (value) {
          return new model(value);
        }, model.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.uid), target.uint32(16).int32(args.state), target.uint32(24).int64(args.updateDt), null != args.alias && args.hasOwnProperty("alias") && target.uint32(34).string(args.alias), null != args.blacked && args.hasOwnProperty("blacked") && target.uint32(40).int32(args.blacked), null != args.extra && args.hasOwnProperty("extra") && target.uint32(50).string(args.extra), target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var object = new window.Friend;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                object.uid = data.string();
                break;
              case 2:
                object.state = data.int32();
                break;
              case 3:
                object.updateDt = data.int64();
                break;
              case 4:
                object.alias = data.string();
                break;
              case 5:
                object.blacked = data.int32();
                break;
              case 6:
                object.extra = data.string();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!object.hasOwnProperty("uid")) {
            throw self.ProtocolError("missing required 'uid'", {
              instance: object
            });
          }
          if (!object.hasOwnProperty("state")) {
            throw self.ProtocolError("missing required 'state'", {
              instance: object
            });
          }
          if (!object.hasOwnProperty("updateDt")) {
            throw self.ProtocolError("missing required 'updateDt'", {
              instance: object
            });
          }
          return object;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.uid) ? self.isInteger(data.state) ? self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high) ? null != data.alias && data.hasOwnProperty("alias") && !self.isString(data.alias) ? "alias: string expected" : null != data.blacked && data.hasOwnProperty("blacked") && !self.isInteger(data.blacked) ?
            "blacked: integer expected" : null != data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra) ? "extra: string expected" : null : "updateDt: integer|Long expected" : "state: integer expected" : "uid: string expected";
        }, model.fromObject = function (object) {
          if (object instanceof window.Friend) {
            return object;
          }
          var data = new window.Friend;
          return null != object.uid && (data.uid = String(object.uid)), null != object.state && (data.state = 0 | object.state), null != object.updateDt && (self.Long ? (data.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? data.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? data.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) && (data.updateDt = (new self.LongBits(object.updateDt.low >>>
            0, object.updateDt.high >>> 0)).toNumber())), null != object.alias && (data.alias = String(object.alias)), null != object.blacked && (data.blacked = 0 | object.blacked), null != object.extra && (data.extra = String(object.extra)), data;
        }, model.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if (options.defaults) {
            if ($scope.uid = "", $scope.state = 0, self.Long) {
              var long = new self.Long(0, 0, false);
              $scope.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              $scope.updateDt = options.longs === String ? "0" : 0;
            }
            $scope.alias = "";
            $scope.blacked = 0;
            $scope.extra = "";
          }
          return null != data.uid && data.hasOwnProperty("uid") && ($scope.uid = data.uid), null != data.state && data.hasOwnProperty("state") && ($scope.state = data.state), null != data.updateDt && data.hasOwnProperty("updateDt") && ("number" == typeof data.updateDt ? $scope.updateDt = options.longs === String ? String(data.updateDt) : data.updateDt : $scope.updateDt = options.longs === String ? self.Long.prototype.toString.call(data.updateDt) : options.longs === Number ? (new self.LongBits(data.updateDt.low >>>
            0, data.updateDt.high >>> 0)).toNumber() : data.updateDt), null != data.alias && data.hasOwnProperty("alias") && ($scope.alias = data.alias), null != data.blacked && data.hasOwnProperty("blacked") && ($scope.blacked = data.blacked), null != data.extra && data.hasOwnProperty("extra") && ($scope.extra = data.extra), $scope;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.GetFriendsResult = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.Friend.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.GetFriendsResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.Friend.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.Friend.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetFriendsResult) {
            return obj;
          }
          var dict = new window.GetFriendsResult;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".GetFriendsResult.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".GetFriendsResult.entry: object expected");
              }
              dict.entry[i] = window.Friend.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.Friend.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GetFriendRequestResult = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.FriendRequest.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.GetFriendRequestResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.FriendRequest.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.FriendRequest.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetFriendRequestResult) {
            return obj;
          }
          var dict = new window.GetFriendRequestResult;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".GetFriendRequestResult.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".GetFriendRequestResult.entry: object expected");
              }
              dict.entry[i] = window.FriendRequest.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.FriendRequest.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ConnectAckPayload = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.msgHead = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.friendHead = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.friendRqHead = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.settingHead = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.nodeAddr = "", Error.prototype.nodePort = 0, Error.prototype.serverTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.nodeId = "", Error.prototype.recvHead =
          self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.readHead = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
            return new Error(value);
          }, Error.encode = function (data, target) {
            return target || (target = $Writer.create()), null != data.msgHead && data.hasOwnProperty("msgHead") && target.uint32(8).int64(data.msgHead), null != data.friendHead && data.hasOwnProperty("friendHead") && target.uint32(16).int64(data.friendHead), null != data.friendRqHead && data.hasOwnProperty("friendRqHead") && target.uint32(24).int64(data.friendRqHead), null != data.settingHead && data.hasOwnProperty("settingHead") && target.uint32(32).int64(data.settingHead), null != data.nodeAddr &&
              data.hasOwnProperty("nodeAddr") && target.uint32(42).string(data.nodeAddr), null != data.nodePort && data.hasOwnProperty("nodePort") && target.uint32(48).int32(data.nodePort), null != data.serverTime && data.hasOwnProperty("serverTime") && target.uint32(56).int64(data.serverTime), null != data.nodeId && data.hasOwnProperty("nodeId") && target.uint32(66).string(data.nodeId), null != data.recvHead && data.hasOwnProperty("recvHead") && target.uint32(72).int64(data.recvHead), null != data.readHead &&
              data.hasOwnProperty("readHead") && target.uint32(80).int64(data.readHead), target;
          }, Error.encodeDelimited = function (message, writer) {
            return this.encode(message, writer).ldelim();
          }, Error.decode = function (data, i) {
            if (!(data instanceof Buffer)) {
              data = Buffer.create(data);
            }
            var end = void 0 === i ? data.len : data.pos + i;
            var payload = new window.ConnectAckPayload;
            for (; data.pos < end;) {
              var o = data.uint32();
              switch (o >>> 3) {
                case 1:
                  payload.msgHead = data.int64();
                  break;
                case 2:
                  payload.friendHead = data.int64();
                  break;
                case 3:
                  payload.friendRqHead = data.int64();
                  break;
                case 4:
                  payload.settingHead = data.int64();
                  break;
                case 5:
                  payload.nodeAddr = data.string();
                  break;
                case 6:
                  payload.nodePort = data.int32();
                  break;
                case 7:
                  payload.serverTime = data.int64();
                  break;
                case 8:
                  payload.nodeId = data.string();
                  break;
                case 9:
                  payload.recvHead = data.int64();
                  break;
                case 10:
                  payload.readHead = data.int64();
                  break;
                default:
                  data.skipType(7 & o);
              }
            }
            return payload;
          }, Error.decodeDelimited = function (data) {
            return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
          }, Error.verify = function (data) {
            return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : null != data.msgHead && data.hasOwnProperty("msgHead") && !(self.isInteger(data.msgHead) || data.msgHead && self.isInteger(data.msgHead.low) && self.isInteger(data.msgHead.high)) ? "msgHead: integer|Long expected" : null != data.friendHead && data.hasOwnProperty("friendHead") && !(self.isInteger(data.friendHead) || data.friendHead && self.isInteger(data.friendHead.low) &&
              self.isInteger(data.friendHead.high)) ? "friendHead: integer|Long expected" : null != data.friendRqHead && data.hasOwnProperty("friendRqHead") && !(self.isInteger(data.friendRqHead) || data.friendRqHead && self.isInteger(data.friendRqHead.low) && self.isInteger(data.friendRqHead.high)) ? "friendRqHead: integer|Long expected" : null != data.settingHead && data.hasOwnProperty("settingHead") && !(self.isInteger(data.settingHead) || data.settingHead && self.isInteger(data.settingHead.low) &&
                self.isInteger(data.settingHead.high)) ? "settingHead: integer|Long expected" : null != data.nodeAddr && data.hasOwnProperty("nodeAddr") && !self.isString(data.nodeAddr) ? "nodeAddr: string expected" : null != data.nodePort && data.hasOwnProperty("nodePort") && !self.isInteger(data.nodePort) ? "nodePort: integer expected" : null != data.serverTime && data.hasOwnProperty("serverTime") && !(self.isInteger(data.serverTime) || data.serverTime && self.isInteger(data.serverTime.low) && self.isInteger(data.serverTime.high)) ?
                  "serverTime: integer|Long expected" : null != data.nodeId && data.hasOwnProperty("nodeId") && !self.isString(data.nodeId) ? "nodeId: string expected" : null != data.recvHead && data.hasOwnProperty("recvHead") && !(self.isInteger(data.recvHead) || data.recvHead && self.isInteger(data.recvHead.low) && self.isInteger(data.recvHead.high)) ? "recvHead: integer|Long expected" : null != data.readHead && data.hasOwnProperty("readHead") && !(self.isInteger(data.readHead) || data.readHead && self.isInteger(data.readHead.low) &&
                    self.isInteger(data.readHead.high)) ? "readHead: integer|Long expected" : null;
          }, Error.fromObject = function (object) {
            if (object instanceof window.ConnectAckPayload) {
              return object;
            }
            var result = new window.ConnectAckPayload;
            return null != object.msgHead && (self.Long ? (result.msgHead = self.Long.fromValue(object.msgHead)).unsigned = false : "string" == typeof object.msgHead ? result.msgHead = parseInt(object.msgHead, 10) : "number" == typeof object.msgHead ? result.msgHead = object.msgHead : "object" === (0, _deepAssign2.default)(object.msgHead) && (result.msgHead = (new self.LongBits(object.msgHead.low >>> 0, object.msgHead.high >>> 0)).toNumber())), null != object.friendHead && (self.Long ? (result.friendHead =
              self.Long.fromValue(object.friendHead)).unsigned = false : "string" == typeof object.friendHead ? result.friendHead = parseInt(object.friendHead, 10) : "number" == typeof object.friendHead ? result.friendHead = object.friendHead : "object" === (0, _deepAssign2.default)(object.friendHead) && (result.friendHead = (new self.LongBits(object.friendHead.low >>> 0, object.friendHead.high >>> 0)).toNumber())), null != object.friendRqHead && (self.Long ? (result.friendRqHead = self.Long.fromValue(object.friendRqHead)).unsigned =
                false : "string" == typeof object.friendRqHead ? result.friendRqHead = parseInt(object.friendRqHead, 10) : "number" == typeof object.friendRqHead ? result.friendRqHead = object.friendRqHead : "object" === (0, _deepAssign2.default)(object.friendRqHead) && (result.friendRqHead = (new self.LongBits(object.friendRqHead.low >>> 0, object.friendRqHead.high >>> 0)).toNumber())), null != object.settingHead && (self.Long ? (result.settingHead = self.Long.fromValue(object.settingHead)).unsigned =
                  false : "string" == typeof object.settingHead ? result.settingHead = parseInt(object.settingHead, 10) : "number" == typeof object.settingHead ? result.settingHead = object.settingHead : "object" === (0, _deepAssign2.default)(object.settingHead) && (result.settingHead = (new self.LongBits(object.settingHead.low >>> 0, object.settingHead.high >>> 0)).toNumber())), null != object.nodeAddr && (result.nodeAddr = String(object.nodeAddr)), null != object.nodePort && (result.nodePort = 0 | object.nodePort),
              null != object.serverTime && (self.Long ? (result.serverTime = self.Long.fromValue(object.serverTime)).unsigned = false : "string" == typeof object.serverTime ? result.serverTime = parseInt(object.serverTime, 10) : "number" == typeof object.serverTime ? result.serverTime = object.serverTime : "object" === (0, _deepAssign2.default)(object.serverTime) && (result.serverTime = (new self.LongBits(object.serverTime.low >>> 0, object.serverTime.high >>> 0)).toNumber())), null != object.nodeId &&
              (result.nodeId = String(object.nodeId)), null != object.recvHead && (self.Long ? (result.recvHead = self.Long.fromValue(object.recvHead)).unsigned = false : "string" == typeof object.recvHead ? result.recvHead = parseInt(object.recvHead, 10) : "number" == typeof object.recvHead ? result.recvHead = object.recvHead : "object" === (0, _deepAssign2.default)(object.recvHead) && (result.recvHead = (new self.LongBits(object.recvHead.low >>> 0, object.recvHead.high >>> 0)).toNumber())), null !=
              object.readHead && (self.Long ? (result.readHead = self.Long.fromValue(object.readHead)).unsigned = false : "string" == typeof object.readHead ? result.readHead = parseInt(object.readHead, 10) : "number" == typeof object.readHead ? result.readHead = object.readHead : "object" === (0, _deepAssign2.default)(object.readHead) && (result.readHead = (new self.LongBits(object.readHead.low >>> 0, object.readHead.high >>> 0)).toNumber())), result;
          }, Error.toObject = function (options, data) {
            if (!data) {
              data = {};
            }
            var node = {};
            if (data.defaults) {
              if (self.Long) {
                var long = new self.Long(0, 0, false);
                node.msgHead = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.msgHead = data.longs === String ? "0" : 0;
              }
              if (self.Long) {
                long = new self.Long(0, 0, false);
                node.friendHead = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.friendHead = data.longs === String ? "0" : 0;
              }
              if (self.Long) {
                long = new self.Long(0, 0, false);
                node.friendRqHead = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.friendRqHead = data.longs === String ? "0" : 0;
              }
              if (self.Long) {
                long = new self.Long(0, 0, false);
                node.settingHead = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.settingHead = data.longs === String ? "0" : 0;
              }
              if (node.nodeAddr = "", node.nodePort = 0, self.Long) {
                long = new self.Long(0, 0, false);
                node.serverTime = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.serverTime = data.longs === String ? "0" : 0;
              }
              if (node.nodeId = "", self.Long) {
                long = new self.Long(0, 0, false);
                node.recvHead = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.recvHead = data.longs === String ? "0" : 0;
              }
              if (self.Long) {
                long = new self.Long(0, 0, false);
                node.readHead = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
              } else {
                node.readHead = data.longs === String ? "0" : 0;
              }
            }
            return null != options.msgHead && options.hasOwnProperty("msgHead") && ("number" == typeof options.msgHead ? node.msgHead = data.longs === String ? String(options.msgHead) : options.msgHead : node.msgHead = data.longs === String ? self.Long.prototype.toString.call(options.msgHead) : data.longs === Number ? (new self.LongBits(options.msgHead.low >>> 0, options.msgHead.high >>> 0)).toNumber() : options.msgHead), null != options.friendHead && options.hasOwnProperty("friendHead") && ("number" ==
              typeof options.friendHead ? node.friendHead = data.longs === String ? String(options.friendHead) : options.friendHead : node.friendHead = data.longs === String ? self.Long.prototype.toString.call(options.friendHead) : data.longs === Number ? (new self.LongBits(options.friendHead.low >>> 0, options.friendHead.high >>> 0)).toNumber() : options.friendHead), null != options.friendRqHead && options.hasOwnProperty("friendRqHead") && ("number" == typeof options.friendRqHead ? node.friendRqHead =
                data.longs === String ? String(options.friendRqHead) : options.friendRqHead : node.friendRqHead = data.longs === String ? self.Long.prototype.toString.call(options.friendRqHead) : data.longs === Number ? (new self.LongBits(options.friendRqHead.low >>> 0, options.friendRqHead.high >>> 0)).toNumber() : options.friendRqHead), null != options.settingHead && options.hasOwnProperty("settingHead") && ("number" == typeof options.settingHead ? node.settingHead = data.longs === String ? String(options.settingHead) :
                  options.settingHead : node.settingHead = data.longs === String ? self.Long.prototype.toString.call(options.settingHead) : data.longs === Number ? (new self.LongBits(options.settingHead.low >>> 0, options.settingHead.high >>> 0)).toNumber() : options.settingHead), null != options.nodeAddr && options.hasOwnProperty("nodeAddr") && (node.nodeAddr = options.nodeAddr), null != options.nodePort && options.hasOwnProperty("nodePort") && (node.nodePort = options.nodePort), null != options.serverTime &&
                  options.hasOwnProperty("serverTime") && ("number" == typeof options.serverTime ? node.serverTime = data.longs === String ? String(options.serverTime) : options.serverTime : node.serverTime = data.longs === String ? self.Long.prototype.toString.call(options.serverTime) : data.longs === Number ? (new self.LongBits(options.serverTime.low >>> 0, options.serverTime.high >>> 0)).toNumber() : options.serverTime), null != options.nodeId && options.hasOwnProperty("nodeId") && (node.nodeId = options.nodeId),
              null != options.recvHead && options.hasOwnProperty("recvHead") && ("number" == typeof options.recvHead ? node.recvHead = data.longs === String ? String(options.recvHead) : options.recvHead : node.recvHead = data.longs === String ? self.Long.prototype.toString.call(options.recvHead) : data.longs === Number ? (new self.LongBits(options.recvHead.low >>> 0, options.recvHead.high >>> 0)).toNumber() : options.recvHead), null != options.readHead && options.hasOwnProperty("readHead") && ("number" ==
                typeof options.readHead ? node.readHead = data.longs === String ? String(options.readHead) : options.readHead : node.readHead = data.longs === String ? self.Long.prototype.toString.call(options.readHead) : data.longs === Number ? (new self.LongBits(options.readHead.low >>> 0, options.readHead.high >>> 0)).toNumber() : options.readHead), node;
          }, Error.prototype.toJSON = function () {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          }, Error;
      }();
      window.IMHttpWrapper = function () {
        function Site(cat) {
          if (cat) {
            var keys = (0, _noframeworkWaypoints2.default)(cat);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != cat[keys[i]]) {
                this[keys[i]] = cat[keys[i]];
              }
            }
          }
        }
        return Site.prototype.token = "", Site.prototype.clientId = "", Site.prototype.request = "", Site.prototype.data = self.newBuffer([]), Site.create = function (obj) {
          return new Site(obj);
        }, Site.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.token), target.uint32(18).string(data.clientId), target.uint32(26).string(data.request), null != data.data && data.hasOwnProperty("data") && target.uint32(34).bytes(data.data), target;
        }, Site.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Site.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var model = new window.IMHttpWrapper;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                model.token = s.string();
                break;
              case 2:
                model.clientId = s.string();
                break;
              case 3:
                model.request = s.string();
                break;
              case 4:
                model.data = s.bytes();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!model.hasOwnProperty("token")) {
            throw self.ProtocolError("missing required 'token'", {
              instance: model
            });
          }
          if (!model.hasOwnProperty("clientId")) {
            throw self.ProtocolError("missing required 'clientId'", {
              instance: model
            });
          }
          if (!model.hasOwnProperty("request")) {
            throw self.ProtocolError("missing required 'request'", {
              instance: model
            });
          }
          return model;
        }, Site.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Site.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.token) ? self.isString(value.clientId) ? self.isString(value.request) ? null != value.data && value.hasOwnProperty("data") && !(value.data && "number" == typeof value.data.length || self.isString(value.data)) ? "data: buffer expected" : null : "request: string expected" : "clientId: string expected" : "token: string expected";
        }, Site.fromObject = function (object) {
          if (object instanceof window.IMHttpWrapper) {
            return object;
          }
          var data = new window.IMHttpWrapper;
          return null != object.token && (data.token = String(object.token)), null != object.clientId && (data.clientId = String(object.clientId)), null != object.request && (data.request = String(object.request)), null != object.data && ("string" == typeof object.data ? self.base64.decode(object.data, data.data = self.newBuffer(self.base64.length(object.data)), 0) : object.data.length && (data.data = object.data)), data;
        }, Site.toObject = function (options, params) {
          if (!params) {
            params = {};
          }
          var opts = {};
          return params.defaults && (opts.token = "", opts.clientId = "", opts.request = "", params.bytes === String ? opts.data = "" : (opts.data = [], params.bytes !== Array && (opts.data = self.newBuffer(opts.data)))), null != options.token && options.hasOwnProperty("token") && (opts.token = options.token), null != options.clientId && options.hasOwnProperty("clientId") && (opts.clientId = options.clientId), null != options.request && options.hasOwnProperty("request") && (opts.request = options.request),
            null != options.data && options.hasOwnProperty("data") && (opts.data = params.bytes === String ? self.base64.encode(options.data, 0, options.data.length) : params.bytes === Array ? Array.prototype.slice.call(options.data) : options.data), opts;
        }, Site.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Site;
      }();
      window.SearchUserRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.keyword = "", Error.prototype.fuzzy = 0, Error.prototype.page = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (options, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(options.keyword), null != options.fuzzy && options.hasOwnProperty("fuzzy") && writer.uint32(16).int32(options.fuzzy), null != options.page && options.hasOwnProperty("page") && writer.uint32(24).int32(options.page), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var s = new window.SearchUserRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                s.keyword = data.string();
                break;
              case 2:
                s.fuzzy = data.int32();
                break;
              case 3:
                s.page = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!s.hasOwnProperty("keyword")) {
            throw self.ProtocolError("missing required 'keyword'", {
              instance: s
            });
          }
          return s;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (options) {
          return "object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options ? "object expected" : self.isString(options.keyword) ? null != options.fuzzy && options.hasOwnProperty("fuzzy") && !self.isInteger(options.fuzzy) ? "fuzzy: integer expected" : null != options.page && options.hasOwnProperty("page") && !self.isInteger(options.page) ? "page: integer expected" : null : "keyword: string expected";
        }, Error.fromObject = function (val) {
          if (val instanceof window.SearchUserRequest) {
            return val;
          }
          var result = new window.SearchUserRequest;
          return null != val.keyword && (result.keyword = String(val.keyword)), null != val.fuzzy && (result.fuzzy = 0 | val.fuzzy), null != val.page && (result.page = 0 | val.page), result;
        }, Error.toObject = function (options, args) {
          if (!args) {
            args = {};
          }
          var query = {};
          return args.defaults && (query.keyword = "", query.fuzzy = 0, query.page = 0), null != options.keyword && options.hasOwnProperty("keyword") && (query.keyword = options.keyword), null != options.fuzzy && options.hasOwnProperty("fuzzy") && (query.fuzzy = options.fuzzy), null != options.page && options.hasOwnProperty("page") && (query.page = options.page), query;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.SearchUserResult = function () {
        function Error(props) {
          if (this.entry = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.entry = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.entry && value.entry.length) {
            var i = 0;
            for (; i < value.entry.length; ++i) {
              window.User.encode(value.entry[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.SearchUserResult;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.entry && json.entry.length)) {
                  json.entry = [];
                }
                json.entry.push(window.User.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.entry && value.hasOwnProperty("entry")) {
            if (!Array.isArray(value.entry)) {
              return "entry: array expected";
            }
            var i = 0;
            for (; i < value.entry.length; ++i) {
              var r = window.User.verify(value.entry[i]);
              if (r) {
                return "entry." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.SearchUserResult) {
            return obj;
          }
          var dict = new window.SearchUserResult;
          if (obj.entry) {
            if (!Array.isArray(obj.entry)) {
              throw TypeError(".SearchUserResult.entry: array expected");
            }
            dict.entry = [];
            var i = 0;
            for (; i < obj.entry.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.entry[i])) {
                throw TypeError(".SearchUserResult.entry: object expected");
              }
              dict.entry[i] = window.User.fromObject(obj.entry[i]);
            }
          }
          return dict;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.entry = []), message.entry && message.entry.length) {
            ret.entry = [];
            var key = 0;
            for (; key < message.entry.length; ++key) {
              ret.entry[key] = window.User.toObject(message.entry[key], options);
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GetChatroomInfoRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.chatroomId = "", Error.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.chatroomId), null != data.updateDt && data.hasOwnProperty("updateDt") && target.uint32(16).int64(data.updateDt), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.GetChatroomInfoRequest;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.chatroomId = options.string();
                break;
              case 2:
                message.updateDt = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("chatroomId")) {
            throw self.ProtocolError("missing required 'chatroomId'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.chatroomId) ? null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" : null : "chatroomId: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.GetChatroomInfoRequest) {
            return object;
          }
          var message = new window.GetChatroomInfoRequest;
          return null != object.chatroomId && (message.chatroomId = String(object.chatroomId)), null != object.updateDt && (self.Long ? (message.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? message.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? message.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) && (message.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>>
            0)).toNumber())), message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var step = {};
          if (options.defaults) {
            if (step.chatroomId = "", self.Long) {
              var long = new self.Long(0, 0, false);
              step.updateDt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              step.updateDt = options.longs === String ? "0" : 0;
            }
          }
          return null != message.chatroomId && message.hasOwnProperty("chatroomId") && (step.chatroomId = message.chatroomId), null != message.updateDt && message.hasOwnProperty("updateDt") && ("number" == typeof message.updateDt ? step.updateDt = options.longs === String ? String(message.updateDt) : message.updateDt : step.updateDt = options.longs === String ? self.Long.prototype.toString.call(message.updateDt) : options.longs === Number ? (new self.LongBits(message.updateDt.low >>> 0, message.updateDt.high >>>
            0)).toNumber() : message.updateDt), step;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ChatroomInfo = function () {
        function model(params) {
          if (params) {
            var _keys = (0, _noframeworkWaypoints2.default)(params);
            var i = 0;
            for (; i < _keys.length; ++i) {
              if (null != params[_keys[i]]) {
                this[_keys[i]] = params[_keys[i]];
              }
            }
          }
        }
        return model.prototype.title = "", model.prototype.desc = "", model.prototype.portrait = "", model.prototype.memberCount = 0, model.prototype.createDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.updateDt = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.extra = "", model.prototype.state = 0, model.create = function (value) {
          return new model(value);
        }, model.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.title), null != args.desc && args.hasOwnProperty("desc") && target.uint32(18).string(args.desc), null != args.portrait && args.hasOwnProperty("portrait") && target.uint32(26).string(args.portrait), null != args.memberCount && args.hasOwnProperty("memberCount") && target.uint32(32).int32(args.memberCount), null != args.createDt && args.hasOwnProperty("createDt") && target.uint32(40).int64(args.createDt), null !=
            args.updateDt && args.hasOwnProperty("updateDt") && target.uint32(48).int64(args.updateDt), null != args.extra && args.hasOwnProperty("extra") && target.uint32(58).string(args.extra), null != args.state && args.hasOwnProperty("state") && target.uint32(64).int32(args.state), target;
        }, model.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, model.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var page = new window.ChatroomInfo;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                page.title = data.string();
                break;
              case 2:
                page.desc = data.string();
                break;
              case 3:
                page.portrait = data.string();
                break;
              case 4:
                page.memberCount = data.int32();
                break;
              case 5:
                page.createDt = data.int64();
                break;
              case 6:
                page.updateDt = data.int64();
                break;
              case 7:
                page.extra = data.string();
                break;
              case 8:
                page.state = data.int32();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!page.hasOwnProperty("title")) {
            throw self.ProtocolError("missing required 'title'", {
              instance: page
            });
          }
          return page;
        }, model.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, model.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.title) ? null != data.desc && data.hasOwnProperty("desc") && !self.isString(data.desc) ? "desc: string expected" : null != data.portrait && data.hasOwnProperty("portrait") && !self.isString(data.portrait) ? "portrait: string expected" : null != data.memberCount && data.hasOwnProperty("memberCount") && !self.isInteger(data.memberCount) ? "memberCount: integer expected" :
            null != data.createDt && data.hasOwnProperty("createDt") && !(self.isInteger(data.createDt) || data.createDt && self.isInteger(data.createDt.low) && self.isInteger(data.createDt.high)) ? "createDt: integer|Long expected" : null != data.updateDt && data.hasOwnProperty("updateDt") && !(self.isInteger(data.updateDt) || data.updateDt && self.isInteger(data.updateDt.low) && self.isInteger(data.updateDt.high)) ? "updateDt: integer|Long expected" : null != data.extra && data.hasOwnProperty("extra") &&
              !self.isString(data.extra) ? "extra: string expected" : null != data.state && data.hasOwnProperty("state") && !self.isInteger(data.state) ? "state: integer expected" : null : "title: string expected";
        }, model.fromObject = function (object) {
          if (object instanceof window.ChatroomInfo) {
            return object;
          }
          var item = new window.ChatroomInfo;
          return null != object.title && (item.title = String(object.title)), null != object.desc && (item.desc = String(object.desc)), null != object.portrait && (item.portrait = String(object.portrait)), null != object.memberCount && (item.memberCount = 0 | object.memberCount), null != object.createDt && (self.Long ? (item.createDt = self.Long.fromValue(object.createDt)).unsigned = false : "string" == typeof object.createDt ? item.createDt = parseInt(object.createDt, 10) : "number" == typeof object.createDt ?
            item.createDt = object.createDt : "object" === (0, _deepAssign2.default)(object.createDt) && (item.createDt = (new self.LongBits(object.createDt.low >>> 0, object.createDt.high >>> 0)).toNumber())), null != object.updateDt && (self.Long ? (item.updateDt = self.Long.fromValue(object.updateDt)).unsigned = false : "string" == typeof object.updateDt ? item.updateDt = parseInt(object.updateDt, 10) : "number" == typeof object.updateDt ? item.updateDt = object.updateDt : "object" === (0, _deepAssign2.default)(object.updateDt) &&
              (item.updateDt = (new self.LongBits(object.updateDt.low >>> 0, object.updateDt.high >>> 0)).toNumber())), null != object.extra && (item.extra = String(object.extra)), null != object.state && (item.state = 0 | object.state), item;
        }, model.toObject = function (options, data) {
          if (!data) {
            data = {};
          }
          var item = {};
          if (data.defaults) {
            if (item.title = "", item.desc = "", item.portrait = "", item.memberCount = 0, self.Long) {
              var long = new self.Long(0, 0, false);
              item.createDt = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
            } else {
              item.createDt = data.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              item.updateDt = data.longs === String ? long.toString() : data.longs === Number ? long.toNumber() : long;
            } else {
              item.updateDt = data.longs === String ? "0" : 0;
            }
            item.extra = "";
            item.state = 0;
          }
          return null != options.title && options.hasOwnProperty("title") && (item.title = options.title), null != options.desc && options.hasOwnProperty("desc") && (item.desc = options.desc), null != options.portrait && options.hasOwnProperty("portrait") && (item.portrait = options.portrait), null != options.memberCount && options.hasOwnProperty("memberCount") && (item.memberCount = options.memberCount), null != options.createDt && options.hasOwnProperty("createDt") && ("number" == typeof options.createDt ?
            item.createDt = data.longs === String ? String(options.createDt) : options.createDt : item.createDt = data.longs === String ? self.Long.prototype.toString.call(options.createDt) : data.longs === Number ? (new self.LongBits(options.createDt.low >>> 0, options.createDt.high >>> 0)).toNumber() : options.createDt), null != options.updateDt && options.hasOwnProperty("updateDt") && ("number" == typeof options.updateDt ? item.updateDt = data.longs === String ? String(options.updateDt) : options.updateDt :
              item.updateDt = data.longs === String ? self.Long.prototype.toString.call(options.updateDt) : data.longs === Number ? (new self.LongBits(options.updateDt.low >>> 0, options.updateDt.high >>> 0)).toNumber() : options.updateDt), null != options.extra && options.hasOwnProperty("extra") && (item.extra = options.extra), null != options.state && options.hasOwnProperty("state") && (item.state = options.state), item;
        }, model.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, model;
      }();
      window.GetChatroomMemberInfoRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.chatroomId = "", Error.prototype.maxCount = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.chatroomId), null != data.maxCount && data.hasOwnProperty("maxCount") && target.uint32(16).int32(data.maxCount), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.GetChatroomMemberInfoRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.chatroomId = data.string();
                break;
              case 2:
                obj.maxCount = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("chatroomId")) {
            throw self.ProtocolError("missing required 'chatroomId'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.chatroomId) ? null != value.maxCount && value.hasOwnProperty("maxCount") && !self.isInteger(value.maxCount) ? "maxCount: integer expected" : null : "chatroomId: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.GetChatroomMemberInfoRequest) {
            return obj;
          }
          var cursor = new window.GetChatroomMemberInfoRequest;
          return null != obj.chatroomId && (cursor.chatroomId = String(obj.chatroomId)), null != obj.maxCount && (cursor.maxCount = 0 | obj.maxCount), cursor;
        }, Error.toObject = function (obj, options) {
          if (!options) {
            options = {};
          }
          var self = {};
          return options.defaults && (self.chatroomId = "", self.maxCount = 0), null != obj.chatroomId && obj.hasOwnProperty("chatroomId") && (self.chatroomId = obj.chatroomId), null != obj.maxCount && obj.hasOwnProperty("maxCount") && (self.maxCount = obj.maxCount), self;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ChatroomMemberInfo = function () {
        function Error(props) {
          if (this.members = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.memberCount = 0, Error.prototype.members = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, value) {
          if (value || (value = $Writer.create()), null != args.memberCount && args.hasOwnProperty("memberCount") && value.uint32(8).int32(args.memberCount), null != args.members && args.members.length) {
            var i = 0;
            for (; i < args.members.length; ++i) {
              value.uint32(18).string(args.members[i]);
            }
          }
          return value;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var a = new window.ChatroomMemberInfo;
          for (; data.pos < end;) {
            var that = data.uint32();
            switch (that >>> 3) {
              case 1:
                a.memberCount = data.int32();
                break;
              case 2:
                if (!(a.members && a.members.length)) {
                  a.members = [];
                }
                a.members.push(data.string());
                break;
              default:
                data.skipType(7 & that);
            }
          }
          return a;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (null != value.memberCount && value.hasOwnProperty("memberCount") && !self.isInteger(value.memberCount)) {
            return "memberCount: integer expected";
          }
          if (null != value.members && value.hasOwnProperty("members")) {
            if (!Array.isArray(value.members)) {
              return "members: array expected";
            }
            var index = 0;
            for (; index < value.members.length; ++index) {
              if (!self.isString(value.members[index])) {
                return "members: string[] expected";
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.ChatroomMemberInfo) {
            return object;
          }
          var b = new window.ChatroomMemberInfo;
          if (null != object.memberCount && (b.memberCount = 0 | object.memberCount), object.members) {
            if (!Array.isArray(object.members)) {
              throw TypeError(".ChatroomMemberInfo.members: array expected");
            }
            b.members = [];
            var i = 0;
            for (; i < object.members.length; ++i) {
              b.members[i] = String(object.members[i]);
            }
          }
          return b;
        }, Error.toObject = function (group, options) {
          if (!options) {
            options = {};
          }
          var item = {};
          if ((options.arrays || options.defaults) && (item.members = []), options.defaults && (item.memberCount = 0), null != group.memberCount && group.hasOwnProperty("memberCount") && (item.memberCount = group.memberCount), group.members && group.members.length) {
            item.members = [];
            var i = 0;
            for (; i < group.members.length; ++i) {
              item.members[i] = group.members[i];
            }
          }
          return item;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.INT64Buf = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.id = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (target, message) {
          return message || (message = $Writer.create()), message.uint32(8).int64(target.id), message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var t = new window.INT64Buf;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                t.id = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!t.hasOwnProperty("id")) {
            throw self.ProtocolError("missing required 'id'", {
              instance: t
            });
          }
          return t;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.id) || data.id && self.isInteger(data.id.low) && self.isInteger(data.id.high) ? null : "id: integer|Long expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.INT64Buf) {
            return object;
          }
          var sprite = new window.INT64Buf;
          return null != object.id && (self.Long ? (sprite.id = self.Long.fromValue(object.id)).unsigned = false : "string" == typeof object.id ? sprite.id = parseInt(object.id, 10) : "number" == typeof object.id ? sprite.id = object.id : "object" === (0, _deepAssign2.default)(object.id) && (sprite.id = (new self.LongBits(object.id.low >>> 0, object.id.high >>> 0)).toNumber())), sprite;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var wunderlist_list = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              wunderlist_list.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              wunderlist_list.id = options.longs === String ? "0" : 0;
            }
          }
          return null != message.id && message.hasOwnProperty("id") && ("number" == typeof message.id ? wunderlist_list.id = options.longs === String ? String(message.id) : message.id : wunderlist_list.id = options.longs === String ? self.Long.prototype.toString.call(message.id) : options.longs === Number ? (new self.LongBits(message.id.low >>> 0, message.id.high >>> 0)).toNumber() : message.id), wunderlist_list;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.NotifyRecallMessage = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.id = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.fromUser = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(8).int64(message.id), writer.uint32(18).string(message.fromUser), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.NotifyRecallMessage;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.id = options.int64();
                break;
              case 2:
                message.fromUser = options.string();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("id")) {
            throw self.ProtocolError("missing required 'id'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.id) || data.id && self.isInteger(data.id.low) && self.isInteger(data.id.high) ? self.isString(data.fromUser) ? null : "fromUser: string expected" : "id: integer|Long expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.NotifyRecallMessage) {
            return object;
          }
          var message = new window.NotifyRecallMessage;
          return null != object.id && (self.Long ? (message.id = self.Long.fromValue(object.id)).unsigned = false : "string" == typeof object.id ? message.id = parseInt(object.id, 10) : "number" == typeof object.id ? message.id = object.id : "object" === (0, _deepAssign2.default)(object.id) && (message.id = (new self.LongBits(object.id.low >>> 0, object.id.high >>> 0)).toNumber())), null != object.fromUser && (message.fromUser = String(object.fromUser)), message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              data.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.id = options.longs === String ? "0" : 0;
            }
            data.fromUser = "";
          }
          return null != message.id && message.hasOwnProperty("id") && ("number" == typeof message.id ? data.id = options.longs === String ? String(message.id) : message.id : data.id = options.longs === String ? self.Long.prototype.toString.call(message.id) : options.longs === Number ? (new self.LongBits(message.id.low >>> 0, message.id.high >>> 0)).toNumber() : message.id), null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), data;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.BlackUserRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.uid = "", Error.prototype.status = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.uid), target.uint32(16).int32(args.status), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var t = new window.BlackUserRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                t.uid = data.string();
                break;
              case 2:
                t.status = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!t.hasOwnProperty("uid")) {
            throw self.ProtocolError("missing required 'uid'", {
              instance: t
            });
          }
          if (!t.hasOwnProperty("status")) {
            throw self.ProtocolError("missing required 'status'", {
              instance: t
            });
          }
          return t;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.uid) ? self.isInteger(value.status) ? null : "status: integer expected" : "uid: string expected";
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.BlackUserRequest) {
            return obj;
          }
          var cmd = new window.BlackUserRequest;
          return null != obj.uid && (cmd.uid = String(obj.uid)), null != obj.status && (cmd.status = 0 | obj.status), cmd;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var self = {};
          return options.defaults && (self.uid = "", self.status = 0), null != data.uid && data.hasOwnProperty("uid") && (self.uid = data.uid), null != data.status && data.hasOwnProperty("status") && (self.status = data.status), self;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.RouteRequest = function () {
        function data(d) {
          if (d) {
            var r = (0, _noframeworkWaypoints2.default)(d);
            var i = 0;
            for (; i < r.length; ++i) {
              if (null != d[r[i]]) {
                this[r[i]] = d[r[i]];
              }
            }
          }
        }
        return data.prototype.app = "", data.prototype.platform = 0, data.prototype.pushType = 0, data.prototype.deviceName = "", data.prototype.deviceVersion = "", data.prototype.phoneName = "", data.prototype.language = "", data.prototype.carrierName = "", data.prototype.appVersion = "", data.prototype.sdkVersion = "", data.prototype.wxAppId = "", data.prototype.wxAppKey = "", data.prototype.webAppId = "", data.prototype.webAppKey = "", data.prototype.host = "", data.prototype.signature = "", data.create =
          function (value) {
            return new data(value);
          }, data.encode = function (options, writer) {
            return writer || (writer = $Writer.create()), null != options.app && options.hasOwnProperty("app") && writer.uint32(10).string(options.app), null != options.platform && options.hasOwnProperty("platform") && writer.uint32(16).int32(options.platform), null != options.pushType && options.hasOwnProperty("pushType") && writer.uint32(24).int32(options.pushType), null != options.deviceName && options.hasOwnProperty("deviceName") && writer.uint32(34).string(options.deviceName), null != options.deviceVersion &&
              options.hasOwnProperty("deviceVersion") && writer.uint32(42).string(options.deviceVersion), null != options.phoneName && options.hasOwnProperty("phoneName") && writer.uint32(50).string(options.phoneName), null != options.language && options.hasOwnProperty("language") && writer.uint32(58).string(options.language), null != options.carrierName && options.hasOwnProperty("carrierName") && writer.uint32(66).string(options.carrierName), null != options.appVersion && options.hasOwnProperty("appVersion") &&
              writer.uint32(74).string(options.appVersion), null != options.sdkVersion && options.hasOwnProperty("sdkVersion") && writer.uint32(82).string(options.sdkVersion), null != options.wxAppId && options.hasOwnProperty("wxAppId") && writer.uint32(90).string(options.wxAppId), null != options.wxAppKey && options.hasOwnProperty("wxAppKey") && writer.uint32(98).string(options.wxAppKey), null != options.webAppId && options.hasOwnProperty("webAppId") && writer.uint32(106).string(options.webAppId), null !=
              options.webAppKey && options.hasOwnProperty("webAppKey") && writer.uint32(114).string(options.webAppKey), null != options.host && options.hasOwnProperty("host") && writer.uint32(122).string(options.host), null != options.signature && options.hasOwnProperty("signature") && writer.uint32(130).string(options.signature), writer;
          }, data.encodeDelimited = function (message, writer) {
            return this.encode(message, writer).ldelim();
          }, data.decode = function (data, i) {
            if (!(data instanceof Buffer)) {
              data = Buffer.create(data);
            }
            var end = void 0 === i ? data.len : data.pos + i;
            var config = new window.RouteRequest;
            for (; data.pos < end;) {
              var a = data.uint32();
              switch (a >>> 3) {
                case 1:
                  config.app = data.string();
                  break;
                case 2:
                  config.platform = data.int32();
                  break;
                case 3:
                  config.pushType = data.int32();
                  break;
                case 4:
                  config.deviceName = data.string();
                  break;
                case 5:
                  config.deviceVersion = data.string();
                  break;
                case 6:
                  config.phoneName = data.string();
                  break;
                case 7:
                  config.language = data.string();
                  break;
                case 8:
                  config.carrierName = data.string();
                  break;
                case 9:
                  config.appVersion = data.string();
                  break;
                case 10:
                  config.sdkVersion = data.string();
                  break;
                case 11:
                  config.wxAppId = data.string();
                  break;
                case 12:
                  config.wxAppKey = data.string();
                  break;
                case 13:
                  config.webAppId = data.string();
                  break;
                case 14:
                  config.webAppKey = data.string();
                  break;
                case 15:
                  config.host = data.string();
                  break;
                case 16:
                  config.signature = data.string();
                  break;
                default:
                  data.skipType(7 & a);
              }
            }
            return config;
          }, data.decodeDelimited = function (data) {
            return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
          }, data.verify = function (config) {
            return "object" !== (void 0 === config ? "undefined" : (0, _deepAssign2.default)(config)) || null === config ? "object expected" : null != config.app && config.hasOwnProperty("app") && !self.isString(config.app) ? "app: string expected" : null != config.platform && config.hasOwnProperty("platform") && !self.isInteger(config.platform) ? "platform: integer expected" : null != config.pushType && config.hasOwnProperty("pushType") && !self.isInteger(config.pushType) ? "pushType: integer expected" :
              null != config.deviceName && config.hasOwnProperty("deviceName") && !self.isString(config.deviceName) ? "deviceName: string expected" : null != config.deviceVersion && config.hasOwnProperty("deviceVersion") && !self.isString(config.deviceVersion) ? "deviceVersion: string expected" : null != config.phoneName && config.hasOwnProperty("phoneName") && !self.isString(config.phoneName) ? "phoneName: string expected" : null != config.language && config.hasOwnProperty("language") && !self.isString(config.language) ?
                "language: string expected" : null != config.carrierName && config.hasOwnProperty("carrierName") && !self.isString(config.carrierName) ? "carrierName: string expected" : null != config.appVersion && config.hasOwnProperty("appVersion") && !self.isString(config.appVersion) ? "appVersion: string expected" : null != config.sdkVersion && config.hasOwnProperty("sdkVersion") && !self.isString(config.sdkVersion) ? "sdkVersion: string expected" : null != config.wxAppId && config.hasOwnProperty("wxAppId") &&
                  !self.isString(config.wxAppId) ? "wxAppId: string expected" : null != config.wxAppKey && config.hasOwnProperty("wxAppKey") && !self.isString(config.wxAppKey) ? "wxAppKey: string expected" : null != config.webAppId && config.hasOwnProperty("webAppId") && !self.isString(config.webAppId) ? "webAppId: string expected" : null != config.webAppKey && config.hasOwnProperty("webAppKey") && !self.isString(config.webAppKey) ? "webAppKey: string expected" : null != config.host && config.hasOwnProperty("host") &&
                    !self.isString(config.host) ? "host: string expected" : null != config.signature && config.hasOwnProperty("signature") && !self.isString(config.signature) ? "signature: string expected" : null;
          }, data.fromObject = function (data) {
            if (data instanceof window.RouteRequest) {
              return data;
            }
            var config = new window.RouteRequest;
            return null != data.app && (config.app = String(data.app)), null != data.platform && (config.platform = 0 | data.platform), null != data.pushType && (config.pushType = 0 | data.pushType), null != data.deviceName && (config.deviceName = String(data.deviceName)), null != data.deviceVersion && (config.deviceVersion = String(data.deviceVersion)), null != data.phoneName && (config.phoneName = String(data.phoneName)), null != data.language && (config.language = String(data.language)), null !=
              data.carrierName && (config.carrierName = String(data.carrierName)), null != data.appVersion && (config.appVersion = String(data.appVersion)), null != data.sdkVersion && (config.sdkVersion = String(data.sdkVersion)), null != data.wxAppId && (config.wxAppId = String(data.wxAppId)), null != data.wxAppKey && (config.wxAppKey = String(data.wxAppKey)), null != data.webAppId && (config.webAppId = String(data.webAppId)), null != data.webAppKey && (config.webAppKey = String(data.webAppKey)), null !=
              data.host && (config.host = String(data.host)), null != data.signature && (config.signature = String(data.signature)), config;
          }, data.toObject = function (config, args) {
            if (!args) {
              args = {};
            }
            var $scope = {};
            return args.defaults && ($scope.app = "", $scope.platform = 0, $scope.pushType = 0, $scope.deviceName = "", $scope.deviceVersion = "", $scope.phoneName = "", $scope.language = "", $scope.carrierName = "", $scope.appVersion = "", $scope.sdkVersion = "", $scope.wxAppId = "", $scope.wxAppKey = "", $scope.webAppId = "", $scope.webAppKey = "", $scope.host = "", $scope.signature = ""), null != config.app && config.hasOwnProperty("app") && ($scope.app = config.app), null != config.platform &&
              config.hasOwnProperty("platform") && ($scope.platform = config.platform), null != config.pushType && config.hasOwnProperty("pushType") && ($scope.pushType = config.pushType), null != config.deviceName && config.hasOwnProperty("deviceName") && ($scope.deviceName = config.deviceName), null != config.deviceVersion && config.hasOwnProperty("deviceVersion") && ($scope.deviceVersion = config.deviceVersion), null != config.phoneName && config.hasOwnProperty("phoneName") && ($scope.phoneName =
                config.phoneName), null != config.language && config.hasOwnProperty("language") && ($scope.language = config.language), null != config.carrierName && config.hasOwnProperty("carrierName") && ($scope.carrierName = config.carrierName), null != config.appVersion && config.hasOwnProperty("appVersion") && ($scope.appVersion = config.appVersion), null != config.sdkVersion && config.hasOwnProperty("sdkVersion") && ($scope.sdkVersion = config.sdkVersion), null != config.wxAppId && config.hasOwnProperty("wxAppId") &&
              ($scope.wxAppId = config.wxAppId), null != config.wxAppKey && config.hasOwnProperty("wxAppKey") && ($scope.wxAppKey = config.wxAppKey), null != config.webAppId && config.hasOwnProperty("webAppId") && ($scope.webAppId = config.webAppId), null != config.webAppKey && config.hasOwnProperty("webAppKey") && ($scope.webAppKey = config.webAppKey), null != config.host && config.hasOwnProperty("host") && ($scope.host = config.host), null != config.signature && config.hasOwnProperty("signature") &&
              ($scope.signature = config.signature), $scope;
          }, data.prototype.toJSON = function () {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          }, data;
      }();
      window.AddressTriple = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.host = "", Error.prototype.longPort = 0, Error.prototype.shortPort = 0, Error.prototype.wssPort = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(args.host), target.uint32(16).int32(args.longPort), target.uint32(24).int32(args.shortPort), null != args.wssPort && args.hasOwnProperty("wssPort") && target.uint32(32).int32(args.wssPort), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.AddressTriple;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                message.host = data.string();
                break;
              case 2:
                message.longPort = data.int32();
                break;
              case 3:
                message.shortPort = data.int32();
                break;
              case 4:
                message.wssPort = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!message.hasOwnProperty("host")) {
            throw self.ProtocolError("missing required 'host'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("longPort")) {
            throw self.ProtocolError("missing required 'longPort'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("shortPort")) {
            throw self.ProtocolError("missing required 'shortPort'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.host) ? self.isInteger(value.longPort) ? self.isInteger(value.shortPort) ? null != value.wssPort && value.hasOwnProperty("wssPort") && !self.isInteger(value.wssPort) ? "wssPort: integer expected" : null : "shortPort: integer expected" : "longPort: integer expected" : "host: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.AddressTriple) {
            return object;
          }
          var config = new window.AddressTriple;
          return null != object.host && (config.host = String(object.host)), null != object.longPort && (config.longPort = 0 | object.longPort), null != object.shortPort && (config.shortPort = 0 | object.shortPort), null != object.wssPort && (config.wssPort = 0 | object.wssPort), config;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var config = {};
          return options.defaults && (config.host = "", config.longPort = 0, config.shortPort = 0, config.wssPort = 0), null != data.host && data.hasOwnProperty("host") && (config.host = data.host), null != data.longPort && data.hasOwnProperty("longPort") && (config.longPort = data.longPort), null != data.shortPort && data.hasOwnProperty("shortPort") && (config.shortPort = data.shortPort), null != data.wssPort && data.hasOwnProperty("wssPort") && (config.wssPort = data.wssPort), config;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.RouteResponse = function () {
        function Error(props) {
          if (this.candidate = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.host = "", Error.prototype.longPort = 0, Error.prototype.shortPort = 0, Error.prototype.thumbPara = "", Error.prototype.node = "", Error.prototype.commercial = 0, Error.prototype.wssPort = 0, Error.prototype.candidate = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.host), writer.uint32(16).int32(message.longPort), writer.uint32(24).int32(message.shortPort), null != message.thumbPara && message.hasOwnProperty("thumbPara") && writer.uint32(34).string(message.thumbPara), null != message.node && message.hasOwnProperty("node") && writer.uint32(42).string(message.node), null != message.commercial && message.hasOwnProperty("commercial") && writer.uint32(48).int32(message.commercial),
            null != message.wssPort && message.hasOwnProperty("wssPort") && writer.uint32(56).int32(message.wssPort), null != message.candidate && message.candidate.length) {
            var k = 0;
            for (; k < message.candidate.length; ++k) {
              window.AddressTriple.encode(message.candidate[k], writer.uint32(66).fork()).ldelim();
            }
          }
          return writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.RouteResponse;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                obj.host = data.string();
                break;
              case 2:
                obj.longPort = data.int32();
                break;
              case 3:
                obj.shortPort = data.int32();
                break;
              case 4:
                obj.thumbPara = data.string();
                break;
              case 5:
                obj.node = data.string();
                break;
              case 6:
                obj.commercial = data.int32();
                break;
              case 7:
                obj.wssPort = data.int32();
                break;
              case 8:
                if (!(obj.candidate && obj.candidate.length)) {
                  obj.candidate = [];
                }
                obj.candidate.push(window.AddressTriple.decode(data, data.uint32()));
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!obj.hasOwnProperty("host")) {
            throw self.ProtocolError("missing required 'host'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("longPort")) {
            throw self.ProtocolError("missing required 'longPort'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("shortPort")) {
            throw self.ProtocolError("missing required 'shortPort'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          if ("object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value) {
            return "object expected";
          }
          if (!self.isString(value.host)) {
            return "host: string expected";
          }
          if (!self.isInteger(value.longPort)) {
            return "longPort: integer expected";
          }
          if (!self.isInteger(value.shortPort)) {
            return "shortPort: integer expected";
          }
          if (null != value.thumbPara && value.hasOwnProperty("thumbPara") && !self.isString(value.thumbPara)) {
            return "thumbPara: string expected";
          }
          if (null != value.node && value.hasOwnProperty("node") && !self.isString(value.node)) {
            return "node: string expected";
          }
          if (null != value.commercial && value.hasOwnProperty("commercial") && !self.isInteger(value.commercial)) {
            return "commercial: integer expected";
          }
          if (null != value.wssPort && value.hasOwnProperty("wssPort") && !self.isInteger(value.wssPort)) {
            return "wssPort: integer expected";
          }
          if (null != value.candidate && value.hasOwnProperty("candidate")) {
            if (!Array.isArray(value.candidate)) {
              return "candidate: array expected";
            }
            var i = 0;
            for (; i < value.candidate.length; ++i) {
              var r = window.AddressTriple.verify(value.candidate[i]);
              if (r) {
                return "candidate." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.RouteResponse) {
            return obj;
          }
          var result = new window.RouteResponse;
          if (null != obj.host && (result.host = String(obj.host)), null != obj.longPort && (result.longPort = 0 | obj.longPort), null != obj.shortPort && (result.shortPort = 0 | obj.shortPort), null != obj.thumbPara && (result.thumbPara = String(obj.thumbPara)), null != obj.node && (result.node = String(obj.node)), null != obj.commercial && (result.commercial = 0 | obj.commercial), null != obj.wssPort && (result.wssPort = 0 | obj.wssPort), obj.candidate) {
            if (!Array.isArray(obj.candidate)) {
              throw TypeError(".RouteResponse.candidate: array expected");
            }
            result.candidate = [];
            var k = 0;
            for (; k < obj.candidate.length; ++k) {
              if ("object" !== (0, _deepAssign2.default)(obj.candidate[k])) {
                throw TypeError(".RouteResponse.candidate: object expected");
              }
              result.candidate[k] = window.AddressTriple.fromObject(obj.candidate[k]);
            }
          }
          return result;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if ((options.arrays || options.defaults) && (result.candidate = []), options.defaults && (result.host = "", result.longPort = 0, result.shortPort = 0, result.thumbPara = "", result.node = "", result.commercial = 0, result.wssPort = 0), null != data.host && data.hasOwnProperty("host") && (result.host = data.host), null != data.longPort && data.hasOwnProperty("longPort") && (result.longPort = data.longPort), null != data.shortPort && data.hasOwnProperty("shortPort") && (result.shortPort =
            data.shortPort), null != data.thumbPara && data.hasOwnProperty("thumbPara") && (result.thumbPara = data.thumbPara), null != data.node && data.hasOwnProperty("node") && (result.node = data.node), null != data.commercial && data.hasOwnProperty("commercial") && (result.commercial = data.commercial), null != data.wssPort && data.hasOwnProperty("wssPort") && (result.wssPort = data.wssPort), data.candidate && data.candidate.length) {
            result.candidate = [];
            var k = 0;
            for (; k < data.candidate.length; ++k) {
              result.candidate[k] = window.AddressTriple.toObject(data.candidate[k], options);
            }
          }
          return result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.GetTokenRequest = function () {
        function Device(properties) {
          if (properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Device.prototype.userId = "", Device.prototype.clientId = "", Device.prototype.platform = 0, Device.create = function (value) {
          return new Device(value);
        }, Device.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.userId), target.uint32(18).string(data.clientId), null != data.platform && data.hasOwnProperty("platform") && target.uint32(24).int32(data.platform), target;
        }, Device.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Device.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var that = new window.GetTokenRequest;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                that.userId = data.string();
                break;
              case 2:
                that.clientId = data.string();
                break;
              case 3:
                that.platform = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!that.hasOwnProperty("userId")) {
            throw self.ProtocolError("missing required 'userId'", {
              instance: that
            });
          }
          if (!that.hasOwnProperty("clientId")) {
            throw self.ProtocolError("missing required 'clientId'", {
              instance: that
            });
          }
          return that;
        }, Device.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Device.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.userId) ? self.isString(value.clientId) ? null != value.platform && value.hasOwnProperty("platform") && !self.isInteger(value.platform) ? "platform: integer expected" : null : "clientId: string expected" : "userId: string expected";
        }, Device.fromObject = function (obj) {
          if (obj instanceof window.GetTokenRequest) {
            return obj;
          }
          var data = new window.GetTokenRequest;
          return null != obj.userId && (data.userId = String(obj.userId)), null != obj.clientId && (data.clientId = String(obj.clientId)), null != obj.platform && (data.platform = 0 | obj.platform), data;
        }, Device.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          return options.defaults && ($scope.userId = "", $scope.clientId = "", $scope.platform = 0), null != data.userId && data.hasOwnProperty("userId") && ($scope.userId = data.userId), null != data.clientId && data.hasOwnProperty("clientId") && ($scope.clientId = data.clientId), null != data.platform && data.hasOwnProperty("platform") && ($scope.platform = data.platform), $scope;
        }, Device.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Device;
      }();
      window.LoadRemoteMessages = function () {
        function Error(props) {
          if (this.contentType = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.conversation = null, Error.prototype.beforeUid = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.count = 0, Error.prototype.contentType = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), window.Conversation.encode(message.conversation, writer.uint32(10).fork()).ldelim(), writer.uint32(16).int64(message.beforeUid), writer.uint32(24).int32(message.count), null != message.contentType && message.contentType.length) {
            var i = 0;
            for (; i < message.contentType.length; ++i) {
              writer.uint32(32).int32(message.contentType[i]);
            }
          }
          return writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.LoadRemoteMessages;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                obj.conversation = window.Conversation.decode(data, data.uint32());
                break;
              case 2:
                obj.beforeUid = data.int64();
                break;
              case 3:
                obj.count = data.int32();
                break;
              case 4:
                if (obj.contentType && obj.contentType.length || (obj.contentType = []), 2 == (7 & o)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    obj.contentType.push(data.int32());
                  }
                } else {
                  obj.contentType.push(data.int32());
                }
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!obj.hasOwnProperty("conversation")) {
            throw self.ProtocolError("missing required 'conversation'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("beforeUid")) {
            throw self.ProtocolError("missing required 'beforeUid'", {
              instance: obj
            });
          }
          if (!obj.hasOwnProperty("count")) {
            throw self.ProtocolError("missing required 'count'", {
              instance: obj
            });
          }
          return obj;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          var t = window.Conversation.verify(data.conversation);
          if (t) {
            return "conversation." + t;
          }
          if (!(self.isInteger(data.beforeUid) || data.beforeUid && self.isInteger(data.beforeUid.low) && self.isInteger(data.beforeUid.high))) {
            return "beforeUid: integer|Long expected";
          }
          if (!self.isInteger(data.count)) {
            return "count: integer expected";
          }
          if (null != data.contentType && data.hasOwnProperty("contentType")) {
            if (!Array.isArray(data.contentType)) {
              return "contentType: array expected";
            }
            var i = 0;
            for (; i < data.contentType.length; ++i) {
              if (!self.isInteger(data.contentType[i])) {
                return "contentType: integer[] expected";
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.LoadRemoteMessages) {
            return object;
          }
          var result = new window.LoadRemoteMessages;
          if (null != object.conversation) {
            if ("object" !== (0, _deepAssign2.default)(object.conversation)) {
              throw TypeError(".LoadRemoteMessages.conversation: object expected");
            }
            result.conversation = window.Conversation.fromObject(object.conversation);
          }
          if (null != object.beforeUid && (self.Long ? (result.beforeUid = self.Long.fromValue(object.beforeUid)).unsigned = false : "string" == typeof object.beforeUid ? result.beforeUid = parseInt(object.beforeUid, 10) : "number" == typeof object.beforeUid ? result.beforeUid = object.beforeUid : "object" === (0, _deepAssign2.default)(object.beforeUid) && (result.beforeUid = (new self.LongBits(object.beforeUid.low >>> 0, object.beforeUid.high >>> 0)).toNumber())), null != object.count && (result.count =
            0 | object.count), object.contentType) {
            if (!Array.isArray(object.contentType)) {
              throw TypeError(".LoadRemoteMessages.contentType: array expected");
            }
            result.contentType = [];
            var i = 0;
            for (; i < object.contentType.length; ++i) {
              result.contentType[i] = 0 | object.contentType[i];
            }
          }
          return result;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.contentType = []), options.defaults) {
            if (data.conversation = null, self.Long) {
              var long = new self.Long(0, 0, false);
              data.beforeUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.beforeUid = options.longs === String ? "0" : 0;
            }
            data.count = 0;
          }
          if (null != message.conversation && message.hasOwnProperty("conversation") && (data.conversation = window.Conversation.toObject(message.conversation, options)), null != message.beforeUid && message.hasOwnProperty("beforeUid") && ("number" == typeof message.beforeUid ? data.beforeUid = options.longs === String ? String(message.beforeUid) : message.beforeUid : data.beforeUid = options.longs === String ? self.Long.prototype.toString.call(message.beforeUid) : options.longs === Number ? (new self.LongBits(message.beforeUid.low >>>
            0, message.beforeUid.high >>> 0)).toNumber() : message.beforeUid), null != message.count && message.hasOwnProperty("count") && (data.count = message.count), message.contentType && message.contentType.length) {
            data.contentType = [];
            var i = 0;
            for (; i < message.contentType.length; ++i) {
              data.contentType[i] = message.contentType[i];
            }
          }
          return data;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.LoadLineMessages = function () {
        function Error(props) {
          if (this.contentType = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.line = 0, Error.prototype.beforeUid = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.count = 0, Error.prototype.contentType = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (args, value) {
          if (value || (value = $Writer.create()), value.uint32(8).int32(args.line), value.uint32(16).int64(args.beforeUid), value.uint32(24).int32(args.count), null != args.contentType && args.contentType.length) {
            var i = 0;
            for (; i < args.contentType.length; ++i) {
              value.uint32(32).int32(args.contentType[i]);
            }
          }
          return value;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var o = new window.LoadLineMessages;
          for (; data.pos < end;) {
            var s = data.uint32();
            switch (s >>> 3) {
              case 1:
                o.line = data.int32();
                break;
              case 2:
                o.beforeUid = data.int64();
                break;
              case 3:
                o.count = data.int32();
                break;
              case 4:
                if (o.contentType && o.contentType.length || (o.contentType = []), 2 == (7 & s)) {
                  var end = data.uint32() + data.pos;
                  for (; data.pos < end;) {
                    o.contentType.push(data.int32());
                  }
                } else {
                  o.contentType.push(data.int32());
                }
                break;
              default:
                data.skipType(7 & s);
            }
          }
          if (!o.hasOwnProperty("line")) {
            throw self.ProtocolError("missing required 'line'", {
              instance: o
            });
          }
          if (!o.hasOwnProperty("beforeUid")) {
            throw self.ProtocolError("missing required 'beforeUid'", {
              instance: o
            });
          }
          if (!o.hasOwnProperty("count")) {
            throw self.ProtocolError("missing required 'count'", {
              instance: o
            });
          }
          return o;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isInteger(data.line)) {
            return "line: integer expected";
          }
          if (!(self.isInteger(data.beforeUid) || data.beforeUid && self.isInteger(data.beforeUid.low) && self.isInteger(data.beforeUid.high))) {
            return "beforeUid: integer|Long expected";
          }
          if (!self.isInteger(data.count)) {
            return "count: integer expected";
          }
          if (null != data.contentType && data.hasOwnProperty("contentType")) {
            if (!Array.isArray(data.contentType)) {
              return "contentType: array expected";
            }
            var i = 0;
            for (; i < data.contentType.length; ++i) {
              if (!self.isInteger(data.contentType[i])) {
                return "contentType: integer[] expected";
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.LoadLineMessages) {
            return object;
          }
          var result = new window.LoadLineMessages;
          if (null != object.line && (result.line = 0 | object.line), null != object.beforeUid && (self.Long ? (result.beforeUid = self.Long.fromValue(object.beforeUid)).unsigned = false : "string" == typeof object.beforeUid ? result.beforeUid = parseInt(object.beforeUid, 10) : "number" == typeof object.beforeUid ? result.beforeUid = object.beforeUid : "object" === (0, _deepAssign2.default)(object.beforeUid) && (result.beforeUid = (new self.LongBits(object.beforeUid.low >>> 0, object.beforeUid.high >>>
            0)).toNumber())), null != object.count && (result.count = 0 | object.count), object.contentType) {
            if (!Array.isArray(object.contentType)) {
              throw TypeError(".LoadLineMessages.contentType: array expected");
            }
            result.contentType = [];
            var i = 0;
            for (; i < object.contentType.length; ++i) {
              result.contentType[i] = 0 | object.contentType[i];
            }
          }
          return result;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var ret = {};
          if ((options.arrays || options.defaults) && (ret.contentType = []), options.defaults) {
            if (ret.line = 0, self.Long) {
              var long = new self.Long(0, 0, false);
              ret.beforeUid = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              ret.beforeUid = options.longs === String ? "0" : 0;
            }
            ret.count = 0;
          }
          if (null != data.line && data.hasOwnProperty("line") && (ret.line = data.line), null != data.beforeUid && data.hasOwnProperty("beforeUid") && ("number" == typeof data.beforeUid ? ret.beforeUid = options.longs === String ? String(data.beforeUid) : data.beforeUid : ret.beforeUid = options.longs === String ? self.Long.prototype.toString.call(data.beforeUid) : options.longs === Number ? (new self.LongBits(data.beforeUid.low >>> 0, data.beforeUid.high >>> 0)).toNumber() : data.beforeUid), null !=
            data.count && data.hasOwnProperty("count") && (ret.count = data.count), data.contentType && data.contentType.length) {
            ret.contentType = [];
            var i = 0;
            for (; i < data.contentType.length; ++i) {
              ret.contentType[i] = data.contentType[i];
            }
          }
          return ret;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.MultiCastMessage = function () {
        function Bookmark(properties) {
          if (this.to = [], properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Bookmark.prototype.fromUser = "", Bookmark.prototype.content = null, Bookmark.prototype.to = self.emptyArray, Bookmark.prototype.line = 0, Bookmark.create = function (value) {
          return new Bookmark(value);
        }, Bookmark.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(10).string(message.fromUser), window.MessageContent.encode(message.content, writer.uint32(18).fork()).ldelim(), null != message.to && message.to.length) {
            var i = 0;
            for (; i < message.to.length; ++i) {
              writer.uint32(26).string(message.to[i]);
            }
          }
          return writer.uint32(32).int32(message.line), writer;
        }, Bookmark.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Bookmark.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.MultiCastMessage;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.fromUser = data.string();
                break;
              case 2:
                message.content = window.MessageContent.decode(data, data.uint32());
                break;
              case 3:
                if (!(message.to && message.to.length)) {
                  message.to = [];
                }
                message.to.push(data.string());
                break;
              case 4:
                message.line = data.int32();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("content")) {
            throw self.ProtocolError("missing required 'content'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("line")) {
            throw self.ProtocolError("missing required 'line'", {
              instance: message
            });
          }
          return message;
        }, Bookmark.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Bookmark.verify = function (config) {
          if ("object" !== (void 0 === config ? "undefined" : (0, _deepAssign2.default)(config)) || null === config) {
            return "object expected";
          }
          if (!self.isString(config.fromUser)) {
            return "fromUser: string expected";
          }
          var t = window.MessageContent.verify(config.content);
          if (t) {
            return "content." + t;
          }
          if (null != config.to && config.hasOwnProperty("to")) {
            if (!Array.isArray(config.to)) {
              return "to: array expected";
            }
            var i = 0;
            for (; i < config.to.length; ++i) {
              if (!self.isString(config.to[i])) {
                return "to: string[] expected";
              }
            }
          }
          return self.isInteger(config.line) ? null : "line: integer expected";
        }, Bookmark.fromObject = function (obj) {
          if (obj instanceof window.MultiCastMessage) {
            return obj;
          }
          var data = new window.MultiCastMessage;
          if (null != obj.fromUser && (data.fromUser = String(obj.fromUser)), null != obj.content) {
            if ("object" !== (0, _deepAssign2.default)(obj.content)) {
              throw TypeError(".MultiCastMessage.content: object expected");
            }
            data.content = window.MessageContent.fromObject(obj.content);
          }
          if (obj.to) {
            if (!Array.isArray(obj.to)) {
              throw TypeError(".MultiCastMessage.to: array expected");
            }
            data.to = [];
            var i = 0;
            for (; i < obj.to.length; ++i) {
              data.to[i] = String(obj.to[i]);
            }
          }
          return null != obj.line && (data.line = 0 | obj.line), data;
        }, Bookmark.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.to = []), options.defaults && (data.fromUser = "", data.content = null, data.line = 0), null != message.fromUser && message.hasOwnProperty("fromUser") && (data.fromUser = message.fromUser), null != message.content && message.hasOwnProperty("content") && (data.content = window.MessageContent.toObject(message.content, options)), message.to && message.to.length) {
            data.to = [];
            var i = 0;
            for (; i < message.to.length; ++i) {
              data.to[i] = message.to[i];
            }
          }
          return null != message.line && message.hasOwnProperty("line") && (data.line = message.line), data;
        }, Bookmark.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Bookmark;
      }();
      window.RecallMultiMessage = function () {
        function Options(defaults) {
          if (this.target = [], defaults) {
            var keys = (0, _noframeworkWaypoints2.default)(defaults);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != defaults[keys[i]]) {
                this[keys[i]] = defaults[keys[i]];
              }
            }
          }
        }
        return Options.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Options.prototype.target = self.emptyArray, Options.create = function (value) {
          return new Options(value);
        }, Options.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), writer.uint32(8).int64(message.messageId), null != message.target && message.target.length) {
            var i = 0;
            for (; i < message.target.length; ++i) {
              writer.uint32(18).string(message.target[i]);
            }
          }
          return writer;
        }, Options.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Options.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.RecallMultiMessage;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.messageId = options.int64();
                break;
              case 2:
                if (!(message.target && message.target.length)) {
                  message.target = [];
                }
                message.target.push(options.string());
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("messageId")) {
            throw self.ProtocolError("missing required 'messageId'", {
              instance: message
            });
          }
          return message;
        }, Options.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Options.verify = function (options) {
          if ("object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options) {
            return "object expected";
          }
          if (!(self.isInteger(options.messageId) || options.messageId && self.isInteger(options.messageId.low) && self.isInteger(options.messageId.high))) {
            return "messageId: integer|Long expected";
          }
          if (null != options.target && options.hasOwnProperty("target")) {
            if (!Array.isArray(options.target)) {
              return "target: array expected";
            }
            var i = 0;
            for (; i < options.target.length; ++i) {
              if (!self.isString(options.target[i])) {
                return "target: string[] expected";
              }
            }
          }
          return null;
        }, Options.fromObject = function (object) {
          if (object instanceof window.RecallMultiMessage) {
            return object;
          }
          var result = new window.RecallMultiMessage;
          if (null != object.messageId && (self.Long ? (result.messageId = self.Long.fromValue(object.messageId)).unsigned = false : "string" == typeof object.messageId ? result.messageId = parseInt(object.messageId, 10) : "number" == typeof object.messageId ? result.messageId = object.messageId : "object" === (0, _deepAssign2.default)(object.messageId) && (result.messageId = (new self.LongBits(object.messageId.low >>> 0, object.messageId.high >>> 0)).toNumber())), object.target) {
            if (!Array.isArray(object.target)) {
              throw TypeError(".RecallMultiMessage.target: array expected");
            }
            result.target = [];
            var i = 0;
            for (; i < object.target.length; ++i) {
              result.target[i] = String(object.target[i]);
            }
          }
          return result;
        }, Options.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var packet = {};
          if ((options.arrays || options.defaults) && (packet.target = []), options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              packet.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              packet.messageId = options.longs === String ? "0" : 0;
            }
          }
          if (null != message.messageId && message.hasOwnProperty("messageId") && ("number" == typeof message.messageId ? packet.messageId = options.longs === String ? String(message.messageId) : message.messageId : packet.messageId = options.longs === String ? self.Long.prototype.toString.call(message.messageId) : options.longs === Number ? (new self.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0)).toNumber() : message.messageId), message.target && message.target.length) {
            packet.target = [];
            var i = 0;
            for (; i < message.target.length; ++i) {
              packet.target[i] = message.target[i];
            }
          }
          return packet;
        }, Options.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Options;
      }();
      window.FileRecord = function () {
        function data(d) {
          if (d) {
            var r = (0, _noframeworkWaypoints2.default)(d);
            var i = 0;
            for (; i < r.length; ++i) {
              if (null != d[r[i]]) {
                this[r[i]] = d[r[i]];
              }
            }
          }
        }
        return data.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, data.prototype.fromUser = "", data.prototype.conversation = null, data.prototype.name = "", data.prototype.url = "", data.prototype.size = 0, data.prototype.downloadCount = 0, data.prototype.dt = self.Long ? self.Long.fromBits(0, 0, false) : 0, data.create = function (value) {
          return new data(value);
        }, data.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(8).int64(message.messageId), writer.uint32(18).string(message.fromUser), null != message.conversation && message.hasOwnProperty("conversation") && window.Conversation.encode(message.conversation, writer.uint32(26).fork()).ldelim(), null != message.name && message.hasOwnProperty("name") && writer.uint32(34).string(message.name), writer.uint32(42).string(message.url), writer.uint32(48).int32(message.size), null != message.downloadCount &&
            message.hasOwnProperty("downloadCount") && writer.uint32(56).int32(message.downloadCount), writer.uint32(64).int64(message.dt), writer;
        }, data.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, data.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.FileRecord;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.messageId = data.int64();
                break;
              case 2:
                message.fromUser = data.string();
                break;
              case 3:
                message.conversation = window.Conversation.decode(data, data.uint32());
                break;
              case 4:
                message.name = data.string();
                break;
              case 5:
                message.url = data.string();
                break;
              case 6:
                message.size = data.int32();
                break;
              case 7:
                message.downloadCount = data.int32();
                break;
              case 8:
                message.dt = data.int64();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("messageId")) {
            throw self.ProtocolError("missing required 'messageId'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("fromUser")) {
            throw self.ProtocolError("missing required 'fromUser'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("url")) {
            throw self.ProtocolError("missing required 'url'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("size")) {
            throw self.ProtocolError("missing required 'size'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("dt")) {
            throw self.ProtocolError("missing required 'dt'", {
              instance: message
            });
          }
          return message;
        }, data.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, data.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!(self.isInteger(data.messageId) || data.messageId && self.isInteger(data.messageId.low) && self.isInteger(data.messageId.high))) {
            return "messageId: integer|Long expected";
          }
          if (!self.isString(data.fromUser)) {
            return "fromUser: string expected";
          }
          if (null != data.conversation && data.hasOwnProperty("conversation")) {
            var t = window.Conversation.verify(data.conversation);
            if (t) {
              return "conversation." + t;
            }
          }
          return null != data.name && data.hasOwnProperty("name") && !self.isString(data.name) ? "name: string expected" : self.isString(data.url) ? self.isInteger(data.size) ? null != data.downloadCount && data.hasOwnProperty("downloadCount") && !self.isInteger(data.downloadCount) ? "downloadCount: integer expected" : self.isInteger(data.dt) || data.dt && self.isInteger(data.dt.low) && self.isInteger(data.dt.high) ? null : "dt: integer|Long expected" : "size: integer expected" : "url: string expected";
        }, data.fromObject = function (data) {
          if (data instanceof window.FileRecord) {
            return data;
          }
          var payload = new window.FileRecord;
          if (null != data.messageId && (self.Long ? (payload.messageId = self.Long.fromValue(data.messageId)).unsigned = false : "string" == typeof data.messageId ? payload.messageId = parseInt(data.messageId, 10) : "number" == typeof data.messageId ? payload.messageId = data.messageId : "object" === (0, _deepAssign2.default)(data.messageId) && (payload.messageId = (new self.LongBits(data.messageId.low >>> 0, data.messageId.high >>> 0)).toNumber())), null != data.fromUser && (payload.fromUser =
            String(data.fromUser)), null != data.conversation) {
            if ("object" !== (0, _deepAssign2.default)(data.conversation)) {
              throw TypeError(".FileRecord.conversation: object expected");
            }
            payload.conversation = window.Conversation.fromObject(data.conversation);
          }
          return null != data.name && (payload.name = String(data.name)), null != data.url && (payload.url = String(data.url)), null != data.size && (payload.size = 0 | data.size), null != data.downloadCount && (payload.downloadCount = 0 | data.downloadCount), null != data.dt && (self.Long ? (payload.dt = self.Long.fromValue(data.dt)).unsigned = false : "string" == typeof data.dt ? payload.dt = parseInt(data.dt, 10) : "number" == typeof data.dt ? payload.dt = data.dt : "object" === (0, _deepAssign2.default)(data.dt) &&
            (payload.dt = (new self.LongBits(data.dt.low >>> 0, data.dt.high >>> 0)).toNumber())), payload;
        }, data.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              data.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.messageId = options.longs === String ? "0" : 0;
            }
            if (data.fromUser = "", data.conversation = null, data.name = "", data.url = "", data.size = 0, data.downloadCount = 0, self.Long) {
              long = new self.Long(0, 0, false);
              data.dt = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              data.dt = options.longs === String ? "0" : 0;
            }
          }
          return null != message.messageId && message.hasOwnProperty("messageId") && ("number" == typeof message.messageId ? data.messageId = options.longs === String ? String(message.messageId) : message.messageId : data.messageId = options.longs === String ? self.Long.prototype.toString.call(message.messageId) : options.longs === Number ? (new self.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0)).toNumber() : message.messageId), null != message.fromUser && message.hasOwnProperty("fromUser") &&
            (data.fromUser = message.fromUser), null != message.conversation && message.hasOwnProperty("conversation") && (data.conversation = window.Conversation.toObject(message.conversation, options)), null != message.name && message.hasOwnProperty("name") && (data.name = message.name), null != message.url && message.hasOwnProperty("url") && (data.url = message.url), null != message.size && message.hasOwnProperty("size") && (data.size = message.size), null != message.downloadCount && message.hasOwnProperty("downloadCount") &&
            (data.downloadCount = message.downloadCount), null != message.dt && message.hasOwnProperty("dt") && ("number" == typeof message.dt ? data.dt = options.longs === String ? String(message.dt) : message.dt : data.dt = options.longs === String ? self.Long.prototype.toString.call(message.dt) : options.longs === Number ? (new self.LongBits(message.dt.low >>> 0, message.dt.high >>> 0)).toNumber() : message.dt), data;
        }, data.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, data;
      }();
      window.LoadFileRecordReq = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.conversation = null, Error.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.count = 0, Error.prototype.from = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), null != message.conversation && message.hasOwnProperty("conversation") && window.Conversation.encode(message.conversation, writer.uint32(10).fork()).ldelim(), writer.uint32(16).int64(message.messageId), writer.uint32(24).int32(message.count), null != message.from && message.hasOwnProperty("from") && writer.uint32(34).string(message.from), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.LoadFileRecordReq;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.conversation = window.Conversation.decode(data, data.uint32());
                break;
              case 2:
                message.messageId = data.int64();
                break;
              case 3:
                message.count = data.int32();
                break;
              case 4:
                message.from = data.string();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("messageId")) {
            throw self.ProtocolError("missing required 'messageId'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("count")) {
            throw self.ProtocolError("missing required 'count'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (null != data.conversation && data.hasOwnProperty("conversation")) {
            var t = window.Conversation.verify(data.conversation);
            if (t) {
              return "conversation." + t;
            }
          }
          return self.isInteger(data.messageId) || data.messageId && self.isInteger(data.messageId.low) && self.isInteger(data.messageId.high) ? self.isInteger(data.count) ? null != data.from && data.hasOwnProperty("from") && !self.isString(data.from) ? "from: string expected" : null : "count: integer expected" : "messageId: integer|Long expected";
        }, Error.fromObject = function (data) {
          if (data instanceof window.LoadFileRecordReq) {
            return data;
          }
          var message = new window.LoadFileRecordReq;
          if (null != data.conversation) {
            if ("object" !== (0, _deepAssign2.default)(data.conversation)) {
              throw TypeError(".LoadFileRecordReq.conversation: object expected");
            }
            message.conversation = window.Conversation.fromObject(data.conversation);
          }
          return null != data.messageId && (self.Long ? (message.messageId = self.Long.fromValue(data.messageId)).unsigned = false : "string" == typeof data.messageId ? message.messageId = parseInt(data.messageId, 10) : "number" == typeof data.messageId ? message.messageId = data.messageId : "object" === (0, _deepAssign2.default)(data.messageId) && (message.messageId = (new self.LongBits(data.messageId.low >>> 0, data.messageId.high >>> 0)).toNumber())), null != data.count && (message.count = 0 |
            data.count), null != data.from && (message.from = String(data.from)), message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var msg = {};
          if (options.defaults) {
            if (msg.conversation = null, self.Long) {
              var long = new self.Long(0, 0, false);
              msg.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              msg.messageId = options.longs === String ? "0" : 0;
            }
            msg.count = 0;
            msg.from = "";
          }
          return null != message.conversation && message.hasOwnProperty("conversation") && (msg.conversation = window.Conversation.toObject(message.conversation, options)), null != message.messageId && message.hasOwnProperty("messageId") && ("number" == typeof message.messageId ? msg.messageId = options.longs === String ? String(message.messageId) : message.messageId : msg.messageId = options.longs === String ? self.Long.prototype.toString.call(message.messageId) : options.longs === Number ? (new self.LongBits(message.messageId.low >>>
            0, message.messageId.high >>> 0)).toNumber() : message.messageId), null != message.count && message.hasOwnProperty("count") && (msg.count = message.count), null != message.from && message.hasOwnProperty("from") && (msg.from = message.from), msg;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.LoadFileRecordRes = function () {
        function Error(props) {
          if (this.record = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.record = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), null != message.record && message.record.length) {
            var j = 0;
            for (; j < message.record.length; ++j) {
              window.FileRecord.encode(message.record[j], writer.uint32(10).fork()).ldelim();
            }
          }
          return writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var self = new window.LoadFileRecordRes;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(self.record && self.record.length)) {
                  self.record = [];
                }
                self.record.push(window.FileRecord.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return self;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (self) {
          if ("object" !== (void 0 === self ? "undefined" : (0, _deepAssign2.default)(self)) || null === self) {
            return "object expected";
          }
          if (null != self.record && self.hasOwnProperty("record")) {
            if (!Array.isArray(self.record)) {
              return "record: array expected";
            }
            var i = 0;
            for (; i < self.record.length; ++i) {
              var r = window.FileRecord.verify(self.record[i]);
              if (r) {
                return "record." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.LoadFileRecordRes) {
            return obj;
          }
          var node = new window.LoadFileRecordRes;
          if (obj.record) {
            if (!Array.isArray(obj.record)) {
              throw TypeError(".LoadFileRecordRes.record: array expected");
            }
            node.record = [];
            var i = 0;
            for (; i < obj.record.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.record[i])) {
                throw TypeError(".LoadFileRecordRes.record: object expected");
              }
              node.record[i] = window.FileRecord.fromObject(obj.record[i]);
            }
          }
          return node;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var self = {};
          if ((options.arrays || options.defaults) && (self.record = []), message.record && message.record.length) {
            self.record = [];
            var name = 0;
            for (; name < message.record.length; ++name) {
              self.record[name] = window.FileRecord.toObject(message.record[name], options);
            }
          }
          return self;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.SearchFileRecordReq = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.keyword = "", Error.prototype.conversation = null, Error.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.count = 0, Error.prototype.from = "", Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(message.keyword), null != message.conversation && message.hasOwnProperty("conversation") && window.Conversation.encode(message.conversation, writer.uint32(18).fork()).ldelim(), writer.uint32(24).int64(message.messageId), writer.uint32(32).int32(message.count), null != message.from && message.hasOwnProperty("from") && writer.uint32(42).string(message.from), writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.SearchFileRecordReq;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.keyword = data.string();
                break;
              case 2:
                message.conversation = window.Conversation.decode(data, data.uint32());
                break;
              case 3:
                message.messageId = data.int64();
                break;
              case 4:
                message.count = data.int32();
                break;
              case 5:
                message.from = data.string();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("keyword")) {
            throw self.ProtocolError("missing required 'keyword'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("messageId")) {
            throw self.ProtocolError("missing required 'messageId'", {
              instance: message
            });
          }
          if (!message.hasOwnProperty("count")) {
            throw self.ProtocolError("missing required 'count'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
            return "object expected";
          }
          if (!self.isString(data.keyword)) {
            return "keyword: string expected";
          }
          if (null != data.conversation && data.hasOwnProperty("conversation")) {
            var t = window.Conversation.verify(data.conversation);
            if (t) {
              return "conversation." + t;
            }
          }
          return self.isInteger(data.messageId) || data.messageId && self.isInteger(data.messageId.low) && self.isInteger(data.messageId.high) ? self.isInteger(data.count) ? null != data.from && data.hasOwnProperty("from") && !self.isString(data.from) ? "from: string expected" : null : "count: integer expected" : "messageId: integer|Long expected";
        }, Error.fromObject = function (data) {
          if (data instanceof window.SearchFileRecordReq) {
            return data;
          }
          var message = new window.SearchFileRecordReq;
          if (null != data.keyword && (message.keyword = String(data.keyword)), null != data.conversation) {
            if ("object" !== (0, _deepAssign2.default)(data.conversation)) {
              throw TypeError(".SearchFileRecordReq.conversation: object expected");
            }
            message.conversation = window.Conversation.fromObject(data.conversation);
          }
          return null != data.messageId && (self.Long ? (message.messageId = self.Long.fromValue(data.messageId)).unsigned = false : "string" == typeof data.messageId ? message.messageId = parseInt(data.messageId, 10) : "number" == typeof data.messageId ? message.messageId = data.messageId : "object" === (0, _deepAssign2.default)(data.messageId) && (message.messageId = (new self.LongBits(data.messageId.low >>> 0, data.messageId.high >>> 0)).toNumber())), null != data.count && (message.count = 0 |
            data.count), null != data.from && (message.from = String(data.from)), message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var msg = {};
          if (options.defaults) {
            if (msg.keyword = "", msg.conversation = null, self.Long) {
              var long = new self.Long(0, 0, false);
              msg.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              msg.messageId = options.longs === String ? "0" : 0;
            }
            msg.count = 0;
            msg.from = "";
          }
          return null != message.keyword && message.hasOwnProperty("keyword") && (msg.keyword = message.keyword), null != message.conversation && message.hasOwnProperty("conversation") && (msg.conversation = window.Conversation.toObject(message.conversation, options)), null != message.messageId && message.hasOwnProperty("messageId") && ("number" == typeof message.messageId ? msg.messageId = options.longs === String ? String(message.messageId) : message.messageId : msg.messageId = options.longs ===
            String ? self.Long.prototype.toString.call(message.messageId) : options.longs === Number ? (new self.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0)).toNumber() : message.messageId), null != message.count && message.hasOwnProperty("count") && (msg.count = message.count), null != message.from && message.hasOwnProperty("from") && (msg.from = message.from), msg;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ConferenceRequest = function () {
        function Site(cat) {
          if (cat) {
            var keys = (0, _noframeworkWaypoints2.default)(cat);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != cat[keys[i]]) {
                this[keys[i]] = cat[keys[i]];
              }
            }
          }
        }
        return Site.prototype.sessionId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Site.prototype.request = "", Site.prototype.data = "", Site.prototype.roomId = "", Site.prototype.advance = 0, Site.create = function (obj) {
          return new Site(obj);
        }, Site.encode = function (data, target) {
          return target || (target = $Writer.create()), null != data.sessionId && data.hasOwnProperty("sessionId") && target.uint32(8).int64(data.sessionId), target.uint32(18).string(data.request), null != data.data && data.hasOwnProperty("data") && target.uint32(26).string(data.data), null != data.roomId && data.hasOwnProperty("roomId") && target.uint32(34).string(data.roomId), null != data.advance && data.hasOwnProperty("advance") && target.uint32(40).int32(data.advance), target;
        }, Site.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Site.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var message = new window.ConferenceRequest;
          for (; data.pos < end;) {
            var o = data.uint32();
            switch (o >>> 3) {
              case 1:
                message.sessionId = data.int64();
                break;
              case 2:
                message.request = data.string();
                break;
              case 3:
                message.data = data.string();
                break;
              case 4:
                message.roomId = data.string();
                break;
              case 5:
                message.advance = data.int32();
                break;
              default:
                data.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("request")) {
            throw self.ProtocolError("missing required 'request'", {
              instance: message
            });
          }
          return message;
        }, Site.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Site.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : null != data.sessionId && data.hasOwnProperty("sessionId") && !(self.isInteger(data.sessionId) || data.sessionId && self.isInteger(data.sessionId.low) && self.isInteger(data.sessionId.high)) ? "sessionId: integer|Long expected" : self.isString(data.request) ? null != data.data && data.hasOwnProperty("data") && !self.isString(data.data) ? "data: string expected" :
            null != data.roomId && data.hasOwnProperty("roomId") && !self.isString(data.roomId) ? "roomId: string expected" : null != data.advance && data.hasOwnProperty("advance") && !self.isInteger(data.advance) ? "advance: integer expected" : null : "request: string expected";
        }, Site.fromObject = function (data) {
          if (data instanceof window.ConferenceRequest) {
            return data;
          }
          var message = new window.ConferenceRequest;
          return null != data.sessionId && (self.Long ? (message.sessionId = self.Long.fromValue(data.sessionId)).unsigned = false : "string" == typeof data.sessionId ? message.sessionId = parseInt(data.sessionId, 10) : "number" == typeof data.sessionId ? message.sessionId = data.sessionId : "object" === (0, _deepAssign2.default)(data.sessionId) && (message.sessionId = (new self.LongBits(data.sessionId.low >>> 0, data.sessionId.high >>> 0)).toNumber())), null != data.request && (message.request =
            String(data.request)), null != data.data && (message.data = String(data.data)), null != data.roomId && (message.roomId = String(data.roomId)), null != data.advance && (message.advance = 0 | data.advance), message;
        }, Site.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              $scope.sessionId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              $scope.sessionId = options.longs === String ? "0" : 0;
            }
            $scope.request = "";
            $scope.data = "";
            $scope.roomId = "";
            $scope.advance = 0;
          }
          return null != data.sessionId && data.hasOwnProperty("sessionId") && ("number" == typeof data.sessionId ? $scope.sessionId = options.longs === String ? String(data.sessionId) : data.sessionId : $scope.sessionId = options.longs === String ? self.Long.prototype.toString.call(data.sessionId) : options.longs === Number ? (new self.LongBits(data.sessionId.low >>> 0, data.sessionId.high >>> 0)).toNumber() : data.sessionId), null != data.request && data.hasOwnProperty("request") && ($scope.request =
            data.request), null != data.data && data.hasOwnProperty("data") && ($scope.data = data.data), null != data.roomId && data.hasOwnProperty("roomId") && ($scope.roomId = data.roomId), null != data.advance && data.hasOwnProperty("advance") && ($scope.advance = data.advance), $scope;
        }, Site.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Site;
      }();
      window.ConfInfo = function () {
        function data(d) {
          if (d) {
            var r = (0, _noframeworkWaypoints2.default)(d);
            var i = 0;
            for (; i < r.length; ++i) {
              if (null != d[r[i]]) {
                this[r[i]] = d[r[i]];
              }
            }
          }
        }
        return data.prototype.roomId = "", data.prototype.description = "", data.prototype.serverId = "", data.prototype.pin = "", data.prototype.publishers = 0, data.prototype.numPublisher = 0, data.prototype.bitrate = 0, data.prototype.advance = 0, data.prototype.record = 0, data.create = function (value) {
          return new data(value);
        }, data.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.roomId), null != data.description && data.hasOwnProperty("description") && target.uint32(18).string(data.description), null != data.serverId && data.hasOwnProperty("serverId") && target.uint32(26).string(data.serverId), null != data.pin && data.hasOwnProperty("pin") && target.uint32(34).string(data.pin), null != data.publishers && data.hasOwnProperty("publishers") && target.uint32(40).int32(data.publishers), null !=
            data.numPublisher && data.hasOwnProperty("numPublisher") && target.uint32(48).int32(data.numPublisher), null != data.bitrate && data.hasOwnProperty("bitrate") && target.uint32(56).int32(data.bitrate), null != data.advance && data.hasOwnProperty("advance") && target.uint32(64).int32(data.advance), null != data.record && data.hasOwnProperty("record") && target.uint32(72).int32(data.record), target;
        }, data.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, data.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var data = new window.ConfInfo;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                data.roomId = s.string();
                break;
              case 2:
                data.description = s.string();
                break;
              case 3:
                data.serverId = s.string();
                break;
              case 4:
                data.pin = s.string();
                break;
              case 5:
                data.publishers = s.int32();
                break;
              case 6:
                data.numPublisher = s.int32();
                break;
              case 7:
                data.bitrate = s.int32();
                break;
              case 8:
                data.advance = s.int32();
                break;
              case 9:
                data.record = s.int32();
                break;
              default:
                s.skipType(7 & a);
            }
          }
          if (!data.hasOwnProperty("roomId")) {
            throw self.ProtocolError("missing required 'roomId'", {
              instance: data
            });
          }
          return data;
        }, data.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, data.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.roomId) ? null != data.description && data.hasOwnProperty("description") && !self.isString(data.description) ? "description: string expected" : null != data.serverId && data.hasOwnProperty("serverId") && !self.isString(data.serverId) ? "serverId: string expected" : null != data.pin && data.hasOwnProperty("pin") && !self.isString(data.pin) ? "pin: string expected" :
            null != data.publishers && data.hasOwnProperty("publishers") && !self.isInteger(data.publishers) ? "publishers: integer expected" : null != data.numPublisher && data.hasOwnProperty("numPublisher") && !self.isInteger(data.numPublisher) ? "numPublisher: integer expected" : null != data.bitrate && data.hasOwnProperty("bitrate") && !self.isInteger(data.bitrate) ? "bitrate: integer expected" : null != data.advance && data.hasOwnProperty("advance") && !self.isInteger(data.advance) ? "advance: integer expected" :
              null != data.record && data.hasOwnProperty("record") && !self.isInteger(data.record) ? "record: integer expected" : null : "roomId: string expected";
        }, data.fromObject = function (data) {
          if (data instanceof window.ConfInfo) {
            return data;
          }
          var self = new window.ConfInfo;
          return null != data.roomId && (self.roomId = String(data.roomId)), null != data.description && (self.description = String(data.description)), null != data.serverId && (self.serverId = String(data.serverId)), null != data.pin && (self.pin = String(data.pin)), null != data.publishers && (self.publishers = 0 | data.publishers), null != data.numPublisher && (self.numPublisher = 0 | data.numPublisher), null != data.bitrate && (self.bitrate = 0 | data.bitrate), null != data.advance && (self.advance =
            0 | data.advance), null != data.record && (self.record = 0 | data.record), self;
        }, data.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var $scope = {};
          return options.defaults && ($scope.roomId = "", $scope.description = "", $scope.serverId = "", $scope.pin = "", $scope.publishers = 0, $scope.numPublisher = 0, $scope.bitrate = 0, $scope.advance = 0, $scope.record = 0), null != data.roomId && data.hasOwnProperty("roomId") && ($scope.roomId = data.roomId), null != data.description && data.hasOwnProperty("description") && ($scope.description = data.description), null != data.serverId && data.hasOwnProperty("serverId") && ($scope.serverId =
            data.serverId), null != data.pin && data.hasOwnProperty("pin") && ($scope.pin = data.pin), null != data.publishers && data.hasOwnProperty("publishers") && ($scope.publishers = data.publishers), null != data.numPublisher && data.hasOwnProperty("numPublisher") && ($scope.numPublisher = data.numPublisher), null != data.bitrate && data.hasOwnProperty("bitrate") && ($scope.bitrate = data.bitrate), null != data.advance && data.hasOwnProperty("advance") && ($scope.advance = data.advance), null !=
            data.record && data.hasOwnProperty("record") && ($scope.record = data.record), $scope;
        }, data.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, data;
      }();
      window.ConfInfos = function () {
        function Error(props) {
          if (this.info = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.info = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.info && value.info.length) {
            var i = 0;
            for (; i < value.info.length; ++i) {
              window.ConfInfo.encode(value.info[i], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var json = new window.ConfInfos;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(json.info && json.info.length)) {
                  json.info = [];
                }
                json.info.push(window.ConfInfo.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return json;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (input) {
          if ("object" !== (void 0 === input ? "undefined" : (0, _deepAssign2.default)(input)) || null === input) {
            return "object expected";
          }
          if (null != input.info && input.hasOwnProperty("info")) {
            if (!Array.isArray(input.info)) {
              return "info: array expected";
            }
            var i = 0;
            for (; i < input.info.length; ++i) {
              var r = window.ConfInfo.verify(input.info[i]);
              if (r) {
                return "info." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.ConfInfos) {
            return object;
          }
          var obj = new window.ConfInfos;
          if (object.info) {
            if (!Array.isArray(object.info)) {
              throw TypeError(".ConfInfos.info: array expected");
            }
            obj.info = [];
            var i = 0;
            for (; i < object.info.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.info[i])) {
                throw TypeError(".ConfInfos.info: object expected");
              }
              obj.info[i] = window.ConfInfo.fromObject(object.info[i]);
            }
          }
          return obj;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var object = {};
          if ((options.arrays || options.defaults) && (object.info = []), data.info && data.info.length) {
            object.info = [];
            var key = 0;
            for (; key < data.info.length; ++key) {
              object.info[key] = window.ConfInfo.toObject(data.info[key], options);
            }
          }
          return object;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ConfParticipant = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.userId = "", Error.prototype.publisher = 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (query, value) {
          return value || (value = $Writer.create()), value.uint32(10).string(query.userId), value.uint32(16).int32(query.publisher), value;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var x = new window.ConfParticipant;
          for (; data.pos < end;) {
            var a = data.uint32();
            switch (a >>> 3) {
              case 1:
                x.userId = data.string();
                break;
              case 2:
                x.publisher = data.int32();
                break;
              default:
                data.skipType(7 & a);
            }
          }
          if (!x.hasOwnProperty("userId")) {
            throw self.ProtocolError("missing required 'userId'", {
              instance: x
            });
          }
          if (!x.hasOwnProperty("publisher")) {
            throw self.ProtocolError("missing required 'publisher'", {
              instance: x
            });
          }
          return x;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (value) {
          return "object" !== (void 0 === value ? "undefined" : (0, _deepAssign2.default)(value)) || null === value ? "object expected" : self.isString(value.userId) ? self.isInteger(value.publisher) ? null : "publisher: integer expected" : "userId: string expected";
        }, Error.fromObject = function (val) {
          if (val instanceof window.ConfParticipant) {
            return val;
          }
          var me = new window.ConfParticipant;
          return null != val.userId && (me.userId = String(val.userId)), null != val.publisher && (me.publisher = 0 | val.publisher), me;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var props = {};
          return options.defaults && (props.userId = "", props.publisher = 0), null != data.userId && data.hasOwnProperty("userId") && (props.userId = data.userId), null != data.publisher && data.hasOwnProperty("publisher") && (props.publisher = data.publisher), props;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.ConfParticipants = function () {
        function Error(props) {
          if (this.participant = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.participant = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (message, writer) {
          if (writer || (writer = $Writer.create()), null != message.participant && message.participant.length) {
            var i = 0;
            for (; i < message.participant.length; ++i) {
              window.ConfParticipant.encode(message.participant[i], writer.uint32(10).fork()).ldelim();
            }
          }
          return writer;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var result = new window.ConfParticipants;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(result.participant && result.participant.length)) {
                  result.participant = [];
                }
                result.participant.push(window.ConfParticipant.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return result;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (self) {
          if ("object" !== (void 0 === self ? "undefined" : (0, _deepAssign2.default)(self)) || null === self) {
            return "object expected";
          }
          if (null != self.participant && self.hasOwnProperty("participant")) {
            if (!Array.isArray(self.participant)) {
              return "participant: array expected";
            }
            var i = 0;
            for (; i < self.participant.length; ++i) {
              var r = window.ConfParticipant.verify(self.participant[i]);
              if (r) {
                return "participant." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.ConfParticipants) {
            return object;
          }
          var result = new window.ConfParticipants;
          if (object.participant) {
            if (!Array.isArray(object.participant)) {
              throw TypeError(".ConfParticipants.participant: array expected");
            }
            result.participant = [];
            var i = 0;
            for (; i < object.participant.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.participant[i])) {
                throw TypeError(".ConfParticipants.participant: object expected");
              }
              result.participant[i] = window.ConfParticipant.fromObject(object.participant[i]);
            }
          }
          return result;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if ((options.arrays || options.defaults) && (result.participant = []), message.participant && message.participant.length) {
            result.participant = [];
            var key = 0;
            for (; key < message.participant.length; ++key) {
              result.participant[key] = window.ConfParticipant.toObject(message.participant[key], options);
            }
          }
          return result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.RecallMultiCastMessageRequest = function () {
        function Error(props) {
          if (this.receiver = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.messageId = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.prototype.receiver = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, value) {
          if (value || (value = $Writer.create()), value.uint32(8).int64(data.messageId), null != data.receiver && data.receiver.length) {
            var i = 0;
            for (; i < data.receiver.length; ++i) {
              value.uint32(18).string(data.receiver[i]);
            }
          }
          return value;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var message = new window.RecallMultiCastMessageRequest;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                message.messageId = options.int64();
                break;
              case 2:
                if (!(message.receiver && message.receiver.length)) {
                  message.receiver = [];
                }
                message.receiver.push(options.string());
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!message.hasOwnProperty("messageId")) {
            throw self.ProtocolError("missing required 'messageId'", {
              instance: message
            });
          }
          return message;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (options) {
          if ("object" !== (void 0 === options ? "undefined" : (0, _deepAssign2.default)(options)) || null === options) {
            return "object expected";
          }
          if (!(self.isInteger(options.messageId) || options.messageId && self.isInteger(options.messageId.low) && self.isInteger(options.messageId.high))) {
            return "messageId: integer|Long expected";
          }
          if (null != options.receiver && options.hasOwnProperty("receiver")) {
            if (!Array.isArray(options.receiver)) {
              return "receiver: array expected";
            }
            var i = 0;
            for (; i < options.receiver.length; ++i) {
              if (!self.isString(options.receiver[i])) {
                return "receiver: string[] expected";
              }
            }
          }
          return null;
        }, Error.fromObject = function (data) {
          if (data instanceof window.RecallMultiCastMessageRequest) {
            return data;
          }
          var message = new window.RecallMultiCastMessageRequest;
          if (null != data.messageId && (self.Long ? (message.messageId = self.Long.fromValue(data.messageId)).unsigned = false : "string" == typeof data.messageId ? message.messageId = parseInt(data.messageId, 10) : "number" == typeof data.messageId ? message.messageId = data.messageId : "object" === (0, _deepAssign2.default)(data.messageId) && (message.messageId = (new self.LongBits(data.messageId.low >>> 0, data.messageId.high >>> 0)).toNumber())), data.receiver) {
            if (!Array.isArray(data.receiver)) {
              throw TypeError(".RecallMultiCastMessageRequest.receiver: array expected");
            }
            message.receiver = [];
            var i = 0;
            for (; i < data.receiver.length; ++i) {
              message.receiver[i] = String(data.receiver[i]);
            }
          }
          return message;
        }, Error.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var obj = {};
          if ((options.arrays || options.defaults) && (obj.receiver = []), options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              obj.messageId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              obj.messageId = options.longs === String ? "0" : 0;
            }
          }
          if (null != message.messageId && message.hasOwnProperty("messageId") && ("number" == typeof message.messageId ? obj.messageId = options.longs === String ? String(message.messageId) : message.messageId : obj.messageId = options.longs === String ? self.Long.prototype.toString.call(message.messageId) : options.longs === Number ? (new self.LongBits(message.messageId.low >>> 0, message.messageId.high >>> 0)).toNumber() : message.messageId), message.receiver && message.receiver.length) {
            obj.receiver = [];
            var i = 0;
            for (; i < message.receiver.length; ++i) {
              obj.receiver[i] = message.receiver[i];
            }
          }
          return obj;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.MomentsMedia = function () {
        function Device(properties) {
          if (properties) {
            var keys = (0, _noframeworkWaypoints2.default)(properties);
            var i = 0;
            for (; i < keys.length; ++i) {
              if (null != properties[keys[i]]) {
                this[keys[i]] = properties[keys[i]];
              }
            }
          }
        }
        return Device.prototype.mediaUrl = "", Device.prototype.thumbUrl = "", Device.prototype.width = 0, Device.prototype.height = 0, Device.create = function (value) {
          return new Device(value);
        }, Device.encode = function (message, writer) {
          return writer || (writer = $Writer.create()), writer.uint32(10).string(message.mediaUrl), null != message.thumbUrl && message.hasOwnProperty("thumbUrl") && writer.uint32(18).string(message.thumbUrl), null != message.width && message.hasOwnProperty("width") && writer.uint32(24).int32(message.width), null != message.height && message.hasOwnProperty("height") && writer.uint32(32).int32(message.height), writer;
        }, Device.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Device.decode = function (data, i) {
          if (!(data instanceof Buffer)) {
            data = Buffer.create(data);
          }
          var end = void 0 === i ? data.len : data.pos + i;
          var obj = new window.MomentsMedia;
          for (; data.pos < end;) {
            var f = data.uint32();
            switch (f >>> 3) {
              case 1:
                obj.mediaUrl = data.string();
                break;
              case 2:
                obj.thumbUrl = data.string();
                break;
              case 3:
                obj.width = data.int32();
                break;
              case 4:
                obj.height = data.int32();
                break;
              default:
                data.skipType(7 & f);
            }
          }
          if (!obj.hasOwnProperty("mediaUrl")) {
            throw self.ProtocolError("missing required 'mediaUrl'", {
              instance: obj
            });
          }
          return obj;
        }, Device.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Device.verify = function (item) {
          return "object" !== (void 0 === item ? "undefined" : (0, _deepAssign2.default)(item)) || null === item ? "object expected" : self.isString(item.mediaUrl) ? null != item.thumbUrl && item.hasOwnProperty("thumbUrl") && !self.isString(item.thumbUrl) ? "thumbUrl: string expected" : null != item.width && item.hasOwnProperty("width") && !self.isInteger(item.width) ? "width: integer expected" : null != item.height && item.hasOwnProperty("height") && !self.isInteger(item.height) ? "height: integer expected" :
            null : "mediaUrl: string expected";
        }, Device.fromObject = function (obj) {
          if (obj instanceof window.MomentsMedia) {
            return obj;
          }
          var item = new window.MomentsMedia;
          return null != obj.mediaUrl && (item.mediaUrl = String(obj.mediaUrl)), null != obj.thumbUrl && (item.thumbUrl = String(obj.thumbUrl)), null != obj.width && (item.width = 0 | obj.width), null != obj.height && (item.height = 0 | obj.height), item;
        }, Device.toObject = function (obj, args) {
          if (!args) {
            args = {};
          }
          var file = {};
          return args.defaults && (file.mediaUrl = "", file.thumbUrl = "", file.width = 0, file.height = 0), null != obj.mediaUrl && obj.hasOwnProperty("mediaUrl") && (file.mediaUrl = obj.mediaUrl), null != obj.thumbUrl && obj.hasOwnProperty("thumbUrl") && (file.thumbUrl = obj.thumbUrl), null != obj.width && obj.hasOwnProperty("width") && (file.width = obj.width), null != obj.height && obj.hasOwnProperty("height") && (file.height = obj.height), file;
        }, Device.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Device;
      }();
      window.MomentsFeed = function () {
        function model(params) {
          if (this.medias = [], this.mentionedUsers = [], this.toUsers = [], this.excludeUsers = [], this.comments = [], params) {
            var _keys = (0, _noframeworkWaypoints2.default)(params);
            var i = 0;
            for (; i < _keys.length; ++i) {
              if (null != params[_keys[i]]) {
                this[_keys[i]] = params[_keys[i]];
              }
            }
          }
        }
        return model.prototype.feedId = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.sender = "", model.prototype.type = 0, model.prototype.text = "", model.prototype.medias = self.emptyArray, model.prototype.mentionedUsers = self.emptyArray, model.prototype.toUsers = self.emptyArray, model.prototype.excludeUsers = self.emptyArray, model.prototype.serverTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, model.prototype.extra = "", model.prototype.comments = self.emptyArray,
          model.prototype.hasMore = 0, model.create = function (value) {
            return new model(value);
          }, model.encode = function (data, target) {
            if (target || (target = $Writer.create()), target.uint32(8).int64(data.feedId), target.uint32(18).string(data.sender), target.uint32(24).int32(data.type), null != data.text && data.hasOwnProperty("text") && target.uint32(34).string(data.text), null != data.medias && data.medias.length) {
              var i = 0;
              for (; i < data.medias.length; ++i) {
                window.MomentsMedia.encode(data.medias[i], target.uint32(42).fork()).ldelim();
              }
            }
            if (null != data.mentionedUsers && data.mentionedUsers.length) {
              i = 0;
              for (; i < data.mentionedUsers.length; ++i) {
                target.uint32(50).string(data.mentionedUsers[i]);
              }
            }
            if (null != data.toUsers && data.toUsers.length) {
              i = 0;
              for (; i < data.toUsers.length; ++i) {
                target.uint32(58).string(data.toUsers[i]);
              }
            }
            if (null != data.excludeUsers && data.excludeUsers.length) {
              i = 0;
              for (; i < data.excludeUsers.length; ++i) {
                target.uint32(66).string(data.excludeUsers[i]);
              }
            }
            if (target.uint32(72).int64(data.serverTime), null != data.extra && data.hasOwnProperty("extra") && target.uint32(82).string(data.extra), null != data.comments && data.comments.length) {
              i = 0;
              for (; i < data.comments.length; ++i) {
                window.MomentsComment.encode(data.comments[i], target.uint32(90).fork()).ldelim();
              }
            }
            return null != data.hasMore && data.hasOwnProperty("hasMore") && target.uint32(96).int32(data.hasMore), target;
          }, model.encodeDelimited = function (message, writer) {
            return this.encode(message, writer).ldelim();
          }, model.decode = function (data, i) {
            if (!(data instanceof Buffer)) {
              data = Buffer.create(data);
            }
            var end = void 0 === i ? data.len : data.pos + i;
            var $scope = new window.MomentsFeed;
            for (; data.pos < end;) {
              var o = data.uint32();
              switch (o >>> 3) {
                case 1:
                  $scope.feedId = data.int64();
                  break;
                case 2:
                  $scope.sender = data.string();
                  break;
                case 3:
                  $scope.type = data.int32();
                  break;
                case 4:
                  $scope.text = data.string();
                  break;
                case 5:
                  if (!($scope.medias && $scope.medias.length)) {
                    $scope.medias = [];
                  }
                  $scope.medias.push(window.MomentsMedia.decode(data, data.uint32()));
                  break;
                case 6:
                  if (!($scope.mentionedUsers && $scope.mentionedUsers.length)) {
                    $scope.mentionedUsers = [];
                  }
                  $scope.mentionedUsers.push(data.string());
                  break;
                case 7:
                  if (!($scope.toUsers && $scope.toUsers.length)) {
                    $scope.toUsers = [];
                  }
                  $scope.toUsers.push(data.string());
                  break;
                case 8:
                  if (!($scope.excludeUsers && $scope.excludeUsers.length)) {
                    $scope.excludeUsers = [];
                  }
                  $scope.excludeUsers.push(data.string());
                  break;
                case 9:
                  $scope.serverTime = data.int64();
                  break;
                case 10:
                  $scope.extra = data.string();
                  break;
                case 11:
                  if (!($scope.comments && $scope.comments.length)) {
                    $scope.comments = [];
                  }
                  $scope.comments.push(window.MomentsComment.decode(data, data.uint32()));
                  break;
                case 12:
                  $scope.hasMore = data.int32();
                  break;
                default:
                  data.skipType(7 & o);
              }
            }
            if (!$scope.hasOwnProperty("feedId")) {
              throw self.ProtocolError("missing required 'feedId'", {
                instance: $scope
              });
            }
            if (!$scope.hasOwnProperty("sender")) {
              throw self.ProtocolError("missing required 'sender'", {
                instance: $scope
              });
            }
            if (!$scope.hasOwnProperty("type")) {
              throw self.ProtocolError("missing required 'type'", {
                instance: $scope
              });
            }
            if (!$scope.hasOwnProperty("serverTime")) {
              throw self.ProtocolError("missing required 'serverTime'", {
                instance: $scope
              });
            }
            return $scope;
          }, model.decodeDelimited = function (data) {
            return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
          }, model.verify = function (data) {
            if ("object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data) {
              return "object expected";
            }
            if (!(self.isInteger(data.feedId) || data.feedId && self.isInteger(data.feedId.low) && self.isInteger(data.feedId.high))) {
              return "feedId: integer|Long expected";
            }
            if (!self.isString(data.sender)) {
              return "sender: string expected";
            }
            if (!self.isInteger(data.type)) {
              return "type: integer expected";
            }
            if (null != data.text && data.hasOwnProperty("text") && !self.isString(data.text)) {
              return "text: string expected";
            }
            if (null != data.medias && data.hasOwnProperty("medias")) {
              if (!Array.isArray(data.medias)) {
                return "medias: array expected";
              }
              var i = 0;
              for (; i < data.medias.length; ++i) {
                if (r = window.MomentsMedia.verify(data.medias[i])) {
                  return "medias." + r;
                }
              }
            }
            if (null != data.mentionedUsers && data.hasOwnProperty("mentionedUsers")) {
              if (!Array.isArray(data.mentionedUsers)) {
                return "mentionedUsers: array expected";
              }
              i = 0;
              for (; i < data.mentionedUsers.length; ++i) {
                if (!self.isString(data.mentionedUsers[i])) {
                  return "mentionedUsers: string[] expected";
                }
              }
            }
            if (null != data.toUsers && data.hasOwnProperty("toUsers")) {
              if (!Array.isArray(data.toUsers)) {
                return "toUsers: array expected";
              }
              i = 0;
              for (; i < data.toUsers.length; ++i) {
                if (!self.isString(data.toUsers[i])) {
                  return "toUsers: string[] expected";
                }
              }
            }
            if (null != data.excludeUsers && data.hasOwnProperty("excludeUsers")) {
              if (!Array.isArray(data.excludeUsers)) {
                return "excludeUsers: array expected";
              }
              i = 0;
              for (; i < data.excludeUsers.length; ++i) {
                if (!self.isString(data.excludeUsers[i])) {
                  return "excludeUsers: string[] expected";
                }
              }
            }
            if (!(self.isInteger(data.serverTime) || data.serverTime && self.isInteger(data.serverTime.low) && self.isInteger(data.serverTime.high))) {
              return "serverTime: integer|Long expected";
            }
            if (null != data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra)) {
              return "extra: string expected";
            }
            if (null != data.comments && data.hasOwnProperty("comments")) {
              if (!Array.isArray(data.comments)) {
                return "comments: array expected";
              }
              i = 0;
              for (; i < data.comments.length; ++i) {
                var r;
                if (r = window.MomentsComment.verify(data.comments[i])) {
                  return "comments." + r;
                }
              }
            }
            return null != data.hasMore && data.hasOwnProperty("hasMore") && !self.isInteger(data.hasMore) ? "hasMore: integer expected" : null;
          }, model.fromObject = function (data) {
            if (data instanceof window.MomentsFeed) {
              return data;
            }
            var $scope = new window.MomentsFeed;
            if (null != data.feedId && (self.Long ? ($scope.feedId = self.Long.fromValue(data.feedId)).unsigned = false : "string" == typeof data.feedId ? $scope.feedId = parseInt(data.feedId, 10) : "number" == typeof data.feedId ? $scope.feedId = data.feedId : "object" === (0, _deepAssign2.default)(data.feedId) && ($scope.feedId = (new self.LongBits(data.feedId.low >>> 0, data.feedId.high >>> 0)).toNumber())), null != data.sender && ($scope.sender = String(data.sender)), null != data.type && ($scope.type =
              0 | data.type), null != data.text && ($scope.text = String(data.text)), data.medias) {
              if (!Array.isArray(data.medias)) {
                throw TypeError(".MomentsFeed.medias: array expected");
              }
              $scope.medias = [];
              var i = 0;
              for (; i < data.medias.length; ++i) {
                if ("object" !== (0, _deepAssign2.default)(data.medias[i])) {
                  throw TypeError(".MomentsFeed.medias: object expected");
                }
                $scope.medias[i] = window.MomentsMedia.fromObject(data.medias[i]);
              }
            }
            if (data.mentionedUsers) {
              if (!Array.isArray(data.mentionedUsers)) {
                throw TypeError(".MomentsFeed.mentionedUsers: array expected");
              }
              $scope.mentionedUsers = [];
              i = 0;
              for (; i < data.mentionedUsers.length; ++i) {
                $scope.mentionedUsers[i] = String(data.mentionedUsers[i]);
              }
            }
            if (data.toUsers) {
              if (!Array.isArray(data.toUsers)) {
                throw TypeError(".MomentsFeed.toUsers: array expected");
              }
              $scope.toUsers = [];
              i = 0;
              for (; i < data.toUsers.length; ++i) {
                $scope.toUsers[i] = String(data.toUsers[i]);
              }
            }
            if (data.excludeUsers) {
              if (!Array.isArray(data.excludeUsers)) {
                throw TypeError(".MomentsFeed.excludeUsers: array expected");
              }
              $scope.excludeUsers = [];
              i = 0;
              for (; i < data.excludeUsers.length; ++i) {
                $scope.excludeUsers[i] = String(data.excludeUsers[i]);
              }
            }
            if (null != data.serverTime && (self.Long ? ($scope.serverTime = self.Long.fromValue(data.serverTime)).unsigned = false : "string" == typeof data.serverTime ? $scope.serverTime = parseInt(data.serverTime, 10) : "number" == typeof data.serverTime ? $scope.serverTime = data.serverTime : "object" === (0, _deepAssign2.default)(data.serverTime) && ($scope.serverTime = (new self.LongBits(data.serverTime.low >>> 0, data.serverTime.high >>> 0)).toNumber())), null != data.extra && ($scope.extra =
              String(data.extra)), data.comments) {
              if (!Array.isArray(data.comments)) {
                throw TypeError(".MomentsFeed.comments: array expected");
              }
              $scope.comments = [];
              i = 0;
              for (; i < data.comments.length; ++i) {
                if ("object" !== (0, _deepAssign2.default)(data.comments[i])) {
                  throw TypeError(".MomentsFeed.comments: object expected");
                }
                $scope.comments[i] = window.MomentsComment.fromObject(data.comments[i]);
              }
            }
            return null != data.hasMore && ($scope.hasMore = 0 | data.hasMore), $scope;
          }, model.toObject = function (message, options) {
            if (!options) {
              options = {};
            }
            var $scope = {};
            if ((options.arrays || options.defaults) && ($scope.medias = [], $scope.mentionedUsers = [], $scope.toUsers = [], $scope.excludeUsers = [], $scope.comments = []), options.defaults) {
              if (self.Long) {
                var long = new self.Long(0, 0, false);
                $scope.feedId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
              } else {
                $scope.feedId = options.longs === String ? "0" : 0;
              }
              if ($scope.sender = "", $scope.type = 0, $scope.text = "", self.Long) {
                long = new self.Long(0, 0, false);
                $scope.serverTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
              } else {
                $scope.serverTime = options.longs === String ? "0" : 0;
              }
              $scope.extra = "";
              $scope.hasMore = 0;
            }
            if (null != message.feedId && message.hasOwnProperty("feedId") && ("number" == typeof message.feedId ? $scope.feedId = options.longs === String ? String(message.feedId) : message.feedId : $scope.feedId = options.longs === String ? self.Long.prototype.toString.call(message.feedId) : options.longs === Number ? (new self.LongBits(message.feedId.low >>> 0, message.feedId.high >>> 0)).toNumber() : message.feedId), null != message.sender && message.hasOwnProperty("sender") && ($scope.sender =
              message.sender), null != message.type && message.hasOwnProperty("type") && ($scope.type = message.type), null != message.text && message.hasOwnProperty("text") && ($scope.text = message.text), message.medias && message.medias.length) {
              $scope.medias = [];
              var i = 0;
              for (; i < message.medias.length; ++i) {
                $scope.medias[i] = window.MomentsMedia.toObject(message.medias[i], options);
              }
            }
            if (message.mentionedUsers && message.mentionedUsers.length) {
              $scope.mentionedUsers = [];
              i = 0;
              for (; i < message.mentionedUsers.length; ++i) {
                $scope.mentionedUsers[i] = message.mentionedUsers[i];
              }
            }
            if (message.toUsers && message.toUsers.length) {
              $scope.toUsers = [];
              i = 0;
              for (; i < message.toUsers.length; ++i) {
                $scope.toUsers[i] = message.toUsers[i];
              }
            }
            if (message.excludeUsers && message.excludeUsers.length) {
              $scope.excludeUsers = [];
              i = 0;
              for (; i < message.excludeUsers.length; ++i) {
                $scope.excludeUsers[i] = message.excludeUsers[i];
              }
            }
            if (null != message.serverTime && message.hasOwnProperty("serverTime") && ("number" == typeof message.serverTime ? $scope.serverTime = options.longs === String ? String(message.serverTime) : message.serverTime : $scope.serverTime = options.longs === String ? self.Long.prototype.toString.call(message.serverTime) : options.longs === Number ? (new self.LongBits(message.serverTime.low >>> 0, message.serverTime.high >>> 0)).toNumber() : message.serverTime), null != message.extra && message.hasOwnProperty("extra") &&
              ($scope.extra = message.extra), message.comments && message.comments.length) {
              $scope.comments = [];
              i = 0;
              for (; i < message.comments.length; ++i) {
                $scope.comments[i] = window.MomentsComment.toObject(message.comments[i], options);
              }
            }
            return null != message.hasMore && message.hasOwnProperty("hasMore") && ($scope.hasMore = message.hasMore), $scope;
          }, model.prototype.toJSON = function () {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          }, model;
      }();
      window.MomentsFeeds = function () {
        function Error(props) {
          if (this.feeds = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.feeds = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, value) {
          if (value || (value = $Writer.create()), null != data.feeds && data.feeds.length) {
            var i = 0;
            for (; i < data.feeds.length; ++i) {
              window.MomentsFeed.encode(data.feeds[i], value.uint32(10).fork()).ldelim();
            }
          }
          return value;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var self = new window.MomentsFeeds;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(self.feeds && self.feeds.length)) {
                  self.feeds = [];
                }
                self.feeds.push(window.MomentsFeed.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return self;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (state) {
          if ("object" !== (void 0 === state ? "undefined" : (0, _deepAssign2.default)(state)) || null === state) {
            return "object expected";
          }
          if (null != state.feeds && state.hasOwnProperty("feeds")) {
            if (!Array.isArray(state.feeds)) {
              return "feeds: array expected";
            }
            var i = 0;
            for (; i < state.feeds.length; ++i) {
              var r = window.MomentsFeed.verify(state.feeds[i]);
              if (r) {
                return "feeds." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (object) {
          if (object instanceof window.MomentsFeeds) {
            return object;
          }
          var results = new window.MomentsFeeds;
          if (object.feeds) {
            if (!Array.isArray(object.feeds)) {
              throw TypeError(".MomentsFeeds.feeds: array expected");
            }
            results.feeds = [];
            var i = 0;
            for (; i < object.feeds.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(object.feeds[i])) {
                throw TypeError(".MomentsFeeds.feeds: object expected");
              }
              results.feeds[i] = window.MomentsFeed.fromObject(object.feeds[i]);
            }
          }
          return results;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var result = {};
          if ((options.arrays || options.defaults) && (result.feeds = []), data.feeds && data.feeds.length) {
            result.feeds = [];
            var i = 0;
            for (; i < data.feeds.length; ++i) {
              result.feeds[i] = window.MomentsFeed.toObject(data.feeds[i], options);
            }
          }
          return result;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.MomentsComments = function () {
        function Error(props) {
          if (this.comments = [], props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.comments = self.emptyArray, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (value, message) {
          if (message || (message = $Writer.create()), null != value.comments && value.comments.length) {
            var index = 0;
            for (; index < value.comments.length; ++index) {
              window.MomentsComment.encode(value.comments[index], message.uint32(10).fork()).ldelim();
            }
          }
          return message;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (s, i) {
          if (!(s instanceof Buffer)) {
            s = Buffer.create(s);
          }
          var max = void 0 === i ? s.len : s.pos + i;
          var self = new window.MomentsComments;
          for (; s.pos < max;) {
            var a = s.uint32();
            switch (a >>> 3) {
              case 1:
                if (!(self.comments && self.comments.length)) {
                  self.comments = [];
                }
                self.comments.push(window.MomentsComment.decode(s, s.uint32()));
                break;
              default:
                s.skipType(7 & a);
            }
          }
          return self;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (self) {
          if ("object" !== (void 0 === self ? "undefined" : (0, _deepAssign2.default)(self)) || null === self) {
            return "object expected";
          }
          if (null != self.comments && self.hasOwnProperty("comments")) {
            if (!Array.isArray(self.comments)) {
              return "comments: array expected";
            }
            var i = 0;
            for (; i < self.comments.length; ++i) {
              var r = window.MomentsComment.verify(self.comments[i]);
              if (r) {
                return "comments." + r;
              }
            }
          }
          return null;
        }, Error.fromObject = function (obj) {
          if (obj instanceof window.MomentsComments) {
            return obj;
          }
          var node = new window.MomentsComments;
          if (obj.comments) {
            if (!Array.isArray(obj.comments)) {
              throw TypeError(".MomentsComments.comments: array expected");
            }
            node.comments = [];
            var i = 0;
            for (; i < obj.comments.length; ++i) {
              if ("object" !== (0, _deepAssign2.default)(obj.comments[i])) {
                throw TypeError(".MomentsComments.comments: object expected");
              }
              node.comments[i] = window.MomentsComment.fromObject(obj.comments[i]);
            }
          }
          return node;
        }, Error.toObject = function (line, options) {
          if (!options) {
            options = {};
          }
          var data = {};
          if ((options.arrays || options.defaults) && (data.comments = []), line.comments && line.comments.length) {
            data.comments = [];
            var key = 0;
            for (; key < line.comments.length; ++key) {
              data.comments[key] = window.MomentsComment.toObject(line.comments[key], options);
            }
          }
          return data;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      window.MomentsComment = function () {
        function req(params) {
          if (params) {
            var _keys = (0, _noframeworkWaypoints2.default)(params);
            var i = 0;
            for (; i < _keys.length; ++i) {
              if (null != params[_keys[i]]) {
                this[_keys[i]] = params[_keys[i]];
              }
            }
          }
        }
        return req.prototype.feedId = self.Long ? self.Long.fromBits(0, 0, false) : 0, req.prototype.commentId = self.Long ? self.Long.fromBits(0, 0, false) : 0, req.prototype.replyId = self.Long ? self.Long.fromBits(0, 0, false) : 0, req.prototype.sender = "", req.prototype.type = 0, req.prototype.text = "", req.prototype.replyTo = "", req.prototype.serverTime = self.Long ? self.Long.fromBits(0, 0, false) : 0, req.prototype.extra = "", req.create = function (value) {
          return new req(value);
        }, req.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(8).int64(data.feedId), target.uint32(16).int64(data.commentId), null != data.replyId && data.hasOwnProperty("replyId") && target.uint32(24).int64(data.replyId), target.uint32(34).string(data.sender), target.uint32(40).int32(data.type), null != data.text && data.hasOwnProperty("text") && target.uint32(50).string(data.text), null != data.replyTo && data.hasOwnProperty("replyTo") && target.uint32(58).string(data.replyTo), target.uint32(64).int64(data.serverTime),
            null != data.extra && data.hasOwnProperty("extra") && target.uint32(74).string(data.extra), target;
        }, req.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, req.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var data = new window.MomentsComment;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                data.feedId = options.int64();
                break;
              case 2:
                data.commentId = options.int64();
                break;
              case 3:
                data.replyId = options.int64();
                break;
              case 4:
                data.sender = options.string();
                break;
              case 5:
                data.type = options.int32();
                break;
              case 6:
                data.text = options.string();
                break;
              case 7:
                data.replyTo = options.string();
                break;
              case 8:
                data.serverTime = options.int64();
                break;
              case 9:
                data.extra = options.string();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!data.hasOwnProperty("feedId")) {
            throw self.ProtocolError("missing required 'feedId'", {
              instance: data
            });
          }
          if (!data.hasOwnProperty("commentId")) {
            throw self.ProtocolError("missing required 'commentId'", {
              instance: data
            });
          }
          if (!data.hasOwnProperty("sender")) {
            throw self.ProtocolError("missing required 'sender'", {
              instance: data
            });
          }
          if (!data.hasOwnProperty("type")) {
            throw self.ProtocolError("missing required 'type'", {
              instance: data
            });
          }
          if (!data.hasOwnProperty("serverTime")) {
            throw self.ProtocolError("missing required 'serverTime'", {
              instance: data
            });
          }
          return data;
        }, req.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, req.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isInteger(data.feedId) || data.feedId && self.isInteger(data.feedId.low) && self.isInteger(data.feedId.high) ? self.isInteger(data.commentId) || data.commentId && self.isInteger(data.commentId.low) && self.isInteger(data.commentId.high) ? null != data.replyId && data.hasOwnProperty("replyId") && !(self.isInteger(data.replyId) || data.replyId && self.isInteger(data.replyId.low) &&
            self.isInteger(data.replyId.high)) ? "replyId: integer|Long expected" : self.isString(data.sender) ? self.isInteger(data.type) ? null != data.text && data.hasOwnProperty("text") && !self.isString(data.text) ? "text: string expected" : null != data.replyTo && data.hasOwnProperty("replyTo") && !self.isString(data.replyTo) ? "replyTo: string expected" : self.isInteger(data.serverTime) || data.serverTime && self.isInteger(data.serverTime.low) && self.isInteger(data.serverTime.high) ? null !=
              data.extra && data.hasOwnProperty("extra") && !self.isString(data.extra) ? "extra: string expected" : null : "serverTime: integer|Long expected" : "type: integer expected" : "sender: string expected" : "commentId: integer|Long expected" : "feedId: integer|Long expected";
        }, req.fromObject = function (data) {
          if (data instanceof window.MomentsComment) {
            return data;
          }
          var o = new window.MomentsComment;
          return null != data.feedId && (self.Long ? (o.feedId = self.Long.fromValue(data.feedId)).unsigned = false : "string" == typeof data.feedId ? o.feedId = parseInt(data.feedId, 10) : "number" == typeof data.feedId ? o.feedId = data.feedId : "object" === (0, _deepAssign2.default)(data.feedId) && (o.feedId = (new self.LongBits(data.feedId.low >>> 0, data.feedId.high >>> 0)).toNumber())), null != data.commentId && (self.Long ? (o.commentId = self.Long.fromValue(data.commentId)).unsigned = false :
            "string" == typeof data.commentId ? o.commentId = parseInt(data.commentId, 10) : "number" == typeof data.commentId ? o.commentId = data.commentId : "object" === (0, _deepAssign2.default)(data.commentId) && (o.commentId = (new self.LongBits(data.commentId.low >>> 0, data.commentId.high >>> 0)).toNumber())), null != data.replyId && (self.Long ? (o.replyId = self.Long.fromValue(data.replyId)).unsigned = false : "string" == typeof data.replyId ? o.replyId = parseInt(data.replyId, 10) : "number" ==
              typeof data.replyId ? o.replyId = data.replyId : "object" === (0, _deepAssign2.default)(data.replyId) && (o.replyId = (new self.LongBits(data.replyId.low >>> 0, data.replyId.high >>> 0)).toNumber())), null != data.sender && (o.sender = String(data.sender)), null != data.type && (o.type = 0 | data.type), null != data.text && (o.text = String(data.text)), null != data.replyTo && (o.replyTo = String(data.replyTo)), null != data.serverTime && (self.Long ? (o.serverTime = self.Long.fromValue(data.serverTime)).unsigned =
                false : "string" == typeof data.serverTime ? o.serverTime = parseInt(data.serverTime, 10) : "number" == typeof data.serverTime ? o.serverTime = data.serverTime : "object" === (0, _deepAssign2.default)(data.serverTime) && (o.serverTime = (new self.LongBits(data.serverTime.low >>> 0, data.serverTime.high >>> 0)).toNumber())), null != data.extra && (o.extra = String(data.extra)), o;
        }, req.toObject = function (message, options) {
          if (!options) {
            options = {};
          }
          var msg = {};
          if (options.defaults) {
            if (self.Long) {
              var long = new self.Long(0, 0, false);
              msg.feedId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              msg.feedId = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              msg.commentId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              msg.commentId = options.longs === String ? "0" : 0;
            }
            if (self.Long) {
              long = new self.Long(0, 0, false);
              msg.replyId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              msg.replyId = options.longs === String ? "0" : 0;
            }
            if (msg.sender = "", msg.type = 0, msg.text = "", msg.replyTo = "", self.Long) {
              long = new self.Long(0, 0, false);
              msg.serverTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              msg.serverTime = options.longs === String ? "0" : 0;
            }
            msg.extra = "";
          }
          return null != message.feedId && message.hasOwnProperty("feedId") && ("number" == typeof message.feedId ? msg.feedId = options.longs === String ? String(message.feedId) : message.feedId : msg.feedId = options.longs === String ? self.Long.prototype.toString.call(message.feedId) : options.longs === Number ? (new self.LongBits(message.feedId.low >>> 0, message.feedId.high >>> 0)).toNumber() : message.feedId), null != message.commentId && message.hasOwnProperty("commentId") && ("number" ==
            typeof message.commentId ? msg.commentId = options.longs === String ? String(message.commentId) : message.commentId : msg.commentId = options.longs === String ? self.Long.prototype.toString.call(message.commentId) : options.longs === Number ? (new self.LongBits(message.commentId.low >>> 0, message.commentId.high >>> 0)).toNumber() : message.commentId), null != message.replyId && message.hasOwnProperty("replyId") && ("number" == typeof message.replyId ? msg.replyId = options.longs === String ?
              String(message.replyId) : message.replyId : msg.replyId = options.longs === String ? self.Long.prototype.toString.call(message.replyId) : options.longs === Number ? (new self.LongBits(message.replyId.low >>> 0, message.replyId.high >>> 0)).toNumber() : message.replyId), null != message.sender && message.hasOwnProperty("sender") && (msg.sender = message.sender), null != message.type && message.hasOwnProperty("type") && (msg.type = message.type), null != message.text && message.hasOwnProperty("text") &&
            (msg.text = message.text), null != message.replyTo && message.hasOwnProperty("replyTo") && (msg.replyTo = message.replyTo), null != message.serverTime && message.hasOwnProperty("serverTime") && ("number" == typeof message.serverTime ? msg.serverTime = options.longs === String ? String(message.serverTime) : message.serverTime : msg.serverTime = options.longs === String ? self.Long.prototype.toString.call(message.serverTime) : options.longs === Number ? (new self.LongBits(message.serverTime.low >>>
              0, message.serverTime.high >>> 0)).toNumber() : message.serverTime), null != message.extra && message.hasOwnProperty("extra") && (msg.extra = message.extra), msg;
        }, req.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, req;
      }();
      window.LockRequest = function () {
        function Error(props) {
          if (props) {
            var prefixedNames = (0, _noframeworkWaypoints2.default)(props);
            var i = 0;
            for (; i < prefixedNames.length; ++i) {
              if (null != props[prefixedNames[i]]) {
                this[prefixedNames[i]] = props[prefixedNames[i]];
              }
            }
          }
        }
        return Error.prototype.lockId = "", Error.prototype.duration = self.Long ? self.Long.fromBits(0, 0, false) : 0, Error.create = function (value) {
          return new Error(value);
        }, Error.encode = function (data, target) {
          return target || (target = $Writer.create()), target.uint32(10).string(data.lockId), null != data.duration && data.hasOwnProperty("duration") && target.uint32(16).int64(data.duration), target;
        }, Error.encodeDelimited = function (message, writer) {
          return this.encode(message, writer).ldelim();
        }, Error.decode = function (options, i) {
          if (!(options instanceof Buffer)) {
            options = Buffer.create(options);
          }
          var ch = void 0 === i ? options.len : options.pos + i;
          var data = new window.LockRequest;
          for (; options.pos < ch;) {
            var o = options.uint32();
            switch (o >>> 3) {
              case 1:
                data.lockId = options.string();
                break;
              case 2:
                data.duration = options.int64();
                break;
              default:
                options.skipType(7 & o);
            }
          }
          if (!data.hasOwnProperty("lockId")) {
            throw self.ProtocolError("missing required 'lockId'", {
              instance: data
            });
          }
          return data;
        }, Error.decodeDelimited = function (data) {
          return data instanceof Buffer || (data = new Buffer(data)), this.decode(data, data.uint32());
        }, Error.verify = function (data) {
          return "object" !== (void 0 === data ? "undefined" : (0, _deepAssign2.default)(data)) || null === data ? "object expected" : self.isString(data.lockId) ? null != data.duration && data.hasOwnProperty("duration") && !(self.isInteger(data.duration) || data.duration && self.isInteger(data.duration.low) && self.isInteger(data.duration.high)) ? "duration: integer|Long expected" : null : "lockId: string expected";
        }, Error.fromObject = function (object) {
          if (object instanceof window.LockRequest) {
            return object;
          }
          var data = new window.LockRequest;
          return null != object.lockId && (data.lockId = String(object.lockId)), null != object.duration && (self.Long ? (data.duration = self.Long.fromValue(object.duration)).unsigned = false : "string" == typeof object.duration ? data.duration = parseInt(object.duration, 10) : "number" == typeof object.duration ? data.duration = object.duration : "object" === (0, _deepAssign2.default)(object.duration) && (data.duration = (new self.LongBits(object.duration.low >>> 0, object.duration.high >>> 0)).toNumber())),
            data;
        }, Error.toObject = function (data, options) {
          if (!options) {
            options = {};
          }
          var item = {};
          if (options.defaults) {
            if (item.lockId = "", self.Long) {
              var long = new self.Long(0, 0, false);
              item.duration = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
            } else {
              item.duration = options.longs === String ? "0" : 0;
            }
          }
          return null != data.lockId && data.hasOwnProperty("lockId") && (item.lockId = data.lockId), null != data.duration && data.hasOwnProperty("duration") && ("number" == typeof data.duration ? item.duration = options.longs === String ? String(data.duration) : data.duration : item.duration = options.longs === String ? self.Long.prototype.toString.call(data.duration) : options.longs === Number ? (new self.LongBits(data.duration.low >>> 0, data.duration.high >>> 0)).toNumber() : data.duration),
            item;
        }, Error.prototype.toJSON = function () {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        }, Error;
      }();
      module.exports = window;
    },
    "./wfc/pb/protobuf.min.js": function (module$jscomp$0, exports$jscomp$0, __webpack_require__$jscomp$0) {
      (function (module$jscomp$1) {
        function _interopRequireDefault$jscomp$0(obj) {
          return obj && obj.__esModule ? obj : {
            default: obj
          };
        }
        var __WEBPACK_AMD_DEFINE_ARRAY__$jscomp$0;
        var __WEBPACK_AMD_DEFINE_RESULT__$jscomp$0;
        var _isInteger$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/number/is-integer.js");
        var _isInteger2$jscomp$0 = _interopRequireDefault$jscomp$0(_isInteger$jscomp$0);
        var _defineProperty$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/object/define-property.js");
        var _defineProperty2$jscomp$0 = _interopRequireDefault$jscomp$0(_defineProperty$jscomp$0);
        var _defineProperties$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/object/define-properties.js");
        var _defineProperties2$jscomp$0 = _interopRequireDefault$jscomp$0(_defineProperties$jscomp$0);
        var _freeze$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/object/freeze.js");
        var _freeze2$jscomp$0 = _interopRequireDefault$jscomp$0(_freeze$jscomp$0);
        var _create$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/object/create.js");
        var _create2$jscomp$0 = _interopRequireDefault$jscomp$0(_create$jscomp$0);
        var _stringify$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/json/stringify.js");
        var _stringify2$jscomp$0 = _interopRequireDefault$jscomp$0(_stringify$jscomp$0);
        var _keys$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/object/keys.js");
        var _keys2$jscomp$0 = _interopRequireDefault$jscomp$0(_keys$jscomp$0);
        var _promise$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/core-js/promise.js");
        var _promise2$jscomp$0 = _interopRequireDefault$jscomp$0(_promise$jscomp$0);
        var _typeof2$jscomp$0 = __webpack_require__$jscomp$0("./node_modules/babel-runtime/helpers/typeof.js");
        var _typeof3$jscomp$0 = _interopRequireDefault$jscomp$0(_typeof2$jscomp$0);
        !function (t$jscomp$2473, e$jscomp$3275) {
          !function (e, t, n) {
            var client = t$jscomp$2473.protobuf = function r(n) {
              var node = t[n];
              return node || e[n][0].call(node = t[n] = {
                exports: {}
              }, r, node, node.exports), node.exports;
            }(19);
            __WEBPACK_AMD_DEFINE_ARRAY__$jscomp$0 = [__webpack_require__$jscomp$0("./node_modules/long/src/long.js")];
            if (void 0 !== (__WEBPACK_AMD_DEFINE_RESULT__$jscomp$0 = function (record) {
              return record && record.isLong && (client.util.Long = record, client.configure()), client;
            }.apply(exports$jscomp$0, __WEBPACK_AMD_DEFINE_ARRAY__$jscomp$0))) {
              module$jscomp$1.exports = __WEBPACK_AMD_DEFINE_RESULT__$jscomp$0;
            }
            if ("object" == (0, _typeof3$jscomp$0.default)(module$jscomp$1) && module$jscomp$1 && module$jscomp$1.exports) {
              module$jscomp$1.exports = client;
            }
          }({
            1: [function (canCreateDiscussions, mixin) {
              mixin.exports = function (value, name) {
                var matches = Array(arguments.length - 1);
                var idx = 0;
                var i = 2;
                var _b6 = true;
                for (; i < arguments.length;) {
                  matches[idx++] = arguments[i++];
                }
                return new _promise2$jscomp$0.default(function (renderer, expect) {
                  matches[idx] = function (fn) {
                    if (_b6) {
                      if (_b6 = false, fn) {
                        expect(fn);
                      } else {
                        var data = Array(arguments.length - 1);
                        var i = 0;
                        for (; i < data.length;) {
                          data[i++] = arguments[i];
                        }
                        renderer.apply(null, data);
                      }
                    }
                  };
                  try {
                    value.apply(name || null, matches);
                  } catch (e) {
                    if (_b6) {
                      _b6 = false;
                      expect(e);
                    }
                  }
                });
              };
            }, {}],
            2: [function (canCreateDiscussions, isSlidingUp, valueVar) {
              var o = valueVar;
              o.length = function (value) {
                var i = value.length;
                if (!i) {
                  return 0;
                }
                var r = 0;
                for (; --i % 4 > 1 && "=" === value.charAt(i);) {
                  ++r;
                }
                return Math.ceil(3 * value.length) / 4 - r;
              };
              var a = Array(64);
              var d = Array(123);
              var c = 0;
              for (; c < 64;) {
                d[a[c] = c < 26 ? c + 65 : c < 52 ? c + 71 : c < 62 ? c - 4 : c - 59 | 43] = c++;
              }
              o.encode = function (data, target, source) {
                var j;
                var operands = null;
                var array = [];
                var i = 0;
                var u = 0;
                for (; target < source;) {
                  var d = data[target++];
                  switch (u) {
                    case 0:
                      array[i++] = a[d >> 2];
                      j = (3 & d) << 4;
                      u = 1;
                      break;
                    case 1:
                      array[i++] = a[j | d >> 4];
                      j = (15 & d) << 2;
                      u = 2;
                      break;
                    case 2:
                      array[i++] = a[j | d >> 6];
                      array[i++] = a[63 & d];
                      u = 0;
                  }
                  if (i > 8191) {
                    (operands || (operands = [])).push(String.fromCharCode.apply(String, array));
                    i = 0;
                  }
                }
                return u && (array[i++] = a[j], array[i++] = 61, 1 === u && (array[i++] = 61)), operands ? (i && operands.push(String.fromCharCode.apply(String, array.slice(0, i))), operands.join("")) : String.fromCharCode.apply(String, array.slice(0, i));
              };
              o.decode = function (str, header, n) {
                var tRecord;
                var w = n;
                var a = 0;
                var i = 0;
                for (; i < str.length;) {
                  var t = str.charCodeAt(i++);
                  if (61 === t && a > 1) {
                    break;
                  }
                  if ((t = d[t]) === e$jscomp$3275) {
                    throw Error("invalid encoding");
                  }
                  switch (a) {
                    case 0:
                      tRecord = t;
                      a = 1;
                      break;
                    case 1:
                      header[n++] = tRecord << 2 | (48 & t) >> 4;
                      tRecord = t;
                      a = 2;
                      break;
                    case 2:
                      header[n++] = (15 & tRecord) << 4 | (60 & t) >> 2;
                      tRecord = t;
                      a = 3;
                      break;
                    case 3:
                      header[n++] = (3 & tRecord) << 6 | t;
                      a = 0;
                  }
                }
                if (1 === a) {
                  throw Error("invalid encoding");
                }
                return n - w;
              };
              o.test = function (type) {
                return /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(type);
              };
            }, {}],
            3: [function (canCreateDiscussions, module) {
              function test(value, name) {
                function update(o) {
                  if ("string" != typeof o) {
                    var result = id();
                    if (test.verbose && console.log("codegen: " + result), result = "return " + result, o) {
                      var array = (0, _keys2$jscomp$0.default)(o);
                      var data = Array(array.length + 1);
                      var params = Array(array.length);
                      var i = 0;
                      for (; i < array.length;) {
                        data[i] = array[i];
                        params[i] = o[array[i++]];
                      }
                      return data[i] = result, Function.apply(null, data).apply(null, params);
                    }
                    return Function(result)();
                  }
                  var args = Array(arguments.length - 1);
                  var i = 0;
                  for (; i < args.length;) {
                    args[i] = arguments[++i];
                  }
                  if (i = 0, o = o.replace(/%([%dfijs])/g, function (canCreateDiscussions, type) {
                    var num = args[i++];
                    switch (type) {
                      case "d":
                      case "f":
                        return +num + "";
                      case "i":
                        return Math.floor(num) + "";
                      case "j":
                        return (0, _stringify2$jscomp$0.default)(num);
                      case "s":
                        return num + "";
                    }
                    return "%";
                  }), i !== args.length) {
                    throw Error("parameter count mismatch");
                  }
                  return arg.push(o), update;
                }
                function id(type) {
                  return "function " + (type || name || "") + "(" + (value && value.join(",") || "") + "){\n  " + arg.join("\n  ") + "\n}";
                }
                if ("string" == typeof value) {
                  name = value;
                  value = e$jscomp$3275;
                }
                var arg = [];
                return update.toString = id, update;
              }
              module.exports = test;
              test.verbose = false;
            }, {}],
            4: [function (canCreateDiscussions, mixin) {
              function m() {
                this.a = {};
              }
              mixin.exports = m;
              m.prototype.on = function (name, fn, context) {
                return (this.a[name] || (this.a[name] = [])).push({
                  fn: fn,
                  ctx: context || this
                }), this;
              };
              m.prototype.off = function (name, fn) {
                if (name === e$jscomp$3275) {
                  this.a = {};
                } else {
                  if (fn === e$jscomp$3275) {
                    this.a[name] = [];
                  } else {
                    var listeners = this.a[name];
                    var i = 0;
                    for (; i < listeners.length;) {
                      if (listeners[i].fn === fn) {
                        listeners.splice(i, 1);
                      } else {
                        ++i;
                      }
                    }
                  }
                }
                return this;
              };
              m.prototype.emit = function (name) {
                var listeners = this.a[name];
                if (listeners) {
                  var theArgs = [];
                  var i = 1;
                  for (; i < arguments.length;) {
                    theArgs.push(arguments[i++]);
                  }
                  i = 0;
                  for (; i < listeners.length;) {
                    listeners[i].fn.apply(listeners[i++].ctx, theArgs);
                  }
                }
                return this;
              };
            }, {}],
            5: [function (require, module) {
              function request(value, name, callback) {
                return "function" == typeof name ? (callback = name, name = {}) : name || (name = {}), callback ? !name.xhr && instance && instance.readFile ? instance.readFile(value, function (err, result) {
                  return err && "undefined" != typeof XMLHttpRequest ? request.xhr(value, name, callback) : err ? callback(err) : callback(null, name.binary ? result : result.toString("utf8"));
                }) : request.xhr(value, name, callback) : debug(request, this, value, name);
              }
              module.exports = request;
              var debug = require(1);
              var instance = require(7)("fs");
              request.xhr = function (params, type, callback) {
                var xhr = new XMLHttpRequest;
                xhr.onreadystatechange = function () {
                  if (4 !== xhr.readyState) {
                    return e$jscomp$3275;
                  }
                  if (0 !== xhr.status && 200 !== xhr.status) {
                    return callback(Error("status " + xhr.status));
                  }
                  if (type.binary) {
                    var result = xhr.response;
                    if (!result) {
                      result = [];
                      var i = 0;
                      for (; i < xhr.responseText.length; ++i) {
                        result.push(255 & xhr.responseText.charCodeAt(i));
                      }
                    }
                    return callback(null, "undefined" != typeof Uint8Array ? new Uint8Array(result) : result);
                  }
                  return callback(null, xhr.responseText);
                };
                if (type.binary) {
                  if ("overrideMimeType" in xhr) {
                    xhr.overrideMimeType("text/plain; charset=x-user-defined");
                  }
                  xhr.responseType = "arraybuffer";
                }
                xhr.open("GET", params);
                xhr.send();
              };
            }, {
              1: 1,
              7: 7
            }],
            6: [function (canCreateDiscussions, module) {
              function init(arr) {
                return "undefined" != typeof Float32Array ? function () {
                  function to(n, v, type) {
                    out[0] = n;
                    v[type] = data[0];
                    v[type + 1] = data[1];
                    v[type + 2] = data[2];
                    v[type + 3] = data[3];
                  }
                  function message(type, props, propName) {
                    out[0] = type;
                    props[propName] = data[3];
                    props[propName + 1] = data[2];
                    props[propName + 2] = data[1];
                    props[propName + 3] = data[0];
                  }
                  function p(array, i) {
                    return data[0] = array[i], data[1] = array[i + 1], data[2] = array[i + 2], data[3] = array[i + 3], out[0];
                  }
                  function from(source, index) {
                    return data[3] = source[index], data[2] = source[index + 1], data[1] = source[index + 2], data[0] = source[index + 3], out[0];
                  }
                  var out = new Float32Array([-0]);
                  var data = new Uint8Array(out.buffer);
                  var isGroup = 128 === data[3];
                  arr.writeFloatLE = isGroup ? to : message;
                  arr.writeFloatBE = isGroup ? message : to;
                  arr.readFloatLE = isGroup ? p : from;
                  arr.readFloatBE = isGroup ? from : p;
                }() : function () {
                  function f(e, value, p, n) {
                    var notKeyPress = value < 0 ? 1 : 0;
                    if (notKeyPress && (value = -value), 0 === value) {
                      e(1 / value > 0 ? 0 : 2147483648, p, n);
                    } else {
                      if (isNaN(value)) {
                        e(2143289344, p, n);
                      } else {
                        if (value > 3.4028234663852886E38) {
                          e((notKeyPress << 31 | 2139095040) >>> 0, p, n);
                        } else {
                          if (value < 1.1754943508222875E-38) {
                            e((notKeyPress << 31 | Math.round(value / 1.401298464324817E-45)) >>> 0, p, n);
                          } else {
                            var numOfPayments = Math.floor(Math.log(value) / Math.LN2);
                            e((notKeyPress << 31 | numOfPayments + 127 << 23 | 8388607 & Math.round(value * Math.pow(2, -numOfPayments) * 8388608)) >>> 0, p, n);
                          }
                        }
                      }
                    }
                  }
                  function test(f, msg, t) {
                    var b = f(msg, t);
                    var bn = 2 * (b >> 31) + 1;
                    var strLenSize = b >>> 23 & 255;
                    var m = 8388607 & b;
                    return 255 === strLenSize ? m ? NaN : bn * (1 / 0) : 0 === strLenSize ? 1.401298464324817E-45 * bn * m : bn * Math.pow(2, strLenSize - 150) * (m + 8388608);
                  }
                  arr.writeFloatLE = f.bind(null, time);
                  arr.writeFloatBE = f.bind(null, i);
                  arr.readFloatLE = test.bind(null, sort);
                  arr.readFloatBE = test.bind(null, o);
                }(), "undefined" != typeof Float64Array ? function () {
                  function to(n, v, type) {
                    out[0] = n;
                    v[type] = data[0];
                    v[type + 1] = data[1];
                    v[type + 2] = data[2];
                    v[type + 3] = data[3];
                    v[type + 4] = data[4];
                    v[type + 5] = data[5];
                    v[type + 6] = data[6];
                    v[type + 7] = data[7];
                  }
                  function message(type, props, propName) {
                    out[0] = type;
                    props[propName] = data[7];
                    props[propName + 1] = data[6];
                    props[propName + 2] = data[5];
                    props[propName + 3] = data[4];
                    props[propName + 4] = data[3];
                    props[propName + 5] = data[2];
                    props[propName + 6] = data[1];
                    props[propName + 7] = data[0];
                  }
                  function p(array, i) {
                    return data[0] = array[i], data[1] = array[i + 1], data[2] = array[i + 2], data[3] = array[i + 3], data[4] = array[i + 4], data[5] = array[i + 5], data[6] = array[i + 6], data[7] = array[i + 7], out[0];
                  }
                  function from(source, index) {
                    return data[7] = source[index], data[6] = source[index + 1], data[5] = source[index + 2], data[4] = source[index + 3], data[3] = source[index + 4], data[2] = source[index + 5], data[1] = source[index + 6], data[0] = source[index + 7], out[0];
                  }
                  var out = new Float64Array([-0]);
                  var data = new Uint8Array(out.buffer);
                  var isGroup = 128 === data[7];
                  arr.writeDoubleLE = isGroup ? to : message;
                  arr.writeDoubleBE = isGroup ? message : to;
                  arr.readDoubleLE = isGroup ? p : from;
                  arr.readDoubleBE = isGroup ? from : p;
                }() : function () {
                  function filter(f, source, filename, value, root, base) {
                    var notKeyPress = value < 0 ? 1 : 0;
                    if (notKeyPress && (value = -value), 0 === value) {
                      f(0, root, base + source);
                      f(1 / value > 0 ? 0 : 2147483648, root, base + filename);
                    } else {
                      if (isNaN(value)) {
                        f(0, root, base + source);
                        f(2146959360, root, base + filename);
                      } else {
                        if (value > 1.7976931348623157E308) {
                          f(0, root, base + source);
                          f((notKeyPress << 31 | 2146435072) >>> 0, root, base + filename);
                        } else {
                          var height;
                          if (value < 2.2250738585072014E-308) {
                            f((height = value / 4.9E-324) >>> 0, root, base + source);
                            f((notKeyPress << 31 | height / 4294967296) >>> 0, root, base + filename);
                          } else {
                            var numOfPayments = Math.floor(Math.log(value) / Math.LN2);
                            if (1024 === numOfPayments) {
                              numOfPayments = 1023;
                            }
                            f(4503599627370496 * (height = value * Math.pow(2, -numOfPayments)) >>> 0, root, base + source);
                            f((notKeyPress << 31 | numOfPayments + 1023 << 20 | 1048576 * height & 1048575) >>> 0, root, base + filename);
                          }
                        }
                      }
                    }
                  }
                  function f(format, index, line, file, i) {
                    var d = format(file, i + index);
                    var f = format(file, i + line);
                    var bn = 2 * (f >> 31) + 1;
                    var strLenSize = f >>> 20 & 2047;
                    var m = 4294967296 * (1048575 & f) + d;
                    return 2047 === strLenSize ? m ? NaN : bn * (1 / 0) : 0 === strLenSize ? 4.9E-324 * bn * m : bn * Math.pow(2, strLenSize - 1075) * (m + 4503599627370496);
                  }
                  arr.writeDoubleLE = filter.bind(null, time, 0, 4);
                  arr.writeDoubleBE = filter.bind(null, i, 4, 0);
                  arr.readDoubleLE = f.bind(null, sort, 0, 4);
                  arr.readDoubleBE = f.bind(null, o, 4, 0);
                }(), arr;
              }
              function time(mask, data, index) {
                data[index] = 255 & mask;
                data[index + 1] = mask >>> 8 & 255;
                data[index + 2] = mask >>> 16 & 255;
                data[index + 3] = mask >>> 24;
              }
              function i(v, s, i) {
                s[i] = v >>> 24;
                s[i + 1] = v >>> 16 & 255;
                s[i + 2] = v >>> 8 & 255;
                s[i + 3] = 255 & v;
              }
              function sort(d, x) {
                return (d[x] | d[x + 1] << 8 | d[x + 2] << 16 | d[x + 3] << 24) >>> 0;
              }
              function o(object, property) {
                return (object[property] << 24 | object[property + 1] << 16 | object[property + 2] << 8 | object[property + 3]) >>> 0;
              }
              module.exports = init(init);
            }, {}],
            7: [function (t$jscomp$2515, e$jscomp$3309, r$jscomp$1731) {
              function n$jscomp$1013(t$jscomp$2516) {
                try {
                  var e$jscomp$3310 = eval("quire".replace(/^/, "re"))(t$jscomp$2516);
                  if (e$jscomp$3310 && (e$jscomp$3310.length || (0, _keys2$jscomp$0.default)(e$jscomp$3310).length)) {
                    return e$jscomp$3310;
                  }
                } catch (t) {
                }
                return null;
              }
              e$jscomp$3309.exports = n$jscomp$1013;
            }, {}],
            8: [function (canCreateDiscussions, isSlidingUp, jpegEncoded) {
              var result = jpegEncoded;
              var isObject = result.isAbsolute = function (name) {
                return /^(?:\/|\w+:)/.test(name);
              };
              var $ = result.normalize = function (value) {
                var tokens = (value = value.replace(/\\/g, "/").replace(/\/{2,}/g, "/")).split("/");
                var isObj = isObject(value);
                var finalPath = "";
                if (isObj) {
                  finalPath = tokens.shift() + "/";
                }
                var i = 0;
                for (; i < tokens.length;) {
                  if (".." === tokens[i]) {
                    if (i > 0 && ".." !== tokens[i - 1]) {
                      tokens.splice(--i, 2);
                    } else {
                      if (isObj) {
                        tokens.splice(i, 1);
                      } else {
                        ++i;
                      }
                    }
                  } else {
                    if ("." === tokens[i]) {
                      tokens.splice(i, 1);
                    } else {
                      ++i;
                    }
                  }
                }
                return finalPath + tokens.join("/");
              };
              result.resolve = function (value, name, data) {
                return data || (name = $(name)), isObject(name) ? name : (data || (value = $(value)), (value = value.replace(/(?:\/|^)[^\/]+$/, "")).length ? $(value + "/" + name) : name);
              };
            }, {}],
            9: [function (canCreateDiscussions, mixin) {
              mixin.exports = function (value, name, object) {
                var length = object || 8192;
                var $9 = length >>> 1;
                var data = null;
                var len = length;
                return function (code) {
                  if (code < 1 || code > $9) {
                    return value(code);
                  }
                  if (len + code > length) {
                    data = value(length);
                    len = 0;
                  }
                  var unc = name.call(data, len, len = len + code);
                  return 7 & len && (len = 1 + (7 | len)), unc;
                };
              };
            }, {}],
            10: [function (canCreateDiscussions, isSlidingUp, aFormValues) {
              var p = aFormValues;
              p.length = function (value) {
                var llength = 0;
                var firstIsCO = 0;
                var i = 0;
                for (; i < value.length; ++i) {
                  if ((firstIsCO = value.charCodeAt(i)) < 128) {
                    llength = llength + 1;
                  } else {
                    if (firstIsCO < 2048) {
                      llength = llength + 2;
                    } else {
                      if (55296 == (64512 & firstIsCO) && 56320 == (64512 & value.charCodeAt(i + 1))) {
                        ++i;
                        llength = llength + 4;
                      } else {
                        llength = llength + 3;
                      }
                    }
                  }
                }
                return llength;
              };
              p.read = function (value, key, val) {
                if (val - key < 1) {
                  return "";
                }
                var c;
                var operands = null;
                var args = [];
                var i = 0;
                for (; key < val;) {
                  if ((c = value[key++]) < 128) {
                    args[i++] = c;
                  } else {
                    if (c > 191 && c < 224) {
                      args[i++] = (31 & c) << 6 | 63 & value[key++];
                    } else {
                      if (c > 239 && c < 365) {
                        c = ((7 & c) << 18 | (63 & value[key++]) << 12 | (63 & value[key++]) << 6 | 63 & value[key++]) - 65536;
                        args[i++] = 55296 + (c >> 10);
                        args[i++] = 56320 + (1023 & c);
                      } else {
                        args[i++] = (15 & c) << 12 | (63 & value[key++]) << 6 | 63 & value[key++];
                      }
                    }
                  }
                  if (i > 8191) {
                    (operands || (operands = [])).push(String.fromCharCode.apply(String, args));
                    i = 0;
                  }
                }
                return operands ? (i && operands.push(String.fromCharCode.apply(String, args.slice(0, i))), operands.join("")) : String.fromCharCode.apply(String, args.slice(0, i));
              };
              p.write = function (str, options, i) {
                var source;
                var o;
                var iAtStart = i;
                var index = 0;
                for (; index < str.length; ++index) {
                  if ((source = str.charCodeAt(index)) < 128) {
                    options[i++] = source;
                  } else {
                    if (source < 2048) {
                      options[i++] = source >> 6 | 192;
                      options[i++] = 63 & source | 128;
                    } else {
                      if (55296 == (64512 & source) && 56320 == (64512 & (o = str.charCodeAt(index + 1)))) {
                        source = 65536 + ((1023 & source) << 10) + (1023 & o);
                        ++index;
                        options[i++] = source >> 18 | 240;
                        options[i++] = source >> 12 & 63 | 128;
                        options[i++] = source >> 6 & 63 | 128;
                        options[i++] = 63 & source | 128;
                      } else {
                        options[i++] = source >> 12 | 224;
                        options[i++] = source >> 6 & 63 | 128;
                        options[i++] = 63 & source | 128;
                      }
                    }
                  }
                }
                return i - iAtStart;
              };
            }, {}],
            11: [function (canCreateDiscussions, module) {
              function parse(value, name) {
                if (!trueRE.test(value)) {
                  value = "google/protobuf/" + value + ".proto";
                  name = {
                    nested: {
                      google: {
                        nested: {
                          protobuf: {
                            nested: name
                          }
                        }
                      }
                    }
                  };
                }
                parse[value] = name;
              }
              module.exports = parse;
              var Timestamp;
              var trueRE = /\/|\./;
              parse("any", {
                Any: {
                  fields: {
                    type_url: {
                      type: "string",
                      id: 1
                    },
                    value: {
                      type: "bytes",
                      id: 2
                    }
                  }
                }
              });
              parse("duration", {
                Duration: Timestamp = {
                  fields: {
                    seconds: {
                      type: "int64",
                      id: 1
                    },
                    nanos: {
                      type: "int32",
                      id: 2
                    }
                  }
                }
              });
              parse("timestamp", {
                Timestamp: Timestamp
              });
              parse("empty", {
                Empty: {
                  fields: {}
                }
              });
              parse("struct", {
                Struct: {
                  fields: {
                    fields: {
                      keyType: "string",
                      type: "Value",
                      id: 1
                    }
                  }
                },
                Value: {
                  oneofs: {
                    kind: {
                      oneof: ["nullValue", "numberValue", "stringValue", "boolValue", "structValue", "listValue"]
                    }
                  },
                  fields: {
                    nullValue: {
                      type: "NullValue",
                      id: 1
                    },
                    numberValue: {
                      type: "double",
                      id: 2
                    },
                    stringValue: {
                      type: "string",
                      id: 3
                    },
                    boolValue: {
                      type: "bool",
                      id: 4
                    },
                    structValue: {
                      type: "Struct",
                      id: 5
                    },
                    listValue: {
                      type: "ListValue",
                      id: 6
                    }
                  }
                },
                NullValue: {
                  values: {
                    NULL_VALUE: 0
                  }
                },
                ListValue: {
                  fields: {
                    values: {
                      rule: "repeated",
                      type: "Value",
                      id: 1
                    }
                  }
                }
              });
              parse("wrappers", {
                DoubleValue: {
                  fields: {
                    value: {
                      type: "double",
                      id: 1
                    }
                  }
                },
                FloatValue: {
                  fields: {
                    value: {
                      type: "float",
                      id: 1
                    }
                  }
                },
                Int64Value: {
                  fields: {
                    value: {
                      type: "int64",
                      id: 1
                    }
                  }
                },
                UInt64Value: {
                  fields: {
                    value: {
                      type: "uint64",
                      id: 1
                    }
                  }
                },
                Int32Value: {
                  fields: {
                    value: {
                      type: "int32",
                      id: 1
                    }
                  }
                },
                UInt32Value: {
                  fields: {
                    value: {
                      type: "uint32",
                      id: 1
                    }
                  }
                },
                BoolValue: {
                  fields: {
                    value: {
                      type: "bool",
                      id: 1
                    }
                  }
                },
                StringValue: {
                  fields: {
                    value: {
                      type: "string",
                      id: 1
                    }
                  }
                },
                BytesValue: {
                  fields: {
                    value: {
                      type: "bytes",
                      id: 1
                    }
                  }
                }
              });
              parse.get = function (value) {
                return parse[value] || null;
              };
            }, {}],
            12: [function (windowJquery, isSlidingUp, modstatus) {
              function encodeField(fn, field, val, key) {
                if (field.resolvedType) {
                  if (field.resolvedType instanceof ReactiveVar) {
                    fn("switch(d%s){", key);
                    var vals = field.resolvedType.values;
                    var keys = (0, _keys2$jscomp$0.default)(vals);
                    var i = 0;
                    for (; i < keys.length; ++i) {
                      if (field.repeated && vals[keys[i]] === field.typeDefault) {
                        fn("default:");
                      }
                      fn("case%j:", keys[i])("case %i:", vals[keys[i]])("m%s=%j", key, vals[keys[i]])("break");
                    }
                    fn("}");
                  } else {
                    fn('if(typeof d%s!=="object")', key)("throw TypeError(%j)", field.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", key, val, key);
                  }
                } else {
                  var expectedHidden = false;
                  switch (field.type) {
                    case "double":
                    case "float":
                      fn("m%s=Number(d%s)", key, key);
                      break;
                    case "uint32":
                    case "fixed32":
                      fn("m%s=d%s>>>0", key, key);
                      break;
                    case "int32":
                    case "sint32":
                    case "sfixed32":
                      fn("m%s=d%s|0", key, key);
                      break;
                    case "uint64":
                      expectedHidden = true;
                    case "int64":
                    case "sint64":
                    case "fixed64":
                    case "sfixed64":
                      fn("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", key, key, expectedHidden)('else if(typeof d%s==="string")', key)("m%s=parseInt(d%s,10)", key, key)('else if(typeof d%s==="number")', key)("m%s=d%s", key, key)('else if(typeof d%s==="object")', key)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", key, key, key, expectedHidden ? "true" : "");
                      break;
                    case "bytes":
                      fn('if(typeof d%s==="string")', key)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", key, key, key)("else if(d%s.length)", key)("m%s=d%s", key, key);
                      break;
                    case "string":
                      fn("m%s=String(d%s)", key, key);
                      break;
                    case "bool":
                      fn("m%s=Boolean(d%s)", key, key);
                  }
                }
                return fn;
              }
              function test(fn, field, validation, callback) {
                if (field.resolvedType) {
                  if (field.resolvedType instanceof ReactiveVar) {
                    fn("d%s=o.enums===String?types[%i].values[m%s]:m%s", callback, validation, callback, callback);
                  } else {
                    fn("d%s=types[%i].toObject(m%s,o)", callback, validation, callback);
                  }
                } else {
                  var show_percent = false;
                  switch (field.type) {
                    case "double":
                    case "float":
                      fn("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", callback, callback, callback, callback);
                      break;
                    case "uint64":
                      show_percent = true;
                    case "int64":
                    case "sint64":
                    case "fixed64":
                    case "sfixed64":
                      fn('if(typeof m%s==="number")', callback)("d%s=o.longs===String?String(m%s):m%s", callback, callback, callback)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", callback, callback, callback, callback, show_percent ? "true" : "", callback);
                      break;
                    case "bytes":
                      fn("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", callback, callback, callback, callback, callback);
                      break;
                    default:
                      fn("d%s=m%s", callback, callback);
                  }
                }
                return fn;
              }
              var operation_type = modstatus;
              var ReactiveVar = windowJquery(15);
              var element = windowJquery(37);
              operation_type.fromObject = function (value) {
                var sources = value.fieldsArray;
                var key = element.codegen(["d"], value.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
                if (!sources.length) {
                  return key("return new this.ctor");
                }
                key("var m=new this.ctor");
                var i = 0;
                for (; i < sources.length; ++i) {
                  var field = sources[i].resolve();
                  var keyCode = element.safeProp(field.name);
                  if (field.map) {
                    key("if(d%s){", keyCode)('if(typeof d%s!=="object")', keyCode)("throw TypeError(%j)", field.fullName + ": object expected")("m%s={}", keyCode)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", keyCode);
                    encodeField(key, field, i, keyCode + "[ks[i]]")("}")("}");
                  } else {
                    if (field.repeated) {
                      key("if(d%s){", keyCode)("if(!Array.isArray(d%s))", keyCode)("throw TypeError(%j)", field.fullName + ": array expected")("m%s=[]", keyCode)("for(var i=0;i<d%s.length;++i){", keyCode);
                      encodeField(key, field, i, keyCode + "[i]")("}")("}");
                    } else {
                      if (!(field.resolvedType instanceof ReactiveVar)) {
                        key("if(d%s!=null){", keyCode);
                      }
                      encodeField(key, field, i, keyCode);
                      if (!(field.resolvedType instanceof ReactiveVar)) {
                        key("}");
                      }
                    }
                  }
                }
                return key("return m");
              };
              operation_type.toObject = function (line) {
                var data = line.fieldsArray.slice().sort(element.compareFieldsById);
                if (!data.length) {
                  return element.codegen()("return {}");
                }
                var extend = element.codegen(["m", "o"], line.name + "$toObject")("if(!o)")("o={}")("var d={}");
                var _regExpPipedSegments = [];
                var tempExistingMapFile = [];
                var baseData = [];
                var i = 0;
                for (; i < data.length; ++i) {
                  if (!data[i].partOf) {
                    (data[i].resolve().repeated ? _regExpPipedSegments : data[i].map ? tempExistingMapFile : baseData).push(data[i]);
                  }
                }
                var l = false;
                i = 0;
                for (; i < data.length; ++i) {
                  var view = data[i];
                  var name = line.b.indexOf(view);
                  var options = element.safeProp(view.name);
                  if (view.map) {
                    if (!l) {
                      l = true;
                      extend("var ks2");
                    }
                    extend("if(m%s&&(ks2=Object.keys(m%s)).length){", options, options)("d%s={}", options)("for(var j=0;j<ks2.length;++j){");
                    test(extend, view, name, options + "[ks2[j]]")("}");
                  } else {
                    if (view.repeated) {
                      extend("if(m%s&&m%s.length){", options, options)("d%s=[]", options)("for(var j=0;j<m%s.length;++j){", options);
                      test(extend, view, name, options + "[j]")("}");
                    } else {
                      extend("if(m%s!=null&&m.hasOwnProperty(%j)){", options, view.name);
                      test(extend, view, name, options);
                      if (view.partOf) {
                        extend("if(o.oneofs)")("d%s=%j", element.safeProp(view.partOf.name), view.name);
                      }
                    }
                  }
                  extend("}");
                }
                return extend("return d");
              };
            }, {
              15: 15,
              37: 37
            }],
            13: [function (require, mixin) {
              function finishPrevPart(end) {
                return "missing required '" + end.name + "'";
              }
              mixin.exports = function (value) {
                var cb = screen.codegen(["r", "l"], value.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (value.fieldsArray.filter(function (buildInTemplates) {
                  return buildInTemplates.map;
                }).length ? ",k" : ""))("while(r.pos<c){")("var t=r.uint32()");
                if (value.group) {
                  cb("if((t&7)===4)")("break");
                }
                cb("switch(t>>>3){");
                var index = 0;
                for (; index < value.fieldsArray.length; ++index) {
                  var options = value.b[index].resolve();
                  var key = options.resolvedType instanceof jQuery ? "int32" : options.type;
                  var ret = "m" + screen.safeProp(options.name);
                  cb("case %i:", options.id);
                  if (options.map) {
                    cb("r.skip().pos++")("if(%s===util.emptyObject)", ret)("%s={}", ret)("k=r.%s()", options.keyType)("r.pos++");
                    if (data.long[options.keyType] !== e$jscomp$3275) {
                      if (data.basic[key] === e$jscomp$3275) {
                        cb('%s[typeof k==="object"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())', ret, index);
                      } else {
                        cb('%s[typeof k==="object"?util.longToHash(k):k]=r.%s()', ret, key);
                      }
                    } else {
                      if (data.basic[key] === e$jscomp$3275) {
                        cb("%s[k]=types[%i].decode(r,r.uint32())", ret, index);
                      } else {
                        cb("%s[k]=r.%s()", ret, key);
                      }
                    }
                  } else {
                    if (options.repeated) {
                      cb("if(!(%s&&%s.length))", ret, ret)("%s=[]", ret);
                      if (data.packed[key] !== e$jscomp$3275) {
                        cb("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ret, key)("}else");
                      }
                      if (data.basic[key] === e$jscomp$3275) {
                        cb(options.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ret, index);
                      } else {
                        cb("%s.push(r.%s())", ret, key);
                      }
                    } else {
                      if (data.basic[key] === e$jscomp$3275) {
                        cb(options.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ret, index);
                      } else {
                        cb("%s=r.%s()", ret, key);
                      }
                    }
                  }
                  cb("break");
                }
                cb("default:")("r.skipType(t&7)")("break")("}")("}");
                index = 0;
                for (; index < value.b.length; ++index) {
                  var c = value.b[index];
                  if (c.required) {
                    cb("if(!m.hasOwnProperty(%j))", c.name)("throw util.ProtocolError(%j,{instance:m})", finishPrevPart(c));
                  }
                }
                return cb("return m");
              };
              var jQuery = require(15);
              var data = require(36);
              var screen = require(37);
            }, {
              15: 15,
              36: 36,
              37: 37
            }],
            14: [function (require, mixin) {
              function exec(fn, node, query, onSuccess) {
                return node.resolvedType.group ? fn("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", query, onSuccess, (node.id << 3 | 3) >>> 0, (node.id << 3 | 4) >>> 0) : fn("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", query, onSuccess, (node.id << 3 | 2) >>> 0);
              }
              mixin.exports = function (value) {
                var options;
                var format = test.codegen(["m", "w"], value.name + "$encode")("if(!w)")("w=Writer.create()");
                var resolveQueue = value.fieldsArray.slice().sort(test.compareFieldsById);
                var i = 0;
                for (; i < resolveQueue.length; ++i) {
                  var data = resolveQueue[i].resolve();
                  var target = value.b.indexOf(data);
                  var type = data.resolvedType instanceof ICalAttendee ? "int32" : data.type;
                  var suffix = self.basic[type];
                  options = "m" + test.safeProp(data.name);
                  if (data.map) {
                    format("if(%s!=null&&m.hasOwnProperty(%j)){", options, data.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", options)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (data.id << 3 | 2) >>> 0, 8 | self.mapKey[data.keyType], data.keyType);
                    if (suffix === e$jscomp$3275) {
                      format("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", target, options);
                    } else {
                      format(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | suffix, type, options);
                    }
                    format("}")("}");
                  } else {
                    if (data.repeated) {
                      format("if(%s!=null&&%s.length){", options, options);
                      if (data.packed && self.packed[type] !== e$jscomp$3275) {
                        format("w.uint32(%i).fork()", (data.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", options)("w.%s(%s[i])", type, options)("w.ldelim()");
                      } else {
                        format("for(var i=0;i<%s.length;++i)", options);
                        if (suffix === e$jscomp$3275) {
                          exec(format, data, target, options + "[i]");
                        } else {
                          format("w.uint32(%i).%s(%s[i])", (data.id << 3 | suffix) >>> 0, type, options);
                        }
                      }
                      format("}");
                    } else {
                      if (data.optional) {
                        format("if(%s!=null&&m.hasOwnProperty(%j))", options, data.name);
                      }
                      if (suffix === e$jscomp$3275) {
                        exec(format, data, target, options);
                      } else {
                        format("w.uint32(%i).%s(%s)", (data.id << 3 | suffix) >>> 0, type, options);
                      }
                    }
                  }
                }
                return format("return w");
              };
              var ICalAttendee = require(15);
              var self = require(36);
              var test = require(37);
            }, {
              15: 15,
              36: 36,
              37: 37
            }],
            15: [function (require, module) {
              function Node(value, name, data) {
                if (child.call(this, value, data), name && "object" != (void 0 === name ? "undefined" : (0, _typeof3$jscomp$0.default)(name))) {
                  throw TypeError("values must be an object");
                }
                if (this.valuesById = {}, this.values = (0, _create2$jscomp$0.default)(this.valuesById), this.comments = {}, name) {
                  var names = (0, _keys2$jscomp$0.default)(name);
                  var i = 0;
                  for (; i < names.length; ++i) {
                    if ("number" == typeof name[names[i]]) {
                      this.valuesById[this.values[names[i]] = name[names[i]]] = names[i];
                    }
                  }
                }
              }
              module.exports = Node;
              var child = require(24);
              ((Node.prototype = (0, _create2$jscomp$0.default)(child.prototype)).constructor = Node).className = "Enum";
              var _ = require(37);
              Node.fromJSON = function (parent, data) {
                return new Node(parent, data.values, data.options);
              };
              Node.prototype.toJSON = function () {
                return _.toObject(["options", this.options, "values", this.values]);
              };
              Node.prototype.add = function (id, value, result) {
                if (!_.isString(id)) {
                  throw TypeError("name must be a string");
                }
                if (!_.isInteger(value)) {
                  throw TypeError("id must be an integer");
                }
                if (this.values[id] !== e$jscomp$3275) {
                  throw Error("duplicate name");
                }
                if (this.valuesById[value] !== e$jscomp$3275) {
                  if (!this.options || !this.options.allow_alias) {
                    throw Error("duplicate id");
                  }
                  this.values[id] = value;
                } else {
                  this.valuesById[this.values[id] = value] = id;
                }
                return this.comments[id] = result || null, this;
              };
              Node.prototype.remove = function (id) {
                if (!_.isString(id)) {
                  throw TypeError("name must be a string");
                }
                var next = this.values[id];
                if (next === e$jscomp$3275) {
                  throw Error("name does not exist");
                }
                return delete this.valuesById[next], delete this.values[id], delete this.comments[id], this;
              };
            }, {
              24: 24,
              37: 37
            }],
            16: [function (require, module) {
              function Request(obj, name, type, s, p, c) {
                if (self.isObject(s) ? (c = s, s = p = e$jscomp$3275) : self.isObject(p) && (c = p, p = e$jscomp$3275), instance.call(this, obj, c), !self.isInteger(name) || name < 0) {
                  throw TypeError("id must be a non-negative integer");
                }
                if (!self.isString(type)) {
                  throw TypeError("type must be a string");
                }
                if (s !== e$jscomp$3275 && !format.test(s = ("" + s).toLowerCase())) {
                  throw TypeError("rule must be a string rule");
                }
                if (p !== e$jscomp$3275 && !self.isString(p)) {
                  throw TypeError("extend must be a string");
                }
                this.rule = s && "optional" !== s ? s : e$jscomp$3275;
                this.type = type;
                this.id = name;
                this.extend = p || e$jscomp$3275;
                this.required = "required" === s;
                this.optional = !this.required;
                this.repeated = "repeated" === s;
                this.map = false;
                this.message = null;
                this.partOf = null;
                this.typeDefault = null;
                this.defaultValue = null;
                this.long = !!self.Long && options.long[type] !== e$jscomp$3275;
                this.bytes = "bytes" === type;
                this.resolvedType = null;
                this.extensionField = null;
                this.declaringField = null;
                this.c = null;
              }
              module.exports = Request;
              var instance = require(24);
              ((Request.prototype = (0, _create2$jscomp$0.default)(instance.prototype)).constructor = Request).className = "Field";
              var type;
              var TagHourlyStat = require(15);
              var options = require(36);
              var self = require(37);
              var format = /^required|optional|repeated$/;
              Request.fromJSON = function (data, json) {
                return new Request(data, json.id, json.type, json.rule, json.extend, json.options);
              };
              Object.defineProperty(Request.prototype, "packed", {
                get: function () {
                  return null === this.c && (this.c = false !== this.getOption("packed")), this.c;
                }
              });
              Request.prototype.setOption = function (name, e, index) {
                return "packed" === name && (this.c = null), instance.prototype.setOption.call(this, name, e, index);
              };
              Request.prototype.toJSON = function () {
                return self.toObject(["rule", "optional" !== this.rule && this.rule || e$jscomp$3275, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options]);
              };
              Request.prototype.resolve = function () {
                if (this.resolved) {
                  return this;
                }
                if ((this.typeDefault = options.defaults[this.type]) === e$jscomp$3275 && (this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type), this.resolvedType instanceof type ? this.typeDefault = null : this.typeDefault = this.resolvedType.values[(0, _keys2$jscomp$0.default)(this.resolvedType.values)[0]]), this.options && null != this.options.default && (this.typeDefault = this.options.default, this.resolvedType instanceof TagHourlyStat &&
                  "string" == typeof this.typeDefault && (this.typeDefault = this.resolvedType.values[this.typeDefault])), this.options && (true !== this.options.packed && (this.options.packed === e$jscomp$3275 || !this.resolvedType || this.resolvedType instanceof TagHourlyStat) || delete this.options.packed, (0, _keys2$jscomp$0.default)(this.options).length || (this.options = e$jscomp$3275)), this.long) {
                  this.typeDefault = self.Long.fromNumber(this.typeDefault, "u" === this.type.charAt(0));
                  if (_freeze2$jscomp$0.default) {
                    (0, _freeze2$jscomp$0.default)(this.typeDefault);
                  }
                } else {
                  if (this.bytes && "string" == typeof this.typeDefault) {
                    var p;
                    if (self.base64.test(this.typeDefault)) {
                      self.base64.decode(this.typeDefault, p = self.newBuffer(self.base64.length(this.typeDefault)), 0);
                    } else {
                      self.utf8.write(this.typeDefault, p = self.newBuffer(self.utf8.length(this.typeDefault)), 0);
                    }
                    this.typeDefault = p;
                  }
                }
                return this.map ? this.defaultValue = self.emptyObject : this.repeated ? this.defaultValue = self.emptyArray : this.defaultValue = this.typeDefault, this.parent instanceof type && (this.parent.ctor.prototype[this.name] = this.defaultValue), instance.prototype.resolve.call(this);
              };
              Request.d = function (name, value, cb, date) {
                return "function" == typeof value ? value = self.decorateType(value).name : value && "object" == (void 0 === value ? "undefined" : (0, _typeof3$jscomp$0.default)(value)) && (value = self.decorateEnum(value).name), function (i, event) {
                  self.decorateType(i.constructor).add(new Request(event, name, value, cb, {
                    default: date
                  }));
                };
              };
              Request.e = function (value) {
                type = value;
              };
            }, {
              15: 15,
              24: 24,
              36: 36,
              37: 37
            }],
            17: [function (require, module) {
              var exports = module.exports = require(18);
              exports.build = "light";
              exports.load = function (r, t, i) {
                return "function" == typeof t ? (i = t, t = new exports.Root) : t || (t = new exports.Root), t.load(r, i);
              };
              exports.loadSync = function (request, url) {
                return url || (url = new exports.Root), url.loadSync(request);
              };
              exports.encoder = require(14);
              exports.decoder = require(13);
              exports.verifier = require(40);
              exports.converter = require(12);
              exports.ReflectionObject = require(24);
              exports.Namespace = require(23);
              exports.Root = require(29);
              exports.Enum = require(15);
              exports.Type = require(35);
              exports.Field = require(16);
              exports.OneOf = require(25);
              exports.MapField = require(20);
              exports.Service = require(33);
              exports.Method = require(22);
              exports.Message = require(21);
              exports.wrappers = require(41);
              exports.types = require(36);
              exports.util = require(37);
              exports.ReflectionObject.e(exports.Root);
              exports.Namespace.e(exports.Type, exports.Service);
              exports.Root.e(exports.Type);
              exports.Field.e(exports.Type);
            }, {
              12: 12,
              13: 13,
              14: 14,
              15: 15,
              16: 16,
              18: 18,
              20: 20,
              21: 21,
              22: 22,
              23: 23,
              24: 24,
              25: 25,
              29: 29,
              33: 33,
              35: 35,
              36: 36,
              37: 37,
              40: 40,
              41: 41
            }],
            18: [function (require, canCreateDiscussions, name) {
              function expand() {
                options.Reader.e(options.BufferReader);
                options.util.e();
              }
              var options = name;
              options.build = "minimal";
              options.Writer = require(42);
              options.BufferWriter = require(43);
              options.Reader = require(27);
              options.BufferReader = require(28);
              options.util = require(39);
              options.rpc = require(31);
              options.roots = require(30);
              options.configure = expand;
              options.Writer.e(options.BufferWriter);
              expand();
            }, {
              27: 27,
              28: 28,
              30: 30,
              31: 31,
              39: 39,
              42: 42,
              43: 43
            }],
            19: [function (require, module) {
              var options = module.exports = require(17);
              options.build = "full";
              options.tokenize = require(34);
              options.parse = require(26);
              options.common = require(11);
              options.Root.e(options.Type, options.parse, options.common);
            }, {
              11: 11,
              17: 17,
              26: 26,
              34: 34
            }],
            20: [function (require, module) {
              function Element(value, name, data, i, width) {
                if (ctx.call(this, value, name, i, width), !m.isString(data)) {
                  throw TypeError("keyType must be a string");
                }
                this.keyType = data;
                this.resolvedKeyType = null;
                this.map = true;
              }
              module.exports = Element;
              var ctx = require(16);
              ((Element.prototype = (0, _create2$jscomp$0.default)(ctx.prototype)).constructor = Element).className = "MapField";
              var $ = require(36);
              var m = require(37);
              Element.fromJSON = function (type, json) {
                return new Element(type, json.id, json.keyType, json.type, json.options);
              };
              Element.prototype.toJSON = function () {
                return m.toObject(["keyType", this.keyType, "type", this.type, "id", this.id, "extend", this.extend, "options", this.options]);
              };
              Element.prototype.resolve = function () {
                if (this.resolved) {
                  return this;
                }
                if ($.mapKey[this.keyType] === e$jscomp$3275) {
                  throw Error("invalid key type: " + this.keyType);
                }
                return ctx.prototype.resolve.call(this);
              };
              Element.d = function (name, index, value) {
                return "function" == typeof value ? value = m.decorateType(value).name : value && "object" == (void 0 === value ? "undefined" : (0, _typeof3$jscomp$0.default)(value)) && (value = m.decorateEnum(value).name), function (it, options) {
                  m.decorateType(it.constructor).add(new Element(options, name, index, value));
                };
              };
            }, {
              16: 16,
              36: 36,
              37: 37
            }],
            21: [function (norm, module) {
              function Options(value) {
                if (value) {
                  var keys = (0, _keys2$jscomp$0.default)(value);
                  var i = 0;
                  for (; i < keys.length; ++i) {
                    this[keys[i]] = value[keys[i]];
                  }
                }
              }
              module.exports = Options;
              var n = norm(39);
              Options.create = function (value) {
                return this.$type.create(value);
              };
              Options.encode = function (type, value) {
                return this.$type.encode(type, value);
              };
              Options.encodeDelimited = function (message, writer) {
                return this.$type.encodeDelimited(message, writer);
              };
              Options.decode = function (str) {
                return this.$type.decode(str);
              };
              Options.decodeDelimited = function (type) {
                return this.$type.decodeDelimited(type);
              };
              Options.verify = function (value) {
                return this.$type.verify(value);
              };
              Options.fromObject = function (value) {
                return this.$type.fromObject(value);
              };
              Options.toObject = function (data, options) {
                return this.$type.toObject(data, options);
              };
              Options.prototype.toJSON = function () {
                return this.$type.toObject(this, n.toJSONOptions);
              };
            }, {
              39: 39
            }],
            22: [function ($, module) {
              function Node(value, name, object, type, c, b, a) {
                if (j.isObject(c) ? (a = c, c = b = e$jscomp$3275) : j.isObject(b) && (a = b, b = e$jscomp$3275), name !== e$jscomp$3275 && !j.isString(name)) {
                  throw TypeError("type must be a string");
                }
                if (!j.isString(object)) {
                  throw TypeError("requestType must be a string");
                }
                if (!j.isString(type)) {
                  throw TypeError("responseType must be a string");
                }
                handler.call(this, value, a);
                this.type = name || "rpc";
                this.requestType = object;
                this.requestStream = !!c || e$jscomp$3275;
                this.responseType = type;
                this.responseStream = !!b || e$jscomp$3275;
                this.resolvedRequestType = null;
                this.resolvedResponseType = null;
              }
              module.exports = Node;
              var handler = $(24);
              ((Node.prototype = (0, _create2$jscomp$0.default)(handler.prototype)).constructor = Node).className = "Method";
              var j = $(37);
              Node.fromJSON = function (object, record) {
                return new Node(object, record.type, record.requestType, record.responseType, record.requestStream, record.responseStream, record.options);
              };
              Node.prototype.toJSON = function () {
                return j.toObject(["type", "rpc" !== this.type && this.type || e$jscomp$3275, "requestType", this.requestType, "requestStream", this.requestStream, "responseType", this.responseType, "responseStream", this.responseStream, "options", this.options]);
              };
              Node.prototype.resolve = function () {
                return this.resolved ? this : (this.resolvedRequestType = this.parent.lookupType(this.requestType), this.resolvedResponseType = this.parent.lookupType(this.responseType), handler.prototype.resolve.call(this));
              };
            }, {
              24: 24,
              37: 37
            }],
            23: [function (require, module) {
              function get(rows) {
                if (!rows || !rows.length) {
                  return e$jscomp$3275;
                }
                var target = {};
                var i = 0;
                for (; i < rows.length; ++i) {
                  target[rows[i].name] = rows[i].toJSON();
                }
                return target;
              }
              function Model(value, name) {
                View.call(this, value, name);
                this.nested = e$jscomp$3275;
                this.f = null;
              }
              function getOrCreateMethodChain(context) {
                return context.f = null, context;
              }
              module.exports = Model;
              var View = require(24);
              ((Model.prototype = (0, _create2$jscomp$0.default)(View.prototype)).constructor = Model).className = "Namespace";
              var $;
              var cls;
              var Vector = require(15);
              var Script = require(16);
              var _ = require(37);
              Model.fromJSON = function (options, data) {
                return (new Model(options, data.options)).addJSON(data.nested);
              };
              Model.arrayToJSON = get;
              Object.defineProperty(Model.prototype, "nestedArray", {
                get: function () {
                  return this.f || (this.f = _.toArray(this.nested));
                }
              });
              Model.prototype.toJSON = function () {
                return _.toObject(["options", this.options, "nested", get(this.nestedArray)]);
              };
              Model.prototype.addJSON = function (result) {
                if (result) {
                  var data;
                  var fields = (0, _keys2$jscomp$0.default)(result);
                  var i = 0;
                  for (; i < fields.length; ++i) {
                    data = result[fields[i]];
                    this.add((data.fields !== e$jscomp$3275 ? $.fromJSON : data.values !== e$jscomp$3275 ? Vector.fromJSON : data.methods !== e$jscomp$3275 ? cls.fromJSON : data.id !== e$jscomp$3275 ? Script.fromJSON : Model.fromJSON)(fields[i], data));
                  }
                }
                return this;
              };
              Model.prototype.get = function (value) {
                return this.nested && this.nested[value] || null;
              };
              Model.prototype.getEnum = function (id) {
                if (this.nested && this.nested[id] instanceof Vector) {
                  return this.nested[id].values;
                }
                throw Error("no such enum");
              };
              Model.prototype.add = function (data) {
                if (!(data instanceof Script && data.extend !== e$jscomp$3275 || data instanceof $ || data instanceof Vector || data instanceof cls || data instanceof Model)) {
                  throw TypeError("object must be a valid nested object");
                }
                if (this.nested) {
                  var p = this.get(data.name);
                  if (p) {
                    if (!(p instanceof Model && data instanceof Model) || p instanceof $ || p instanceof cls) {
                      throw Error("duplicate name '" + data.name + "' in " + this);
                    }
                    var row = p.nestedArray;
                    var i = 0;
                    for (; i < row.length; ++i) {
                      data.add(row[i]);
                    }
                    this.remove(p);
                    if (!this.nested) {
                      this.nested = {};
                    }
                    data.setOptions(p.options, true);
                  }
                } else {
                  this.nested = {};
                }
                return this.nested[data.name] = data, data.onAdd(this), getOrCreateMethodChain(this);
              };
              Model.prototype.remove = function (options) {
                if (!(options instanceof View)) {
                  throw TypeError("object must be a ReflectionObject");
                }
                if (options.parent !== this) {
                  throw Error(options + " is not a member of " + this);
                }
                return delete this.nested[options.name], (0, _keys2$jscomp$0.default)(this.nested).length || (this.nested = e$jscomp$3275), options.onRemove(this), getOrCreateMethodChain(this);
              };
              Model.prototype.define = function (path, response) {
                if (_.isString(path)) {
                  path = path.split(".");
                } else {
                  if (!Array.isArray(path)) {
                    throw TypeError("illegal path");
                  }
                }
                if (path && path.length && "" === path[0]) {
                  throw Error("path must be relative");
                }
                var data = this;
                for (; path.length > 0;) {
                  var name = path.shift();
                  if (data.nested && data.nested[name]) {
                    if (!((data = data.nested[name]) instanceof Model)) {
                      throw Error("path conflicts with non-namespace objects");
                    }
                  } else {
                    data.add(data = new Model(name));
                  }
                }
                return response && data.addJSON(response), data;
              };
              Model.prototype.resolveAll = function () {
                var data = this.nestedArray;
                var i = 0;
                for (; i < data.length;) {
                  if (data[i] instanceof Model) {
                    data[i++].resolveAll();
                  } else {
                    data[i++].resolve();
                  }
                }
                return this.resolve();
              };
              Model.prototype.lookup = function (path, value, options) {
                if ("boolean" == typeof value ? (options = value, value = e$jscomp$3275) : value && !Array.isArray(value) && (value = [value]), _.isString(path) && path.length) {
                  if ("." === path) {
                    return this.root;
                  }
                  path = path.split(".");
                } else {
                  if (!path.length) {
                    return this;
                  }
                }
                if ("" === path[0]) {
                  return this.root.lookup(path.slice(1), value);
                }
                var type = this.get(path[0]);
                if (type) {
                  if (1 === path.length) {
                    if (!value || value.indexOf(type.constructor) > -1) {
                      return type;
                    }
                  } else {
                    if (type instanceof Model && (type = type.lookup(path.slice(1), value, true))) {
                      return type;
                    }
                  }
                } else {
                  var i = 0;
                  for (; i < this.nestedArray.length; ++i) {
                    if (this.f[i] instanceof Model && (type = this.f[i].lookup(path, value, true))) {
                      return type;
                    }
                  }
                }
                return null === this.parent || options ? null : this.parent.lookup(path, value);
              };
              Model.prototype.lookupType = function (value) {
                var date = this.lookup(value, [$]);
                if (!date) {
                  throw Error("no such type");
                }
                return date;
              };
              Model.prototype.lookupEnum = function (name) {
                var child = this.lookup(name, [Vector]);
                if (!child) {
                  throw Error("no such Enum '" + name + "' in " + this);
                }
                return child;
              };
              Model.prototype.lookupTypeOrEnum = function (name) {
                var child = this.lookup(name, [$, Vector]);
                if (!child) {
                  throw Error("no such Type or Enum '" + name + "' in " + this);
                }
                return child;
              };
              Model.prototype.lookupService = function (name) {
                var child = this.lookup(name, [cls]);
                if (!child) {
                  throw Error("no such Service '" + name + "' in " + this);
                }
                return child;
              };
              Model.e = function (value, name) {
                $ = value;
                cls = name;
              };
            }, {
              15: 15,
              16: 16,
              24: 24,
              37: 37
            }],
            24: [function (addVertex, module) {
              function self(value, name) {
                if (!i.isString(value)) {
                  throw TypeError("name must be a string");
                }
                if (name && !i.isObject(name)) {
                  throw TypeError("options must be an object");
                }
                this.options = name;
                this.name = value;
                this.parent = null;
                this.resolved = false;
                this.comment = null;
                this.filename = null;
              }
              module.exports = self;
              self.className = "ReflectionObject";
              var $;
              var i = addVertex(37);
              (0, _defineProperties2$jscomp$0.default)(self.prototype, {
                root: {
                  get: function () {
                    var n = this;
                    for (; null !== n.parent;) {
                      n = n.parent;
                    }
                    return n;
                  }
                },
                fullName: {
                  get: function () {
                    var r = [this.name];
                    var p = this.parent;
                    for (; p;) {
                      r.unshift(p.name);
                      p = p.parent;
                    }
                    return r.join(".");
                  }
                }
              });
              self.prototype.toJSON = function () {
                throw Error();
              };
              self.prototype.onAdd = function (node) {
                if (this.parent && this.parent !== node) {
                  this.parent.remove(this);
                }
                this.parent = node;
                this.resolved = false;
                var parent = node.root;
                if (parent instanceof $) {
                  parent.g(this);
                }
              };
              self.prototype.onRemove = function (component) {
                var node = component.root;
                if (node instanceof $) {
                  node.h(this);
                }
                this.parent = null;
                this.resolved = false;
              };
              self.prototype.resolve = function () {
                return this.resolved ? this : (this.root instanceof $ && (this.resolved = true), this);
              };
              self.prototype.getOption = function (name) {
                return this.options ? this.options[name] : e$jscomp$3275;
              };
              self.prototype.setOption = function (name, index, value) {
                return value && this.options && this.options[name] !== e$jscomp$3275 || ((this.options || (this.options = {}))[name] = index), this;
              };
              self.prototype.setOptions = function (values, pos) {
                if (values) {
                  var spheres = (0, _keys2$jscomp$0.default)(values);
                  var iter_sph = 0;
                  for (; iter_sph < spheres.length; ++iter_sph) {
                    this.setOption(spheres[iter_sph], values[spheres[iter_sph]], pos);
                  }
                }
                return this;
              };
              self.prototype.toString = function () {
                var name = this.constructor.className;
                var args = this.fullName;
                return args.length ? name + " " + args : name;
              };
              self.e = function (value) {
                $ = value;
              };
            }, {
              37: 37
            }],
            25: [function (getInstantState, module) {
              function List(value, name, data) {
                if (Array.isArray(name) || (data = name, name = e$jscomp$3275), f.call(this, value, data), name !== e$jscomp$3275 && !Array.isArray(name)) {
                  throw TypeError("fieldNames must be an Array");
                }
                this.oneof = name || [];
                this.fieldsArray = [];
              }
              function warn(module) {
                if (module.parent) {
                  var i = 0;
                  for (; i < module.fieldsArray.length; ++i) {
                    if (!module.fieldsArray[i].parent) {
                      module.parent.add(module.fieldsArray[i]);
                    }
                  }
                }
              }
              module.exports = List;
              var f = getInstantState(24);
              ((List.prototype = (0, _create2$jscomp$0.default)(f.prototype)).constructor = List).className = "OneOf";
              var FieldDescriptor = getInstantState(16);
              var state = getInstantState(37);
              List.fromJSON = function (value, list) {
                return new List(value, list.oneof, list.options);
              };
              List.prototype.toJSON = function () {
                return state.toObject(["options", this.options, "oneof", this.oneof]);
              };
              List.prototype.add = function (field) {
                if (!(field instanceof FieldDescriptor)) {
                  throw TypeError("field must be a Field");
                }
                return field.parent && field.parent !== this.parent && field.parent.remove(field), this.oneof.push(field.name), this.fieldsArray.push(field), field.partOf = this, warn(this), this;
              };
              List.prototype.remove = function (field) {
                if (!(field instanceof FieldDescriptor)) {
                  throw TypeError("field must be a Field");
                }
                var fieldId = this.fieldsArray.indexOf(field);
                if (fieldId < 0) {
                  throw Error(field + " is not a member of " + this);
                }
                return this.fieldsArray.splice(fieldId, 1), (fieldId = this.oneof.indexOf(field.name)) > -1 && this.oneof.splice(fieldId, 1), field.partOf = null, this;
              };
              List.prototype.onAdd = function (text) {
                f.prototype.onAdd.call(this, text);
                var i = 0;
                for (; i < this.oneof.length; ++i) {
                  var query = text.get(this.oneof[i]);
                  if (query && !query.partOf) {
                    query.partOf = this;
                    this.fieldsArray.push(query);
                  }
                }
                warn(this);
              };
              List.prototype.onRemove = function (game) {
                var t;
                var i = 0;
                for (; i < this.fieldsArray.length; ++i) {
                  if ((t = this.fieldsArray[i]).parent) {
                    t.parent.remove(t);
                  }
                }
                f.prototype.onRemove.call(this, game);
              };
              List.d = function () {
                var prop = Array(arguments.length);
                var i = 0;
                for (; i < arguments.length;) {
                  prop[i] = arguments[i++];
                }
                return function (obj, value) {
                  state.decorateType(obj.constructor).add(new List(value, prop));
                  (0, _defineProperty2$jscomp$0.default)(obj, value, {
                    get: state.oneOfGetter(prop),
                    set: state.oneOfSetter(prop)
                  });
                };
              };
            }, {
              16: 16,
              24: 24,
              37: 37
            }],
            26: [function (__webpack_require__, context) {
              function init(obj, name, options) {
                function callback(type, name, uuid) {
                  var repeat = init.filename;
                  return uuid || (init.filename = null), Error("illegal " + (name || "token") + " '" + type + "' (" + (repeat ? repeat + ", " : "") + "line " + opts.line + ")");
                }
                function cb() {
                  var s;
                  var tspec = [];
                  do {
                    if ('"' !== (s = $()) && "'" !== s) {
                      throw callback(s);
                    }
                    tspec.push($());
                    next(s);
                    s = require();
                  } while ('"' === s || "'" === s);
                  return tspec.join("");
                }
                function transform(encode) {
                  var val = $();
                  switch (val) {
                    case "'":
                    case '"':
                      return log(val), cb();
                    case "true":
                    case "TRUE":
                      return true;
                    case "false":
                    case "FALSE":
                      return false;
                  }
                  try {
                    return function (e, body) {
                      var i = 1;
                      switch ("-" === e.charAt(0) && (i = -1, e = e.substring(1)), e) {
                        case "inf":
                        case "INF":
                        case "Inf":
                          return i * (1 / 0);
                        case "nan":
                        case "NAN":
                        case "Nan":
                        case "NaN":
                          return NaN;
                        case "0":
                          return 0;
                      }
                      if (m.test(e)) {
                        return i * parseInt(e, 10);
                      }
                      if (touchSystem.test(e)) {
                        return i * parseInt(e, 16);
                      }
                      if (v.test(e)) {
                        return i * parseInt(e, 8);
                      }
                      if (w.test(e)) {
                        return i * parseFloat(e);
                      }
                      throw callback(e, "number", body);
                    }(val, true);
                  } catch (r) {
                    if (encode && nodes.test(val)) {
                      return val;
                    }
                    throw callback(val, "value");
                  }
                }
                function add(model, data) {
                  var HeadlessApi;
                  var value;
                  do {
                    if (!data || '"' !== (HeadlessApi = require()) && "'" !== HeadlessApi) {
                      model.push([value = get($()), next("to", true) ? get($()) : value]);
                    } else {
                      model.push(cb());
                    }
                  } while (next(",", true));
                  next(";");
                }
                function get(input, strict) {
                  switch (input) {
                    case "max":
                    case "MAX":
                    case "Max":
                      return 536870911;
                    case "0":
                      return 0;
                  }
                  if (!strict && "-" === input.charAt(0)) {
                    throw callback(input, "id");
                  }
                  if (templateStartAlphaRegex.test(input)) {
                    return parseInt(input, 10);
                  }
                  if (templateMiddleAlphaRegex.test(input)) {
                    return parseInt(input, 16);
                  }
                  if (templateEndAlphaRegex.test(input)) {
                    return parseInt(input, 8);
                  }
                  throw callback(input, "id");
                }
                function update(action, token) {
                  switch (token) {
                    case "option":
                      return fn(action, token), next(";"), true;
                    case "message":
                      return function (settings, a) {
                        if (!b.test(a = $())) {
                          throw callback(a, "type name");
                        }
                        var result = new Array(a);
                        r(result, function (text) {
                          if (!update(result, text)) {
                            switch (text) {
                              case "map":
                                confirm(result);
                                break;
                              case "required":
                              case "optional":
                              case "repeated":
                                draw(result, text);
                                break;
                              case "oneof":
                                !function (component, t) {
                                  if (!b.test(t = $())) {
                                    throw callback(t, "name");
                                  }
                                  var data = new IntervalTree(setTimeout(t));
                                  r(data, function (e) {
                                    if ("option" === e) {
                                      fn(data, e);
                                      next(";");
                                    } else {
                                      log(e);
                                      draw(data, "optional");
                                    }
                                  });
                                  component.add(data);
                                }(result, text);
                                break;
                              case "extensions":
                                add(result.extensions || (result.extensions = []));
                                break;
                              case "reserved":
                                add(result.reserved || (result.reserved = []), true);
                                break;
                              default:
                                if (!matches || !nodes.test(text)) {
                                  throw callback(text);
                                }
                                log(text);
                                draw(result, "optional");
                            }
                          }
                        });
                        settings.add(result);
                      }(action, token), true;
                    case "enum":
                      return function (v, t) {
                        if (!b.test(t = $())) {
                          throw callback(t, "name");
                        }
                        var p = new Model(t);
                        r(p, function (endpoints) {
                          if ("option" === endpoints) {
                            fn(p, endpoints);
                            next(";");
                          } else {
                            (function (state, input) {
                              if (!b.test(input)) {
                                throw callback(input, "name");
                              }
                              next("=");
                              var node = get($(), true);
                              var data = {};
                              r(data, function (val) {
                                if ("option" !== val) {
                                  throw callback(val);
                                }
                                fn(data, val);
                                next(";");
                              }, function () {
                                parse(data);
                              });
                              state.add(input, node, data.comment);
                            })(p, endpoints);
                          }
                        });
                        v.add(p);
                      }(action, token), true;
                    case "service":
                      return function (blocks, value) {
                        if (!b.test(value = $())) {
                          throw callback(value, "service name");
                        }
                        var v = new Promise(value);
                        r(v, function (next) {
                          if (!update(v, next)) {
                            if ("rpc" !== next) {
                              throw callback(next);
                            }
                            !function (V, t) {
                              var startOffset = t;
                              if (!b.test(t = $())) {
                                throw callback(t, "name");
                              }
                              var len;
                              var undefined;
                              var y;
                              var s;
                              var path = t;
                              if (next("("), next("stream", true) && (undefined = true), !nodes.test(t = $())) {
                                throw callback(t);
                              }
                              if (len = t, next(")"), next("returns"), next("("), next("stream", true) && (s = true), !nodes.test(t = $())) {
                                throw callback(t);
                              }
                              y = t;
                              next(")");
                              var p = new Uint8Array(path, startOffset, len, y, undefined, s);
                              r(p, function (val) {
                                if ("option" !== val) {
                                  throw callback(val);
                                }
                                fn(p, val);
                                next(";");
                              });
                              V.add(p);
                            }(v, next);
                          }
                        });
                        blocks.add(v);
                      }(action, token), true;
                    case "extend":
                      return function (type, value) {
                        if (!nodes.test(value = $())) {
                          throw callback(value, "reference");
                        }
                        var theme = value;
                        r(null, function (param) {
                          switch (param) {
                            case "required":
                            case "repeated":
                            case "optional":
                              draw(type, param, theme);
                              break;
                            default:
                              if (!matches || !nodes.test(param)) {
                                throw callback(param);
                              }
                              log(param);
                              draw(type, "optional", theme);
                          }
                        });
                      }(action, token), true;
                  }
                  return false;
                }
                function r(o, m, t) {
                  var r = opts.line;
                  if (o && (o.comment = t(), o.filename = init.filename), next("{", true)) {
                    var i;
                    for (; "}" !== (i = $());) {
                      m(i);
                    }
                    next(";", true);
                  } else {
                    if (t) {
                      t();
                    }
                    next(";");
                    if (o && "string" != typeof o.comment) {
                      o.comment = t(r);
                    }
                  }
                }
                function draw(value, name, model) {
                  var key = $();
                  if ("group" !== key) {
                    if (!nodes.test(key)) {
                      throw callback(key, "type");
                    }
                    var i = $();
                    if (!b.test(i)) {
                      throw callback(i, "name");
                    }
                    i = setTimeout(i);
                    next("=");
                    var result = new Date(i, get($()), key, name, model);
                    r(result, function (val) {
                      if ("option" !== val) {
                        throw callback(val);
                      }
                      fn(result, val);
                      next(";");
                    }, function () {
                      parse(result);
                    });
                    value.add(result);
                    if (!(matches || !result.repeated || self.packed[key] === e$jscomp$3275 && self.basic[key] !== e$jscomp$3275)) {
                      result.setOption("packed", false, true);
                    }
                  } else {
                    render(value, name);
                  }
                }
                function render(w, i) {
                  var t = $();
                  if (!b.test(t)) {
                    throw callback(t, "name");
                  }
                  var x = _.lcFirst(t);
                  if (t === x) {
                    t = _.ucFirst(t);
                  }
                  next("=");
                  var month = get($());
                  var key = new Array(t);
                  key.group = true;
                  var self = new Date(x, month, t, i);
                  self.filename = init.filename;
                  r(key, function (option) {
                    switch (option) {
                      case "option":
                        fn(key, option);
                        next(";");
                        break;
                      case "required":
                      case "optional":
                      case "repeated":
                        draw(key, option);
                        break;
                      default:
                        throw callback(option);
                    }
                  });
                  w.add(key).add(self);
                }
                function confirm(header) {
                  next("<");
                  var n = $();
                  if (self.mapKey[n] === e$jscomp$3275) {
                    throw callback(n, "type");
                  }
                  next(",");
                  var t = $();
                  if (!nodes.test(t)) {
                    throw callback(t, "type");
                  }
                  next(">");
                  var start = $();
                  if (!b.test(start)) {
                    throw callback(start, "name");
                  }
                  next("=");
                  var val = new Float32Array(setTimeout(start), get($()), n, t);
                  r(val, function (body) {
                    if ("option" !== body) {
                      throw callback(body);
                    }
                    fn(val, body);
                    next(";");
                  }, function () {
                    parse(val);
                  });
                  header.add(val);
                }
                function fn(d, s) {
                  var offset = next("(", true);
                  if (!nodes.test(s = $())) {
                    throw callback(s, "name");
                  }
                  var u = s;
                  if (offset) {
                    next(")");
                    u = "(" + u + ")";
                    s = require();
                    if (regCls.test(s)) {
                      u = u + s;
                      $();
                    }
                  }
                  next("=");
                  (function render(t, url) {
                    if (next("{", true)) {
                      do {
                        if (!b.test(token = $())) {
                          throw callback(token, "name");
                        }
                        if ("{" === require()) {
                          render(t, url + "." + token);
                        } else {
                          next(":");
                          emit(t, url + "." + token, transform(true));
                        }
                      } while (!next("}", true));
                    } else {
                      emit(t, url, transform(true));
                    }
                  })(d, u);
                }
                function emit(self, name, last) {
                  if (self.setOption) {
                    self.setOption(name, last);
                  }
                }
                function parse(obj) {
                  if (next("[", true)) {
                    do {
                      fn(obj, "option");
                    } while (next(",", true));
                    next("]");
                  }
                  return obj;
                }
                if (!(name instanceof Buffer)) {
                  options = name;
                  name = new Buffer;
                }
                if (!options) {
                  options = init.defaults;
                }
                var key;
                var event;
                var b;
                var type;
                var token;
                var opts = deepExtend(obj);
                var $ = opts.next;
                var log = opts.push;
                var require = opts.peek;
                var next = opts.skip;
                var t = opts.cmnt;
                var X = true;
                var matches = false;
                var list = name;
                var setTimeout = options.keepCase ? function (b) {
                  return b;
                } : _.camelCase;
                for (; null !== (token = $());) {
                  switch (token) {
                    case "package":
                      if (!X) {
                        throw callback(token);
                      }
                      !function () {
                        if (key !== e$jscomp$3275) {
                          throw callback("package");
                        }
                        if (key = $(), !nodes.test(key)) {
                          throw callback(key, "name");
                        }
                        list = list.define(key);
                        next(";");
                      }();
                      break;
                    case "import":
                      if (!X) {
                        throw callback(token);
                      }
                      !function () {
                        var e;
                        var type = require();
                        switch (type) {
                          case "weak":
                            e = b || (b = []);
                            $();
                            break;
                          case "public":
                            $();
                          default:
                            e = event || (event = []);
                        }
                        type = cb();
                        next(";");
                        e.push(type);
                      }();
                      break;
                    case "syntax":
                      if (!X) {
                        throw callback(token);
                      }
                      !function () {
                        if (next("="), type = cb(), !(matches = "proto3" === type) && "proto2" !== type) {
                          throw callback(type, "syntax");
                        }
                        next(";");
                      }();
                      break;
                    case "option":
                      if (!X) {
                        throw callback(token);
                      }
                      fn(list, token);
                      next(";");
                      break;
                    default:
                      if (update(list, token)) {
                        X = false;
                        continue;
                      }
                      throw callback(token);
                  }
                }
                return init.filename = null, {
                  package: key,
                  imports: event,
                  weakImports: b,
                  syntax: type,
                  root: name
                };
              }
              context.exports = init;
              init.filename = null;
              init.defaults = {
                keepCase: false
              };
              var deepExtend = __webpack_require__(34);
              var Buffer = __webpack_require__(29);
              var Array = __webpack_require__(35);
              var Date = __webpack_require__(16);
              var Float32Array = __webpack_require__(20);
              var IntervalTree = __webpack_require__(25);
              var Model = __webpack_require__(15);
              var Promise = __webpack_require__(33);
              var Uint8Array = __webpack_require__(22);
              var self = __webpack_require__(36);
              var _ = __webpack_require__(37);
              var m = /^[1-9][0-9]*$/;
              var templateStartAlphaRegex = /^-?[1-9][0-9]*$/;
              var touchSystem = /^0[x][0-9a-fA-F]+$/;
              var templateMiddleAlphaRegex = /^-?0[x][0-9a-fA-F]+$/;
              var v = /^0[0-7]+$/;
              var templateEndAlphaRegex = /^-?0[0-7]+$/;
              var w = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
              var b = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
              var nodes = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)+$/;
              var regCls = /^(?:\.[a-zA-Z][a-zA-Z_0-9]*)+$/;
            }, {
              15: 15,
              16: 16,
              20: 20,
              22: 22,
              25: 25,
              29: 29,
              33: 33,
              34: 34,
              35: 35,
              36: 36,
              37: 37
            }],
            27: [function (ctorApply, module) {
              function find(parent, prop) {
                return RangeError("index out of range: " + parent.pos + " + " + (prop || 1) + " > " + parent.len);
              }
              function self(value) {
                this.buf = value;
                this.pos = 0;
                this.len = value.length;
              }
              function add() {
                var sum = new MTPoint(0, 0);
                var t = 0;
                if (!(this.len - this.pos > 4)) {
                  for (; t < 3; ++t) {
                    if (this.pos >= this.len) {
                      throw find(this);
                    }
                    if (sum.lo = (sum.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) {
                      return sum;
                    }
                  }
                  return sum.lo = (sum.lo | (127 & this.buf[this.pos++]) << 7 * t) >>> 0, sum;
                }
                for (; t < 4; ++t) {
                  if (sum.lo = (sum.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) {
                    return sum;
                  }
                }
                if (sum.lo = (sum.lo | (127 & this.buf[this.pos]) << 28) >>> 0, sum.hi = (sum.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) {
                  return sum;
                }
                if (t = 0, this.len - this.pos > 4) {
                  for (; t < 5; ++t) {
                    if (sum.hi = (sum.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) {
                      return sum;
                    }
                  }
                } else {
                  for (; t < 5; ++t) {
                    if (this.pos >= this.len) {
                      throw find(this);
                    }
                    if (sum.hi = (sum.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) {
                      return sum;
                    }
                  }
                }
                throw Error("invalid varint encoding");
              }
              function fn(data, index) {
                return (data[index - 4] | data[index - 3] << 8 | data[index - 2] << 16 | data[index - 1] << 24) >>> 0;
              }
              function unpack_blorb() {
                if (this.pos + 8 > this.len) {
                  throw find(this, 8);
                }
                return new MTPoint(fn(this.buf, this.pos += 4), fn(this.buf, this.pos += 4));
              }
              module.exports = self;
              var Vector;
              var obj = ctorApply(39);
              var MTPoint = obj.LongBits;
              var log = obj.utf8;
              var create = "undefined" != typeof Uint8Array ? function (obj) {
                if (obj instanceof Uint8Array || Array.isArray(obj)) {
                  return new self(obj);
                }
                throw Error("illegal buffer");
              } : function (obj) {
                if (Array.isArray(obj)) {
                  return new self(obj);
                }
                throw Error("illegal buffer");
              };
              self.create = obj.Buffer ? function (value) {
                return (self.create = function (value) {
                  return obj.Buffer.isBuffer(value) ? new Vector(value) : create(value);
                })(value);
              } : create;
              self.prototype.i = obj.Array.prototype.subarray || obj.Array.prototype.slice;
              self.prototype.uint32 = function () {
                var e = 4294967295;
                return function () {
                  if (e = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) {
                    return e;
                  }
                  if (e = (e | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) {
                    return e;
                  }
                  if (e = (e | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) {
                    return e;
                  }
                  if (e = (e | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) {
                    return e;
                  }
                  if (e = (e | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) {
                    return e;
                  }
                  if ((this.pos += 5) > this.len) {
                    throw this.pos = this.len, find(this, 10);
                  }
                  return e;
                };
              }();
              self.prototype.int32 = function () {
                return 0 | this.uint32();
              };
              self.prototype.sint32 = function () {
                var value = this.uint32();
                return value >>> 1 ^ -(1 & value) | 0;
              };
              self.prototype.bool = function () {
                return 0 !== this.uint32();
              };
              self.prototype.fixed32 = function () {
                if (this.pos + 4 > this.len) {
                  throw find(this, 4);
                }
                return fn(this.buf, this.pos += 4);
              };
              self.prototype.sfixed32 = function () {
                if (this.pos + 4 > this.len) {
                  throw find(this, 4);
                }
                return 0 | fn(this.buf, this.pos += 4);
              };
              self.prototype.float = function () {
                if (this.pos + 4 > this.len) {
                  throw find(this, 4);
                }
                var s = obj.float.readFloatLE(this.buf, this.pos);
                return this.pos += 4, s;
              };
              self.prototype.double = function () {
                if (this.pos + 8 > this.len) {
                  throw find(this, 4);
                }
                var s = obj.float.readDoubleLE(this.buf, this.pos);
                return this.pos += 8, s;
              };
              self.prototype.bytes = function () {
                var i = this.uint32();
                var start = this.pos;
                var index = this.pos + i;
                if (index > this.len) {
                  throw find(this, i);
                }
                return this.pos += i, Array.isArray(this.buf) ? this.buf.slice(start, index) : start === index ? new this.buf.constructor(0) : this.i.call(this.buf, start, index);
              };
              self.prototype.string = function () {
                var res = this.bytes();
                return log.read(res, 0, res.length);
              };
              self.prototype.skip = function (i) {
                if ("number" == typeof i) {
                  if (this.pos + i > this.len) {
                    throw find(this, i);
                  }
                  this.pos += i;
                } else {
                  do {
                    if (this.pos >= this.len) {
                      throw find(this);
                    }
                  } while (128 & this.buf[this.pos++]);
                }
                return this;
              };
              self.prototype.skipType = function (e) {
                switch (e) {
                  case 0:
                    this.skip();
                    break;
                  case 1:
                    this.skip(8);
                    break;
                  case 2:
                    this.skip(this.uint32());
                    break;
                  case 3:
                    for (; 4 != (e = 7 & this.uint32());) {
                      this.skipType(e);
                    }
                    break;
                  case 5:
                    this.skip(4);
                    break;
                  default:
                    throw Error("invalid wire type " + e + " at offset " + this.pos);
                }
                return this;
              };
              self.e = function (value) {
                Vector = value;
                var require$$0$1 = obj.Long ? "toLong" : "toNumber";
                obj.merge(self.prototype, {
                  int64: function () {
                    return add.call(this)[require$$0$1](false);
                  },
                  uint64: function () {
                    return add.call(this)[require$$0$1](true);
                  },
                  sint64: function () {
                    return add.call(this).zzDecode()[require$$0$1](false);
                  },
                  fixed64: function () {
                    return unpack_blorb.call(this)[require$$0$1](true);
                  },
                  sfixed64: function () {
                    return unpack_blorb.call(this)[require$$0$1](false);
                  }
                });
              };
            }, {
              39: 39
            }],
            28: [function (__webpack_require__, mixin) {
              function m(value) {
                bin2Str.call(this, value);
              }
              mixin.exports = m;
              var bin2Str = __webpack_require__(27);
              (m.prototype = (0, _create2$jscomp$0.default)(bin2Str.prototype)).constructor = m;
              var global = __webpack_require__(39);
              if (global.Buffer) {
                m.prototype.i = global.Buffer.prototype.slice;
              }
              m.prototype.string = function () {
                var delta = this.uint32();
                return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + delta, this.len));
              };
            }, {
              27: 27,
              39: 39
            }],
            29: [function (__webpack_require__, module) {
              function self(value) {
                $.call(this, "", value);
                this.deferred = [];
                this.files = [];
              }
              function t() {
              }
              function callback(success, obj) {
                var gnWmsQueue = obj.parent.lookup(obj.extend);
                if (gnWmsQueue) {
                  var o = new Date(obj.fullName, obj.id, obj.type, obj.rule, e$jscomp$3275, obj.options);
                  return o.declaringField = obj, obj.extensionField = o, gnWmsQueue.add(o), true;
                }
                return false;
              }
              module.exports = self;
              var $ = __webpack_require__(23);
              ((self.prototype = (0, _create2$jscomp$0.default)($.prototype)).constructor = self).className = "Root";
              var TextAsset;
              var a;
              var entry;
              var Date = __webpack_require__(16);
              var ListCache = __webpack_require__(15);
              var Blob = __webpack_require__(25);
              var util = __webpack_require__(37);
              self.fromJSON = function (data, engine) {
                return engine || (engine = new self), data.options && engine.setOptions(data.options), engine.addJSON(data.nested);
              };
              self.prototype.resolvePath = util.path.resolve;
              self.prototype.load = function init(args, n, value) {
                function f(name, m) {
                  if (value) {
                    var callback = value;
                    if (value = null, err) {
                      throw name;
                    }
                    callback(name, m);
                  }
                }
                function callback(value, p) {
                  try {
                    if (util.isString(p) && "{" === p.charAt(0) && (p = JSON.parse(p)), util.isString(p)) {
                      a.filename = value;
                      var month;
                      var d = a(p, data, n);
                      var i = 0;
                      if (d.imports) {
                        for (; i < d.imports.length; ++i) {
                          if (month = data.resolvePath(value, d.imports[i])) {
                            create(month);
                          }
                        }
                      }
                      if (d.weakImports) {
                        i = 0;
                        for (; i < d.weakImports.length; ++i) {
                          if (month = data.resolvePath(value, d.weakImports[i])) {
                            create(month, true);
                          }
                        }
                      }
                    } else {
                      data.setOptions(p.options).addJSON(p.nested);
                    }
                  } catch (onExit) {
                    f(onExit);
                  }
                  if (!(err || r)) {
                    f(null, data);
                  }
                }
                function create(name, c) {
                  var r = name.lastIndexOf("google/protobuf/");
                  if (r > -1) {
                    var key = name.substring(r);
                    if (key in entry) {
                      name = key;
                    }
                  }
                  if (!(data.files.indexOf(name) > -1)) {
                    if (data.files.push(name), name in entry) {
                      return void (err ? callback(name, entry[name]) : (++r, setTimeout(function () {
                        --r;
                        callback(name, entry[name]);
                      })));
                    }
                    if (err) {
                      var m;
                      try {
                        m = util.fs.readFileSync(name).toString("utf8");
                      } catch (item) {
                        return void (c || f(item));
                      }
                      callback(name, m);
                    } else {
                      ++r;
                      util.fetch(name, function (a, n) {
                        if (--r, value) {
                          return a ? void (c ? r || f(null, data) : f(a)) : void callback(name, n);
                        }
                      });
                    }
                  }
                }
                if ("function" == typeof n) {
                  value = n;
                  n = e$jscomp$3275;
                }
                var data = this;
                if (!value) {
                  return util.asPromise(init, data, args, n);
                }
                var err = value === t;
                var r = 0;
                if (util.isString(args)) {
                  args = [args];
                }
                var _url;
                var i = 0;
                for (; i < args.length; ++i) {
                  if (_url = data.resolvePath("", args[i])) {
                    create(_url);
                  }
                }
                return err ? data : (r || f(null, data), e$jscomp$3275);
              };
              self.prototype.loadSync = function (request, url) {
                if (!util.isNode) {
                  throw Error("not supported");
                }
                return this.load(request, url, t);
              };
              self.prototype.resolveAll = function () {
                if (this.deferred.length) {
                  throw Error("unresolvable extensions: " + this.deferred.map(function (data) {
                    return "'extend " + data.extend + "' in " + data.parent.fullName;
                  }).join(", "));
                }
                return $.prototype.resolveAll.call(this);
              };
              var artistInfoModel = /^[A-Z]/;
              self.prototype.g = function (data) {
                if (data instanceof Date) {
                  if (!(data.extend === e$jscomp$3275 || data.extensionField || callback(0, data))) {
                    this.deferred.push(data);
                  }
                } else {
                  if (data instanceof ListCache) {
                    if (artistInfoModel.test(data.name)) {
                      data.parent[data.name] = data.values;
                    }
                  } else {
                    if (!(data instanceof Blob)) {
                      if (data instanceof TextAsset) {
                        var id = 0;
                        for (; id < this.deferred.length;) {
                          if (callback(0, this.deferred[id])) {
                            this.deferred.splice(id, 1);
                          } else {
                            ++id;
                          }
                        }
                      }
                      var i = 0;
                      for (; i < data.nestedArray.length; ++i) {
                        this.g(data.f[i]);
                      }
                      if (artistInfoModel.test(data.name)) {
                        data.parent[data.name] = data;
                      }
                    }
                  }
                }
              };
              self.prototype.h = function (data) {
                if (data instanceof Date) {
                  if (data.extend !== e$jscomp$3275) {
                    if (data.extensionField) {
                      data.extensionField.parent.remove(data.extensionField);
                      data.extensionField = null;
                    } else {
                      var index = this.deferred.indexOf(data);
                      if (index > -1) {
                        this.deferred.splice(index, 1);
                      }
                    }
                  }
                } else {
                  if (data instanceof ListCache) {
                    if (artistInfoModel.test(data.name)) {
                      delete data.parent[data.name];
                    }
                  } else {
                    if (data instanceof $) {
                      var i = 0;
                      for (; i < data.nestedArray.length; ++i) {
                        this.h(data.f[i]);
                      }
                      if (artistInfoModel.test(data.name)) {
                        delete data.parent[data.name];
                      }
                    }
                  }
                }
              };
              self.e = function (value, name, data) {
                TextAsset = value;
                a = name;
                entry = data;
              };
            }, {
              15: 15,
              16: 16,
              23: 23,
              25: 25,
              37: 37
            }],
            30: [function (canCreateDiscussions, mixin) {
              mixin.exports = {};
            }, {}],
            31: [function (declare, canCreateDiscussions, exports) {
              exports.Service = declare(32);
            }, {
              32: 32
            }],
            32: [function (require, module) {
              function self(value, name, data) {
                if ("function" != typeof value) {
                  throw TypeError("rpcImpl must be a function");
                }
                util.EventEmitter.call(this);
                this.rpcImpl = value;
                this.requestDelimited = !!name;
                this.responseDelimited = !!data;
              }
              module.exports = self;
              var util = require(39);
              (self.prototype = (0, _create2$jscomp$0.default)(util.EventEmitter.prototype)).constructor = self;
              self.prototype.rpcCall = function run(context, colors, i, text, next) {
                if (!text) {
                  throw TypeError("request must be specified");
                }
                var res = this;
                if (!next) {
                  return util.asPromise(run, res, context, colors, i, text);
                }
                if (!res.rpcImpl) {
                  return setTimeout(function () {
                    next(Error("already ended"));
                  }, 0), e$jscomp$3275;
                }
                try {
                  return res.rpcImpl(context, colors[res.requestDelimited ? "encodeDelimited" : "encode"](text).finish(), function (err, id) {
                    if (err) {
                      return res.emit("error", err, context), next(err);
                    }
                    if (null === id) {
                      return res.end(true), e$jscomp$3275;
                    }
                    if (!(id instanceof i)) {
                      try {
                        id = i[res.responseDelimited ? "decodeDelimited" : "decode"](id);
                      } catch (err) {
                        return res.emit("error", err, context), next(err);
                      }
                    }
                    return res.emit("data", id, context), next(null, id);
                  });
                } catch (t) {
                  return res.emit("error", t, context), setTimeout(function () {
                    next(t);
                  }, 0), e$jscomp$3275;
                }
              };
              self.prototype.end = function (value) {
                return this.rpcImpl && (value || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
              };
            }, {
              39: 39
            }],
            33: [function (require, module) {
              function Model(value, name) {
                i.call(this, value, name);
                this.methods = {};
                this.j = null;
              }
              function on(options) {
                return options.j = null, options;
              }
              module.exports = Model;
              var i = require(23);
              ((Model.prototype = (0, _create2$jscomp$0.default)(i.prototype)).constructor = Model).className = "Service";
              var Array = require(22);
              var $ = require(37);
              var WebInspector = require(31);
              Model.fromJSON = function (data, options) {
                var item = new Model(data, options.options);
                if (options.methods) {
                  var args = (0, _keys2$jscomp$0.default)(options.methods);
                  var i = 0;
                  for (; i < args.length; ++i) {
                    item.add(Array.fromJSON(args[i], options.methods[args[i]]));
                  }
                }
                return options.nested && item.addJSON(options.nested), item;
              };
              Model.prototype.toJSON = function () {
                var options = i.prototype.toJSON.call(this);
                return $.toObject(["options", options && options.options || e$jscomp$3275, "methods", i.arrayToJSON(this.methodsArray) || {}, "nested", options && options.nested || e$jscomp$3275]);
              };
              Object.defineProperty(Model.prototype, "methodsArray", {
                get: function () {
                  return this.j || (this.j = $.toArray(this.methods));
                }
              });
              Model.prototype.get = function (value) {
                return this.methods[value] || i.prototype.get.call(this, value);
              };
              Model.prototype.resolveAll = function () {
                var deferreds = this.methodsArray;
                var index = 0;
                for (; index < deferreds.length; ++index) {
                  deferreds[index].resolve();
                }
                return i.prototype.resolve.call(this);
              };
              Model.prototype.add = function (value) {
                if (this.get(value.name)) {
                  throw Error("duplicate name '" + value.name + "' in " + this);
                }
                return value instanceof Array ? (this.methods[value.name] = value, value.parent = this, on(this)) : i.prototype.add.call(this, value);
              };
              Model.prototype.remove = function (method) {
                if (method instanceof Array) {
                  if (this.methods[method.name] !== method) {
                    throw Error(method + " is not a member of " + this);
                  }
                  return delete this.methods[method.name], method.parent = null, on(this);
                }
                return i.prototype.remove.call(this, method);
              };
              Model.prototype.create = function (value, name, url) {
                var method;
                var m = new WebInspector.Service(value, name, url);
                var i = 0;
                for (; i < this.methodsArray.length; ++i) {
                  m[$.lcFirst((method = this.j[i]).resolve().name)] = $.codegen(["r", "c"], $.lcFirst(method.name))("return this.rpcCall(m,q,s,r,c)")({
                    m: method,
                    q: method.resolvedRequestType.ctor,
                    s: method.resolvedResponseType.ctor
                  });
                }
                return m;
              };
            }, {
              22: 22,
              23: 23,
              31: 31,
              37: 37
            }],
            34: [function (canCreateDiscussions, module) {
              function escape(s) {
                return s.replace(c, function (canCreateDiscussions, type) {
                  switch (type) {
                    case "\\":
                    case "":
                      return type;
                    default:
                      return params[type] || "";
                  }
                });
              }
              function exports(value) {
                function check(type) {
                  return Error("illegal " + type + " (line " + size + ")");
                }
                function end() {
                  var v = "'" === number ? b : r;
                  v.lastIndex = index - 1;
                  var string = v.exec(value);
                  if (!string) {
                    throw check("string");
                  }
                  return index = v.lastIndex, push(number), number = null, escape(string[1]);
                }
                function f(key) {
                  return value.charAt(key);
                }
                function set(index, i) {
                  Nsides = value.charAt(index++);
                  j = size;
                  found = false;
                  var response;
                  var offset = index - 3;
                  do {
                    if (--offset < 0 || "\n" === (response = value.charAt(offset))) {
                      found = true;
                      break;
                    }
                  } while (" " === response || "\t" === response);
                  var groups = value.substring(index, i).split(val);
                  var g = 0;
                  for (; g < groups.length; ++g) {
                    groups[g] = groups[g].replace(m, "").trim();
                  }
                  _ = groups.join("\n").trim();
                }
                function next() {
                  if (k.length > 0) {
                    return k.shift();
                  }
                  if (number) {
                    return end();
                  }
                  var element;
                  var _backlight;
                  var val;
                  var i;
                  var u;
                  do {
                    if (index === length) {
                      return null;
                    }
                    element = false;
                    for (; transparentRE.test(val = f(index));) {
                      if ("\n" === val && ++size, ++index === length) {
                        return null;
                      }
                    }
                    if ("/" === f(index)) {
                      if (++index === length) {
                        throw check("comment");
                      }
                      if ("/" === f(index)) {
                        u = "/" === f(i = index + 1);
                        for (; "\n" !== f(++index);) {
                          if (index === length) {
                            return null;
                          }
                        }
                        ++index;
                        if (u) {
                          set(i, index - 1);
                        }
                        ++size;
                        element = true;
                      } else {
                        if ("*" !== (val = f(index))) {
                          return "/";
                        }
                        u = "*" === f(i = index + 1);
                        do {
                          if ("\n" === val && ++size, ++index === length) {
                            throw check("comment");
                          }
                          _backlight = val;
                          val = f(index);
                        } while ("*" !== _backlight || "/" !== val);
                        ++index;
                        if (u) {
                          set(i, index - 2);
                        }
                        element = true;
                      }
                    }
                  } while (element);
                  var end = index;
                  if (re.lastIndex = 0, !re.test(f(end++))) {
                    for (; end < length && !re.test(f(end));) {
                      ++end;
                    }
                  }
                  var e = value.substring(index, index = end);
                  return '"' !== e && "'" !== e || (number = e), e;
                }
                function push(data) {
                  k.push(data);
                }
                function exec() {
                  if (!k.length) {
                    var result = next();
                    if (null === result) {
                      return null;
                    }
                    push(result);
                  }
                  return k[0];
                }
                var index = 0;
                var length = (value = "" + value).length;
                var size = 1;
                var Nsides = null;
                var _ = null;
                var j = 0;
                var found = false;
                var k = [];
                var number = null;
                return Object.defineProperty({
                  next: next,
                  peek: exec,
                  push: push,
                  skip: function (type, data) {
                    var response = exec();
                    if (response === type) {
                      return next(), true;
                    }
                    if (!data) {
                      throw check("token '" + response + "', '" + type + "' expected");
                    }
                    return false;
                  },
                  cmnt: function (value) {
                    var showTooltipPercent = null;
                    return value === e$jscomp$3275 ? j !== size - 1 || "*" !== Nsides && !found || (showTooltipPercent = _) : (j < value && exec(), j !== value || found || "/" !== Nsides || (showTooltipPercent = _)), showTooltipPercent;
                  }
                }, "line", {
                  get: function () {
                    return size;
                  }
                });
              }
              module.exports = exports;
              var re = /[\s{}=;:[\],'"()<>]/g;
              var r = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
              var b = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
              var m = /^ *[*\/]+ */;
              var val = /\n/g;
              var transparentRE = /\s/;
              var c = /\\(.?)/g;
              var params = {
                0: "\x00",
                r: "\r",
                n: "\n",
                t: "\t"
              };
              exports.unescape = escape;
            }, {}],
            35: [function (require, module) {
              function self(value, name) {
                Model.call(this, value, name);
                this.fields = {};
                this.oneofs = e$jscomp$3275;
                this.extensions = e$jscomp$3275;
                this.reserved = e$jscomp$3275;
                this.group = e$jscomp$3275;
                this.k = null;
                this.b = null;
                this.l = null;
                this.o = null;
              }
              function parse(module) {
                return module.k = module.b = module.l = null, delete module.encode, delete module.decode, delete module.verify, module;
              }
              module.exports = self;
              var Model = require(23);
              ((self.prototype = (0, _create2$jscomp$0.default)(Model.prototype)).constructor = self).className = "Type";
              var dataForge = require(15);
              var Node = require(25);
              var Element = require(16);
              var Note = require(20);
              var net = require(33);
              var f = require(21);
              var c = require(27);
              var Writer = require(42);
              var _ = require(37);
              var transform3DSupported = require(14);
              var teardownMapping = require(13);
              var y = require(40);
              var wkt = require(12);
              var elements = require(41);
              (0, _defineProperties2$jscomp$0.default)(self.prototype, {
                fieldsById: {
                  get: function () {
                    if (this.k) {
                      return this.k;
                    }
                    this.k = {};
                    var readyList = (0, _keys2$jscomp$0.default)(this.fields);
                    var fn = 0;
                    for (; fn < readyList.length; ++fn) {
                      var c = this.fields[readyList[fn]];
                      var i = c.id;
                      if (this.k[i]) {
                        throw Error("duplicate id " + i + " in " + this);
                      }
                      this.k[i] = c;
                    }
                    return this.k;
                  }
                },
                fieldsArray: {
                  get: function () {
                    return this.b || (this.b = _.toArray(this.fields));
                  }
                },
                oneofsArray: {
                  get: function () {
                    return this.l || (this.l = _.toArray(this.oneofs));
                  }
                },
                ctor: {
                  get: function () {
                    return this.o || (this.ctor = self.generateConstructor(this)());
                  },
                  set: function (obj) {
                    var r = obj.prototype;
                    if (!(r instanceof f)) {
                      (obj.prototype = new f).constructor = obj;
                      _.merge(obj.prototype, r);
                    }
                    obj.$type = obj.prototype.$type = this;
                    _.merge(obj, f, true);
                    this.o = obj;
                    var i = 0;
                    for (; i < this.fieldsArray.length; ++i) {
                      this.b[i].resolve();
                    }
                    var props = {};
                    i = 0;
                    for (; i < this.oneofsArray.length; ++i) {
                      props[this.l[i].resolve().name] = {
                        get: _.oneOfGetter(this.l[i].oneof),
                        set: _.oneOfSetter(this.l[i].oneof)
                      };
                    }
                    if (i) {
                      (0, _defineProperties2$jscomp$0.default)(obj.prototype, props);
                    }
                  }
                }
              });
              self.generateConstructor = function (args) {
                var error;
                var gotoNewOfflinePage = _.codegen(["p"], args.name);
                var i = 0;
                for (; i < args.fieldsArray.length; ++i) {
                  if ((error = args.b[i]).map) {
                    gotoNewOfflinePage("this%s={}", _.safeProp(error.name));
                  } else {
                    if (error.repeated) {
                      gotoNewOfflinePage("this%s=[]", _.safeProp(error.name));
                    }
                  }
                }
                return gotoNewOfflinePage("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
              };
              self.fromJSON = function (doc, options) {
                var obj = new self(doc, options.options);
                obj.extensions = options.extensions;
                obj.reserved = options.reserved;
                var args = (0, _keys2$jscomp$0.default)(options.fields);
                var i = 0;
                for (; i < args.length; ++i) {
                  obj.add((e$jscomp$3275 !== options.fields[args[i]].keyType ? Note.fromJSON : Element.fromJSON)(args[i], options.fields[args[i]]));
                }
                if (options.oneofs) {
                  args = (0, _keys2$jscomp$0.default)(options.oneofs);
                  i = 0;
                  for (; i < args.length; ++i) {
                    obj.add(Node.fromJSON(args[i], options.oneofs[args[i]]));
                  }
                }
                if (options.nested) {
                  args = (0, _keys2$jscomp$0.default)(options.nested);
                  i = 0;
                  for (; i < args.length; ++i) {
                    var data = options.nested[args[i]];
                    obj.add((data.id !== e$jscomp$3275 ? Element.fromJSON : data.fields !== e$jscomp$3275 ? self.fromJSON : data.values !== e$jscomp$3275 ? dataForge.fromJSON : data.methods !== e$jscomp$3275 ? net.fromJSON : Model.fromJSON)(args[i], data));
                  }
                }
                return options.extensions && options.extensions.length && (obj.extensions = options.extensions), options.reserved && options.reserved.length && (obj.reserved = options.reserved), options.group && (obj.group = true), obj;
              };
              self.prototype.toJSON = function () {
                var options = Model.prototype.toJSON.call(this);
                return _.toObject(["options", options && options.options || e$jscomp$3275, "oneofs", Model.arrayToJSON(this.oneofsArray), "fields", Model.arrayToJSON(this.fieldsArray.filter(function (canCreateDiscussions) {
                  return !canCreateDiscussions.declaringField;
                })) || {}, "extensions", this.extensions && this.extensions.length ? this.extensions : e$jscomp$3275, "reserved", this.reserved && this.reserved.length ? this.reserved : e$jscomp$3275, "group", this.group || e$jscomp$3275, "nested", options && options.nested || e$jscomp$3275]);
              };
              self.prototype.resolveAll = function () {
                var contacts = this.fieldsArray;
                var i = 0;
                for (; i < contacts.length;) {
                  contacts[i++].resolve();
                }
                var tasks = this.oneofsArray;
                i = 0;
                for (; i < tasks.length;) {
                  tasks[i++].resolve();
                }
                return Model.prototype.resolveAll.call(this);
              };
              self.prototype.get = function (value) {
                return this.fields[value] || this.oneofs && this.oneofs[value] || this.nested && this.nested[value] || null;
              };
              self.prototype.add = function (options) {
                if (this.get(options.name)) {
                  throw Error("duplicate name '" + options.name + "' in " + this);
                }
                if (options instanceof Element && options.extend === e$jscomp$3275) {
                  if (this.k ? this.k[options.id] : this.fieldsById[options.id]) {
                    throw Error("duplicate id " + options.id + " in " + this);
                  }
                  if (this.isReservedId(options.id)) {
                    throw Error("id " + options.id + " is reserved in " + this);
                  }
                  if (this.isReservedName(options.name)) {
                    throw Error("name '" + options.name + "' is reserved in " + this);
                  }
                  return options.parent && options.parent.remove(options), this.fields[options.name] = options, options.message = this, options.onAdd(this), parse(this);
                }
                return options instanceof Node ? (this.oneofs || (this.oneofs = {}), this.oneofs[options.name] = options, options.onAdd(this), parse(this)) : Model.prototype.add.call(this, options);
              };
              self.prototype.remove = function (options) {
                if (options instanceof Element && options.extend === e$jscomp$3275) {
                  if (!this.fields || this.fields[options.name] !== options) {
                    throw Error(options + " is not a member of " + this);
                  }
                  return delete this.fields[options.name], options.parent = null, options.onRemove(this), parse(this);
                }
                if (options instanceof Node) {
                  if (!this.oneofs || this.oneofs[options.name] !== options) {
                    throw Error(options + " is not a member of " + this);
                  }
                  return delete this.oneofs[options.name], options.parent = null, options.onRemove(this), parse(this);
                }
                return Model.prototype.remove.call(this, options);
              };
              self.prototype.isReservedId = function (canCreateDiscussions) {
                if (this.reserved) {
                  var name = 0;
                  for (; name < this.reserved.length; ++name) {
                    if ("string" != typeof this.reserved[name] && this.reserved[name][0] <= canCreateDiscussions && this.reserved[name][1] >= canCreateDiscussions) {
                      return true;
                    }
                  }
                }
                return false;
              };
              self.prototype.isReservedName = function (value) {
                if (this.reserved) {
                  var i = 0;
                  for (; i < this.reserved.length; ++i) {
                    if (this.reserved[i] === value) {
                      return true;
                    }
                  }
                }
                return false;
              };
              self.prototype.create = function (value) {
                return new this.ctor(value);
              };
              self.prototype.setup = function () {
                var hash = this.fullName;
                var errorTypes = [];
                var i = 0;
                for (; i < this.fieldsArray.length; ++i) {
                  errorTypes.push(this.b[i].resolve().resolvedType);
                }
                this.encode = transform3DSupported(this)({
                  Writer: Writer,
                  types: errorTypes,
                  util: _
                });
                this.decode = teardownMapping(this)({
                  Reader: c,
                  types: errorTypes,
                  util: _
                });
                this.verify = y(this)({
                  types: errorTypes,
                  util: _
                });
                this.fromObject = wkt.fromObject(this)({
                  types: errorTypes,
                  util: _
                });
                this.toObject = wkt.toObject(this)({
                  types: errorTypes,
                  util: _
                });
                var obj = elements[hash];
                if (obj) {
                  var query = (0, _create2$jscomp$0.default)(this);
                  query.fromObject = this.fromObject;
                  this.fromObject = obj.fromObject.bind(query);
                  query.toObject = this.toObject;
                  this.toObject = obj.toObject.bind(query);
                }
                return this;
              };
              self.prototype.encode = function (data, value) {
                return this.setup().encode(data, value);
              };
              self.prototype.encodeDelimited = function (message, value) {
                return this.encode(message, value && value.len ? value.fork() : value).ldelim();
              };
              self.prototype.decode = function (str, i) {
                return this.setup().decode(str, i);
              };
              self.prototype.decodeDelimited = function (value) {
                return value instanceof c || (value = c.create(value)), this.decode(value, value.uint32());
              };
              self.prototype.verify = function (self) {
                return this.setup().verify(self);
              };
              self.prototype.fromObject = function (value) {
                return this.setup().fromObject(value);
              };
              self.prototype.toObject = function (data, options) {
                return this.setup().toObject(data, options);
              };
              self.d = function (s) {
                return function (b) {
                  _.decorateType(b, s);
                };
              };
            }, {
              12: 12,
              13: 13,
              14: 14,
              15: 15,
              16: 16,
              20: 20,
              21: 21,
              23: 23,
              25: 25,
              27: 27,
              33: 33,
              37: 37,
              40: 40,
              41: 41,
              42: 42
            }],
            36: [function (buildResponse, canCreateDiscussions, li_sub) {
              function extend(data, i) {
                var end = 0;
                var obj = {};
                i = i | 0;
                for (; end < data.length;) {
                  obj[types[end + i]] = data[end++];
                }
                return obj;
              }
              var self = li_sub;
              var json = buildResponse(37);
              var types = ["double", "float", "int32", "uint32", "sint32", "fixed32", "sfixed32", "int64", "uint64", "sint64", "fixed64", "sfixed64", "bool", "string", "bytes"];
              self.basic = extend([1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2, 2]);
              self.defaults = extend([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false, "", json.emptyArray, null]);
              self.long = extend([0, 0, 0, 1, 1], 7);
              self.mapKey = extend([0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0, 2], 2);
              self.packed = extend([1, 5, 0, 0, 0, 5, 5, 0, 0, 0, 1, 1, 0]);
            }, {
              37: 37
            }],
            37: [function (require, context) {
              var PointerEvent;
              var item;
              var self = context.exports = require(39);
              var chunk = require(30);
              self.codegen = require(3);
              self.fetch = require(5);
              self.path = require(8);
              self.fs = self.inquire("fs");
              self.toArray = function (result) {
                if (result) {
                  var urls = (0, _keys2$jscomp$0.default)(result);
                  var results = Array(urls.length);
                  var i = 0;
                  for (; i < urls.length;) {
                    results[i] = result[urls[i++]];
                  }
                  return results;
                }
                return [];
              };
              self.toObject = function (array) {
                var properties = {};
                var i = 0;
                for (; i < array.length;) {
                  var nm = array[i++];
                  var v = array[i++];
                  if (v !== e$jscomp$3275) {
                    properties[nm] = v;
                  }
                }
                return properties;
              };
              var a = /\\/g;
              var module = /"/g;
              self.safeProp = function (e) {
                return '["' + e.replace(a, "\\\\").replace(module, '\\"') + '"]';
              };
              self.ucFirst = function (word) {
                return word.charAt(0).toUpperCase() + word.substring(1);
              };
              var l = /_([a-z])/g;
              self.camelCase = function (name) {
                return name.substring(0, 1) + name.substring(1).replace(l, function (canCreateDiscussions, shortMonthName) {
                  return shortMonthName.toUpperCase();
                });
              };
              self.compareFieldsById = function (a, b) {
                return a.id - b.id;
              };
              self.decorateType = function (data, type) {
                if (data.$type) {
                  return type && data.$type.name !== type && (self.decorateRoot.remove(data.$type), data.$type.name = type, self.decorateRoot.add(data.$type)), data.$type;
                }
                if (!PointerEvent) {
                  PointerEvent = require(35);
                }
                var c = new PointerEvent(type || data.name);
                return self.decorateRoot.add(c), c.ctor = data, Object.defineProperty(data, "$type", {
                  value: c,
                  enumerable: false
                }), Object.defineProperty(data.prototype, "$type", {
                  value: c,
                  enumerable: false
                }), c;
              };
              var d = 0;
              self.decorateEnum = function (result) {
                if (result.$type) {
                  return result.$type;
                }
                if (!item) {
                  item = require(15);
                }
                var i = new item("Enum" + d++, result);
                return self.decorateRoot.add(i), Object.defineProperty(result, "$type", {
                  value: i,
                  enumerable: false
                }), i;
              };
              Object.defineProperty(self, "decorateRoot", {
                get: function () {
                  return chunk.decorated || (chunk.decorated = new (require(29)));
                }
              });
            }, {
              15: 15,
              29: 29,
              3: 3,
              30: 30,
              35: 35,
              39: 39,
              5: 5,
              8: 8
            }],
            38: [function (__webpack_require__, context) {
              function Buffer(obj, name) {
                this.lo = obj >>> 0;
                this.hi = name >>> 0;
              }
              context.exports = Buffer;
              var $util = __webpack_require__(39);
              var result = Buffer.zero = new Buffer(0, 0);
              result.toNumber = function () {
                return 0;
              };
              result.zzEncode = result.zzDecode = function () {
                return this;
              };
              result.length = function () {
                return 1;
              };
              var N = Buffer.zeroHash = "\x00\x00\x00\x00\x00\x00\x00\x00";
              Buffer.fromNumber = function (value) {
                if (0 === value) {
                  return result;
                }
                var negative = value < 0;
                if (negative) {
                  value = -value;
                }
                var result = value >>> 0;
                var callback = (value - result) / 4294967296 >>> 0;
                return negative && (callback = ~callback >>> 0, result = ~result >>> 0, ++result > 4294967295 && (result = 0, ++callback > 4294967295 && (callback = 0))), new Buffer(result, callback);
              };
              Buffer.from = function (value) {
                if ("number" == typeof value) {
                  return Buffer.fromNumber(value);
                }
                if ($util.isString(value)) {
                  if (!$util.Long) {
                    return Buffer.fromNumber(parseInt(value, 10));
                  }
                  value = $util.Long.fromString(value);
                }
                return value.low || value.high ? new Buffer(value.low >>> 0, value.high >>> 0) : result;
              };
              Buffer.prototype.toNumber = function (n) {
                if (!n && this.hi >>> 31) {
                  var t = 1 + ~this.lo >>> 0;
                  var h = ~this.hi >>> 0;
                  return t || (h = h + 1 >>> 0), -(t + 4294967296 * h);
                }
                return this.lo + 4294967296 * this.hi;
              };
              Buffer.prototype.toLong = function (data) {
                return $util.Long ? new $util.Long(0 | this.lo, 0 | this.hi, !!data) : {
                  low: 0 | this.lo,
                  high: 0 | this.hi,
                  unsigned: !!data
                };
              };
              var charCodeAtFunc = String.prototype.charCodeAt;
              Buffer.fromHash = function (type) {
                return type === N ? result : new Buffer((charCodeAtFunc.call(type, 0) | charCodeAtFunc.call(type, 1) << 8 | charCodeAtFunc.call(type, 2) << 16 | charCodeAtFunc.call(type, 3) << 24) >>> 0, (charCodeAtFunc.call(type, 4) | charCodeAtFunc.call(type, 5) << 8 | charCodeAtFunc.call(type, 6) << 16 | charCodeAtFunc.call(type, 7) << 24) >>> 0);
              };
              Buffer.prototype.toHash = function () {
                return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
              };
              Buffer.prototype.zzEncode = function () {
                var e = this.hi >> 31;
                return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e) >>> 0, this.lo = (this.lo << 1 ^ e) >>> 0, this;
              };
              Buffer.prototype.zzDecode = function () {
                var e = -(1 & this.lo);
                return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e) >>> 0, this.hi = (this.hi >>> 1 ^ e) >>> 0, this;
              };
              Buffer.prototype.length = function () {
                var l = this.lo;
                var t = (this.lo >>> 28 | this.hi << 4) >>> 0;
                var new_hi = this.hi >>> 24;
                return 0 === new_hi ? 0 === t ? l < 16384 ? l < 128 ? 1 : 2 : l < 2097152 ? 3 : 4 : t < 16384 ? t < 128 ? 5 : 6 : t < 2097152 ? 7 : 8 : new_hi < 128 ? 9 : 10;
              };
            }, {
              39: 39
            }],
            39: [function (require, n, psView) {
              function merge(d, s, oldValue) {
                var a = (0, _keys2$jscomp$0.default)(s);
                var j = 0;
                for (; j < a.length; ++j) {
                  if (!(d[a[j]] !== e$jscomp$3275 && oldValue)) {
                    d[a[j]] = s[a[j]];
                  }
                }
                return d;
              }
              function test(type) {
                function Exception(obj, name) {
                  if (!(this instanceof Exception)) {
                    return new Exception(obj, name);
                  }
                  Object.defineProperty(this, "message", {
                    get: function () {
                      return obj;
                    }
                  });
                  if (Error.captureStackTrace) {
                    Error.captureStackTrace(this, Exception);
                  } else {
                    Object.defineProperty(this, "stack", {
                      value: Error().stack || ""
                    });
                  }
                  if (name) {
                    merge(this, name);
                  }
                }
                return (Exception.prototype = (0, _create2$jscomp$0.default)(Error.prototype)).constructor = Exception, Object.defineProperty(Exception.prototype, "name", {
                  get: function () {
                    return type;
                  }
                }), Exception.prototype.toString = function () {
                  return this.name + ": " + this.message;
                }, Exception;
              }
              var self = psView;
              self.asPromise = require(1);
              self.base64 = require(2);
              self.EventEmitter = require(4);
              self.float = require(6);
              self.inquire = require(7);
              self.utf8 = require(10);
              self.pool = require(9);
              self.LongBits = require(38);
              self.emptyArray = _freeze2$jscomp$0.default ? (0, _freeze2$jscomp$0.default)([]) : [];
              self.emptyObject = _freeze2$jscomp$0.default ? (0, _freeze2$jscomp$0.default)({}) : {};
              self.isNode = !!(t$jscomp$2473.process && t$jscomp$2473.process.versions && t$jscomp$2473.process.versions.node);
              self.isInteger = _isInteger2$jscomp$0.default || function (value) {
                return "number" == typeof value && isFinite(value) && Math.floor(value) === value;
              };
              self.isString = function (message) {
                return "string" == typeof message || message instanceof String;
              };
              self.isObject = function (value) {
                return value && "object" == (void 0 === value ? "undefined" : (0, _typeof3$jscomp$0.default)(value));
              };
              self.isset = self.isSet = function (x, b) {
                var value = x[b];
                return !(null == value || !x.hasOwnProperty(b)) && ("object" != (void 0 === value ? "undefined" : (0, _typeof3$jscomp$0.default)(value)) || (Array.isArray(value) ? value.length : (0, _keys2$jscomp$0.default)(value).length) > 0);
              };
              self.Buffer = function () {
                try {
                  var Buffer = self.inquire("buffer").Buffer;
                  return Buffer.prototype.utf8Write ? Buffer : null;
                } catch (e) {
                  return null;
                }
              }();
              self.p = null;
              self.u = null;
              self.newBuffer = function (value) {
                return "number" == typeof value ? self.Buffer ? self.u(value) : new self.Array(value) : self.Buffer ? self.p(value) : "undefined" == typeof Uint8Array ? value : new Uint8Array(value);
              };
              self.Array = "undefined" != typeof Uint8Array ? Uint8Array : Array;
              self.Long = t$jscomp$2473.dcodeIO && t$jscomp$2473.dcodeIO.Long || self.inquire("long");
              self.key2Re = /^true|false|0|1$/;
              self.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
              self.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
              self.longToHash = function (e) {
                return e ? self.LongBits.from(e).toHash() : self.LongBits.zeroHash;
              };
              self.longFromHash = function (id, response) {
                var obj = self.LongBits.fromHash(id);
                return self.Long ? self.Long.fromBits(obj.lo, obj.hi, response) : obj.toNumber(!!response);
              };
              self.merge = merge;
              self.lcFirst = function (target) {
                return target.charAt(0).toLowerCase() + target.substring(1);
              };
              self.newError = test;
              self.ProtocolError = test("ProtocolError");
              self.oneOfGetter = function (s) {
                var dec = {};
                var i = 0;
                for (; i < s.length; ++i) {
                  dec[s[i]] = 1;
                }
                return function () {
                  var s = (0, _keys2$jscomp$0.default)(this);
                  var i = s.length - 1;
                  for (; i > -1; --i) {
                    if (1 === dec[s[i]] && this[s[i]] !== e$jscomp$3275 && null !== this[s[i]]) {
                      return s[i];
                    }
                  }
                };
              };
              self.oneOfSetter = function (objects) {
                return function (undefined) {
                  var i = 0;
                  for (; i < objects.length; ++i) {
                    if (objects[i] !== undefined) {
                      delete this[objects[i]];
                    }
                  }
                };
              };
              self.toJSONOptions = {
                longs: String,
                enums: String,
                bytes: String,
                json: true
              };
              self.e = function () {
                var Buffer = self.Buffer;
                if (Buffer) {
                  self.p = Buffer.from !== Uint8Array.from && Buffer.from || function (value, name) {
                    return new Buffer(value, name);
                  };
                  self.u = Buffer.allocUnsafe || function (value) {
                    return new Buffer(value);
                  };
                } else {
                  self.p = self.u = null;
                }
              };
            }, {
              1: 1,
              10: 10,
              2: 2,
              38: 38,
              4: 4,
              6: 6,
              7: 7,
              9: 9
            }],
            40: [function (prompt, mixin) {
              function check(field, type) {
                return field.name + ": " + type + (field.repeated && "array" !== type ? "[]" : field.map && "object" !== type ? "{k:" + field.keyType + "}" : "") + " expected";
              }
              function test(callback, field, e, filename) {
                if (field.resolvedType) {
                  if (field.resolvedType instanceof sliderNewName) {
                    callback("switch(%s){", filename)("default:")("return%j", check(field, "enum value"));
                    var indices = (0, _keys2$jscomp$0.default)(field.resolvedType.values);
                    var i = 0;
                    for (; i < indices.length; ++i) {
                      callback("case %i:", field.resolvedType.values[indices[i]]);
                    }
                    callback("break")("}");
                  } else {
                    callback((callback.hasErrorVar ? "" : "var ") + "e=types[%i].verify(%s);", e, filename)("if(e)")("return%j+e", field.name + ".");
                    callback.hasErrorVar = true;
                  }
                } else {
                  switch (field.type) {
                    case "int32":
                    case "uint32":
                    case "sint32":
                    case "fixed32":
                    case "sfixed32":
                      callback("if(!util.isInteger(%s))", filename)("return%j", check(field, "integer"));
                      break;
                    case "int64":
                    case "uint64":
                    case "sint64":
                    case "fixed64":
                    case "sfixed64":
                      callback("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", filename, filename, filename, filename)("return%j", check(field, "integer|Long"));
                      break;
                    case "float":
                    case "double":
                      callback('if(typeof %s!=="number")', filename)("return%j", check(field, "number"));
                      break;
                    case "bool":
                      callback('if(typeof %s!=="boolean")', filename)("return%j", check(field, "boolean"));
                      break;
                    case "string":
                      callback("if(!util.isString(%s))", filename)("return%j", check(field, "string"));
                      break;
                    case "bytes":
                      callback('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', filename, filename, filename)("return%j", check(field, "buffer"));
                  }
                }
                return callback;
              }
              function encodeField(item, field, value) {
                switch (field.keyType) {
                  case "int32":
                  case "uint32":
                  case "sint32":
                  case "fixed32":
                  case "sfixed32":
                    item("if(!util.key32Re.test(%s))", value)("return%j", check(field, "integer key"));
                    break;
                  case "int64":
                  case "uint64":
                  case "sint64":
                  case "fixed64":
                  case "sfixed64":
                    item("if(!util.key64Re.test(%s))", value)("return%j", check(field, "integer|Long key"));
                    break;
                  case "bool":
                    item("if(!util.key2Re.test(%s))", value)("return%j", check(field, "boolean key"));
                }
                return item;
              }
              mixin.exports = function (value) {
                var cb = target.codegen(["m"], value.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
                var modelsGroupsCache = {};
                if (value.oneofsArray.length) {
                  cb("var p={}");
                }
                var p = 0;
                for (; p < value.fieldsArray.length; ++p) {
                  var obj = value.b[p].resolve();
                  var key = "m" + target.safeProp(obj.name);
                  if (obj.optional && cb("if(%s!=null&&m.hasOwnProperty(%j)){", key, obj.name), obj.map) {
                    cb("if(!util.isObject(%s))", key)("return%j", check(obj, "object"))("var k=Object.keys(%s)", key)("for(var i=0;i<k.length;++i){");
                    encodeField(cb, obj, "k[i]");
                    test(cb, obj, p, key + "[k[i]]")("}");
                  } else {
                    if (obj.repeated) {
                      cb("if(!Array.isArray(%s))", key)("return%j", check(obj, "array"))("for(var i=0;i<%s.length;++i){", key);
                      test(cb, obj, p, key + "[i]")("}");
                    } else {
                      if (obj.partOf) {
                        var expandedOffer = target.safeProp(obj.partOf.name);
                        if (1 === modelsGroupsCache[obj.partOf.name]) {
                          cb("if(p%s===1)", expandedOffer)("return%j", obj.partOf.name + ": multiple values");
                        }
                        modelsGroupsCache[obj.partOf.name] = 1;
                        cb("p%s=1", expandedOffer);
                      }
                      test(cb, obj, p, key);
                    }
                  }
                  if (obj.optional) {
                    cb("}");
                  }
                }
                return cb("return null");
              };
              var sliderNewName = prompt(15);
              var target = prompt(37);
            }, {
              15: 15,
              37: 37
            }],
            41: [function (floor, canCreateDiscussions, headB) {
              var cacheB = headB;
              var startYNew = floor(21);
              cacheB[".google.protobuf.Any"] = {
                fromObject: function (data) {
                  if (data && data["@type"]) {
                    var format = this.lookup(data["@type"]);
                    if (format) {
                      return this.create({
                        type_url: data["@type"],
                        value: format.encode(data).finish()
                      });
                    }
                  }
                  return this.fromObject(data);
                },
                toObject: function (data, options) {
                  if (options && options.json && data.type_url && data.value) {
                    var model = this.lookup(data.type_url);
                    if (model) {
                      data = model.decode(data.value);
                    }
                  }
                  if (!(data instanceof this.ctor) && data instanceof startYNew) {
                    var deps = data.$type.toObject(data, options);
                    return deps["@type"] = data.$type.fullName, deps;
                  }
                  return this.toObject(data, options);
                }
              };
            }, {
              21: 21
            }],
            42: [function ($, module) {
              function LinkedListNode(item, data, value) {
                this.fn = item;
                this.len = data;
                this.next = e$jscomp$3275;
                this.val = value;
              }
              function value() {
              }
              function add(node) {
                this.head = node.head;
                this.tail = node.tail;
                this.len = node.len;
                this.next = node.states;
              }
              function request() {
                this.len = 0;
                this.head = new LinkedListNode(value, 0, 0);
                this.tail = this.head;
                this.states = null;
              }
              function type(value, data, offset) {
                data[offset] = 255 & value;
              }
              function Node(value, i) {
                this.len = value;
                this.next = e$jscomp$3275;
                this.val = i;
              }
              function line(state, lines, i) {
                for (; state.hi;) {
                  lines[i++] = 127 & state.lo | 128;
                  state.lo = (state.lo >>> 7 | state.hi << 25) >>> 0;
                  state.hi >>>= 7;
                }
                for (; state.lo > 127;) {
                  lines[i++] = 127 & state.lo | 128;
                  state.lo = state.lo >>> 7;
                }
                lines[i++] = state.lo;
              }
              function key(value, data, offset) {
                data[offset] = 255 & value;
                data[offset + 1] = value >>> 8 & 255;
                data[offset + 2] = value >>> 16 & 255;
                data[offset + 3] = value >>> 24;
              }
              module.exports = request;
              var primeSubToggle;
              var self = $(39);
              var options = self.LongBits;
              var data = self.base64;
              var content = self.utf8;
              request.create = self.Buffer ? function () {
                return (request.create = function () {
                  return new primeSubToggle;
                })();
              } : function () {
                return new request;
              };
              request.alloc = function (value) {
                return new self.Array(value);
              };
              if (self.Array !== Array) {
                request.alloc = self.pool(request.alloc, self.Array.prototype.subarray);
              }
              request.prototype.v = function (value, name, item) {
                return this.tail = this.tail.next = new LinkedListNode(value, name, item), this.len += name, this;
              };
              Node.prototype = (0, _create2$jscomp$0.default)(LinkedListNode.prototype);
              Node.prototype.fn = function (i, t, n) {
                for (; i > 127;) {
                  t[n++] = 127 & i | 128;
                  i = i >>> 7;
                }
                t[n] = i;
              };
              request.prototype.uint32 = function (value) {
                return this.len += (this.tail = this.tail.next = new Node((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len, this;
              };
              request.prototype.int32 = function (value) {
                return value < 0 ? this.v(line, 10, options.fromNumber(value)) : this.uint32(value);
              };
              request.prototype.sint32 = function (canCreateDiscussions) {
                return this.uint32((canCreateDiscussions << 1 ^ canCreateDiscussions >> 31) >>> 0);
              };
              request.prototype.uint64 = function (value) {
                var t = options.from(value);
                return this.v(line, t.length(), t);
              };
              request.prototype.int64 = request.prototype.uint64;
              request.prototype.sint64 = function (e) {
                var t = options.from(e).zzEncode();
                return this.v(line, t.length(), t);
              };
              request.prototype.bool = function (name) {
                return this.v(type, 1, name ? 1 : 0);
              };
              request.prototype.fixed32 = function (canCreateDiscussions) {
                return this.v(key, 4, canCreateDiscussions >>> 0);
              };
              request.prototype.sfixed32 = request.prototype.fixed32;
              request.prototype.fixed64 = function (value) {
                var sum = options.from(value);
                return this.v(key, 4, sum.lo).v(key, 4, sum.hi);
              };
              request.prototype.sfixed64 = request.prototype.fixed64;
              request.prototype.float = function (v) {
                return this.v(self.float.writeFloatLE, 4, v);
              };
              request.prototype.double = function (item) {
                return this.v(self.float.writeDoubleLE, 8, item);
              };
              var name = self.Array.prototype.set ? function (name, dst, value) {
                dst.set(name, value);
              } : function (s, t, type) {
                var i = 0;
                for (; i < s.length; ++i) {
                  t[type + i] = s[i];
                }
              };
              request.prototype.bytes = function (val) {
                var value = val.length >>> 0;
                if (!value) {
                  return this.v(type, 1, 0);
                }
                if (self.isString(val)) {
                  var v = request.alloc(value = data.length(val));
                  data.decode(val, v, 0);
                  val = v;
                }
                return this.uint32(value).v(name, value, val);
              };
              request.prototype.string = function (v) {
                var value = content.length(v);
                return value ? this.uint32(value).v(content.write, value, v) : this.v(type, 1, 0);
              };
              request.prototype.fork = function () {
                return this.states = new add(this), this.head = this.tail = new LinkedListNode(value, 0, 0), this.len = 0, this;
              };
              request.prototype.reset = function () {
                return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new LinkedListNode(value, 0, 0), this.len = 0), this;
              };
              request.prototype.ldelim = function () {
                var entry = this.head;
                var tail = this.tail;
                var tag = this.len;
                return this.reset().uint32(tag), tag && (this.tail.next = entry.next, this.tail = tail, this.len += tag), this;
              };
              request.prototype.finish = function () {
                var node = this.head.next;
                var data = this.constructor.alloc(this.len);
                var size = 0;
                for (; node;) {
                  node.fn(node.val, data, size);
                  size = size + node.len;
                  node = node.next;
                }
                return data;
              };
              request.e = function (value) {
                primeSubToggle = value;
              };
            }, {
              39: 39
            }],
            43: [function ($, module) {
              function self() {
                script.call(this);
              }
              function p(s, b, next) {
                if (s.length < 40) {
                  opts.utf8.write(s, b, next);
                } else {
                  b.utf8Write(s, next);
                }
              }
              module.exports = self;
              var script = $(42);
              (self.prototype = (0, _create2$jscomp$0.default)(script.prototype)).constructor = self;
              var opts = $(39);
              var obj = opts.Buffer;
              self.alloc = function (value) {
                return (self.alloc = opts.u)(value);
              };
              var o = obj && obj.prototype instanceof Uint8Array && "set" === obj.prototype.set.name ? function (name, dst, value) {
                dst.set(name, value);
              } : function (data, temp, size) {
                if (data.copy) {
                  data.copy(temp, size, 0, data.length);
                } else {
                  var index = 0;
                  for (; index < data.length;) {
                    temp[size++] = data[index++];
                  }
                }
              };
              self.prototype.bytes = function (value) {
                if (opts.isString(value)) {
                  value = opts.p(value, "base64");
                }
                var items = value.length >>> 0;
                return this.uint32(items), items && this.v(o, items, value), this;
              };
              self.prototype.string = function (data) {
                var a = obj.byteLength(data);
                return this.uint32(a), a && this.v(p, a, data), this;
              };
            }, {
              39: 39,
              42: 42
            }]
          }, {});
        }("object" == ("undefined" == typeof window ? "undefined" : (0, _typeof3$jscomp$0.default)(window)) && window || "object" == ("undefined" == typeof self ? "undefined" : (0, _typeof3$jscomp$0.default)(self)) && self || void 0);
      }).call(this, __webpack_require__$jscomp$0("./node_modules/webpack/buildin/module.js")(module$jscomp$0));
    },
    0: function (value, name) {
    },
    1: function (value, name) {
    },
    2: function (formatters, customFormatters) {
    },
    3: function (value, name) {
    }
  });
});
